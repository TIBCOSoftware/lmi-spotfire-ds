<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spotfire.Dxp.Data.Formats.Stdf</name>
    </assembly>
    <members>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiVersionAttribute">
            <summary>
            This attribute should be applied to all classes, interfaces and members visible in the public API. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiVersionAttribute.version">
            <summary>
            The version
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiVersionAttribute"/> class.
            </summary>
            <param name="version">The api version for this item.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiVersionAttribute.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewStatus">
            <summary>
            The review status.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewStatus.Approved">
            <summary>
            Approved status.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewStatus.PendingSpecification">
            <summary>
            This member requires API scenarios and technical design specification.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewStatus.Action">
            <summary>
            See comment for an action to take on this member.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewStatus.Investigate">
            <summary>
            An action point for the Architecture team. See comment for further information.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewStatus.ImproveDocumentation">
            <summary>
            More documentation needed.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewAttribute">
            <summary>
            Used by the architecture team when reviewing the public API.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewAttribute.comment">
            <summary>
            The comment.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewAttribute.status">
            <summary>
            The status.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewAttribute.#ctor(Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewAttribute"/> class.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewAttribute.#ctor(Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewAttribute"/> class.
            </summary>
            <param name="status">The status.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewAttribute.Comment">
            <summary>
            Gets the comment.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.Private.ApiReviewAttribute.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.Private.FriendVisibleAttribute">
            <summary>
            This attribute should be applied to internal classes, interfaces and members that are visible to friend assemblies.
            It signals if internal functionality is intended to be used by friends or not.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.Private.FriendVisibleAttribute.visible">
            <summary>
            Determines the friend visibility.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.FriendVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.Private.FriendVisibleAttribute"/> class.
            </summary>
            <param name="visible"><c>true</c> if this type or member should be visible to friend assemblies, otherwise <c>false</c>.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.Private.FriendVisibleAttribute.Visible">
            <summary>
            Gets a value indicating whether the target is friend visible or not.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness">
            <summary>
            Implements various utility functions for robustness. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.ArgumentException(System.String,System.Object[])">
            <summary>
            Returns an <see cref="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.ArgumentException(System.String,System.Object[])"/> with a formatted message.
            </summary>
            <param name="message">The message format string.</param>
            <param name="args">The message format arguments.</param>
            <returns>An <see cref="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.ArgumentException(System.String,System.Object[])"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.InvalidOperationException(System.String,System.Object[])">
            <summary>
            Returns an <see cref="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.InvalidOperationException(System.String,System.Object[])"/> with a formatted message.
            </summary>
            <param name="message">The message format string.</param>
            <param name="args">The message format arguments.</param>
            <returns>An <see cref="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.InvalidOperationException(System.String,System.Object[])"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.FormatException(System.String,System.Object[])">
            <summary>
            Returns a <see cref="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.FormatException(System.String,System.Object[])"/> with a formatted message.
            </summary>
            <param name="message">The message format string.</param>
            <param name="args">The message format arguments.</param>
            <returns>A <see cref="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.FormatException(System.String,System.Object[])"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.ObjectDisposedException(System.String,System.Object[])">
            <summary>
            Returns a <see cref="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.ObjectDisposedException(System.String,System.Object[])"/> with a formatted message.
            </summary>
            <param name="message">The message format string.</param>
            <param name="args">The message format arguments.</param>
            <returns>A <see cref="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.FormatException(System.String,System.Object[])"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.ValidateNotNull(System.String,System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="param"/> is <c>null</c>.
            </summary>
            <param name="paramName">The name of the parameter.</param>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.ValidateNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="M:Spotfire.Dxp.Data.Formats.Stdf.Private.Robustness.ArgumentException(System.String,System.Object[])"/> if <paramref name="param"/> is <c>null</c> or empty.
            </summary>
            <param name="paramName">The name of the parameter.</param>
            <param name="param">The parameter.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata">
            <summary>
            Represents column-level metadata in STDF. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.#ctor(System.String,Spotfire.Dxp.Data.Formats.Stdf.StdfValueType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata"/> class.
            </summary>
            <param name="columnName">The column name.</param>
            <param name="dataType">The column data type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.DataType">
            <summary>
            Gets the data type of the column.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.AssignedProperties">
            <summary>
            Gets an enumerable over all non-mandatory metadata properties of the column.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.MutableCopy">
            <summary>
            Returns a mutable copy of this instance.
            </summary>
            <returns>A mutable copy of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.ImmutableCopy">
            <summary>
            Returns an immutable copy of this instance.
            </summary>
            <returns>An immutable copy of this instance.</returns>
            <exception cref="T:System.ArgumentException">if the 'Name' or 'DataType' properties are invalid.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.ValidateComplete">
            <summary>
            Validates that the properties 'Name' and 'DateType' are correctly set. Throws an <see cref="T:System.ArgumentException"/> if they are not valid.
            </summary>
            <exception cref="T:System.ArgumentException">if the 'Name' or 'DataType' properties are invalid.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.ValidateName(System.String)">
            <summary>
            Validates that the given name is a valid column name.
            </summary>
            <param name="name">The column name.</param>
            <exception cref="T:System.ArgumentException">if the name is invalid.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata.ValidateDataType(Spotfire.Dxp.Data.Formats.Stdf.StdfValueType)">
            <summary>
            Validates that the given data type is a valid column data type.
            </summary>
            <param name="valueType">The data type.</param>
            <exception cref="T:System.ArgumentException">if the data type is invalid.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants">
            <summary>
            Provides string constants that are central to the STDF format.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.ValueTerminator">
            <summary>
            The character sequence used to separate the values in STDF, ";".
            Used also for the last value on each row.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.LineTerminator">
            <summary>
            The character sequence used to terminate rows in STDF, "\r\n".
            Used also for the last row of a table.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.HeaderLineEscape">
            <summary>
            The character sequence used to identify header lines, "\!".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.CommentLineEscape">
            <summary>
            The character sequence used to identify header lines, "\*".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.FileTypeAttribute">
            <summary>
            The file type attribute, "filetype", used in the header. Small 't' for historical reasons.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.FileTypeIdentifier">
            <summary>
            The STDF file type identifier, "Spotfire.DataFormat.Text".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.VersionAttribute">
            <summary>
            The format version attribute, "version", used in the header.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.VersionOneIdentifier">
            <summary>
            The STDF 1.0 version identifier, "1.0".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.VersionTwoIdentifier">
            <summary>
            The STDF 2.0 version identifier, "2.0".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.PropertyAttribute">
            <summary>
            The "property" attribute used in metadata header lines.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.CategoryAttribute">
            <summary>
            The "category" attribute used in metadata header lines.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.CategoryTableIdentifier">
            <summary>
            The table metadata category, "Table".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.CategoryColumnIdentifier">
            <summary>
            The column metadata category, "Column".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.TypeAttribute">
            <summary>
            The "type" attribute used in metadata header lines.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.ValueAttribute">
            <summary>
            The "value" attribute used in metadata header lines.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.AssignmentSeparator">
            <summary>
            The assignment operator.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.FormatConstants.Utf8Bom">
            <summary>
            The UTF-8 byte order mark.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection">
            <summary>
            Represents metadata for a table or column in STDF.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.properties">
            <summary>
            An ordered dictionary containing all defined properties in the order added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.readOnly">
            <summary>
            Determines if the collection is modifiable.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.Count">
            <summary>
            Gets the number of properties in the collection.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.IsImmutable">
            <summary>
            Gets a value indicating whether this instance is immutable or not.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.AddProperty(System.String,System.String)">
            <summary>
            Adds a new metadata property to the collection.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.AddProperty(System.String,System.Int32)">
            <summary>
            Adds a new metadata property to the collection.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.AddProperty(Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty)">
            <summary>
            Adds a new metadata property to the collection.
            </summary>
            <param name="property">The new metadata property.</param>
            <exception cref="T:System.ArgumentException">if the property is already defined.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.AddOrReplaceProperty(Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty)">
            <summary>
            Adds or replaces a metadata property to the collection.
            </summary>
            <param name="property">The new or modified metadata property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.RemoveProperty(System.String)">
            <summary>
            Removes the property with the specified name from the collection.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.TryGetProperty(System.String,Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty@)">
            <summary>
            Looks up a metadata property by name.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="property">The metadata property.</param>
            <returns>True if the name was found; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.TryGetProperty``1(System.String,``0@)">
            <summary>
            Gets the value of a metadata property.
            </summary>
            <typeparam name="T">The runtime value type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property if found; otherwise, null.</param>
            <returns>True if the name was found; otherwise, false.</returns>
            <exception cref="T:System.InvalidCastException">if the property exists but has the wrong type.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.GetProperty``1(System.String)">
            <summary>
            Gets the value of a metadata property.
            </summary>
            <typeparam name="T">The runtime value type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>The value of the metadata property.</returns>
            <exception cref="T:System.ArgumentException">If the metadata property is not defined.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.GetEnumerator">
            <summary>
            Gets an enumerator with all metadata properties in the collection.
            </summary>
            <returns>An enumerator instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator with all metadata properties in the collection.
            </summary>
            <returns>A enumerator instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.AddMetadataCollection(Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection)">
            <summary>
            Adds the contents of <paramref name="source"/> to this instance.
            </summary>
            <param name="source">The source of the contents.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.SetImmutable">
            <summary>
            Sets this instance as read-only.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection.ValidateModifiable">
            <summary>
            Validates that this instance is modifiable.
            </summary>
            <exception cref="T:System.InvalidOperationException">if this instance is not modifiable.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty">
            <summary>
            Represents a metadata property for a data table or column in STDF.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.type">
            <summary>
            The value type of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.#ctor(System.String,Spotfire.Dxp.Data.Formats.Stdf.StdfValueType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="valueType">The value type of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.Name">
            <summary>
            Gets the name of the metadata property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.ValueType">
            <summary>
            Gets the value type of the metadata property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.Value">
            <summary>
            Gets the value of the metadata property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty.ValidateAssignment">
            <summary>
            Validates that that the value and defaultValue are of the correct type.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata">
            <summary>
            Represents immutable table and column metadata in STDF. Created using the corresponding builder class.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata.columns">
            <summary>
            Column metadata, one collection for each column.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata.#ctor(System.Collections.Generic.IList{Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata},Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata"/> class.
            </summary>
            <param name="columns">The list of columns. The contents will be copied and stored internally.</param>
            <param name="metadata">The collection of metadata. The contents will be copied and stored internally.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata.Columns">
            <summary>
            Gets the metadata for the columns of this table.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata.IsVersionOneCompatible">
            <summary>
            Gets a value indicating whether a table can be represented in version 1.0.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata.GetAllColumnProperties">
            <summary>
            Gets all the column properties with default values, without duplicates and in
            the order used in the file header.
            </summary>
            <returns>A ColumnMetadata instance containing all unique properties, with null values.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadataBuilder">
            <summary>
            Represents table and column metadata in STDF. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadataBuilder.columns">
            <summary>
            Column metadata, one collection for each column.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadataBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadataBuilder"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadataBuilder.#ctor(Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadataBuilder"/> class.
            </summary>
            <param name="other">The source <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata"/> object to fill the contents of this instance with.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadataBuilder.Columns">
            <summary>
            Gets the metadata for the columns of this table.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadataBuilder.AddColumn(Spotfire.Dxp.Data.Formats.Stdf.StdfColumnMetadata)">
            <summary>
            Adds metadata for the next column in the table.
            </summary>
            <param name="columnMetadata">The column metadata.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadataBuilder.Build">
            <summary>
            Builds a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata"/> class, filled with the contents of this instance.
            </summary>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata"/> instance.</returns>
            <exception cref="T:System.ArgumentException">if the underlying data is invalid.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader">
            <summary>
            This class provides a simple interface for reading data on the STDF format.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.inputStream">
            <summary>
            The underlying input stream.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.reader">
            <summary>
            The input as a TextReader.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.formatVersion">
            <summary>
            The format version, either "1.0" or "2.0".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.metadata">
            <summary>
            The parsed table metadata.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.columnIndex">
            <summary>
            The current column index.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.columnOffset">
            <summary>
            Keeps track of the position on the current row of input.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.rowIndex">
            <summary>
            The current row index.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.allowMultilineBlobs">
            <summary>
            The 1.0 parser allowed multiline blobs, even though this is not part of the specification for STDF.
            For this reason we must support multiline blobs here, but only for 1.0 files.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.buffer">
            <summary>
            A string used as a buffer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.dataTypes">
            <summary>
            An array of the data types for the columns, used to enhance performance
            when reading a table.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader"/> class.
            </summary>
            <param name="inputStream">The input stream. The StdfTableReader takes ownership of the stream and will
            close it when the StdfTableReader is closed or disposed.</param>
            <exception cref="T:System.ArgumentException">if the input is null or uses an encoding other than UTF8.</exception>
            <exception cref="T:System.FormatException">if the input does not begin with an STDF header.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader"/> class. Internal constructor for testing purposes.
            </summary>
            <param name="reader">The input provider.</param>
            <exception cref="T:System.FormatException">if the input does not begin with an STDF header.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.TableMetadata">
            <summary>
            Gets the table metadata.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.TryParseHeaderLine(System.String)">
            <summary>
            Given a file path, this method tries to parse the first line of the file as an STDF file header.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>True if the file starts with an STDF header; otherwise, false.</returns>
            <remarks>The method throws exception only in case of I/O problems, and never when there are
            format issues. The reason is to avoid inconvenient hangs in debugger sessions, when trap on
            exception is turned on and the application searches for a matching file type.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.TryParseFormatHeader(System.IO.TextReader)">
            <summary>
            Given an input stream, this method tries to parse the first line as an STDF file header.
            </summary>
            <param name="reader">The input provider.</param>
            <returns>True if the file starts with an STDF header; otherwise, false.</returns>
            <remarks>The method throws exception only in case of I/O problems, and never when there are
            format issues. The reason is to avoid inconvenient hangs in debugger sessions, when trap on
            exception is turned on and the application searches for a matching file type.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ReadValue">
            <summary>
            Reads and parses the next value from the input.
            </summary>
            <returns>An object representing the next value on the current row.
            A null value is returned to mark the end of the input.</returns>
            <exception cref="T:System.FormatException">if the input could not be parsed, or
            if the input ends in the middle of a row.</exception>
            <exception cref="T:System.InvalidOperationException">if all the columns on the current row has been read.</exception>
            <exception cref="T:System.ObjectDisposedException">if the reader has been closed.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ReadLine">
            <summary>
            Reads the end of line marker on the current row. Must be invoked after ReadValue has been called
            for all the columns on the row, and before the first value on the next row can be read.
            </summary>
            <exception cref="T:System.FormatException">if not at the end of a line.</exception>
            <exception cref="T:System.ObjectDisposedException">if the reader has been closed.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.Close">
            <summary>
            Closes this StdfTableReader instance. Will close the input stream.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.Dispose">
            <summary>
            Disposes of this StdfTableReader instance. Will close the input stream.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.Reset">
            <summary>
            Resets the input stream and starts reading from the beginning.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ParseMetadataHeaderLine(System.String,System.String@)">
            <summary>
            Parses a header line containing a metadata property definition.
            </summary>
            <param name="buffer">The character buffer containing the header line.</param>
            <param name="category">The property category, either "Table" or "Column".</param>
            <returns>A parsed StdfMetadataProperty instance.</returns>
            <exception cref="T:System.FormatException">if the line could not be parsed.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ParseColumnMetadataRow(System.String,Spotfire.Dxp.Data.Formats.Stdf.StdfValueType)">
            <summary>
            Parses a line of text containing column values for a metadata property.
            </summary>
            <param name="buffer">The character buffer containing the unparsed values.</param>
            <param name="valueType">The type of the values.</param>
            <returns>A list of parsed objects, one for each column.</returns>
            <exception cref="T:System.FormatException">if the values could not be parsed.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.TryParseValueString(System.String,System.Int32@,Spotfire.Dxp.Data.Formats.Stdf.StdfValueType,System.Object@)">
            <summary>
            Tries to parse a value of a given type from a string terminated by a semicolon.
            </summary>
            <param name="buffer">The character buffer containing the value string.</param>
            <param name="offset">The position of the first character of the value string in the buffer.</param>
            <param name="valueType">The type of the value.</param>
            <param name="value">The parsed value.</param>
            <returns>True if the value was parsed successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ParseHeaderLine(System.IO.TextReader)">
            <summary>
            Parses an STDF file header.
            </summary>
            <param name="reader">The input provider.</param>
            <returns>The format version, either "1.0" or "2.0".</returns>
            <exception cref="T:System.FormatException">if the input is not a valid header line.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ParseFormatVersion(System.String)">
            <summary>
            Parses the format version part of an STDF file header.
            </summary>
            <param name="buffer">The character buffer, which should contain the second part
            of the first line of input.</param>
            <returns>The format version, either "1.0" or "2.0".</returns>
            <exception cref="T:System.FormatException">if the input is not a valid header line.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ParseAssignment(System.String,System.Int32,System.String,System.String@)">
            <summary>
            Parses an assignment of the form "left=right;".
            </summary>
            <param name="buffer">The character buffer, which should contain the assignment.</param>
            <param name="offset">The offset of the first character of the assignment in the buffer.</param>
            <param name="expectedLeft">The expected left.</param>
            <param name="right">The right hand side of the assignment, as a trimmed string.</param>
            <returns>
            The offset of the first character after the assignment.
            </returns>
            <exception cref="T:System.FormatException">if the input is not a valid assignment.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ParseTrailingWhiteSpace(System.String,System.Int32)">
            <summary>
            Ensures that the end of a line contains nothing but whitespace characters.
            </summary>
            <param name="buffer">The character buffer.</param>
            <param name="offset">The index of the first trailing character.</param>
            <exception cref="T:System.FormatException">if a non-WhiteSpace character is found.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.TryParseTrailingWhiteSpace(System.String,System.Int32)">
            <summary>
            Checks if the end of a line contains nothing but whitespace characters.
            </summary>
            <param name="buffer">The character buffer.</param>
            <param name="offset">The index of the first trailing character.</param>
            <returns>True if only WhiteSpace characters were present; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.SkipUtf8Bom(System.IO.TextReader)">
            <summary>
            Skips the UTF8 BOM at the beginning of a file. The BOM is optional, but if present,
            it must be the UTF8 BOM since no other encoding is supported.
            </summary>
            <param name="reader">The input provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ReadLine(System.IO.TextReader)">
            <summary>
            Reads one line of input, terminated by CRLF.
            </summary>
            <param name="reader">The input provider.</param>
            <returns>A string containing the entire line, except the terminating CRLF
            which is read and discarded.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ReadMultiline(System.IO.TextReader,System.Int32)">
            <summary>
            Reads one row of data, possibly consisting of multiple lines in case of large blobs.
            </summary>
            <param name="reader">The input provider.</param>
            <param name="columnCount">The number of columns on a row.</param>
            <returns>A string containing the entire row. Internal CRLF sequences will be kept
            but replaced with \r\n escape sequences.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.IsBlankLine(System.String)">
            <summary>
            Checks if a buffer contains a blank line. That is, nothing but whitespace characters.
            </summary>
            <param name="buffer">The character buffer.</param>
            <returns>True if the buffer is empty or contains only whitespace; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.IsHeaderLine(System.String)">
            <summary>
            Checks if a buffer contains a header line, that is, if it starts with "\!".
            </summary>
            <param name="buffer">The character buffer, containing a line of input.</param>
            <returns>True if the line is a header line; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.IsCommentLine(System.String)">
            <summary>
            Checks if a buffer contains a comment line, that is, if it starts with "\*".
            </summary>
            <param name="buffer">The character buffer, containing a line of input.</param>
            <returns>True if the line is a comment line; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.Dispose(System.Boolean)">
            <summary>
            Disposes of this StdfTableReader instance.
            </summary>
            <param name="disposing">True if invoked explicitly; false if invoked from the GC.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableReader.ReadHeaderAndMetadata">
            <summary>
            Reads the header lines and the metadata rows.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter">
            <summary>
            This class provides a simple interface for writing data to the STDF format.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.writer">
            <summary>
            The output stream.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.metadata">
            <summary>
            The table metadata.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.columnIndex">
            <summary>
            The index of the column receving the next data value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.formatVersion">
            <summary>
            The file format version, either "1.0" or "2.0".
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.#ctor(System.IO.Stream,Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter"/> class.
            </summary>
            <param name="outputStream">The output stream. The StdfTableWriter will close the stream
            when it is disposed. By default, an UTF8 encoding with a BOM will be used.</param>
            <param name="metadata">The table metadata, which must include metadata for all columns.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.#ctor(System.IO.Stream,Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata,System.Text.Encoding,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter"/> class.
            </summary>
            <param name="outputStream">The output stream. The StdfTableWriter will close the stream
            when it is disposed.</param>
            <param name="metadata">The table metadata, which must include metadata for all columns.</param>
            <param name="encoding">The character encoding, which must be UTF8 with or without a byte order mark.</param>
            <param name="formatVersion">The STDF version to be used, either "1.0" or "2.0".</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.#ctor(System.IO.TextWriter,Spotfire.Dxp.Data.Formats.Stdf.StdfTableMetadata,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter"/> class.
            This is an internal constructor for testing purposes.
            </summary>
            <param name="writer">A text writer that will be closed on dispose.</param>
            <param name="metadata">The table metadata, which must include metadata for all columns.</param>
            <param name="formatVersion">The STDF version to be used, either "1.0" or "2.0".</param>
            <param name="writeHeaderAndMetadata">if set to <c>true</c>, header and metadata will be written.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.WriteValue(System.Object)">
            <summary>
            Adds a value to the table. Values are added in a row-based manner, round-robin.
            For each row values must be provided for all columns.
            A null argument is interpreted as a null/missing value.
            </summary>
            <param name="value">The new value. The object's type has to match the current column.</param>
            <exception cref="T:System.ArgumentException">if the value does not match the type of the column.</exception>
            <exception cref="T:System.InvalidOperationException">if there are no columns in the table.</exception>
            <exception cref="T:System.InvalidOperationException">if too many values have been written on the same row.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.WriteLine">
            <summary>
            Writes the STDF end-of-line character sequence to the output stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">if the current row does not have values for all columns.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.Flush">
            <summary>
            Flushes all buffered output to the underlying output stream.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.Close">
            <summary>
            Closes this TableWrite instance and the underlying stream.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.Dispose">
            <summary>
            Disposes of this StdfTableWriter instance. Will flush and close the output stream.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.Dispose(System.Boolean)">
            <summary>
            Disposes of this StdfTableWriter instance.
            </summary>
            <param name="disposing">True if invoked explicitly; false if invoked from the GC.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.WriteHeader">
            <summary>
            Writes the first header line to identify the file content as STDF.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.WriteMetadata">
            <summary>
            Writes the header lines defining the metadata properties and the rows containing
            the column metadata assignments.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfTableWriter.WriteMetadataPropertyHeader(Spotfire.Dxp.Data.Formats.Stdf.StdfMetadataProperty,System.String)">
            <summary>
            Writes a metadata property header line.
            </summary>
            <param name="property">A metadata property.</param>
            <param name="categoryTag">Table or column.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter">
            <summary>
            Provides methods for formatting and parsing values in an STDF file.
            All the formatting code (and nothing else) has been collected into 
            this class to simplify maintenance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.InvalidValueToken">
            <summary>
            The character sequence used to identify invalid values.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.specialCharacters">
            <summary>
            An array of the characters that must be escaped in STDF strings.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatBool(System.Boolean)">
            <summary>
            Converts a Boolean value to its equivalent string representation.
            </summary>
            <param name="value">The Boolean value to convert.</param>
            <returns>One of the strings "True" or "False".</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseBool(System.String,System.Boolean@)">
            <summary>
            Converts the specified string representation of a logical value to its Boolean
            equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">A string containing the value to convert.</param>
            <param name="result">If the conversion succeeded, contains true
            if the value was equal to "True" and false if the value was equal to "False". 
            If the conversion failed, contains false.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
            <remarks>The value parameter can be preceded or followed by white space.
            The comparison is case-insensitive.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatInt(System.Int32)">
            <summary>
            Converts an Integer value to its equivalent string representation.
            </summary>
            <param name="value">The integer value to convert.</param>
            <returns>The string representation of the value, 
            consisting of a negative sign if the value is negative,
            and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseInt(System.String,System.Int32@)">
            <summary>
            Converts the string representation of a number to its integer equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">If the conversion succeeded, contains the signed integer value
            equivalent to the number contained in s. If the conversion failed, contains zero.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatLong(System.Int64)">
            <summary>
            Converts a Long Integer value to its equivalent string representation.
            </summary>
            <param name="value">The long integer value to convert.</param>
            <returns>The string representation of the value, 
            consisting of a negative sign if the value is negative,
            and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseLong(System.String,System.Int64@)">
            <summary>
            Converts the string representation of a number to its long integer equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">If the conversion succeeded, contains the signed long integer value
            equivalent to the number contained in s. If the conversion failed, contains zero.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatFloat(System.Single)">
            <summary>
            Converts a Float value to its equivalent string representation.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>The string representation of the value, in a form that allows round-trip.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseFloat(System.String,System.Single@)">
            <summary>
            Converts the string representation of a number to its float equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">If the conversion succeeded, contains the float value
            equivalent to the number contained in s. If the conversion failed, contains zero.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatDouble(System.Double)">
            <summary>
            Converts a Double value to its equivalent string representation.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>The string representation of the value, in a form that allows round-trip.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseDouble(System.String,System.Double@)">
            <summary>
            Converts the string representation of a number to its double equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">If the conversion succeeded, contains the double value
            equivalent to the number contained in s. If the conversion failed, contains zero.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatDateTime(System.DateTime)">
            <summary>
            Converts a DateTime value to its equivalent string representation.
            </summary>
            <param name="value">The DateTime value to convert.</param>
            <returns>The string representation of the value, created using the "yyyy-MM-dd HH:mm:ss.FFF"
            custom format string and the invariant culture.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseDateTime(System.String,System.DateTime@)">
            <summary>
            Converts the string representation of a DateTime to a corresponding instance.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a DateTime to convert.</param>
            <param name="result">If the conversion succeeded, contains the parsed value;
            otherwise, contains DateTime.MinValue.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatDate(System.DateTime)">
            <summary>
            Converts a Date value to its equivalent string representation.
            </summary>
            <param name="value">The Date value to convert.</param>
            <returns>The string representation of the value, created using the "yyyy-MM-dd"
            custom format string and the invariant culture.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseDate(System.String,System.DateTime@)">
            <summary>
            Converts the string representation of a Date to a corresponding instance.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a Date to convert.</param>
            <param name="result">If the conversion succeeded, contains the parsed value;
            otherwise, contains DateTime.MinValue.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatTime(System.DateTime)">
            <summary>
            Converts a Time value to its equivalent string representation.
            </summary>
            <param name="value">The Time value to convert.</param>
            <returns>The string representation of the value, created using the "HH:mm:ss.FFF"
            custom format string and the invariant culture.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseTime(System.String,System.DateTime@)">
            <summary>
            Converts the string representation of a Time to a corresponding instance.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a Time to convert.</param>
            <param name="result">If the conversion succeeded, contains the parsed value;
            otherwise, contains DateTime.MinValue.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatTimeSpan(System.TimeSpan)">
            <summary>
            Converts a TimeSpan value to its equivalent string representation.
            </summary>
            <param name="value">The TimeSpan value to convert.</param>
            <returns>The string representation of the value, on the format "days.HH:mm:ss.FFF".</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseTimeSpan(System.String,System.TimeSpan@)">
            <summary>
            Converts the string representation of a TimeSpan to a corresponding instance.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a TimeSpan to convert.</param>
            <param name="result">If the conversion succeeded, contains the parsed value;
            otherwise, contains TimeSpan.Zero.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatString(System.String)">
            <summary>
            Converts a String value to its equivalent escaped STDF string representation.
            </summary>
            <param name="value">The String value to convert.</param>
            <returns>The String converted to STDF format.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseString(System.String,System.String@)">
            <summary>
            Converts an escaped STDF string representation to a normal unescaped string instance.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">An escaped STDF string.</param>
            <param name="result">If the conversion succeeded, contains the unescaped string;
            otherwise, contains null.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatBinary(System.Byte[])">
            <summary>
            Converts a binary value to its equivalent STDF representation, which is a Base64-encoded string.
            </summary>
            <param name="value">The binary value to convert.</param>
            <returns>The value converted to STDF format.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseBinary(System.String,System.Byte[]@)">
            <summary>
            Converts a binary object in STDF format to a byte array.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A base 64-encoded binary object.</param>
            <param name="result">If the conversion succeeded, contains the decoded object;
            otherwise, contains null.</param>
            <returns>True if the object was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.FormatDecimal(System.Decimal)">
            <summary>
            Converts a Decimal value to its equivalent string representation.
            </summary>
            <param name="value">The Decimal value to convert.</param>
            <returns>The string representation of the value, in a form that allows round-trip.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.ValueFormatter.TryParseDecimal(System.String,System.Decimal@)">
            <summary>
            Converts the string representation of a number to its Decimal equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">If the conversion succeeded, contains the Decimal value
            equivalent to the number contained in s. If the conversion failed, contains zero.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType">
            <summary>
            Represents the type of a data value or metadata property in STDF. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Bool">
            <summary>
            The Boolean value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Int">
            <summary>
            The Integer value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Long">
            <summary>
            The Long integer value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Float">
            <summary>
            The Float value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Double">
            <summary>
            The Double value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.DateTime">
            <summary>
            The DateTime value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Date">
            <summary>
            The Date value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Time">
            <summary>
            The Time value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.TimeSpan">
            <summary>
            The TimeSpan value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.String">
            <summary>
            The String value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Binary">
            <summary>
            The Binary value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Decimal">
            <summary>
            The Decimal value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.MaxTypeId">
            <summary>
            The maximum type id. (Note that not all id's may be used in the sequence.)
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.defaults">
            <summary>
            Holds default values for all known data types.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.sinceVersionOne">
            <summary>
            Holds boolean values indicating whether a type was supported in version 1.0.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.unknownType">
            <summary>
            The unknown type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.typeId">
            <summary>
            The type identifier of this value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.typeNameVersion1">
            <summary>
            The type name used in version 1.0.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.typeNameVersion2">
            <summary>
            The type name used in version 2.0.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.valueFormatter">
            <summary>
            A delegate used to format values of this value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.valueParser">
            <summary>
            A delegate used to parse values of this value type.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.#ctor(Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId,System.String,System.String,Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.FormattingDelegate,Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ParsingDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType"/> class.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="typeName1">The type name in version 1.0.</param>
            <param name="typeName2">The type name in version 2.0.</param>
            <param name="valueFormatter">The formatting delegate.</param>
            <param name="valueParser">The parsing delegate.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.FormattingDelegate">
            <summary>
            Delegate that represents a value formatting method.
            </summary>
            <param name="value">An object to be formatted.</param>
            <returns>A formatted value string.</returns>
            <exception cref="T:System.InvalidCastException">if the object is not of the expected type.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ParsingDelegate">
            <summary>
            Delegate that represents a value parsing method.
            </summary>
            <param name="s">A string to be parsed.</param>
            <param name="value">The parsed value.</param>
            <returns>True if the string was successfully parsed; otherwise, false.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.TypeId">
            <summary>
            Gets the type identifier of this value type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.TypeName">
            <summary>
            Gets the name of this value type in the latest version of the format.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.TypeNameInStdfVersionOne">
            <summary>
            Gets the name of this value type used in version 1.0 of the format.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.IsSimpleType">
            <summary>
            Gets a value indicating whether this is a simple value type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.IsArrayType">
            <summary>
            Gets a value indicating whether this is an array type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.IsSupportedInStdfVersionOne">
            <summary>
            Gets a value indicating whether this value type was supported in STDF 1.0.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.DefaultValue">
            <summary>
            Gets the default value for this type.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.NullValue">
            <summary>
            Gets an object representing a null value.
            </summary>
            <value>An object representing a null value.</value>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.RuntimeType">
            <summary>
            Gets the runtime type corresponding to this StdfValueType instance.
            </summary>
            <value>A Type instance.</value>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.IsSimpleTypeId(Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId)">
            <summary>
            Gets a value indicating whether a given type identifier corresponds to a simple type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>True for a simple type; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.IsArrayTypeId(Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId)">
            <summary>
            Gets a value indicating whether a given type identifier corresponds to an array type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>True for an array type; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.GetValueTypeFromId(Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId)">
            <summary>
            Gets a value type instance for a given type identifier.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>A StdfValueType instance.</returns>
            <exception cref="T:System.ArgumentException">If the type identifier is neither simple nor an array.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.FromRuntimeType(System.Type)">
            <summary>
            Constructs a StdfValueType from a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type object.</param>
            <returns>A corresponding StdfValueType instance.</returns>
            <remarks>An StdfValueType with <see cref="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.UnknownType"/> is returned for unknown types.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.GetValueType(System.String)">
            <summary>
            Gets a StdfValueType from a string representation.
            </summary>
            <param name="typeName">The name of the value type.</param>
            <returns>An StdfValueType instance.</returns>
            <exception cref="T:System.ArgumentException">If the type name is not recognized.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ErrorValue(System.String)">
            <summary>
            Returns an object representing an error value.
            </summary>
            <param name="error">The specific error string.</param>
            <returns>An object representing an error value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.IsNullValue(System.Object)">
            <summary>
            Determines if <paramref name="value"/> is an null/missing value.
            </summary>
            <param name="value">The object to examine.</param>
            <returns><c>true</c> if the object is a null value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.IsErrorValue(System.Object)">
            <summary>
            Determines if <paramref name="value"/> is an error value.
            </summary>
            <param name="value">The object to examine.</param>
            <returns><c>true</c> if the object is an error value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.IsInvalidValue(System.Object)">
            <summary>
            Determines if <paramref name="value"/> is an invalid value (null or error).
            </summary>
            <param name="value">The object to examine.</param>
            <returns><c>true</c> if the object is a null value or an error value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.GetErrorString(System.Object)">
            <summary>
            Gets the error string from the error value held in <paramref name="value"/>.
            </summary>
            <param name="value">The error value.</param>
            <returns>The error string.</returns>
            <exception cref="T:System.ArgumentException">if <paramref name="value"/> doesn't represent an error value.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ToString">
            <summary>
            Returns a string representation of this instance intended for human readers.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.FormatValue(System.Object)">
            <summary>
            Returns the STDF string encoding of a given value.
            </summary>
            <param name="value">The value to be formatted.</param>
            <returns>A formatted string, not including the terminating semicolon.</returns>
            <exception cref="T:System.InvalidOperationException">if the value type does not support formatting,
            e.g., if it's an UnknownType.</exception>
            <exception cref="T:System.ArgumentException">if the value is not of the expected type.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.TryParseValue(System.String,System.Object@)">
            <summary>
            Tries to create a value of this type from a text string.
            </summary>
            <param name="s">The text string.</param>
            <param name="value">The parsed value.</param>
            <returns>True if the value was successfully parsed; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.Equals(System.Object)">
            <summary>
            Determines if two <see cref="T:System.ValueType"/> objects are equal.
            </summary>
            <param name="obj">The <see cref="T:System.ValueType"/> object to compare this instance to.</param>
            <returns><c>true</c> if the instances are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.GetHashCode">
            <summary>
            Calculates the hash code of this instance.
            </summary>
            <returns>The hash code of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.GetRuntimeType(Spotfire.Dxp.Data.Formats.Stdf.StdfValueType)">
            <summary>
            Gets the runtime type corresponding to a given ValueType.
            </summary>
            <param name="valueType">The ValueType.</param>
            <returns>A Type instance.</returns>
            <exception cref="T:System.ArgumentException">If the type is neither simple nor an array.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Determines if two objects are equal.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>A bool value indicating whether the two objects are equal.</returns>
            <remarks>If both objects are arrays, the contents of the arrays are examined for equality.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.GetValueTypeId(System.Type)">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId"/> id of a type by examining the <paramref name="type"/>.
            </summary>
            <param name="type">The type object.</param>
            <returns>The <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId"/> corresponding to the <paramref name="type"/>, or <see cref="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.UnknownType"/> for unknown types.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ValidateAssignment(Spotfire.Dxp.Data.Formats.Stdf.StdfValueType,System.Object)">
            <summary>
            Validates that a given value can be assigned to a property of a certain StdfValueType.
            </summary>
            <param name="type">The value type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ErrorValueHolder">
            <summary>
            Defines a class holding an error value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ErrorValueHolder.error">
            <summary>
            The error string.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ErrorValueHolder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ErrorValueHolder"/> class.
            </summary>
            <param name="error">The error string. Must be non-empty.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ErrorValueHolder.Error">
            <summary>
            Gets the error string.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ErrorValueHolder.Equals(System.Object)">
            <summary>
            Implements Equals.
            </summary>
            <param name="obj">The other object.</param>
            <returns><c>true</c> if the objects are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.ErrorValueHolder.GetHashCode">
            <summary>
            Implements GetHashCode.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.NullValueHolder">
            <summary>
            Defines a class holding a null value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.NullValueHolder.instance">
            <summary>
            The static instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.NullValueHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.NullValueHolder"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.NullValueHolder.Instance">
            <summary>
            Gets the static instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.NullValueHolder.Equals(System.Object)">
            <summary>
            Implements Equals.
            </summary>
            <param name="obj">The other object.</param>
            <returns><c>true</c> if the objects are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Stdf.StdfValueType.NullValueHolder.GetHashCode">
            <summary>
            Implements GetHashCode.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId">
            <summary>
            Type identifiers for value types in STDF.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.UnknownType">
            <summary>
            An unknown value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.BoolType">
            <summary>
            The Boolean value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.IntType">
            <summary>
            The Integer value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.LongType">
            <summary>
            The Long integer value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.FloatType">
            <summary>
            The Float value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.DoubleType">
            <summary>
            The Double value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.DateTimeType">
            <summary>
            The DateTime value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.DateType">
            <summary>
            The Date value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.TimeType">
            <summary>
            The Time value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.TimeSpanType">
            <summary>
            The TimeSpan value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.StringType">
            <summary>
            The String value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.BinaryType">
            <summary>
            The Binary value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Stdf.StdfValueTypeId.DecimalType">
            <summary>
            The Decimal value type.
            </summary>
        </member>
    </members>
</doc>
