<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spotfire.Dxp.Framework</name>
    </assembly>
    <members>
        <member name="T:Spotfire.Dxp.Framework.AddIn.AddInManager">
            <summary>
            The AddInManager starts (and stops) the AddIns according
            to the configuration
            </summary> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.AddInManager.#ctor(System.IO.Stream)">
            <summary>
            Constructs an AddInManager by reading the AddIn configuration from
            the supplied stream.
            </summary>
            <remarks>
            This constructor is primarily intended for writing unit tests that
            require the AddInManager to start a specific set of AddIns.
            </remarks>
            <param name="configStream">A Stream containing AddIn Xml 
            configuration.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.AddInManager.#ctor(System.IO.Stream,Spotfire.Dxp.Framework.ApplicationModel.ModulesService)">
            <summary>
            Constructs an AddInManager by reading the AddIn configuration from
            the supplied stream.
            </summary>
            <remarks>
            This constructor is primarily intended for writing unit tests that
            require the AddInManager to start a specific set of AddIns.
            </remarks>
            <param name="configStream">A Stream containing AddIn Xml 
            configuration.</param>
            <param name="modulesService">The modules service of the application
            used to resolve addin types.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.AddInManager.#ctor(Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry,Spotfire.Dxp.Framework.ApplicationModel.ModulesService,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.AddIn.IAddIn})">
            <summary>
            Constructs an AddInManager configured according to the
            specified <paramref name="addInRegistryConfiguration" />.
            </summary>
            <param name="addInRegistryConfiguration">A configuration object
            specifying which AddIns are to be loaded and started.</param>
            <param name="modulesService">The modules service of the application
            used to resolve addin types.</param>
            <param name="additionalAddIns">The additional addins.</param>
            <remarks>
            This constructor is primarily intended for writing unit tests that
            require the AddInManager to start a specific set of AddIns.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.AddInManager.#ctor(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.AddIn.IAddIn})">
            <summary>
            Constructs an AddInManager from a list of AddIn objects.
            </summary>
            <remarks>
            This constructor is primarily intended for writing unit tests that
            require the AddInManager to start a specific set of AddIns.
            </remarks>
            <param name="addIns">A list of objects 
            implementing the IAddIn interface.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.AddInManager.AddToRegistry(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.AddIn.IAddIn})">
            <summary>
            Adds the addins to the registry.
            </summary>
            <param name="addIns">The add ins.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.AddInManager.RunExecutionPhase(System.Predicate{Spotfire.Dxp.Framework.AddIn.AddInManager.AddInRegistration},System.String)">
            <summary>
            
            </summary>
            <param name="executionMethod">
            should perform a startup or close down phase for one AddIn 
            and return true if the AddIn should still be kept in the registry,
            false if it should be removed.
            </param>
            <param name="phaseName"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.AddInManager.LoadAddIn(Spotfire.Dxp.Framework.AddIn.AddInManager.AddInRegistration,System.Collections.Generic.List{System.Reflection.AssemblyName})">
            <summary>
            ExecutionMethod intended to be passed to RunExecutionPhase().
            </summary>
            <param name="addInReg">The add in reg.</param>
            <param name="availableAssemblies">The available assemblies.</param>
            <returns></returns>
            <exception cref="T:Spotfire.Dxp.Internal.Utilities.ApplicationSetupException">Failed to initialize AddInManager.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.AddInManager.DisposeAddIn(Spotfire.Dxp.Framework.AddIn.AddInManager.AddInRegistration)">
            <summary>
            ExecutionMethod intended to be passed to RunExecutionPhase().
            </summary>
            <param name="addInReg"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.AddInManager.Dispose">
            <summary>
            Implements <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry">
            <remarks/>
            <summary>This class is not to be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry.AddIn">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry.SchemaVersion">
            <remarks/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry.Read(System.String)">
            <summary>
            Reads the specified config path.
            </summary>
            <param name="configFilePath">The config file path.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry.Read(System.IO.Stream)">
            <summary>
            Reads an AddInRegistry from the specified stream.
            </summary>
            <param name="configStream">The config stream.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry.GetXmlSchema">
            <summary>
            Gets the XML schema for AddInRegistry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry.Write(System.String)">
            <summary>
            Writes this AddInRegistry to the specified file.
            </summary>
            <param name="fileName">Name (path) of the file.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry.Write(System.IO.Stream)">
            <summary>
            Writes this AddInRegistry to the specified stream.
            </summary>
            <param name="fileStream">Stream to write to..</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry.Write(System.Xml.XmlDocument)">
            <summary>
            Writes this AddInRegistry to a <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddInRegistry.EnsureSchemaVersionSet">
            <summary>
            Ensure that schema version is set. If not, set to 1.0.
            </summary>  
        </member>
        <member name="T:Spotfire.Dxp.Framework.AddIn.Registry.AddIn">
            <remarks/>
            <summary>This class is not to be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.AddIn.Registry.AddIn.FullTypeName">
            <remarks/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddIn.ToString">
            <summary>
            Returns a System.String that represents the current object.
            </summary>
            <returns>A System.String that represents the current object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddIn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.AddIn.Registry.AddIn"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.AddIn.Registry.AddIn.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.AddIn.Registry.AddIn"/> class.
            </summary>
            <param name="fullTypeName">Full name of the AddIn type.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.AddIn.IAddIn">
             <summary>
             The interface that all AddIns should implement.
             An AddIn is used to extend an application with new functionality. 
             <para>
             When the application starts, a configuration file is read to determine
             which AddIns to load and start. The functionality of a given
             application instance is determined by the loaded AddIns.
             </para>
             <para>
             The AddIn is probably used as a singleton or factory.
             <list>
             <item>
             <term>Singleton</term>
             <description>
             Extends an application with new functionality used as a lib. Other
             parts of the application calls this AddIn directly to access the
             provided functionality. There is typically only one instance
             of each Singleton of a given Type.
             </description>
             </item>
             <item>
             <term>Factory</term>
             <description>
             A Factory AddIn is used to create objects typically used in
             the application Analysis document.  There might be several
             instances of AddIn objects implementing the same Factory
             interface, for instancean IPlotFactory 
             could be used to create instances of plots all providers of
             plots (Scatterplot, Barchart, 3-D Scatterplot, etc.) implement
             the IPlotFactory interface.
             </description>
             </item>
             </list>
             </para>
             <para>
             Lifecycle: Init, Start, Stop 
             </para>
             </summary>
             
             <remarks>
             A class that implements the IAddIn interface must have an
             empty constructor.
             <!--
             TODO: Classes implementing AddIn must not be serializable!
             This constraint is required in order to avoid saving a copy of
             an AddIn that the state holds a reference to. When the state
             is later loaded, a duplicate AddIn would appear and be
             referenced by the state without any knowledge of the AddIn
             framework.
             -->
             
             Example of a simple AddIn:
             
             using System;
             using System.Collections.Generic;
             using Spotfire.Dxp.Framework.Services;
             
             namespace Spotfire.Dxp.Framework.AddIn
             {
                 
             public class HelloAddInTest : IAddIn
             {
                 Dictionary&lt;string, object&gt; properties =
                     new Dictionary&lt;string, object&gt;();
             
                 #region IAddIn Members
             
                 public void Init(IAddInContext context)
                 {
                     Console.WriteLine("HelloAddInTest Init.");
                     properties[AddInProperties.Manufacturer] = "Spotfire";
                 }
            
                 public void Start()
                 {
                     Console.WriteLine("HelloAddInTest Start.");
                 }
            
                 public void Stop()
                 {
                     Console.WriteLine("HelloAddInTest Stop.");
                 }
            
                 public IDictionary&lt;string, object&gt; GetProperties()
                 {
                     return properties;
                 }
             
             </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView">
            <summary>
            Represents an analysis view. An analysis view corresponds to a document view, except that we create new document views when the document is closed and another
            document is opened, but the analysis view is the same. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.documentView">
            <summary>
            The document view that is currently associated to the analysis view. This property is updated with a new document view that is created when the analysis is closed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.serviceRegistry">
            <summary>
            The service registry.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.Current">
            <summary>
            Gets the current analysis view based on the current document view.
            </summary>
            <value>
            The current.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.UnsafeCurrent">
            <summary>
            Gets the current analysis view based on the current document view without any checks.
            This should be used with care.
            </summary>
            <value>
            The current.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.DocumentView">
            <summary>
            Gets or sets the document view.
            </summary>
            <value>
            The document view.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.ServiceRegistry">
            <summary>
            Gets the service registry.
            </summary>
            <value>
            The service registry.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.BeginUse(Spotfire.Dxp.Framework.ApplicationModel.AnalysisView)">
            <summary>
            Sets the document view that is associated with the specified analysis view as the current view of the document for the current thread.
            <para>
            The current view of the document determines the value of the properties for active page, active visualization, active data table, active marking,
            and active filtering selection.
            </para>
            This method returns a handle that must be disposed. The current document view will be restored when the handle is disposed.
            </summary>
            <param name="analysisView">The analysis view.</param>
            <returns>
            A handle that should be disposed when the specifed view no longer should be the current view.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.CreateServiceRegistry(Spotfire.Dxp.Framework.Services.AnalysisServiceRegistry,Spotfire.Dxp.Framework.Services.ServiceFactory,Spotfire.Dxp.Framework.AddIn.AddInManager,System.Action{Spotfire.Dxp.Framework.Services.AnalysisViewServiceRegistry})">
            <summary>
            Creates the service registry.
            </summary>
            <param name="analysisServices">The analysis services.</param>
            <param name="serviceFactory">The service factory.</param>
            <param name="addinManager">The addin manager.</param>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AnalysisView.CreatePersistedAnalysisView">
            <summary>
            Creates the persisted analysis view.
            </summary>
            <returns>The created persisted analysis view.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation">
            <summary>A delegate representing a parameterless method, which is used 
            to wrap code that is to be executed through a call to
            <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.Invoke(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)"/>.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.PromptFinishedHandlerCallback">
            <summary>This delegate is called after a prompting operation finishes.</summary>
            <param name="e">The <see cref="T:System.Exception"/> thrown in the prompting operation. May be <c>null</c>.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.WorkerThreadExecutor">
            <summary>A delegate representing a parameterless method, which is used 
            to wrap code that is to be executed through a call to ApplicationThread.ExecuteOnWorkerThread.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings">
            <summary>
            Settings on the application thread which relates to the user and the current session.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.principal">
            <summary>
            The principal of the application thread
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.analysisApplication">
            <summary>
            The analysis application.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.sessionOverrides">
            <summary>
             The session overrides object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.trackers">
            <summary>
            The list of <see cref="T:Spotfire.Dxp.Framework.Threading.IBackgroundTaskTracker"/>. Typically one per document view.
            Protected by a lock on the field.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.UserName">
            <summary>
            Gets the user name of the authenticated user.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.DisplayName">
            <summary>
            Gets the display name of the authenticated user.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.AddBackgroundTaskTracker(Spotfire.Dxp.Framework.Threading.IBackgroundTaskTracker)">
            <summary>
            Adds a background task tracker that should be notified when a task starts of finishes.
            </summary>
            <param name="tracker">The tracker to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.RemoveBackgroundTaskTracker(Spotfire.Dxp.Framework.Threading.IBackgroundTaskTracker)">
            <summary>
            Removes a background task tracker that should be notified when a task starts of finishes.
            </summary>
            <param name="tracker">The tracker to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.BackgroundTaskStart">
            <summary>
            Notifies the registered trackers that a background task has started.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.BackgroundTaskFinished">
            <summary>
            Notifies the registered trackers that a background task has finished.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.ChangeUiCulture(System.Globalization.CultureInfo)">
            <summary>
            Changes the UI culture of the current thread and this instance.
            This method should only be called during startup when the ApplicationThread 
            is the only thread running. Changing the culture after the user interface has
            been created does not work.
            </summary>
            <param name="cultureInfo">The culture to change to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.ValidateAreAppliedToCurrentThread">
            <summary>
            Throws if application thread settings have not been applied to the
            calling thread. If this method is called on the application thread
            it will never throw even if the settings have not been applied,
            since the settings originate from the application thread and do
            not have to be set on thread again.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.ApplyToCurrentThread">
            <summary>
            Apply the settings to the current thread.
            </summary>
            <returns>
            An object which can be used to revert the changes made to the
            current thread by disposing it.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.EnsureAppliedToCurrentThread">
            <summary>
            Ensure the settings are applied to current thread.
            </summary>
            <returns>An object that can be used to revert the changes made to the
            current thread by disposing it.</returns>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.ApplicationThreadSettingsRestoreContext.thread">
            <summary>Tracks the thread that the context is applied to.
            Used to detect invalid usage.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.ApplicationThreadSettingsRestoreContext.principalContext">
            <summary>
            The principals dispose context.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.ApplicationThreadSettingsRestoreContext.applicationServiceProvider">
            <summary>
            The application services of the previous thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.ApplicationThreadSettingsRestoreContext.wereAppliedToCurrentThread">
            <summary>
            Determines if application thread settings were previously applied.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.ApplicationThreadSettingsRestoreContext.sessionOverrides">
            <summary>
             The session overrides object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings.ApplicationThreadSettingsRestoreContext.Dispose">
            <summary>
            Restores the context on the calling thread.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.AnalysisServices">
            <summary>
            A static class that provides access to the analysis services of the
            AnalysisApplication associated with the calling thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AnalysisServices.GetService``1">
            <summary>
            Gets the service of the given type. This method provides access to
            services on the analysis application level and upwards.
            </summary>
            <typeparam name="T">The type of the service to obtain.</typeparam>
            <returns>The service of type <typeparamref name="T"/>
            or <c>null</c> if no such service is available.
            </returns>
            <exception cref="T:System.InvalidOperationException">When application threads settings are no applied to the 
            current thread.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AnalysisServices.GetServiceSafe``1">
            <summary>
            Gets the service of the given type. This method provides access to
            services on the analysis application level and upwards.
            </summary>
            <typeparam name="T">The type of the service to obtain.</typeparam>
            <returns>The service of type <typeparamref name="T"/>
            or <c>null</c> if no such service is available.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AnalysisServices.GetServiceSafe(System.Type)">
            <summary>
            Gets the service of the given type. This method provides access to
            services on the analysis application level and upwards.
            </summary>
            <param name="serviceType">The type of the service to obtain.</param>
            <returns>The service of type <paramref name="serviceType"/>
            or <c>null</c> if no such service is available.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AnalysisServices.GetService(System.Type)">
            <summary>
            Gets the service of the given type. This method provides access to
            services on the analysis application level and upwards.
            </summary>
            <param name="serviceType">The type of the service to obtain.</param>
            <returns>The service of type <paramref name="serviceType"/>
            or <c>null</c> if no such service is available.</returns>
            <exception cref="T:System.InvalidOperationException">When application threads settings are no applied to the 
            current thread.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread">
            <summary>
            This class enables pieces of code to 
            be synchronously executed on the main application thread. This is
            required if the document is to be accessed from any
            other thread.
            </summary>
            <remarks>
            An instance of this class is available as a service on the application.
            To obtain the object ApplicationThread object, call GetService on any document node 
            attached to the document or get it from the Services property on the application object.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.Log">
            <summary>
            The log instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.backgroundTaskCount">
            <summary>
            The number of running background tasks.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ApplicationThreadOfCurrentThread">
            <summary>
            Gets the ApplicationThread associated to the calling thread, or <c>null</c> if the calling thread is not the ApplicationThread.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.BackgroundIdle">
            <summary>
            Fired when all running background tasks has finished.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ExecutionHandle``1">
            <summary>
            Ment to be used in the end of a task continuation so that
            the execution counter reflects that the continuation is executing.
            </summary>
            <typeparam name="T">The return type of the the task.</typeparam>
            <returns>
            A task that decrements the execution counter
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.IncrementTaskCount">
            <summary>
            Increments the task count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.DecrementTaskCount">
            <summary>
            Decrements the task count.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.BackgroundBusy">
            <summary>
            Gets a value indicating whether there are running background tasks.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.BackgroundTaskCount">
            <summary>
            Gets the background task count.
            </summary>
            <value>
            The background task count.
            </value>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.currentThread">
            <summary>
            The thread that is currently considered as the application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.applicationThreadSettings">
            <summary>
            Settings on the application thread that should be set on a thread when it becomes the application thread.
            These settings are also set on worker threads that are spawned from an application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.documentViewExecutionInfo">
            <summary>
            The document view execution information. This keeps track of the current document view of the application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.analysisViewOverride">
            <summary>
            The analysis view override.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread"/> class.
            </summary>
            <param name="applicationThreadSettings">The application thread settings.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.Invoke(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)">
            <summary>Synchronously executes the specified delegate on the main application thread.
            </summary>
            <param name="method">The code to invoke. May not be null.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="method"/>is null.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            If any exception is thrown by the specified method.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.InvokeAsynchronously(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)">
            <summary>Asynchronously executes the specified delegate on the main application thread. 
            </summary>
            <param name="method">The code to invoke. May not be null.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="method"/>is null.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ExecuteOnWorkerThread(System.String,Spotfire.Dxp.Framework.ApplicationModel.WorkerThreadExecutor)">
            <summary>
            Considers the specified <paramref name="workerThreadExecutor"/> for asynchronous execution on a
            worker thread. The executor may also be executed synchronously on the calling thread. In any case
            the thread that executes it will inherit settings from the application thread.
            </summary>
            <param name="threadName">The name to assign to the worker thread. This parameter is ignored if the executor 
            is executed on the calling thread.</param>
            <param name="workerThreadExecutor">The executor that is run on the worker thread or on the 
            calling thread.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ExecuteOnWorkerThread(System.String,Spotfire.Dxp.Framework.ApplicationModel.WorkerThreadExecutor,System.Threading.ThreadPriority)">
            <summary>
            Considers the specified <paramref name="workerThreadExecutor"/> for asynchronous execution on a
            worker thread. The executor may also be executed synchronously on the calling thread. In any case
            the thread that executes it will inherit settings from the application thread.
            </summary>
            <param name="threadName">The name to assign to the worker thread. This parameter is ignored if the executor 
            is executed on the calling thread.</param>
            <param name="workerThreadExecutor">The executor that is run on the worker thread or on the 
            calling thread.</param>
            <param name="threadPriority">The priority to assign to the worker thread.This parameter is ignored if the executor 
            is executed on the calling thread.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.SafeExecuteOnWorkerThread(System.String,Spotfire.Dxp.Framework.ApplicationModel.WorkerThreadExecutor)">
            <summary>
            Executes the specified <paramref name="workerThreadExecutor"/> asynchronously on a
            worker thread. 
            </summary>
            <param name="threadName">The name to assign to the worker thread. This parameter is ignored if the executor 
            is executed on the calling thread.</param>
            <param name="workerThreadExecutor">The executor that is run on the worker thread or on the 
            calling thread.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ExecuteOnWorkerThreadCore(System.String,Spotfire.Dxp.Framework.ApplicationModel.WorkerThreadExecutor,System.Threading.ThreadPriority)">
            <summary>
            Default implementation of ExecuteOnWorkerThread that calls ThreadPool.QueueUserWorkItem.
            This method is virtual and overridden by SingleThreadedApplicationThread to fix bug 49339.
            </summary>
            <param name="threadName"></param>
            <param name="workerThreadExecutor"></param>
            <param name="threadPriority"></param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.AnalysisViewOverride">
            <summary>
            Gets or sets the analysis view override.
            </summary>
            <value>
            The analysis view override.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.DocumentViewExecutionInfo">
            <summary>
            Gets or sets the document view execution information.
            </summary>
            <value>
            The document view execution information.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.AnalysisInstanceId">
            <summary>The analysis Id.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.SessionId">
            <summary>The session Id.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.LibraryEntryId">
            <summary>The library entry Id.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.AnalysisPath">
            <summary>The analysis path.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ApplicationEnterModal">
            <summary>
            Called when the application enters modal UI state, to make sure that usage
            of <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.InvokeButWaitIfModalOperationIsRunning(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)"/> works as expected.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ApplicationExitModal">
            <summary>
            Called when the application exits the modal UI state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.IsModal">
            <summary>
            Gets a value indicating whether the application currently is in a modal UI state.
            </summary>
            <returns>True if modal.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ValidateCurrentThreadIsApplicationThread">
            <summary>
            Validates that the current thread is application thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.InvokeButWaitIfModalOperationIsRunning(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)">
            <summary>
            Perform a synchronous invocation into the application thread. If a modal operation is
            executing then it waits until the modal operation is finished.
            </summary>
            <param name="invocation">The invocation to perform.</param>
            <remarks>This method may not be called from the application thread.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.GetApartmentState">
            <summary>
            Gets the apartment state of the current thread
            </summary>
            <returns>The <see cref="T:System.Threading.ApartmentState"/> of the current thread</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ReleaseApplicationThread">
            <summary>
            Removes the association of the application thread from the current thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.AcquireApplicationThread">
            <summary>
            Associates the application thread with the current thread.
            If the current thread is already associated to an application thread then that association
            is forgotten. This method must be used with uttermost care.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.AssociateToCurrentThread(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Associates the application thread with the current thread while executing <paramref name="executor"/>. 
            If the current thread is already associated to an application thread then that association
            is temporarily disabled while executing the delegate and restored afterwards.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.AssociateToCurrentThread">
            <summary>
            Associates the application thread with the current thread until the returned object is disposed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.UnsafeBorrowApplicationThread">
            <summary>
            Borrows the application thread without peforming any validation. The caller needs to make sure that the current
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread"/> can be safely acquired. Use with caution!
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> object which restores the application thread after calling <see cref="M:System.IDisposable.Dispose"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.STAInvoke(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)">
            <summary>
            Invokes on the STA thread without applying application thread settings.
            </summary>
            <param name="method">The method to perform.</param>
            <exception cref="T:System.InvalidOperationException">if there is no STA thread.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ExecutePromptingOperation(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.PromptingApplicationInvocation)">
            <summary>
            Executes the prompting operation defined by <paramref name="promptingApplicationInvocation"/> by consuming the prompt requests
            returned by the enumerator.
            
            In order to be allowed to prompt the operation will show a progress dialog.
            
            This methods only works in the forms client.
            
            This method must be called on the application thread while it is the UI thread.
            </summary>
            <param name="title">A user-friendly title for the progress. 
            The title will be shown as the title of the progress dialog. 
            The title may not be <c>null</c>.
            </param>
            <param name="description">
            A user-friendly description of what the operation performs. 
            The description is shown in the first line of the progress dialog.
            The description may not be <c>null</c>.
            </param>
            <param name="promptingApplicationInvocation"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ExecuteOnCallingThread(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Executes the given delegate on the calling thread using the thread 
            settings associated with this application thread.
            </summary>
            <param name="executor">
            The code to execute.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ValidateOnApplicationThread">
            <summary>
            Throws if the calling thread may not start transactions on the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ValidateNotOnApplicationThread">
            <summary>
            Throws if the calling thread is this application thread..
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.IsCurrentThreadApplicationThread">
            <summary>
            Returns true if the calling thread is the application thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.BindToApplication(Spotfire.Dxp.Framework.ApplicationModel.IAnalysisApplication)">
            <summary>
            Binds this application thread to the given application. A call to
            this method is made during creation of an AnalysisApplication
            object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.UnhandledWorkerThreadException(System.Exception)">
            <summary>
            Handles unhandled exceptions from worker threads.
            </summary>
            <param name="ex">The unhandled exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread.ThrowNotOnApplicationThread">
            <summary>
            Throws the not on application thread exception.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.AsynchronousProgress">
            <summary>
            Progress for asynchronous jobs.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.AsynchronousProgress.currentWorkItem">
            <summary>The current work item.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AsynchronousProgress.#ctor(System.String,System.String,Spotfire.Dxp.Framework.Threading.WorkItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.AsynchronousProgress"/> class.
            </summary>
            <param name="title">The title of the progress.</param>
            <param name="description">The description of the progress.</param>
            <param name="currentWorkItem">The work item.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.AsynchronousProgress.CheckCancel">
            <summary>
            Checks if the current progress operation has been canceled by the user
            and if so, throws a <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/>.
            </summary>
            <remarks>
            Call this method when an operation under progress may be canceled
            by users through a user interface. In cases where the operation has
            been canceled, an exception of type
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/> is thrown.
            <para>
            Note that the frequencey of calls to this method affects the
            responsiveness of a cancel button in the progress user interface,
            for example in a progress dialog. It is therefore highly recommended to
            make calls to this method as often as possible for the cancellation
            to appear responsive. Never calling this method during your operation,
            disables users to be able to cancel the o peration.
            </para>
            </remarks>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException">
            If the progress has been canceled by the user through a user
            interface associated with the progress.
            </exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.BackgroundJobTrackerService">
            <summary>
            An analysis service that keeps track of the running background jobs.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.BackgroundJobTrackerService.log">
            <summary>
            The log object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.BackgroundJobTrackerService.numberOfCurrentJobs">
            <summary>
            The number of current running jobs.
            </summary>
            <remarks>This variable should only be accessed through the Interlocked.* methods.
            </remarks>
        </member>
        <member name="E:Spotfire.Dxp.Framework.ApplicationModel.BackgroundJobTrackerService.OnJobRemoved">
            <summary>
            Defines an event fired when a job is removed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.BackgroundJobTrackerService.NumberOfCurrentJobs">
            <summary>
            Gets the number of current jobs.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.BackgroundJobTrackerService.HasCurrentJobs">
            <summary>
            Gets a value indicating whether there are current running jobs or not.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.BackgroundJobTrackerService.AddJob">
            <summary>
            Add a new running job.
            </summary>
            <remarks>RemoveJob must be called when the job is complete, even if the job did not complete successfully.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.BackgroundJobTrackerService.RemoveJob">
            <summary>
            Remove a job that has finished.
            </summary>
            <remarks>AddJob has to have been called before this method is called.</remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CancellationDelegateProgress">
            <summary>
            A progress implementation that uses a delegate.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CancellationDelegateProgress.cancelCheck">
            <summary>
            The cancellation token.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CancellationDelegateProgress.parentProgress">
            <summary>
            The parent progress object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CancellationDelegateProgress.ignoreOtherCancellations">
            <summary>
            Flag for ignoring other cancellations, this enables "CancelAfter(time)".
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationDelegateProgress.#ctor(System.String,System.String,System.Func{System.Boolean},Spotfire.Dxp.Framework.ApplicationModel.Progress,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CancellationDelegateProgress" /> class.
            </summary>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="cancelCheck">The cancellation check.</param>
            <param name="parentProgress">The parent progress object.</param>
            <param name="ignoreOtherCancellations">Optional flag for ignoring base and parent cancellations.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationDelegateProgress.CheckCancel">
            <summary>
            Checks if the current progress operation has been canceled by the user
            and if so, throws a <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException" />.
            </summary>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException">
            If the progress has been canceled by the user through a user
            interface associated with the progress.
            </exception>
            <remarks>
            Call this method when an operation under progress may be canceled
            by users through a user interface. In cases where the operation has
            been canceled, an exception of type
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException" /> is thrown.
            <para>
            Note that the frequencey of calls to this method affects the
            responsiveness of a cancel button in the progress user interface,
            for example in a progress dialog. It is therefore highly recommended to
            make calls to this method as often as possible for the cancellation
            to appear responsive. Never calling this method during your operation,
            disables users to be able to cancel the operation.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationDelegateProgress.IsCanceled">
            <summary>
            Checks if the current progress operation has been canceled by the user.
            </summary>
            <returns><c>true</c> if the current progress was canceled, <c>false</c> otherwise.</returns>
            <remarks>
            Normally, <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationDelegateProgress.CheckCancel" />, should be used instead of this property.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress">
            <summary>
            Represents a progress instance that can be cancelled but defers all other operations to the wrapped progress.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress.parentProgress">
            <summary>
            The parent progress.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress.#ctor(Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress"/> class.
            </summary>
            <param name="parentProgress">The parent progress.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress.#ctor(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.Progress)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="parentProgress">The parent progress.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress.CheckCancel">
            <inheritdoc/> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress.TryReportProgress(System.Int64)">
            <inheritdoc/> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress.BeginSubtask(Spotfire.Dxp.Framework.ApplicationModel.Subtask)">
            <inheritdoc/> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress.TopMostLongLivedOperation(System.Double)">
            <inheritdoc/> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationOnlyProgress.IsCanceled">
            <inheritdoc/> 
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CancellationTokenProgress">
            <summary>
            A progress implementation that uses a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CancellationTokenProgress.token">
            <summary>
            The cancellation token.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CancellationTokenProgress.parentProgress">
            <summary>
            The parent progress object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationTokenProgress.#ctor(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.Progress,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CancellationTokenProgress"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="parentProgress">The parent progress object.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationTokenProgress.CheckCancel">
            <summary>
            Checks if the current progress operation has been canceled by the user
            and if so, throws a <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException" />.
            </summary>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException">
            If the progress has been canceled by the user through a user
            interface associated with the progress.
            </exception>
            <remarks>
            Call this method when an operation under progress may be canceled
            by users through a user interface. In cases where the operation has
            been canceled, an exception of type
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException" /> is thrown.
            <para>
            Note that the frequencey of calls to this method affects the
            responsiveness of a cancel button in the progress user interface,
            for example in a progress dialog. It is therefore highly recommended to
            make calls to this method as often as possible for the cancellation
            to appear responsive. Never calling this method during your operation,
            disables users to be able to cancel the operation.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationTokenProgress.IsCanceled">
            <summary>
            Checks if the current progress operation has been canceled by the user.
            </summary>
            <returns><c>true</c> if the current progress was canceled, <c>false</c> otherwise.</returns>
            <remarks>
            Normally, <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.CancellationTokenProgress.CheckCancel" />, should be used instead of this property.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadAsyncInvocator">
            <summary>
            Helper class to perform perform and aggregate invocations to the application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadAsyncInvocator.applicationThread">
            <summary>
            The application thread
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadAsyncInvocator.lockObject">
            <summary>
            The lock object
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadAsyncInvocator.invocationCount">
            <summary>
            Count of pending asynchronous application thread invocations.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadAsyncInvocator.actions">
            <summary>
            The dictionary of actions to invoke.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadAsyncInvocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadAsyncInvocator"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Application thread setting have not been applied</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadAsyncInvocator.InvokeOnce(System.String,System.Action)">
            <summary>
            Will invoke action with the given key once on application thread. Aggregates multiple calls to one.
            </summary>
            <param name="key">The key to identify the action.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThreadAsyncInvocator.OnInvoke">
            <summary>
            Performs invocation of all actions when there are no more pending invocations.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel`1">
            <summary>
            A class that serves as model for credentials.
            </summary>
            <typeparam name="T">The model instansiator type</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel`1"/> class.
            </summary>
            <param name="key">The key used in the credentials service.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel`1.Create(System.Object)">
            <summary>
            Creates a credentials key model.
            </summary>
            <param name="key">The key object used in the CredentialsService</param>
            <returns>The credentials model.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase">
            <summary>
            A base class for headless application thread implementations.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.invocationQueue">
            <summary>A queue of the current invocations.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.syncRoot">
            <summary>Lock for accessing the queue.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.workerThread">
            <summary>The worker thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.ApplicationEnterModal">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.ApplicationExitModal">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.IsModal">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.Invoke(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)">
            <summary>
            Synchronously executes the specified delegate on the main application thread.
            </summary>
            <param name="method">The code to invoke. May not be null.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="method"/>is null.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            If any exception is thrown by the specified method.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.InvokeAsynchronously(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)">
            <summary>
            Asynchronously executes the specified delegate on the main application thread.
            </summary>
            <param name="method">The code to invoke. May not be null.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="method"/>is null.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.STAInvoke(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)">
            <summary>
            Invokes on the STA thread without applying application thread settings.
            </summary>
            <param name="method">The method to perform.</param>
            <exception cref="T:System.InvalidOperationException">if this application thread is not an STA thread.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.InvokeOnUIThreadAndTransferTransactionStartPermission(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)">
            <summary>
            Invokes the on UI thread and transfer transaction start permission.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.ExecutePromptingOperation(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.PromptingApplicationInvocation)">
            <summary>
            Executes the prompting operation defined by <paramref name="promptingApplicationInvocation"/> by consuming the prompt requests
            returned by the enumerator.
            In order to be allowed to prompt the operation will show a progress dialog.
            This methods only works in the forms client.
            This method must be called on the application thread while it is the UI thread.
            </summary>
            <param name="title">A user-friendly title for the progress.
            The title will be shown as the title of the progress dialog.
            The title may not be <c>null</c>.</param>
            <param name="description">A user-friendly description of what the operation performs.
            The description is shown in the first line of the progress dialog.
            The description may not be <c>null</c>.</param>
            <param name="promptingApplicationInvocation">The prompting application invocation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.StartInvocationLoop(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Start the invocation loop and run the loop until the <paramref name="jobToPerform"/>
            delegate has been completed.
            </summary>
            <param name="jobToPerform">A job to perform on a background thread.</param>
            <remarks>This is expected to be used as the main loop in automation services or a unit test.
            The <paramref name="jobToPerform"/> will contain the entire execution and invocations into
            the application thread are needed to invoke to the document.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.FlushInvocationsQueue(System.Int32)">
            <summary>
            Flushes the invocation queue by performing all invocations in it.
            This method may only be called on the application thread.
            </summary>
            <param name="periodOfSilence">How many milliseconds to wait when the queue is empty.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.WaitForEmptyInvocationQueue(System.Int32)">
            <summary>
            Waits for the invocation queue to become empty.
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
            <returns><c>true</c>, if the queue becomes empty within the specified timeout.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.PerformInvocation(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation,System.Boolean)">
            <summary>Synchronously or asynchronously calls the specified applicationInvocation on the uiThread.
            </summary>
            <param name="applicationInvocation">The invocation delegate.</param>
            <param name="shallBeSynchronous">A value indicating whether the invocation should be synchronous or not.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThreadBase.ExecuteOnCurrentThread(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation)">
            <summary>
            Execute the invocation on the current thread.
            </summary>
            <param name="applicationInvocation">The application invocation.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel">
            <summary>Represents a prompt model for the System.Windows.Forms.MessageBox
            class. Used for displaying a message box that can contain text, buttons, 
            and symbols that inform and instruct the user.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.text">
            <summary>
            The message to display.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.caption">
            <summary>
            The dialog caption.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.buttons">
            <summary>
            The buttons to display.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.icon">
            <summary>
            The icon to display.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.defaultButton">
            <summary>
            The default button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.result">
            <summary>
            The dialog result 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel"/> class.
            To display a message box with specified text.
            </summary>
            <param name="text">The text to display in the message box.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel"/> class.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.#ctor(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel"/> class.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons 
            to display in the message box.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.#ctor(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons,Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel"/> class.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons 
            to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies 
            which icon to display in the message box.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.#ctor(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons,Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon,Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel"/> class.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons 
            to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies 
            which icon to display in the message box.</param>
            <param name="defaultButton"> One of the MessageBoxDefaultButton values that specifies 
            the default button for the message box.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons">
            <summary>
            Specifies constants defining which buttons to display on a System.Windows.Forms.MessageBox.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons.OK">
            <summary>
            The message box contains an OK button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons.OKCancel">
            <summary>
            The message box contains OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons.AbortRetryIgnore">
            <summary>
            The message box contains Abort, Retry, and Ignore buttons.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons.YesNoCancel">
            <summary>
            The message box contains Yes, No, and Cancel buttons.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons.YesNo">
            <summary>
            The message box contains Yes and No buttons.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxButtons.RetryCancel">
            <summary>
            The message box contains Retry and Cancel buttons.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxDefaultButton">
            <summary>
            Specifies constants defining the default button on a MessageBox.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxDefaultButton.Button1">
            <summary>
            The first button on the message box is the default button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxDefaultButton.Button2">
            <summary>
            The second button on the message box is the default button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxDefaultButton.Button3">
            <summary>
            The third button on the message box is the default button.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon">
            <summary>
            Specifies constants defining which information to display.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon.Asterisk">
            <summary>
            The message box contains a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon.Error">
            <summary>
            The message box contains a symbol consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon.Exclamation">
            <summary>
            The message box contains a symbol consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon.Hand">
            <summary>
            The message box contains a symbol consisting of a white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon.Information">
            <summary>
            The message box contains a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon.None">
            <summary>
            The message box contain no symbols.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon.Question">
            <summary>
            The message box contains a symbol consisting of a question mark in a circle.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon.Stop">
            <summary>
            The message box contains a symbol consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.MessageBoxIcon.Warning">
            <summary>
            The message box contains a symbol consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DialogResult">
            <summary>
            Specifies identifiers to indicate the return value of a dialog box.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DialogResult.None">
            <summary>
            Nothing is returned from the dialog box. This means that the modal dialog continues running.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DialogResult.OK">
            <summary>
            The dialog box return value is OK (usually sent from a button labeled OK).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DialogResult.Cancel">
            <summary>
            The dialog box return value is Cancel (usually sent from a button labeled Cancel).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DialogResult.Abort">
            <summary>
            The dialog box return value is Abort (usually sent from a button labeled Abort).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DialogResult.Retry">
            <summary>
            The dialog box return value is Retry (usually sent from a button labeled Retry).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DialogResult.Ignore">
            <summary>
            The dialog box return value is Ignore (usually sent from a button labeled Ignore).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DialogResult.Yes">
            <summary>
            The dialog box return value is Yes (usually sent from a button labeled Yes).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DialogResult.No">
            <summary>
            The dialog box return value is No (usually sent from a button labeled No).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.Text">
            <summary>
            Gets the message box text.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.Caption">
            <summary>
            Gets the message box caption.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.Buttons">
            <summary>
            Gets the message box buttons.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.Icon">
            <summary>
            Gets the message box icon
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.DefaultButton">
            <summary>
            Gets the message box default button.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MessageBoxPromptModel.Result">
            <summary>
            Gets or sets the dialog result.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.SaveAsDialogPromptModel">
            <summary>
            Prompt model for showing a Save As dialog.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.SaveAsDialogPromptModel.Cancelled">
            <summary>
            Gets or sets a value indicating whether the prompt was cancelled.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.SaveAsDialogPromptModel.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.SaveAsDialogPromptModel.Filter">
            <summary>
            Gets or sets the filter used in the dialog.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ICrashHandler">
            <summary>
            Marker interface for a crash handler.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ICrashHandler.HandleCrash(System.IServiceProvider,System.Exception)">
            <summary>
            Handles the crash.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ITitledItem">
            <summary>
            Represents an item that has a Title property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ITitledItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ITitledItem.TitleExpression">
            <summary>
            Gets or sets the title expression.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavedEventArgs">
            <summary>
            Event arguments used for events that signal that the document has been saved.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavedEventArgs.saveSettings">
            <summary>
            The event save settings.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavedEventArgs.#ctor(Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavedEventArgs"/> class.
            </summary>
            <param name="saveSettings">The save settings for the event.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavedEventArgs.SaveSettings">
            <summary>
            Gets the event save settings.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CanceledException">
            <summary>Base class for exceptions used for signalling cancellation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CanceledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CanceledException"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CanceledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CanceledException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CanceledException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CanceledException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService">
            <summary>
            A service for cobranding, providing access to product name, logotypes etc.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.CustomImagePathPrefix">
            <summary>
            The path prefix that is used to fetch images from the cobranding package.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.CustomImageUrlPrefix">
            <summary>
            The url prefix that is used as a marker in custom headers to include
            images from the cobranding package. Note that the missing trailing slash
            is intentional to be "backward compatible" with custom headers (with no 
            cobranding).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.Logger">
            <summary>
            Logging. Used mainly for debugging.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.sourceDirectory">
            <summary>
            The directory we look for files in. Typically the Cobranding module folder.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.config">
            <summary>
            In-memory representation of the "cobranding.config" file.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.webCobrandingDefaultSettings">
            <summary>
            Wraps default settings used in cobranding from the web configuration.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ModulesService)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService"/> class.
            </summary>
            <param name="modulesService">A modules service used for looking up the public
            resource "cobranding.config".</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ModulesService,Spotfire.Dxp.Framework.ApplicationModel.IWebCobrandingDefaultSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService"/> class.
            </summary>
            <param name="modulesService">
            A modules service used for looking up the public
            resource "cobranding.config".
            </param>
            <param name="webCobrandingDefaultSettings">
            A wrapper class that specifies default settings for the web configuration
            used in cobranding.
            </param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.IsEnabled">
            <summary>
            Gets a value indicating whether Cobranding
            is enabled and has a valid configuration.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.ProductName">
            <summary>
            Gets the name of the product, either cobranded or a default value.
            </summary>
            <value>The name of the product.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.ProductNameWeb">
            <summary>
            Gets the name of the web product, either cobranded or a default value.
            </summary>
            <value>The name of the product.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.LogoBannerImage">
            <summary>
            Gets the logo banner image used in splash screens and about dialog, either cobranded
            or a default image.
            </summary>
            <value>The logo banner image.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.LibraryNavigationLogoImage">
            <summary>
            Gets the logo image used in the navigation in the library page, either cobranded or a default image.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.LoginPageLogoImage">
            <summary>
            Gets the logo image used in the login page, either cobranded or a default image.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.WelcomePageLogoImage">
            <summary>
            Gets the logo image used in the welcome page, either cobranded or a default image.
            </summary>
            <value>The welcome page logo image.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.WelcomePageButtonText">
            <summary>
            Gets the caption for the button on the welcome page, either cobranded or a default value.
            </summary>
            <value>The welcome page button text.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.WelcomePageButtonUrl">
            <summary>
            Gets the URL for the button on the welcome page, either cobranded or a default value.
            </summary>
            <value>The welcome page button URL.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.SupportText">
            <summary>
            Gets the caption for the Support entry on the help menu, either cobranded
            or a default value.
            </summary>
            <value>The Support menu entry text.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.SupportToolTipText">
            <summary>
            Gets the tool tip for the Support entry on the help menu based on 
            the SupportText.
            </summary>
            <value>The Support menu tool tip text.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.CommunityText">
            <summary>
            Gets the caption for the Community entry on the help menu, either cobranded
            or a default value.
            </summary>
            <value>The Support menu entry text.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.CommunityUrl">
            <summary>
            Gets the url for the Community entry on the help menu, either cobranded
            or a default value.
            </summary>
            <value>The Support menu entry text.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.AboutText">
            <summary>
            Gets the caption for the About entry on the help menu, either cobranded
            or a default value.
            </summary>
            <value>The About menu entry text.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.SupportUrl">
            <summary>
            Gets the URL for the Support entry on the help menu, either cobranded
            or a default value.
            </summary>
            <value>The support URL.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.CompanyUrl">
            <summary>
            Gets the company URL, either cobranded or a default value. Used in the About dialog.
            </summary>
            <value>The company URL.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.WebHeaderFileName">
            <summary>
            Gets the name of the WebPlayer header file.
            The CobrandingService must be initialized with an IWebCobrandingDefaultSettings object.
            </summary>
            <value>The name of the WebPlayer header file.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.ShowWatermark">
            <summary>
            Gets a value indicating whether the watermarking image should be displayed
            or not.
            <value>
                <c>true</c> if watermarking image should be displayed; otherwise, <c>false</c>.
            </value>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.TryGetPackageFilePath(System.String,System.String@)">
            <summary>
            Tries to get the path to a file that exists in the CoBranding package.
            </summary>
            <param name="relativeFilePath">The relative file path in the cobranding package</param>
            <param name="packageFilePath">The resulting absolute file path; null if invalid relative path or if the file doesn't exists.</param>
            <returns>True if the file exists and is a valid file; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.TryGetLogoBannerPath(System.String@)">
            <summary>
            Tries the get the path to the logo banner file used for cobranding.
            </summary>
            <param name="logoBannerPath">The logo banner path.</param>
            <returns>true if there is a logo banner file, false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.GetOAuthResponsePage(System.Boolean)">
            <summary>
            Gets the response page for OAuth authentication.
            </summary>
            <param name="hasError">Indicates whether an error has occurred.</param>
            <returns>The response page.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.RemoveNewLines(System.String)">
            <summary>
            Removes any line breaks from a string.
            </summary>
            <param name="input">Input string to remove line breaks from.</param>
            <returns>String without line breaks.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.LogWarn(System.String)">
            <summary>
            Logs an message with Warning level.
            </summary>
            <param name="message">A descriptive message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.LogWarn(System.String,System.Exception)">
            <summary>
            Logs an exception with Warning level.
            </summary>
            <param name="message">A descriptive message.</param>
            <param name="e">The exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.LogDebug(System.String)">
            <summary>
            Logs an message with Debug level.
            </summary>
            <param name="message">A descriptive message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.LogDebug(System.String,System.Exception)">
            <summary>
            Logs an exception with Debug level.
            </summary>
            <param name="message">A descriptive message.</param>
            <param name="e">The exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.InitializeConfig(System.String)">
            <summary>
            Initializes the config.
            </summary>
            <param name="configPath">The config path.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.GetStringFromXml(System.String,System.String)">
            <summary>
            Gets a string resource from the cobranding xml document given an XPath expression.
            The value returned is the inner text of the first node matching the expression.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <param name="defaultValue">A default value to use if there is no matching node.</param>
            <returns>The string resource.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.GetImage(System.String,System.Drawing.Image)">
            <summary>
            Gets an image resource from the cobranding xml document given an XPath expression.
            The inner text of the first node matching the expression will be interpreted as a
            path relative to the <see cref="F:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.sourceDirectory"/> and the file will be loaded as
            an <see cref="T:System.Drawing.Image"/> object.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <param name="defaultImage">A default image to use if there is no matching node or
            the image fails to load.</param>
            <returns>The image resource.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.TryGetFilePath(System.String,System.String@)">
            <summary>
            Tries the get the path to a file resource from the cobranding XML document given
            an XPath expression. The inner text of the first node matching the expression will
            be interpreted as a path relative to the <see cref="F:Spotfire.Dxp.Framework.ApplicationModel.CobrandingService.sourceDirectory"/>.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <param name="path">The full path to the file.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CredentialsPromptModel`2">
            <summary>
            A parameterized prompt model used for credentials.
            </summary>
            <typeparam name="TKey">The type of the key used in the credentials service.</typeparam>
            <typeparam name="TCredentials">The type of the credentials.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CredentialsPromptModel`2.validator">
            <summary>
            A validator for credentials.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsPromptModel`2.#ctor(Spotfire.Dxp.Framework.ApplicationModel.CredentialsService,`0,Spotfire.Dxp.Framework.ApplicationModel.CredentialsValidator{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CredentialsPromptModel`2"/> class.
            </summary>
            <param name="credentialsService">The credentials service.</param>
            <param name="credentialsKey">The credentials key.</param>
            <param name="validator">A validator for the credentials.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CredentialsPromptModel`2.CredentialsService">
            <summary>
            Gets a reference to the credentials service.
            </summary>
            <value>The credentials service.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CredentialsPromptModel`2.CredentialsKey">
            <summary>
            Gets the credentials key.
            </summary>
            <value>The credentials key.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CredentialsPromptModel`2.Credentials">
            <summary>
            Gets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsPromptModel`2.SetCredentials(`1)">
            <summary>
            Sets the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <remarks>If <paramref name="credentials"/> is not <c>null</c>, the credentials service will be updated.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsPromptModel`2.Validate(`1)">
            <summary>
            Validates the specified credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns><c>true</c> if the credentials are valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CredentialsValidator`1">
            <summary>
            A delegate for validating credentials.
            </summary>
            <typeparam name="TCredentials">The type of the credentials.</typeparam>
            <param name="credentials">The credentials.</param>
            <returns><c>true</c> if the credentials are valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.IAnalysisApplication">
            <summary>
            Marker interface for an analysis application.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.IAnalysisApplication.DocumentViewManager">
            <summary>
            Gets the document view manager.
            </summary>
            <value>
            The document view manager.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.NotificationService">
            <summary>
            This service contains a list of notifications that contains information that the user might want to know.
            </summary>
            <remarks>The notifications will show up in the status bar of the application.</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.threadLocalNotifications">
            <summary>
            Thread static local notifications.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.notificationsLock">
            <summary>
            Lock that protectes the notifications object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.notifications">
            <summary>
            The current list of notifications.
            </summary>
            <remarks>Protected by the notifications lock.</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.autopopupConsumers">
            <summary>
            Objects that have registered that they want the notifications to auto popup.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.popupLock">
            <summary>
            Lock that protects the autopopupConsumers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.maxNumberOfNotifications">
            <summary>
            The maximum number of notifications to keep. By default, 100 notifications are kept.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.NotificationService"/> class.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.NotificationsChanged">
            <summary>
            Event handler which is called when the notifications change.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.Notifications">
            <summary>
            Gets the notifications.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.MaxNumberOfNotifications">
            <summary>
            Gets the maximum number of stored notifications.
            </summary>
            <remarks>The oldest notifications are removed if there are currently more notifications than allowed.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.HasNotifications">
            <summary>
            Gets a value indicating whether the service currently has notifications.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AutoPopup">
            <summary>
            Gets a value indicating whether the notifications should auto popup for the user.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.MostSevereNotificationType">
            <summary>
            Gets the current most severe notification type.
            </summary>
            <remarks>If no notifications exists then NotificationType.Information is returned.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddInformationNotification(System.String,System.String,System.String)">
            <summary>
            Add a notification that contains information.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="summary">The summary of the notification, may be null.</param>
            <param name="details">The details of the notification, may be null.</param>
            <exception cref="T:System.ArgumentException">Thrown if the title is null or the empty string.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddWarningNotification(System.String,System.String,System.String)">
            <summary>
            Add a notification that contains a warning.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="summary">The summary of the notification, may be null.</param>
            <param name="details">The details of the notification, may be null.</param>
            <exception cref="T:System.ArgumentException">Thrown if the title is null or the empty string.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddErrorNotification(System.String,System.String,System.String)">
            <summary>
            Add a notification that contains an error.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="summary">The summary of the notification, may be null.</param>
            <param name="details">The details of the notification, may be null.</param>
            <exception cref="T:System.ArgumentException">Thrown if the title is null or the empty string.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.GetThreadLocalNotifications">
            <summary>
            Gets the thread local notifications.
            </summary>
            <returns>Thre thread local notifications.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.EnabledThreadLocalNotifications">
            <summary>
            Enables thread local notifications.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.DisableThreadLocalNotifications">
            <summary>
            Disable thread local notifications.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddErrorNotification(System.String,System.Exception)">
            <summary>
            Add a notification that contains an error. The exception message and stack trace will be used
            as summary and details.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddInformationNotificationThreadLocalIfPossible(System.String,System.String,System.String)">
            <summary>
            Add a notification that contains information.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="summary">The summary of the notification, may be null.</param>
            <param name="details">The details of the notification, may be null.</param>
            <exception cref="T:System.ArgumentException">Thrown if the title is null or the empty string.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddWarningNotificationThreadLocalIfPossible(System.String,System.String,System.String)">
            <summary>
            Add a notification that contains a warning.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="summary">The summary of the notification, may be null.</param>
            <param name="details">The details of the notification, may be null.</param>
            <exception cref="T:System.ArgumentException">Thrown if the title is null or the empty string.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddErrorNotificationThreadLocalIfPossible(System.String,System.String,System.String)">
            <summary>
            Add a notification that contains an error.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="summary">The summary of the notification, may be null.</param>
            <param name="details">The details of the notification, may be null.</param>
            <exception cref="T:System.ArgumentException">Thrown if the title is null or the empty string.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddErrorNotificationThreadLocalIfPossible(System.String,System.Exception)">
            <summary>
            Add a notification that contains an error. The exception message and stack trace will be used
            as summary and details.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddNotificationThreadLocalIfPossible(Spotfire.Dxp.Framework.ApplicationModel.NotificationType,System.String,System.String,System.String)">
            <summary>
            Adds a notification.
            </summary>
            <param name="notificationType">The type of the notification.</param>
            <param name="title">The title of the notification.</param>
            <param name="summary">The summary of the notification, may be null.</param>
            <param name="details">The details of the notification, may be null.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.GetFirstAutoPopupOwner``1">
            <summary>
            Gets the first auto popup owner that is of type T.
            </summary>
            <typeparam name="T">The type to match</typeparam>
            <returns>The first match</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.RegisterForAutoPopup(System.Object)">
            <summary>
            Inform the notification service that the object sent along wants notifications to automatically pop up.
            </summary>
            <param name="registree">The object that want notifications to auto popup.</param>
            <remarks>Should normally be used in tandem with UnRegisterForAutoPopup</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.UnRegisterForAutoPopup(System.Object)">
            <summary>
            Inform the notification service that the object sent along no longer wants notifications to automatically pop up.
            </summary>
            <param name="registree">The object that no longer want notifications to auto popup.</param>
            <remarks>Should normally be used in tandem with RegisterForAutoPopup</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddNotification(Spotfire.Dxp.Framework.ApplicationModel.NotificationType,System.String,System.String,System.String)">
            <summary>
            Adds a notification.
            </summary>
            <param name="notificationType">The type of the notification.</param>
            <param name="title">The title of the notification.</param>
            <param name="summary">The summary of the notification, may be null.</param>
            <param name="details">The details of the notification, may be null.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.Clear">
            <summary>
            Remove all notifications.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.Log(Spotfire.Dxp.Framework.ApplicationModel.Notification)">
            <summary>
            Add information about the notification to the logger.
            </summary>
            <param name="notification">The notification.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddNotificationThreadLocalIfPossible(Spotfire.Dxp.Framework.ApplicationModel.Notification)">
            <summary>
            Adds a notification.
            </summary>
            <param name="notification">The notification to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if the notification is null.</exception>
            <remarks>If the current number of notifications are larger than the maximum number of stored
            notification the oldest notifications are removed.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.AddNotification(Spotfire.Dxp.Framework.ApplicationModel.Notification)">
            <summary>
            Adds a notification.
            </summary>
            <param name="notification">The notification to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if the notification is null.</exception>
            <remarks>If the current number of notifications are larger than the maximum number of stored
            notification the oldest notifications are removed.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.NotificationService.SendNotificationsChangedEvent">
            <summary>
            Send the notifications changed event.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.NotificationType">
            <summary>
            The type of a notification.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationType.None">
            <summary>
            Pesudo-value to indicate the notification should be ignored.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationType.Information">
            <summary>
            The notification contains information.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationType.Warning">
            <summary>
            The notification contains warnings.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.NotificationType.Error">
            <summary>
            The notification contains errors.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.Subprocess">
            <summary>Represents a process started from the client or web-player server.
            </summary>
            <remarks>The resone for this class is that under impersonation the .net Process class
            can not start a subprocess on the web-player. And the Process object can not get information
            about processes if it did not start the process.</remarks>
            <summary>Represents a service that gives the filename of a Subprocess or Subprocess32 executable
            that start with the same assambly binding as calling process.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.FinalizerLoggingEnabled">
            <summary>
            Finalizer logging is enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.callstack">
            <summary>
            The callstack
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.errorDataBuilder">
            <summary>
            The error data builder
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.outputDataBuilder">
            <summary>
            The output data builder
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.process">
            <summary>
            A Process object is used to start the process if possible.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.processHandle">
            <summary>
            A process handle to a process.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.Subprocess"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.Process">
            <summary>
            Gets the Process object; this can be null
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.HasExited">
            <summary>
            Gets a value indicating whether the associated process has been terminated.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.RedirectedStandardOutput">
            <summary>
            Gets the redirected standard output.
            </summary>
            <value>
            The redirected standard output.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.RedirectedStandardError">
            <summary>
            Gets the redirected standard error.
            </summary>
            <value>
            The redirected standard error.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.StartNormalSubprocess(System.String,System.String,System.String@)">
            <summary>
            Tries to start a subprocess  via the Process class.
            </summary>
            <param name="fileName">The path to the program to start.</param>
            <param name="args">The arguments string to send to the subprocess.</param>
            <param name="errorText">If no process can be started an non empty string with an error message will be returned.</param>
            <returns>A Subprocess object with a started process; otherwise null.</returns>
            <remarks>It is upto the user of this class to test if a normal subprocess can be used.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.StartImpersonationSubprocess(System.String,System.String,System.String@)">
            <summary>
            Tries to start an impersonation process.
            </summary>
            <param name="fileName">The path to the program to start.</param>
            <param name="args">The arguments string to send to the subprocess.</param>
            <param name="errorText">If no process can be started a non empty string with an error message will be returned.</param>
            <returns>A Subprocess object with a started process; otherwise null.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.WaitForExit">
            <summary>
            Waits for the sub process to exit.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.Kill">
            <summary>
            Kills the sub process.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting managed resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.StartNormalSubprocess(System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Tries to start a subprocess via the Process class.
            </summary>
            <param name="fileName">The path to the program to start.</param>
            <param name="args">The arguments string to send to the subprocess.</param>
            <param name="redirectOutput">if set to <c>true</c> [redirect output].</param>
            <param name="errorText">If no process can be started an non empty string with an error message will be returned.</param>
            <returns>A Subprocess object with a started process; otherwise null.</returns>
            <remarks>It is upto the user of this class to test if a normal subprocess can be used.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.Dispose(System.Boolean)">
            <summary>
            Disposes native and managed resources.
            </summary>
            <param name="disposing"><c>true</c> if disposing, <c>false</c> if called from finalizer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.OutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Outputs the data received.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Diagnostics.DataReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.ErrorDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Errors the data received.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Diagnostics.DataReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods">
            <summary>
            The native methods and structures needed to start a process with impersonation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.CloseHandle(System.IntPtr)">
            <summary>
            See http://msdn.microsoft.com/ for documentation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.TerminateProcess(System.IntPtr,System.UInt32)">
            <summary>
            See http://msdn.microsoft.com/ for documentation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.CreateProcessAsUser(System.IntPtr,System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.SECURITY_ATTRIBUTES@,Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.SECURITY_ATTRIBUTES@,System.Boolean,System.Int32,System.IntPtr,System.String,Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.STARTUPINFO@,Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.PROCESS_INFORMATION@)">
            <summary>
            See http://msdn.microsoft.com/ for documentation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.DuplicateTokenEx(System.IntPtr,System.UInt32,Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.SECURITY_ATTRIBUTES@,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            See http://msdn.microsoft.com/ for documentation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.GetExitCodeProcess(System.IntPtr,System.Int32@)">
            <summary>
            See http://msdn.microsoft.com/ for documentation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.WaitForSingleObject(System.IntPtr,System.UInt32)">
            <summary>
            See http://msdn.microsoft.com/ for documentation.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.STARTUPINFO">
            <summary>
            See http://msdn.microsoft.com/ for documentation.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.PROCESS_INFORMATION">
            <summary>
            See http://msdn.microsoft.com/ for documentation.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.Subprocess.NativeMethods.SECURITY_ATTRIBUTES">
            <summary>
            See http://msdn.microsoft.com/ for documentation.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService">
            <summary>Represents a service that gives the filename of a Subprocess or Subprocess32 executable
            that start with the same assambly binding as calling process.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.FinalizerLoggingEnabled">
            <summary>
            Finalizer logging is enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.callstack">
            <summary>
            The callstack
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.lockObject">
            <summary>
            Lock object for thrad synchronization.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.bindings">
            <summary>The list of bindings that should be present in the file.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.preferImpersonation">
            <summary>Prefer to start the subprocesses with impersonation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.subprocessTestTimeout">
            <summary>Timeout for how long we wait for the test subprocess to terminate.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.subProcessFileName">
            <summary>The path of the Subprocess program.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.subProcess32FileName">
            <summary>The path of the Subprocess32 program.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.configurationFile">
            <summary>Path for the configuration file.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.configurationFile32">
            <summary>Path for the configuration file for Subprocess32.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.available">
            <summary>
            Indicates if subprocess is available.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.start">
            <summary>
            Indicates how a subprocess should be started.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ModulesService)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService"/> class.
            </summary>
            <param name="modulesService">The modules service used to determine the assembly bindings.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.#ctor(System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService"/> class.
            This instance is used as a test object for the subprocess.
            </summary>
            <param name="args">An array of arguments</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.#ctor(System.Collections.Generic.IList{Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding})">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService"/> class.
            A configuration file is constructed from the assembly bindings.
            </summary>
            <param name="bindings">An IList of AssemblyBindings.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService"/> class. 
            This is called when dispose was not called directly by the managed code.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.ProcessStart">
            <summary>
            Representing how a subprocess should be started.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.ProcessStart.NoneAvailable">
            <summary>
            No subprocess could be started
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.ProcessStart.NormalProcess">
            <summary>
            The subprocess could be started via the Process class.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.ProcessStart.ImpersonationNeeded">
            <summary>
            Impersonation was needed to start the subprocess.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.SubprocessFileName">
            <summary>Gets the path of the Subprocess program if it is available;
            otherwise an empty string is returned.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.Subprocess32FileName">
            <summary>Gets the path of the Subprocess32 program if it is available;
            otherwise an empty string is returned.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.Available">
            <summary>Gets a value indicating whether the Subprocess functionality is avaiable.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.StartSubprocess(System.String,System.String@)">
            <summary>
            Tries to start a subprocess.
            </summary>
            <param name="args">The arguments string to send to the subprocess.</param>
            <param name="errorText">If no process can be started an none empty string with an error message will be returned.</param>
            <returns>A Process object; if the subprocess did start 
            the Process object is connected to the running process; otherwise null is returned.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.StartSubprocess32(System.String,System.String@)">
            <summary>
            Tries to start a subprocess in 32-bit mode.
            </summary>
            <param name="args">The arguments string to send to the subprocess.</param>
            <param name="errorText">If no process can be started an none empty string with an error message will be returned.</param>
            <returns>A Process object; if the subprocess did start 
            the Process object is connected to the running process; otherwise null is returned.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.Dispose">
            <summary>Dispose with destuctor
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.StartSubprocess(System.String,System.Boolean,System.String@)">
            <summary>
            Tries to start a subprocess.
            </summary>
            <param name="args">The arguments string to send to the subprocess.</param>
            <param name="redirectOutput">if set to <c>true</c> [redirect output], this only works when the subprocess uses the Process class.</param>
            <param name="errorText">If no process can be started an none empty string with an error message will be returned.</param>
            <returns>
            A Process object; if the subprocess did start the Process object is connected to the running process; otherwise null is returned.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.TryDeleteFile(System.String@)">
            <summary>
            Attempts to delete <paramref name="filename"/>.
            </summary>
            <param name="filename">The name of the file to delete.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.Dispose(System.Boolean)">
            <summary>Deletes the files if possible.
            </summary>
            <param name="disposing">true if called explicitly</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.Setup">
            <summary>
            Sets up the sub process.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.TestSubprocess">
            <summary>
            Test if the subprocess can run.
            </summary>
            <returns>true if the subprocess did start and exit with status value 0; otherwise false</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SubprocessService.TestImpersonationProcess">
            <summary>
            Test if the subprocess with impersonation can run.
            </summary>
            <returns>true if the subprocess did start and exit with status value 0; otherwise false</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel">
            <summary>
            The base class for the generic CredentialsModel class.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel.key">
            <summary>
            The key used in the credentials service.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel.credentialsService">
            <summary>
            The credentials service.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel"/> class.
            </summary>
            <param name="key">The key used in the credentials service.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel.Key">
            <summary>
            Gets the key object used in the credentials service.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel.CredentialsService">
            <summary>
            Gets the credential service.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel.TryGetCredentials``1(``0@)">
            <summary>
            Tries to get the credentials for the model key.
            </summary>
            <typeparam name="TCredentials">The type of credentials.</typeparam>
            <param name="credentials">The requested credentials.</param>
            <returns>
            <c>true</c> if credentials exist for the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel.SetCredentials``1(``0)">
            <summary>Sets the credentials for the model key.
            </summary>
            <typeparam name="TCredentials">The type of the credentials.</typeparam>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel.HasCredentials">
            <summary>Determines whether credentials exist for the model key.
            </summary>
            <returns>
            <c>true</c> if credentials exist for the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsModel.RemoveCredentials">
            <summary>Removes the credentials for the model key.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService">
            <summary>The CredentialsService class is available as a user-level service.
            It can be used to store credentials for the current user. Set credentials
            are available until the user session ends - typically when the application 
            or web browser is closed.
            </summary>
            <remarks>This service can be called from any thread, but the thread must be 
            associated with the same user as the service.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.principal">
            <summary>
            The principal for the thread the service was created on.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.credentialsMap">
            <summary>
            The dictionary for credentials. Access must be thread-safe.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.HasCredentials(System.Object)">
            <summary>Determines whether credentials exist for the specified key.
            </summary>
            <param name="key">The credentials key.</param>
            <returns>
            <c>true</c> if credentials exist for the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.TryGetCredentials``1(System.Object,``0@)">
            <summary>Tries to get the credentials for the specified key.
            </summary>
            <typeparam name="TCredentials">The type of the credentials.</typeparam>
            <param name="key">The credentials key.</param>
            <param name="credentials">The credentials.</param>
            <returns>
            <c>true</c> if credentials exist for the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.SetCredentials``1(System.Object,``0)">
            <summary>Sets the credentials for the specified key.
            </summary>
            <typeparam name="TCredentials">The type of the credentials.</typeparam>
            <param name="key">The credentials key.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.RemoveCredentials(System.Object)">
            <summary>Removes the credentials for the specified key.
            </summary>
            <param name="key">The credentials key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.CreatePromptModel``2(``0,Spotfire.Dxp.Framework.ApplicationModel.CredentialsValidator{``1})">
            <summary>
            Creates a prompt model for a credentials prompt.
            </summary>
            <typeparam name="TKey">The type of the credentials key.</typeparam>
            <typeparam name="TCredentials">The type of the credentials.</typeparam>
            <param name="credentialsKey">The credentials key.</param>
            <param name="validator">A validator for the credentials, or <c>null</c>.</param>
            <returns>A prompt model.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.CredentialsService.ValidatePrincipal">
            <summary>
            Validates the principal.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible">
             <summary>
             Base class for objects which may only be accessed from a dedicated analysis 
             application thread.
             </summary>
             <remarks>
             <para>
             In the forms client the actual thread that is considered as the 
             application thread is either
             the forms UI thread or the progress thread. 
             </para>
            
             <para>
             In the thin client there is one application thread for each analysis 
             application (that is one per document). The actual thread that is 
             considered as the application thread for a particular document is 
             allocated from a pool of threads and may vary from time to time. 
             If there is currently no need for a thread then
             there may be no actual thread that is allocated at the moment.
             </para>
             
             <para>
             An instance of type <seealso cref="T:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread"/> represents the 
             thread that is currently allocated as the application thread.
             </para>
             </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.CurrentThreadSynchronisationToken">
            <summary>
            Gets the ThreadSynchronisationToken object currently associated with the context
            of the calling thread. If no associated token exists, a new indirectable token is returned.
            </summary>
            <remarks>
            This property is used during initialization of the preferences InternalPreferenceManager 
            and related object that derive from DedicatedThreadAccessible.
            <para>
            This property never returns <c>null</c> and can thus be used in the base call of the PreferenceObject 
            constructor, for instance, without breaking the API behaviour.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.ExecuteWithThreadSynchronisationToken(Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Executes the specified operation with the specified ThreadSynchronisationToken object in the context.
            This method shall be used to wrap initialization code for classes that derive from DedicatedThreadAccessible.
            The CurrentThreadSynchronisationToken property can be used to access the token in the context.
            </summary>
            <param name="token"></param>
            <param name="executor"></param>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.applicationThread">
            <summary>
            The application thread that this DedicatedThreadAccessible is associated with, or null.
            Invariant: This field is set if and only if the threadSynchronisationToken field is null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.threadSynchronisationToken">
            <summary>
            Gets the token used to synchronize access to this ThreadSynchronisationToken, or null.
            Invariant: This field is set if and only if the applicationThread field is null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.ThreadSynchronisationToken">
            <summary>
            The token used to synchronize access to this DedicatedThreadAccessible, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DedicatedThreadAccessible"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:DedicatedThreadAccessible"/> class.
            </summary>
            <param name="threadSynchronisationToken">The token used to synchronize access to the data protected by this object.
            </param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.IsOnApplicationThread">
            <summary>
            Gets a value indicating whether the calling thread is the application thread.
            </summary>
            <value>
            <c>true</c> if the calling thread is the application thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.ValidateOnApplicationThread">
            <summary>
            Validates that the calling thread is the application thread associated with this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.ExecuteDedicatedThreadOperation(Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.DedicatedThreadOperation)">
            <summary>
            Acquires the thread synchronization token associated with this DedicatedThreadAccessible
            and executes an operation.
            </summary>
            <remarks>This method blocks until the thread synchronization token is acquired.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.ExecuteDedicatedThreadOperation``1(Spotfire.Dxp.Framework.ApplicationModel.DedicatedThreadAccessible.DedicatedThreadOperation{``0})">
            <summary>
            Acquires the thread synchronization token associated with this DedicatedThreadAccessible
            and executes an operation.
            </summary>
            <remarks>This method blocks until the thread synchronization token is acquired.</remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken">
            <summary>
            A token that can be used to synchronize access to objects. Used by DedicatedThreadAccessible.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken.currentOwner">
            <summary>
            The thread that currently owns this token, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken.acquireNestingDepth">
            <summary>
            The current number of nested Acquire() calls made by the current owner.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThreadSynchronisationToken"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken.Acquire">
            <summary>
            Blocks until the calling thread can assume ownership of this token.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken.Release">
            <summary>
            Releases the ownership of this token.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken.Unify(Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken)">
            <summary>
            Unifies this token with the specified token. Used to set the indirection of an 
            IndirectableThreadSynchronisationToken to point to this token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.IndirectableThreadSynchronisationToken">
            <summary>
            A token that can be used to synchronize access to objects. Used by DedicatedThreadAccessible object 
            that are created outside the scope of a ThreadSynchronisationToken, for instance some PreferenceObjects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.IndirectableThreadSynchronisationToken.indirectionTarget">
            <summary>
            The token that this instance is indirected to, or null. This fields is assigned at most once.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.IndirectableThreadSynchronisationToken.indirectionTargetAcquireCount">
            <summary>
            The number of times that the indirection target has been acquired.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IndirectableThreadSynchronisationToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThreadSynchronisationToken"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IndirectableThreadSynchronisationToken.Acquire">
            <summary>
            Blocks until the calling thread can assume ownership of this token.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IndirectableThreadSynchronisationToken.Release">
            <summary>
            Releases the ownership of this token.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.DeterminateSubtask">
            <summary>
            A determinate progress operation has knowledge about the exact number
            of steps (of some operation) that it takes to finish the task.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.DeterminateSubtask.progressFormatter">
            <summary>
            The progress formatter.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.DeterminateSubtask.totalSteps">
            <summary>
            The total steps to be performed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DeterminateSubtask.#ctor(System.String,Spotfire.Dxp.Framework.ApplicationModel.DeterminateProgressFormatter,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.DeterminateSubtask"/> class.
            </summary>
            <param name="title">The title of the subtask.</param>
            <param name="progressFormatter">The progress formatter.</param>
            <param name="totalSteps">The total steps to perform.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DeterminateSubtask.ProgressDescription">
            <summary>
            Gets a string which describes the progress.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DeterminateSubtask.ProgressPercentage">
            <summary>
            Gets the progress of this operation in percent, that is, in the interval
            [0, 100].
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ExecutionContext.LogErrorMessage(System.String)">
            <summary>
            Logs an error message that will be displayed to the user.
            </summary>
            <param name="errorMesssage"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation">
            <summary>
            Represents an operation on a document.
            </summary>
            <remarks>This class cannot be publicly extended through inheritance.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation.PropertyNames">
            <summary>
            Contains property name constants for the public properties of <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation.PropertyNames.IsBroken">
            <summary>
            The name of the property IsBroken.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DocumentOperation"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation.IsBroken">
            <summary>Gets whether or not the operation is partially or entirely broken. 
            </summary>
            <remarks>
            This property is used in action links to mark the action link as broken if
            any of the repositories are partially broken.
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation.HasRegistredView">
            <summary>
            Gets a value indicating whether this instance has registred a view which enables editing.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation.Execute(Spotfire.Dxp.Framework.ApplicationModel.ExecutionContext)">
            <summary>Executes the operation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation.Execute">
            <summary>Executes the operation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperationStandIn">
            <summary>
            Stand-in class for DocumentOperation.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperationStandIn.IsBroken">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperationStandIn.Execute(Spotfire.Dxp.Framework.ApplicationModel.ExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperationStandIn.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentOperationStandIn.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavingEventArgs">
            <summary>
            Event arguments used for events that signal that the document is about to be saved.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavingEventArgs.saveSettings">
            <summary>
            The event save settings.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavingEventArgs.#ctor(Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavingEventArgs"/> class.
            </summary>
            <param name="saveSettings">The save settings for the event.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.DocumentSavingEventArgs.SaveSettings">
            <summary>
            Gets the event save settings.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.EmptySubtask">
            <summary>An empty subtask contains no operation, for example no code to be
            executed. It merely represents a milestone during a progress operation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.EmptySubtask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.EmptySubtask"/> class.
            </summary>
            <param name="title">The title of the subtask.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel">
            <summary>
            Prompt model for showing the error dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.errorLevel">
            <summary>
            The severity of the error.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.exception">
            <summary>
            The exception that occurred.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.helpKeyword">
            <summary>
            The help keyword.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.helpNamespace">
            <summary>
            The help namespace.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.message">
            <summary>
            The message of the dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.title">
            <summary>
            The title of the dialog.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.#ctor(System.String,System.String,System.Exception,Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.Severity,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel"/> class.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message of the dialog.</param>
            <param name="exception">The exception that occurred.</param>
            <param name="errorLevel">The severity of the error.</param>
            <param name="helpKeyword">The help keyword</param>
            <param name="helpNamespace">The help namespace</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel"/> class.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message of the dialog.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.Severity">
            <summary>
            Represents the severity of an error.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.Severity.Error">
            <summary>
            This is an error.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.Severity.Warning">
            <summary>
            This is a warning.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.ErrorLevel">
            <summary>
            Gets the severity of the error.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.Exception">
            <summary>
            Gets the exception that occurred.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.HelpKeyword">
            <summary>
            Gets the help keyword.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.HelpNamespace">
            <summary>
            Gets the help namespace.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.Message">
            <summary>
            Gets the message of the dialog.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.Title">
            <summary>
            Gets the title of the dialog.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ErrorDialogPromptModel.ToJson">
            <inheritdoc/> 
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ExtensionRegistry">
            <summary>
            Base class for extension registries.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ExtensionRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ExtensionRegistry"/> class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThread">
            <summary>
            An application thread that is used when running in headless mode.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessApplicationThread.ExecuteOnWorkerThreadCore(System.String,Spotfire.Dxp.Framework.ApplicationModel.WorkerThreadExecutor,System.Threading.ThreadPriority)">
            <summary>
            Default implementation of ExecuteOnWorkerThread that calls ThreadPool.QueueUserWorkItem.
            This method is virtual and overridden by SingleThreadedApplicationThread to fix bug 49339.
            </summary>
            <param name="threadName">The thread name.</param>
            <param name="workerThreadExecutor">The worker thread executor.</param>
            <param name="threadPriority">The thread priority.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.HeadlessProgressService">
            <summary>Progress service for headless applications.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessProgressService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.HeadlessProgressService"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.HeadlessProgressService.Spawn(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation,System.Boolean)">
            <summary>
            Executes the specified operation in a possible new thread.
            </summary>
            <param name="title">The progress title.</param>
            <param name="description">The progress description.</param>
            <param name="operation">The progress operation.</param>
            <param name="showCancelButton">if set to <c>true</c> will show cancel button. Default value is true. Note that this is currently only applicable for forms</param>
            <returns>
            Any exception that might have been thrown in the worker
            is returned.
            </returns>
            <remarks>
            Since the headless client does not actually show progress there
            is no need to have a separate thread for the progress operation.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.IgnoringReportsProgress">
            <summary>
            A progress object is used by the <see cref="T:ProgressService"/>
            in cases where there is no thread that monitors the progress.
            The class has no state and ignores any progress that is reported.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IgnoringReportsProgress.#ctor">
            <summary>Initializes a new <see cref="T:IgnoringReportsProgress"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IgnoringReportsProgress.IsCanceled">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IgnoringReportsProgress.CheckCancel">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IgnoringReportsProgress.TryReportProgress(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IgnoringReportsProgress.BeginSubtask(Spotfire.Dxp.Framework.ApplicationModel.Subtask)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.IncrementalSubtask">
            <summary>
            A base class for incremental subtask, that is tasks that contain one or
            more steps in need of execution, typically in form of a loop. In addition
            to the attributes of a simple <see cref="T:Subtask"/>, the 
            IncrementaSubTask . It is also possible to increase this number through
            calls to the <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.IncrementalSubtask.ReportProgress(System.Int64)"/>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.IncrementalSubtask.completedSteps">
            <summary>
            The number of completed steps.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IncrementalSubtask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.IncrementalSubtask"/> class.
            </summary>
            <param name="title">The title of the sub task.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.IncrementalSubtask.CompletedSteps">
            <summary>
            Gets the number of completed steps.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IncrementalSubtask.ReportProgress">
            <summary>
            Reports one unit of progress to the current subtask.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IncrementalSubtask.ReportProgress(System.Int64)">
            <summary>
            Reports <paramref name="progressIncrement"/> units of progress
            to the current subtask.
            </summary>
            <param name="progressIncrement">The steps of the progress to increment.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.IndeterminateSubtask">
            <summary>
            An indeterminate progress operation does not know the exact number
            of steps (of some operation) that it takes to finish the task.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.IndeterminateSubtask.progressFormatter">
            <summary>
            The progress formatter.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IndeterminateSubtask.#ctor(System.String,Spotfire.Dxp.Framework.ApplicationModel.IndeterminateProgressFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.IndeterminateSubtask"/> class.
            </summary>
            <param name="title">The title of the sub task.</param>
            <param name="progressFormatter">The progress formatter.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.IndeterminateSubtask.ProgressDescription">
            <summary>
            Gets a string which describes the progress.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt">
            <summary>
            An invocation attempt
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.Log">
            <summary>
            The log instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.applicationInvocation">
            <summary>
            The application invocation delegate.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.callstack">
            <summary>
            The callstack, only assigned for async invocations and if the feature toggle was enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.documentView">
            <summary>
            The document view that the invocation is using.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.exception">
            <summary>
            An exception that occured during the invocation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.performed">
            <summary>
            A value indicating whether the invocation has been performed or not.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ApplicationInvocation,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt" /> class.
            </summary>
            <param name="applicationInvocation">The application invocation delegate.</param>
            <param name="async"><c>True</c> if an asynchronous invocation.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.Exception">
            <summary>
            Gets the exception from the invocation attempt.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.DocumentView">
            <summary>
            Gets the docuement view associated with the invocation attempt.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.WaitUntilPerformed">
            <summary>
            Wait until the operation has been performed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.Execute">
            <summary>
            Execute the invocation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.InvocationAttempt.Abort">
            <summary>
            Mark the invocation attempt as canceled.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.IPromptUserService">
            <summary>Implementations of this interface are responsible for prompting 
            the user for input. This service is available as an application level 
            service only when the application is running in a user-interactive mode.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IPromptUserService.Prompt(System.Object,System.Type)">
            <summary>Prompts the user for input by displaying a modal dialog, 
            operating on the specified <paramref name="promptModel"/>. A view of 
            type <see cref="T:System.Windows.Forms.Form"/> must previously have 
            been registered for the specified <paramref name="modelType"/> in 
            the <see cref="T:ViewRegistry"/>.
            </summary>
            <param name="modelType">The model Type that the dialog view has been 
            registered for in the <see cref="T:ViewRegistry"/>.</param>
            <param name="promptModel">The model object that shall be operated on 
            by the dialog that interacts with the user.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the 
            <see cref="T:ViewRegistry"/> does not contain a registered view for 
            the specified <paramref name="modelType"/>.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IPromptUserService.CanPrompt(System.Type)">
            <summary>
            Determines whether or not this instance can prompt the user for 
            input according to the specified model type.
            </summary>
            <param name="modelType">Type of the model object to prompt for.</param>
            <returns>
            <c>true</c> if this instance can prompt the user for input 
            according to the specified model type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.IWebCobrandingDefaultSettings">
            <summary>
            Interface used to wrap default settings from the Spotfire.Dxp.Web
            System.Configuration section group.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.IWebCobrandingDefaultSettings.CustomizableHeaderFileName">
            <summary>
            Gets the default file name when using a customized header HTML
            in the Web Player.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService">
            <summary>
            A global service used to assist with localization in TIBCO Spotfire.
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService.AvailableNonNeutralCultures">
            <summary>Gets the non neutral cultures available in the application.
            A neutral culture is a culture without a region, for instance de and not de-DE.
            Such cultures cannot be used to parse or format and thus cannot be used as the 
            selected UI culture.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService.IsCultureAvailable(System.Globalization.CultureInfo)">
            <summary>
            True if the specified culture is among the available cultures.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService.CurrentCulture">
            <summary>Gets the current culture.</summary>
            <value>The current culture.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService.CurrentUICulture">
            <summary>
            Gets the current UI culture.
            </summary>
            <value>The current UI culture.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService.InvariantCulture">
            <summary>Gets the invariant culture.</summary>
            <value>The invariant culture.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService.NeutralCulture">
            <summary>
            Gets the neutral culture.
            </summary>
            <value>The neutral culture.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService.#ctor(Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection)">
            <summary>
            Initializes a new instance of type LocalizationService.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService.SetUICulture(System.Globalization.CultureInfo)">
            <summary>
            Sets the culture to use in the UI of the application.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.LocalizationService.MutexOperationExecuter">
            <summary>Delegate for DoMutexOperation</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ModulesService">
            <summary>
            Provides access to public resources defined by the currently loaded modules.
            </summary>
            <remarks>
            A module is a deployed and downloaded package, built by the package builder application, 
            which is a part of the TIBCO Spotfire SDK. 
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.modules">
            <summary>The list of modules initiating this ModulesService.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.publicResources">
            <summary>The resources contained in the modules
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.ModuleCount">
            <summary>
            Gets the number of modules held by the service.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.GetResourcePath(System.String)">
            <summary>
            Gets the absolute path to the file associated with the specified public resource name, and 
            the calling threads CurrentUICulture if it matches, or <c>null</c>.
            </summary>
            <param name="resourceName">The resource name for which to retrieve the path.</param>
            <returns>An absolute path or <c>null</c>, if there is no module that has a public resource with the 
            specified <paramref name="resourceName"/>.</returns>
            <remarks>
            A public resource is a file that is packaged and deployed as part of a package and explicitly 
            given a public resource name and an optional culture with a publicResource element in the 
            resources section of the module.xml file of the package.
            <para>
            Packages are built by the Package Builder application in the SDK, which also allows files included 
            in the package to be marked as public resources.
            </para>
            <para>
            If a resource with the specified name and the calling threads CurrentUICulture is defined, the path
            to this resource will be returned. Otherwise, if a resource with the specified name and no culture is defined,
            the path to this resource will be returned. Otherwise, <c>null</c> is retunred.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.GetResourceDirectoryPath(System.String)">
            <summary>
            Gets the absolute path to the directory of the file associated with the specified public resource name, and 
            the calling threads CurrentUICulture if it matches, or <c>null</c>.
            </summary>
            <param name="resourceName">The resource name for which to retrieve the directory path.</param>
            <returns>An absolute path to a directory or <c>null</c>, if there is no module that has a public resource with the 
            specified <paramref name="resourceName"/>.</returns>
            <seealso cref="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.GetResourcePath(System.String)"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.GetInvariantResourcePath(System.String)">
            <summary>
            Gets the absolute path to the file associated with the specified public resource name,  
            without using the calling threads CurrentUICulture, or <c>null</c>.
            </summary>
            <param name="resourceName">The resource name for which to retrieve the path.</param>
            <returns>An absolute path or <c>null</c>, if there is no module that has a public resource with the 
            specified <paramref name="resourceName"/>.</returns>
            <remarks>
            A public resource is a file that is packaged and deployed as part of a package and explicitly 
            given a public resource name and an optional culture with a publicResource element in the 
            resources section of the module.xml file of the package.
            <para>
            Packages are built by the Package Builder application in the SDK, which also allows files included 
            in the package to be marked as public resources.
            </para>
            <para>
            If a resource with the specified name and the calling threads CurrentUICulture is defined, the path
            to this resource will be returned. Otherwise, if a resource with the specified name and no culture is defined,
            the path to this resource will be returned. Otherwise, <c>null</c> is retunred.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.GetModule(System.Reflection.Assembly)">
            <summary>
            Gets the client module containing the specified assembly.
            </summary>
            <param name="assembly">The assembly to look for.</param>
            <returns>The client module that contains the assembly, or null.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.GetAvailableAssemblies">
            <summary>
            Enumerates the assembly names of all loaded assemblies.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.GetAssemblyBindings">
            <summary>Returns a IList of all assembly bindings.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.ResolveType(System.String)">
            <summary>
            Gets the type for the given name. If the version requested of the
            type does not exist in memory, the currently loaded version of the
            type will be returned.
            </summary>
            <param name="fullTypeName">The full type name.</param>
            <returns>The type or null if no type with the given name can
            be resolved.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.ResolveTypes(System.String[])">
            <summary>
            Gets the types for the given names. If the version requested of the
            type does not exist in memory, the currently loaded version of the
            type will be returned.
            </summary>
            <param name="fullTypeNames">The full type names.</param>
            <returns>The type or null if no type with the given name can
            be resolved.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ModulesService.ResolveType(System.String,System.Collections.Generic.List{System.Reflection.AssemblyName})">
            <summary>
            Gets the types for the given names. If the version requested of the
            type does not exist in memory, the currently loaded version of the
            type will be returned.
            </summary>
            <param name="fullTypeName">The full type name.</param>
            <param name="availableAssemblies">The available assemblies to resolve the type from.</param>
            <returns>The type or null if no type with the given name can
            be resolved.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress">
            <summary>
            Full implementation of the Progress class with support for nesting sub 
            tasks.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.canceling">
            <summary>
            A value indicating whether the progress has been set to cancel or not.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.subtaskStack">
            <summary>
            The stack of subtasks currently executing. 
            Invariant: Only the top element on the stack may be an EmptySubTask.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.subtaskList">
            <summary>
            The list of subtasks executed within the current progress execution.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.title">
            <summary>
            The title of the progress operation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.description">
            <summary>
            The description of the progress operation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.cancelCallbacks">
            <summary>
            A list of callbacks to call when cancelling.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.notValidInLiveCallbacks">
            <summary>
            A list of callbacks to call when reading values not valid in live.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.lockObject">
            <summary>
            The lock for the this progress.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Progress"/> class.
            </summary>
            <param name="title">A user-friendly representation of the name of 
            the operation to which a progress is associated. This name will be
            represented in the user interface of the progress operation, for example a
            Progress Dialog, if such is enabled.
            <remarks>This object must have been validated
            prior to creating the <see cref="T:Progress"/> object.
            </remarks>
            </param>
            <param name="description">A user-friendly representation of what 
            the operation performs. This name will be
            represented in the user interface of the progress operation, for example a
            Progress Dialog, if such is enabled.
            <remarks>This object must have been validated
            prior to creating the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.Progress"/> object.</remarks>s
            </param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.Title">
            <summary>Gets the title of this <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.Progress"/>. The title
            of a Progress is a user-friendly description, which is represented 
            in the user interface associated with the operation progress 
            (e.g. a progress dialog).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.Description">
            <summary>Gets the description of this <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.Progress"/>. The 
            description of a Progress is a user-friendly description, which is 
            represented in the user interface associated with the operation 
            progress (e.g. a progress dialog).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.CurrentSubTask">
            <summary>
            Gets the current sub task.
            </summary>
            <remarks>May return null if there is no current subtask.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.Subtasks">
            <summary>
            Gets the current subtasks.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.IsCanceled">
            <summary>
            Returns <c>true</c> if the current progress was canceled, <c>false</c> otherwise.
            </summary>
            <remarks>
            Normally, <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.CheckCancel"/>, should be used instead of this property.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.TryReportProgress(System.Int64)">
            <summary>
            Tries the report progress.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.CheckCancel">
            <summary>
            Checks if the current progress operation has been canceled by the user
            and if so, throws a <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/>.
            </summary>
            <remarks>
            Call this method when an operation under progress may be canceled
            by users through a user interface. In cases where the operation has
            been canceled, an exception of type
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/> is thrown.
            <para>
            Note that the frequency of calls to this method affects the
            responsiveness of a cancel button in the progress user interface,
            for example in a progress dialog. It is therefore highly recommended to
            make calls to this method as often as possible for the cancellation
            to appear responsive. Never calling this method during your operation,
            disables users to be able to cancel the operation.
            </para>
            </remarks>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException">
            If the progress has been canceled by the user through a user
            interface associated with the progress.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.PopSubtask(Spotfire.Dxp.Framework.ApplicationModel.Subtask)">
            <summary>
            Remove a subtask from the current stack of subtasks.
            </summary>
            <param name="subtask">The subtask to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.BeginSubtask(Spotfire.Dxp.Framework.ApplicationModel.Subtask)">
            <summary>
            Signals that a new sub task is begun. The object that is returned
            must be disposed to signal that the sub task is completed.
            </summary>
            <param name="subtask">Describes the sub task that is begun.</param>
            <returns>
            An object that controls the span of the subtask. This object must be disposed
            in order to signal that the subtask is completed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.TopMostLongLivedOperation(System.Double)">
            <summary>
            Gets the top most operation on the progress stack which has existed 
            longer than <paramref name="threshold"/> milliseconds. 
            If no such operation exists, null is returned.
            </summary>
            <param name="threshold">The threshold.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.Cancel">
            <summary>
            Set the current progress operation to be canceled.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.RegisterCancelCallback(System.Action)">
            <summary>
            Registers an action that will be called on cancellation.
            </summary>
            <param name="action">The action to call on cancellation.</param>
            <returns>A ticket for the callback. Dispose the ticket to unsubscribe to the callback.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.RegisterNotValidInLiveCallback(System.Action)">
            <summary>
            Registers an action that will be called the first time a value that is no longer valid in live is read.
            </summary>
            <param name="action">The action to call.</param>
            <returns>A ticket for the callback. Dispose the tickt to unsubscribe to the callback.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress.InvokeNotValidInLiveCallbacks">
            <summary>
            Invokes the not valid in live callbacks.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem">
            <summary>
            A file from the file system in the MRU list.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem.filePath">
            <summary>
            The file path.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem"/> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem"/> class.
            Implements ISerializable.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem.DisplayName">
            <summary>Gets the display name of the column.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem.FilePath">
            <summary>Gets the file path.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem.Equals(System.Object)">
            <summary>
            Determines if this object is equal to the other object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListFileItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListItem">
            <summary>
            Base class for items in the MRU list.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MRUListItem.DisplayName">
            <summary>Gets the display name of the item.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListItem.ToString">
            <summary>
            Get the string representation of the item.
            </summary>
            <returns>A string representation of the item.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem">
            <summary>MRU list representation of an item in the library.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem.id">
            <summary>
            The identifier in the library.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem.name">
            <summary>
            The name of the item in the library.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem"/> class.
            </summary>
            <param name="id">The identifier for the item in the library.</param>
            <param name="name">The name of the item in the library.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem"/> class.
            Implements ISerializable.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem.DisplayName">
            <summary>Gets the display name of the item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem.Id">
            <summary>
            Gets the identifier in the library.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem.Equals(System.Object)">
            <summary>
            Determines if this object is equal to the other object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListLibraryItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListService">
            <summary>
            Manages content of MRU lists in the application.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.maxNumberOfEntries">
            <summary>
            The maximum number of entries in the list.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.threadLock">
            <summary>
            Lock variable that protects the items collection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.items">
            <summary>
            The items in the MRU list.
            </summary>
            <remarks>This is the in memory representation of the items, the actual storage is in the
            preference framework.</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.settings">
            <summary>
            The settings for the MRU list as stored in the preference framework.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.#ctor">
            <summary>
            Initializes a new instance of the MRUListService class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.#ctor(System.Int32)">
            <summary>Initializes a new instance of <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListService"/> class.
            </summary>
            <param name="maxEntries">The maximum number of entries.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.Initialize(Spotfire.Dxp.Framework.Preferences.PreferenceManager)">
            <summary>
            Initializes the MRUListService.
            </summary>
            <param name="preferenceManager">The preference manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.AddFilePath(System.String)">
            <summary>Adds a file path to the MRU list.
            </summary>
            <param name="filePath">The file path.</param>
            <remarks>
            The entry is added last to the list of the entries. If the entry already
            exist in the list, that entry is removed and the new one is added.
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.IsBlocked">
            <summary>
            Indicates whether the Service is blocked and prevents any new items to be added.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.RemoveFilePath(System.String)">
            <summary>Remove an entry from the MRU list.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.AddLibraryEntry(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>Adds a library entry to the MRU list.
            </summary>
            <param name="libraryEntry">The library entry.</param>
            <remarks>
            The entry is added last to the list of the entries. If the entry already
            exist in the list, that entry is removed and the new one is added.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.RemoveEntry(Spotfire.Dxp.Framework.ApplicationModel.MRUListItem)">
            <summary>Remove an entry from the MRU list.
            </summary>
            <param name="entry">The entry to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.Clear">
            <summary>Clears the MRU list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.GetEntries">
            <summary>Get all entries in the list.
            </summary>
            <returns>A list of MRU list entries. If no entries exist for the 
            given type an empty list will be returned.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.GetEntries(System.Int32)">
            <summary>Get all entries in the list.
            </summary>
            <param name="limit">Only get this many entries.</param>
            <returns>A list of MRU list entries. If no entries exist for the 
            given type an empty list will be returned.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.AddEntry(Spotfire.Dxp.Framework.ApplicationModel.MRUListItem)">
            <summary>Adds an entry to the MRU list.
            </summary>
            <param name="entry">The the entry.</param>
            <remarks>
            The entry is added last to the list of the entries. If the entry already
            exist in the list, that entry is removed and the new one is added.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.MRUListBase">
            <summary>
            The MRU list as stored in the preference framework.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.MRUListBase.recentlyUsedItems">
            <summary>
            The preference propery which contains the MRU list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.MRUListBase.#ctor(System.String,Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope)">
            <summary>
            Initializes a new instance of the MRUList class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.MRUListBase.Category">
            <summary>
            Gets the preference category.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.MRUListBase.SubCategory">
            <summary>
            Gets the preference sub category.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.MRUListBase.RecentlyUsed">
            <summary>
            Gets or sets the recently used list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.Block">
            <summary>
            Creates a blocker item.
            </summary>
            <returns>The blocker item</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.Blocker">
            <summary>
            A Blocker Class that puts the service in a blocked state to prevent any new item to be added to the list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.Blocker.#ctor(Spotfire.Dxp.Framework.ApplicationModel.MRUListService)">
            <summary>
            Puts the mruListService in a blocked state.
            </summary>
            <param name="mruListService"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.MRUListService.Blocker.Dispose">
            <summary>
            Puts the mruListService in an open state.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.Progress">
            <summary>
            Represents progress of an operation that has been started through a
            call to the <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ExecuteWithProgress(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)"/>.
            </summary>
            <remarks>
            Within the extent of a progress, sub tasks (that is, sub operations) may be 
            executed. Sub tasks can be nested in a way that forms a tree
            where the progress object is the root node. When executed, each node in
            this tree is visited depth first, and the operation associated with each
            node is executed. Sub tasks are executed with one of the 
            ExecuteSubtask method in this class.
            <para>
            It is possible to access the currently ongoing progress object through
            a call to <see cref="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.CurrentProgress"/>. Using this
            object, new sub tasks can be created, progress can be reported, and
            one can check for cancellations of the progress. In cases where no
            progress has been created through a call to 
            <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ExecuteWithProgress(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)"/>, a default progress
            object is returned using which operations can be executed. Note, however,
            that no progress dialog is associated with this default progress object.
            </para>
            <para>
            It is important to note that all code executed with progress is executed
            within a worker thread. Unhandled exceptions that may occur in this 
            thread, are re-thrown in the main application thread wrapped in a
            <see cref="T:System.Reflection.TargetInvocationException"/>.
            </para>
            <para>
            This class cannot be extended through inheritance.
            </para>
            </remarks>
            
            <example>
            The following example shows an operation containing a subtask being
            executed with progress.
            <code lang="c#">
            ProgressService progressService = GetService&lt;ProgressService&gt;();
            progressService.ExecuteWithProgress("Opening File",
                delegate
                {
                    // Do some work
                    // ...
            
                    ProgressService.CurrentProgress.ExecuteSubtask(
                        "Sub task",
                        stepCount,
                        "Step {0} of {1}",
                        delegate
                        {
                            try
                            {
                                // Perform subtask
                                for (int i = 0; i &lt; stepCount; i++)
                                {
                                    // Do something
                                    // ...
            
                                    ProgressService.CurrentProgress.TryReportProgress();
                                    ProgressService.CurrentProgress.CheckCancel();
                                }
                            }
                            catch (ProgressOperationCanceledException)
                            {
                                // Handle exception
                            }
                            finally
                            {
                                // Perform Cleanup
                            }
                        });
                    
                    // Do more work
                    // ...
                }
            </code>
            </example>
            
            <seealso cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressService"/>
            <seealso cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Progress.documentView">
            <summary>
            The document view that was current when the progress was started.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.#ctor">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.Progress"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Progress.IsInitiatedSelf">
            <summary>
            Gets a value indicating whether the progress was initiated by the current view.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.IsCanceled">
            <summary>
            Gets a value indicating whether the operation has been canceled by the user.
            </summary>
            <seealso cref="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.CheckCancel"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.CheckCancel">
            <summary>
            Checks if the current progress operation has been canceled by the user
            and if so, throws a <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/>.
            </summary>
            <remarks>
            Call this method when an operation under progress may be canceled
            by users through a user interface. In cases where the operation has 
            been canceled, an exception of type 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/> is thrown.
            <para>
            Note that the frequencey of calls to this method affects the 
            responsiveness of a cancel button in the progress user interface,
            for example in a progress dialog. It is therefore highly recommended to 
            make calls to this method as often as possible for the cancellation 
            to appear responsive. Never calling this method during your operation,
            disables users to be able to cancel the operation.
            </para>
            </remarks>
            
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException">
            If the progress has been canceled by the user through a user 
            interface associated with the progress.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.TryReportProgress">
            <summary>Reports one unit of progress to the currently executing subtask.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.TryReportProgress(System.Int64)">
            <summary>Report one or more steps of progress to the currently
            executing subtask. 
            </summary>
            <param name="progressIncrement">The amount of progress to report, 
            for example the number of lines read, the number of records processed, etc.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="progressIncrement"/> is zero or a negative number.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.ExecuteSubtask(System.String)">
            <summary>
            Marks the start of a new subtask. 
            </summary>
            <param name="title">A user-friendly representation of what the sub
            task performs. May not be null.</param>
            <remarks>
            Use this method when you wish
            to inline the code of the subtask in the code of its parent 
            (being another subtask or a top-level operation).
            <para>
            The extent of a subtask created through a call to this method is
            from the point of the method call to a point where either a new
            subtask is created through a call to this method or the parent
            subtask ends.
            </para>
            </remarks>
            
            <example> 
            Use this method as follows:
            <code lang="c#">
            ProgressService progressService = GetService&lt;ProgressService&gt;();
            progressService.ExecuteWithProgress("Opening File",
                delegate
                {
                    // Do some work
                    // ...
                    ProgressService.CurrentProgress.CheckCancel();
            
                    // Mark the start of a new subtask, but inline the code
                    ProgressService.CurrentProgress.ExecuteSubtask("Doing this");
                    // Do more work
                    // ...
                    ProgressService.CurrentProgress.CheckCancel();
            
                    ProgressService.CurrentProgress.ExecuteSubtask("Doing that");
                    // Do more work
                    // ...
                    ProgressService.CurrentProgress.CheckCancel();
                }
            </code>
            </example>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="title"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.ExecuteSubtask(System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)">
            <summary>
            Starts a new continuous subtask, that is, a subtask in 
            which the extent of the operation is either not known or not of 
            interest.
            </summary>
            <param name="title">A user-friendly representation of what the sub
            task performs. May not be null.</param>
            <param name="operation">The operation to execute. The operation may
            either be defined as an anonymous delegate or a local method wrapped 
            in a <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation"/>. This parameter may not be null.
            </param>
            
            <example> 
            Use this method as follows:
            <code lang="c#">
            ProgressService progressService = GetService&lt;ProgressService&gt;();
            progressService.ExecuteWithProgress("Opening File",
                delegate
                {
                    // Do some work
                    // ...
            
                    ProgressService.CurrentProgress.ExecuteSubtask("Sub task",
                        delegate
                        {
                            // Do something
                            // ...
            
                            ProgressService.CurrentProgress.CheckCancel();
                        });
                    
                    // Do more work
                    // ...
                }
            </code>
            </example>
            
            <exception cref="T:System.ArgumentNullException">
            If either <paramref name="title"/> or <paramref name="operation"/>
            is <c>null</c>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.ExecuteSubtask(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)">
             <summary>
             Starts a new indeterminate incremental subtask, that is, a subtask in 
             which the extent of the operation is either not known or not of interest.
             This call allows for a string to passed in which the progress of the
             operation is reflected. Note that progress on the current progress 
             is reported through a call to <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.TryReportProgress"/>.
             </summary>
            
             <param name="title">A user-friendly representation of what the sub
             task performs. May not be null.</param>
             <param name="operation">The operation to execute. The operation may
             either be defined as an anonymous delegate or a local method wrapped 
             in a <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation"/>. This parameter may not be null.
             </param>
             <param name="progressDescription">
             A description of the progress of the operation. This parameters
             allows for one placeholder to be included. The placeholder, if 
             included, will be replaced with a number representing the amount of
             progress reported to the subtask through calls to the 
             <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.TryReportProgress"/> method.
             The placeholder is passed in as <c>{0}</c>, for example 
             <c>"Performed {0} read operations"</c>. Note that passing more than
             one placeholder causes an exception of type 
             <see cref="T:System.FormatException"/> to be thrown.
             <para>
             This parameter may not be null.
             </para>
             </param>
             
             <example> 
             Use this method as follows:
             <code lang="c#">
             ProgressService progressService = GetService&lt;ProgressService&gt;();
             progressService.ExecuteWithProgress("Opening File",
                 delegate
                 {
                     // Do some work
                     // ...
             
                     ProgressService.CurrentProgress.ExecuteSubtask(
                         "Sub task",
                         "Step {0}",
                         delegate
                         {
                             // Perform subtask
                             while (condition)
                             {
                                 // Do something
                                 // ...
             
                                 ProgressService.CurrentProgress.TryReportProgress();
                                 ProgressService.CurrentProgress.CheckCancel();
                             }
                         });
                     
                     // Do more work
                     // ...
                 }
             </code>
             </example>
             
             <exception cref="T:System.ArgumentNullException">
             If either <paramref name="title"/>, 
             <paramref name="progressDescription"/>, or 
             <paramref name="operation"/> is <c>null</c>.
             </exception>
             <exception cref="T:System.FormatException">
             If <paramref name="progressDescription"/> contains more than one 
             placeholder
             </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.ExecuteSubtask(System.String,System.Int64,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)">
             <summary>
             Starts a new determinate subtask, that is, a subtask in which the
             extent of the operation is known, for example that it requires <c>x</c> 
             steps to be performed.
             </summary>
             <param name="title">A user-friendly representation of what the sub
             task performs. May not be null.
             </param>
             <param name="operation">The operation to execute. The operation may
             either be defined as an anonymous delegate or a local method wrapped 
             in a <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation"/>. This parameter may not be null.
             </param>
             <param name="progressDescription">
             A description of the progress of the operation. This parameters
             allows for two placeholders to be included. The first placeholder, 
             if included, will be replaced with a number representing the amount 
             of progress reported to the subtask through calls to the 
             <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.TryReportProgress"/> method. 
             The placeholders are passed in as <c>{0}</c> and <c>{1}</c>, for example 
             <c>"Performed {0} read operation {1}"</c>. 
             Note that passing more than two placeholder causes an exception of 
             type <see cref="T:System.FormatException"/> to be thrown.
             <para>
             This parameter may not be null.
             </para>
             </param>
             <param name="totalSteps">
             The number of steps in this operation.
             </param>
             
             <remarks>
             It is recommended for this method to be used
             when a subtask covers a loop consisting of a known number of 
             iterations. In such cases each step of the loop reports one unit of
             progress to the operation, using the method
             <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.TryReportProgress"/>.
             </remarks>
            
             <example> 
             Use this method as follows:
             <code lang="c#">
             ProgressService progressService = GetService&lt;ProgressService&gt;();
             progressService.ExecuteWithProgress("Opening File",
                 delegate
                 {
                     // Do some work
                     // ...
             
                     ProgressService.CurrentProgress.ExecuteSubtask(
                         "Sub task",
                         stepCount,
                         "Step {0} of {1}",
                         delegate
                         {
                             // Perform subtask
                             for (int i = 0; i &lt; stepCount; i++)
                             {
                                 // Do something
                                 // ...
             
                                 ProgressService.CurrentProgress.TryReportProgress();
                                 ProgressService.CurrentProgress.CheckCancel();
                             }
                         });
                     
                     // Do more work
                     // ...
                 }
             </code>
             </example>
             
             <exception cref="T:System.ArgumentNullException">
             If either <paramref name="title"/>, 
             <paramref name="progressDescription"/>, or 
             <paramref name="operation"/> is <c>null</c>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             If <paramref name="totalSteps"/> is negative.
             </exception>
             <exception cref="T:System.FormatException">
             If <paramref name="progressDescription"/> contains more than two
             placeholders.
             </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.BeginSubtask(System.String,System.Int64,System.String)">
             <summary>
             Starts a new determinate subtask, that is, a subtask in which the
             extent of the operation is known, for example that it requires <c>x</c> 
             steps to be performed.
             </summary>
             <param name="title">A user-friendly representation of what the sub
             task performs. May not be null.
             </param>
             <param name="progressDescription">
             A description of the progress of the operation. This parameters
             allows for two placeholders to be included. The first placeholder, 
             if included, will be replaced with a number representing the amount 
             of progress reported to the subtask through calls to the 
             <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.TryReportProgress"/> method. 
             The placeholders are passed in as <c>{0}</c> and <c>{1}</c>, for example 
             <c>"Performed {0} read operation {1}"</c>. 
             Note that passing more than two placeholder causes an exception of 
             type <see cref="T:System.FormatException"/> to be thrown.
             <para>
             This parameter may not be null.
             </para>
             </param>
             <param name="totalSteps">
             The number of steps in this operation.
             </param>
             <returns>An object that controls the span of the subtask. This object must be disposed 
             in order to signal that the subtask is completed.
             </returns>
             
             <remarks>
             This method provides an alternative API to the corresponding ExecuteSubtask() method.
             
             It is recommended for this method to be used
             when a subtask covers a loop consisting of a known number of 
             iterations. In such cases each step of the loop reports one unit of
             progress to the operation, using the method
             <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.TryReportProgress"/>.
             </remarks>
            
             <example> 
             Use this method as follows:
             <code lang="c#">
             ProgressService progressService = GetService&lt;ProgressService&gt;();
             progressService.ExecuteWithProgress("Opening File",
                 delegate
                 {
                     // Do some work
                     // ...
             
                     using(ProgressService.CurrentProgress.BeginSubtask(
                         "Sub task",
                         stepCount,
                         "Step {0} of {1}"))
                     {
                         // Perform subtask
                         for (int i = 0; i &lt; stepCount; i++)
                         {
                             // Do something
                             // ...
             
                             ProgressService.CurrentProgress.TryReportProgress();
                             ProgressService.CurrentProgress.CheckCancel();
                         }
                     }
                     
                     // Do more work
                     // ...
                 }
             </code>
             </example>
             
             <exception cref="T:System.ArgumentNullException">
             If either <paramref name="title"/>, or
             <paramref name="progressDescription"/> is <c>null</c>.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             If <paramref name="totalSteps"/> is negative.
             </exception>
             <exception cref="T:System.FormatException">
             If <paramref name="progressDescription"/> contains more than two
             placeholders.
             </exception> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.BeginSubtask(Spotfire.Dxp.Framework.ApplicationModel.Subtask)">
            <summary>Signals that a new sub task is begun. The object that is returned 
            must be disposed to signal that the sub task is completed.
            </summary>
            <param name="subtask">Describes the sub task that is begun.</param>
            <returns>An object that controls the span of the subtask. This object must be disposed 
            in order to signal that the subtask is completed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.ExecuteSubtask(System.String,Spotfire.Dxp.Framework.ApplicationModel.IndeterminateProgressFormatter,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)">
            <summary>
            Starts a subtask which consists of uniform steps where the total 
            number of steps are unknown so that the progress cannot be reported 
            as a percentage.
            </summary>
            <param name="title">
            The title of the progress which appears in the progress dialog.
            </param>
            <param name="progressFormatter">
            The formatter which is used in the progress dialog to report the 
            progress.
            </param>
            <param name="operation">
            The operation to be executed.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.BeginSubtask(System.String,Spotfire.Dxp.Framework.ApplicationModel.IndeterminateProgressFormatter)">
            <summary>
            Starts a subtask which consists of uniform steps where the total 
            number of steps are unknown so that the progress cannot be reported 
            as a percentage.
            </summary>
            <param name="title">
            The title of the progress which appears in the progress dialog.
            </param>
            <param name="progressFormatter">
            The formatter which is used in the progress dialog to report the 
            progress.
            </param>
            <returns>An object that controls the span of the subtask. This object must be disposed 
            in order to signal that the subtask is completed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.ExecuteSubtask(System.String,System.Int64,Spotfire.Dxp.Framework.ApplicationModel.DeterminateProgressFormatter,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)">
            <summary>
            Starts an operation which consists of uniform steps where the total 
            number of steps are known so that the progress can be reported as a 
            percentage.
            </summary>
            <param name="title">
            The title of the progress which appears in the progress dialog.
            </param>
            <param name="progressFormatter">
            The formatter which is used in the progress dialog to report the 
            progress.
            </param>
            <param name="totalSteps">
            The number of steps in this operation.
            </param>
            <param name="operation">The operation to be performed.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.BeginSubtask(System.String,System.Int64,Spotfire.Dxp.Framework.ApplicationModel.DeterminateProgressFormatter)">
            <summary>
            Starts an operation which consists of uniform steps where the total 
            number of steps are known so that the progress can be reported as a 
            percentage.
            </summary>
            <param name="title">
            The title of the progress which appears in the progress dialog.
            </param>
            <param name="progressFormatter">
            The formatter which is used in the progress dialog to report the 
            progress.
            </param>
            <param name="totalSteps">
            The number of steps in this operation.
            </param>
            <returns>An object that controls the span of the subtask. This object must be disposed 
            in order to signal that the subtask is completed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.RegisterCancelCallback(System.Action)">
            <summary>
            Registers an action that will be called on cancellation.
            </summary>
            <param name="action">The action to call on cancellation.</param>
            <returns>A ticket for the callback. Dispose the tickt to unsubscribe to the callback.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.SetAsCurrentProgress">
            <summary>
            Sets this instance as the the <see cref="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.CurrentProgress" />.
            Dispose the returned handle to restore the previous progress.
            </summary>
            <returns>
            The restore handle.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.Progress.RestoreHandle">
            <summary>
            A handle that replaces the <see cref="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.CurrentProgress"/> and restores to the previous value when disposed.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Progress.RestoreHandle.oldProgress">
            <summary>
            The old progress.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.RestoreHandle.#ctor(Spotfire.Dxp.Framework.ApplicationModel.Progress)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.Progress.RestoreHandle"/> class.
            </summary>
            <param name="newProgress">The new progress.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Progress.RestoreHandle.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException">
            <summary>The exception that is thrown to indicate that a user has
            canceled an operation executed with progress information.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressService"/>
            <seealso cref="T:Spotfire.Dxp.Framework.ApplicationModel.Progress"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException.#ctor">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/> class with a
            specified error message. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException.#ctor(System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/> class.
            </summary>
            <param name="message">The error message that explains the reason
            for the exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/> class with a 
            specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason
            for the exception.</param>
            <param name="innerException">The exception that is the cause of the 
            current exception. If the <paramref name="innerException"/> 
            parameter is not a null reference, the current exception is raised 
            in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException"/> class with 
            serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that 
            holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null 
            or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null.
            </exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream">
            <summary>
            A Stream that wraps another stream and increments a progress when 
            operations on the stream are performed.
            Instance methods on this class are not thread safe.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream"/> class.
            </summary>
            <param name="underlyingStream">The underlying stream.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.Flush">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressIncrementStream.Close">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation">
            <summary>Callback for start of new progress operations. The code to run in the new
            progress goes in this callback.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressService">
            <summary>
            Allows operations to be executed with progress information.
            </summary>
            <remarks>
            An instance of this class is available as a service and can be
            accessed through the GetService() method available on all document nodes
            and on the <see cref="T:Spotfire.Dxp.Application.AnalysisApplication"/>.
            <para>
            This class cannot be extended through inheritance.
            </para>
            </remarks>
            <example>
            The following example shows an operation containing a sub task being
            executed with progress.
            <code lang="c#">
            ProgressService progressService = GetService&lt;ProgressService&gt;();
            progressService.ExecuteWithProgress("Opening File",
                "Task description",
                delegate
                {
                    // Do some work
                    // ...
            
                    ProgressService.CurrentProgress.ExecuteSubtask(
                        "Sub task",
                        stepCount,
                        "Step {0} of {1}",
                        delegate
                        {
                            try
                            {
                                // Perform sub task
                                for (int i = 0; i &lt; stepCount; i++)
                                {
                                    // Do something
                                    // ...
            
                                    ProgressService.CurrentProgress.TryReportProgress();
                                    ProgressService.CurrentProgress.CheckCancel();
                                }
                            }
                            catch (CanceledException)
                            {
                                // Handle exception
                            }
                            finally
                            {
                                // Perform Cleanup
                            }
                        });
                    
                    // Do more work
                    // ...
                }
            </code>
            </example>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.asynchronousProgresses">
            <summary>
            The current progress operations on background threads.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.asynchronousProgressesLock">
            <summary>
            Lock to protect the asynchronousProgresses field.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.defaultProgress">
            <summary>
            A static progress object which is passed on to callers of 
            <see cref="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.CurrentProgress"/> in cases where a top-level progress 
            object has not been created.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.currentProgress">
            <summary>The current progress for the current thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.inProgress">
            <summary>
            A value indicating whether a main thread progress is executing.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.commandHistory">
            <summary>
            The command history.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressService"/> class.
            This constructor is internal to avoid pubilc extensions of this class.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.AsynchronousProgressesChanged">
            <summary>
            Event handler which is called when the list of asynchronous progresses change.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.CurrentProgress">
            <summary>Gets the progress object associated to the executing thread to which progress
            can be reported. The progress object is typically created 
            through a call to <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ExecuteWithProgress(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)"/>.
            If no such call has been made a default progress object is returned. Any progress that is
            reported to the default progress is ignored
            </summary>
            <remarks>This property guarantees never to return null.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.BackgroundProgresses">
            <summary>
            Gets the progress operations currently running in the background.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.CurrentAsynchronousProgress">
            <summary>
            Gets the current asynchronous progress operations.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.InProgress">
            <summary>Gets or sets a value indicating whether or not there is an ongoing progress.
            <remarks>
            This method may be called on any thread and there is an inherent race condition
            when calling this method.
            </remarks>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.IsPrompting">
            <summary>
            Gets a value indicating whether this instance is prompting.
            </summary>
            <value>
            <c>true</c> if this instance is prompting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ExecuteWithProgress(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)">
             <summary>
             Creates a new <see cref="T:Progress"/> object and executes the given 
             top-level <paramref name="operation"/> in the context of that
             progress. 
             </summary>
             <param name="title">A user-friendly title for the progress. 
             The title will be shown as the title of the progress. 
             The title may not be <c>null</c>.
             </param>
             <param name="description">
             A user-friendly description of what the operation performs. 
             The description is shown in the first line of the progress.
             The description may not be <c>null</c>.
             </param>
             <param name="operation">
             The operation to run while the progress is active.
             </param>
             <remarks>
             The <paramref name="operation"/>  and all of its sub tasks might be run in a
             worker thread depending on which type of application (Professional, Web Player)
             that hosts the current TIBCO Spotfire instance.
             
             Any dialogs that need to be shown during the <paramref name="operation"/> shall
             be prompted using the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.PromptService"/>. The PromptService requires
             the dialog to be modal.
            
             <para>
             Note that a call to this method is synchronous, that is,
             the call will not return until the operation and all of its sub tasks
             have finished, or if the user cancels the operation, or if an
             unhandled exception causes the operation to be canceled.
             </para>
             
             <para>The created <see cref="T:Progress"/> object is avaliable through the
             static property <see cref="P:ProgressService.CurrentProgress"/>.
             </para>
             
             <para>This method may be called on a background thread created by the threading
             framework in which case a background progress will be created.
             </para>
             </remarks>
             
             <exception cref="T:System.ArgumentNullException">
             If either <paramref name="title"/> <paramref name="description"/>, 
             or <paramref name="operation"/> is <c>null</c>.
             </exception>
             <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException">
             If an ProgressCanceledException is thrown by the operation.
             This occurs when the user cancels the operation using the progress
             dialog.
             </exception>
             <exception cref="T:System.Reflection.TargetInvocationException">
             If any other (unhandled) exception is thrown by the operation.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             If a transaction on the document is in progress.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             If a nested call to ExecuteWithProgress is being made.
             </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ExecuteWithProgressOrSubtask(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)">
            <summary>
            Executes the with progress, or subtask if a progress is already started. 
            </summary>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ExecuteWithProgressCancelable(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation,System.Boolean)">
             <summary>
             Creates a new <see cref="T:Progress"/> object and executes the given 
             top-level <paramref name="operation"/> in the context of that
             progress. 
             </summary>
             <param name="title">A user-friendly title for the progress. 
             The title will be shown as the title of the progress. 
             The title may not be <c>null</c>.
             </param>
             <param name="description">
             A user-friendly description of what the operation performs. 
             The description is shown in the first line of the progress.
             The description may not be <c>null</c>.
             </param>
             <param name="operation">
             The operation to run while the progress is active.
             </param>
             <param name="showCancelButton">
             If true will display cancel button else if false the cancel button will not be visible.
             </param>
             <remarks>
             The <paramref name="operation"/>  and all of its sub tasks might be run in a
             worker thread depending on which type of application (Professional, Web Player)
             that hosts the current TIBCO Spotfire instance.
             
             Any dialogs that need to be shown during the <paramref name="operation"/> shall
             be prompted using the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.PromptService"/>. The PromptService requires
             the dialog to be modal.
            
             <para>
             Note that a call to this method is synchronous, that is,
             the call will not return until the operation and all of its sub tasks
             have finished, or if the user cancels the operation, or if an
             unhandled exception causes the operation to be canceled.
             </para>
             
             <para>The created <see cref="T:Progress"/> object is avaliable through the
             static property <see cref="P:ProgressService.CurrentProgress"/>.
             </para>
             
             <para>This method may be called on a background thread created by the threading
             framework in which case a background progress will be created.
             </para>
             </remarks>
             
             <exception cref="T:System.ArgumentNullException">
             If either <paramref name="title"/> <paramref name="description"/>, 
             or <paramref name="operation"/> is <c>null</c>.
             </exception>
             <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException">
             If an ProgressCanceledException is thrown by the operation.
             This occurs when the user cancels the operation using the progress
             dialog.
             </exception>
             <exception cref="T:System.Reflection.TargetInvocationException">
             If any other (unhandled) exception is thrown by the operation.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             If a transaction on the document is in progress.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             If a nested call to ExecuteWithProgress is being made.
             </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ExecuteWithBackgroundProgress(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)">
            <summary>
            Creates a new background progress and executes the given 
            <paramref name="operation"/> in the context of that
            progress. 
            </summary>
            <param name="title">A user-friendly title for the progress. 
            The title will be shown as the title of the progress. 
            The title may not be <c>null</c>.
            </param>
            <param name="description">
            A user-friendly description of what the operation performs. 
            The description is shown in the first line of the progress dialog.
            The description may not be <c>null</c>.
            </param>
            <param name="operation">
            The operation to run in the context of a progress.
            </param>
            <remarks>
            The <paramref name="operation"/>  and all of its sub tasks might be run in a
            worker thread depending on which type of application (Professional, Web Player)
            that hosts the current TIBCO Spotfire instance.
            
            <para>
            Note that a call to this method is synchronous, that is,
            the call will not return until the operation and all of its sub tasks
            have finished, or if the user cancels the operation, or if an
            unhandled exception causes the operation to be canceled.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If either <paramref name="title"/> <paramref name="description"/>, 
            or <paramref name="operation"/> is <c>null</c>.
            </exception>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressCanceledException">
            If an ProgressCanceledException is thrown by the operation.
            This occurs when the user cancels the operation using the progress
            dialog.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            If any other (unhandled) exception is thrown by the operation.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If a transaction on the document is in progress.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If a nested call to ExecuteWithProgress is being made.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ExecuteWithAsynchronousProgress(System.String,System.String,Spotfire.Dxp.Framework.Threading.WorkItem,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation)">
            <summary>
            Execute with asynchronous progress.
            </summary>
            <param name="title">The progress title.</param>
            <param name="description">The progress description.</param>
            <param name="workItem">The work item.</param>
            <param name="operation">The operation to perform.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.CheckInvokeNextAttemptOnUiThread">
            <summary>
            Check if there is an enqueued operation that needs to be dispatched on the UI thread and start
            the operation if possible.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ValidateExecuteWithProgressMayStart">
            <summary>
            Validate that execute with progress may start.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.CreateCurrentProgressCancellationToken(System.Threading.CancellationToken@)">
            <summary>
            Creates a CancellationTokenSource that will be canceled if the progress is canceled.
            The caller is responsible for disposing the returned object to cleanup.
            </summary>
            <param name="token">The token.</param>
            <returns>
            The created cancellation token source.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.CancelIfNotValidInLive(System.Int32)">
            <summary>
            Cancels the progress of the calling thread if the specified generation value is not valid in live.
            </summary>
            <param name="lastGenerationOfDependingValue">The last generation of the value that the calling thread depends on.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.SetCommandHistory(Spotfire.Dxp.Framework.Commands.CommandHistory)">
            <summary>
            Set the command history to be the current command history.
            </summary>
            <param name="commandHistory">The command history.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.ClearCommandHistory">
            <summary>
            Clear the command history set on this progress service.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.MarkAsNotInProgress">
            <summary>
            Use with caution. Used by the ProgressDialog to signal that an operation is done.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.Spawn(System.String,System.String,Spotfire.Dxp.Framework.ApplicationModel.ProgressOperation,System.Boolean)">
            <summary>
            Executes the specified operation in a possible new thread.
            </summary>
            <param name="title">The title of the operation.</param>
            <param name="description">The description of the operation.</param>
            <param name="operation">The progress operation.</param>
            <param name="showCancelButton">if set to <c>true</c> will show cancel button. Default value is true. Note that this is currently only applicable for forms</param>
            <returns>
            Any exception that might have been thrown in the worker
            is returned.
            </returns>
            <remarks>
            Note that setting showCalcelButton to false is only implemented for forms.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressService.OnAsynchronousProgressesChanged">
            <summary>
            Raise the OnAsynchronousProgressesChanged event.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle">
            <summary>
            Represents a handle to a progress, <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressService"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle.progress">
            <summary>
            The progress.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle.#ctor(Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle"/> class.
            </summary>
            <param name="progress">The progress.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle.Title">
            <summary>Gets the title of this <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle"/>. The title
            of a Progress is a user-friendly description, which is represented
            in the user interface associated with the operation progress
            (e.g. a progress dialog).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle.Description">
            <summary>Gets the description of this <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle"/>. The
            description of a Progress is a user-friendly description, which is
            represented in the user interface associated with the operation
            progress (e.g. a progress dialog).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle.IsCanceled">
            <summary>Gets a value indicating whether cancellation has been requested for this instance or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle.CurrentSubTask">
            <summary>
            Gets the current sub task.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ProgressHandle.Cancel">
            <summary>Flag the progress for cancellation. Note that the progress operation
            might not be canceled immediately.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.DeterminateProgressFormatter">
            <summary>A base class for percentage progress formatters.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.DeterminateProgressFormatter.FormatProgress(System.Int64,System.Int64)">
            <summary>
            Method for formatting the progress.
            </summary>
            <param name="completedSteps">The number of completed steps.</param>
            <param name="totalSteps">The total number of steps.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.IndeterminateProgressFormatter">
            <summary>
            A base class for indeterminate progress formatters.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.IndeterminateProgressFormatter.FormatProgress(System.Int64)">
            <summary>
            Method for formatting the progress.
            </summary>
            <param name="completedSteps">The number of completed steps.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.SimpleDeterminateProgressFormatter">
            <summary>A class for simple formatting.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SimpleDeterminateProgressFormatter.#ctor(System.String)">
            <summary>
            Create a simple formatter.
            </summary>
            <param name="formatString">The format string used for progress.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SimpleDeterminateProgressFormatter.FormatProgress(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.SimpleIndeterminateProgressFormatterWithThousandsSeparator">
            <summary>A class for simple formatting.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SimpleIndeterminateProgressFormatterWithThousandsSeparator.#ctor(System.String)">
            <summary>
            Create a simple formatter.
            </summary>
            <param name="formatString">The format string used for progress.
            Should be a localized string on the form "Processed {0} items.".</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SimpleIndeterminateProgressFormatterWithThousandsSeparator.#ctor(System.String,System.Boolean)">
            <summary>
            Create a simple formatter.
            </summary>
            <param name="formatString">The format string used for progress.
            Should be a localized string on the form "Processed {0} items.".</param>
            <param name="formatZeroProgress">Whether 0 completed steps should be formatted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SimpleIndeterminateProgressFormatterWithThousandsSeparator.FormatProgress(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.SimpleIndeterminateProgressFormatter">
            <summary>A class for simple formatting.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SimpleIndeterminateProgressFormatter.#ctor(System.String)">
            <summary>
            Create a simple formatter.
            </summary>
            <param name="formatString">The format string used for progress. 
            Should be a localized string on the form "Processed {0} items.".</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.SimpleIndeterminateProgressFormatter.FormatProgress(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.BytesPercentageProgressFormatter">
            <summary>Formats progress of processed bytes. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.BytesPercentageProgressFormatter.#ctor(System.String)">
            <summary>
            Create a bytes progress formatter.
            </summary>
            <param name="formatString">The format string used for progress.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.BytesPercentageProgressFormatter.FormatProgress(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.BytesIndeterminateProgressFormatter">
            <summary>Formats progress of processed bytes. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.BytesIndeterminateProgressFormatter.#ctor(System.String)">
            <summary>Create a bytes progress formatter.
            </summary>
            <param name="formatString">The format string used for progress.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.BytesIndeterminateProgressFormatter.FormatProgress(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.PromptCanceledException">
            <summary>The exception that is thrown to indicate that a user has
            canceled a prompt.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptCanceledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PromptCanceledException"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptCanceledException.#ctor(System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.PromptCanceledException"/> class.
            </summary>
            <param name="message">The error message that explains the reason
            for the exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptCanceledException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.PromptCanceledException"/> class with a 
            specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason
            for the exception.</param>
            <param name="innerException">The exception that is the cause of the 
            current exception. If the <paramref name="innerException"/> 
            parameter is not a null reference, the current exception is raised 
            in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.PromptRequest">
            <summary>
            A request for prompting.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptRequest.#ctor(System.Object)">
            <summary>
            Create a prompt request.
            </summary>
            <param name="promptModel">
            The prompt model to be used in the prompt request.
            </param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.PromptResult">
            <summary>
            Specifies identifiers that indicate the result of a prompt operation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.PromptResult.Cancel">
            <summary>
            The receiver of the prompt canceled or using other means
            aborted the operation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.PromptResult.Ok">
            <summary>
            The receiver of the prompt completed the operation.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.PromptMode">
            <summary>
            Specifies identifiers that represent the mode of prompting.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.PromptMode.NotAllowed">
            <summary>
            Prompting is not allowed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.PromptMode.Allowed">
            <summary>
            Prompting is allowed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.PromptMode.Always">
            <summary>
            Prompting shall be performed even if it is not necessary to interact 
            with the user to obtain information.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.PromptService">
            <summary>
            Allows the user to be prompted for input to various operations.
            </summary>
            
            <remarks>
            This service is 
            always available in the application but the calls to <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.PromptService.Prompt(System.Object,System.Type)"/> 
            will throw exceptions if the application is running in a mode in which
            it is not possible to interact with the user (for example headless mode).
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptService.#ctor(System.IServiceProvider)">
            <summary>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.PromptService.PromptMode">
            <summary>
            Gets the mode in which this service currently operates.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.PromptService.IsPromptingAllowed">
            <summary>Gets whether or not prompting is allowed in the running application instance.
            If this method returns false, calls to <see cref="M:Spotfire.Dxp.Framework.ApplicationModel.PromptService.Prompt(System.Object,System.Type)"/> will 
            fail by throwing an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <value><c>true</c> if prompting is allowed; <c>false</c> otherwise.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptService.Prompt(System.Object)">
            <summary>Prompts the user for input by showing a modal dialog operating
            on the specified <paramref name="promptModel"/>. A view of type 
            <see cref="T:System.Windows.Forms.Form"/> must previously have been
            registered for the type of the specified <paramref name="promptModel"/> 
            by overriding
            <see cref="M:Spotfire.Dxp.Application.Extension.AddIn.RegisterViews(Spotfire.Dxp.Application.Extension.AddIn.ViewRegistrar)"/>.
            </summary>
            <param name="promptModel">The model object that shall operated on by 
            the dialog that interacts with the user.</param>
            <exception cref="T:System.InvalidOperationException">If prompting is not allowed
            or if the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry"/> does not have a registered view
            for the specified <paramref name="promptModel"/>.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptService.Prompt(System.Object,System.Type)">
            <summary>Prompts the user for input by showing a modal dialog operating
            on the specified <paramref name="promptModel"/>. A view of type 
            <see cref="T:System.Windows.Forms.Form"/> must previously have been
            registered for the specified <paramref name="modelType"/> in the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry"/>.
            </summary>
            <param name="modelType">The model type that the dialog view has been 
            registered for in the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry"/>.</param>
            <param name="promptModel">The model object that shall operated on by 
            the dialog that interacts with the user.</param>
            
            <exception cref="T:System.InvalidOperationException">If prompting is not allowed, 
            that is <see cref="P:Spotfire.Dxp.Framework.ApplicationModel.PromptService.IsPromptingAllowed"/> returns <c>false</c>.</exception>
            <exception cref="T:System.InvalidOperationException">If the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry"/> does not have a registered view
            for the specified <paramref name="modelType"/>.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptService.ExecuteInPromptMode(Spotfire.Dxp.Framework.ApplicationModel.PromptMode,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Executes the specified executor in the specified promptMode. 
            The current PromptMode is restored when the execution has completed.
            </summary>
            <param name="promptMode">The prompt mode.</param>
            <param name="executor">The executor.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService">
            <summary>
            Provides information about the Spotfire Server, such as its 
            URL, whether or not it is currently available, etc. 
            </summary>
            <remarks>
            An instance of this class is always available as an application level
            service and can be accessed using one of the <c>GetService</c> methods
            available in the caller context.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.Logger">
            <summary>
            The ConnectivityService logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.serverInfo">
            <summary>
            The server information
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.enableNetworkAvailabilityCheck">
            <summary>
            Should network availability check be enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.serverAvailabilityMonitor">
            <summary>
            The Spotfire Server and network availability monitor.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.serverAvailabilityChanged">
            <summary>
            The server availability changed event handler.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.serverless">
            <summary>
            Indicates whether the services is not connected.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.ServerAvailabilityChanged">
            <summary>
            Event that is raised when the servers online status is changed.
            The online status can be fetched from <see cref="P:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.IsOnline"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.IsOnline">
            <summary>
            Gets whether or not the application is online.
            </summary>
            <value><c>true</c> if the application is currently connected to
            a Spotfire Server; otherwise <c>false</c>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.ServerUri">
            <summary>
            Gets the URL of the Spotfire Server currently being 
            connected to.
            </summary>
            <value>
            The URL of the Spotfire Server or <c>null</c>
            if the user is currently working offline.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.WebPlayerBaseUri">
            <summary>
            Gets the web player base uri, e.g http://www.example.com/spotfire/wp/
            </summary>
            <remarks>If this is called from the backend (i.e a worker) it will use the public
            endpoint as defined by the Spotfire Server manifest and if the Spotfire server ; otherwise the <see cref="P:Spotfire.Dxp.Services.ServerInformation.BaseUri"/>
            will be used.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.Server">
            <summary>
            Gets an object containing information regarding the currently active
            server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.Area">
            <summary>
            The area the user has chosen/been assigned.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.IsConnectedAsWorker">
            <summary>
            Gets a value indicating whether the service is connected as a worker process.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.IsUnauthorized">
            <summary>
            Gets whether or not the user is unauthorized due to password changes or other things..
            </summary>
            <value><c>true</c> if the user is currently unauthorized to
            a Spotfire Server; otherwise <c>false</c>.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.ResumePinging">
            <summary>
            Resumes ping operation if possible and applicable.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.GetStatusBundle">
            <summary>
            Gets a bundle containing the text and tooltip of the online status used in the interface.
            </summary>
            <returns>
            The status bundle.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.FixWinInetCookies">
            <summary>Fixes the WinInet (IE) cookies when using a WebBrowser control.
            Wrap this around the dispose of the control.</summary>
            <returns>The disposable object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.CreateOfflineService">
            <summary>
            Creates a new <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService"/> for use within
            a Windows Forms environment when the user is working in offline mode.
            </summary>
            <returns>
            A new instance of class <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService"/>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.CreateService(Spotfire.Dxp.Services.ServerInformation,System.Boolean,Spotfire.Dxp.Services.SpotfirePrincipal)">
            <summary>
            Creates a new <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService"/> for use within
            a web server environment.
            </summary>
            <param name="serverInfo">
            The object describing the Spotfire Server.
            </param>
            <param name="enableNetworkAvailabilityCheck">
            <c>true</c> if this class shall monitor the network interfaces of
            the destination computer and fire the 
            <see cref="E:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.ServerAvailabilityChanged"/> event; <c>false</c> otherwise.
            It is recommended to pass <c>false</c> when the application is
            running in server environments and <c>true</c> when running in
            client (Windows Forms) environments.
            </param>
            <param name="principal">The principal used for monitoring server availability.</param>
            <returns>
            A new instance of class <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService"/>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.CreateWorkerService(Spotfire.Dxp.Services.ServerInformation)">
            <summary>
            Creates a new <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService"/> for use within
            a worker environment.
            </summary>
            <param name="serverInfo">The object describing the Spotfire Server.</param>
            <returns> A new instance of class <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService"/>. </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.System#IDisposable#Dispose">
            <summary>
            The dispose method.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.FixWinInetCookiesContext">
            <summary>Class to use when fixing WinInet cookies when closing a browser </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.FixWinInetCookiesContext.cookieString">
            <summary>The cookie string set in constructor.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.FixWinInetCookiesContext.serverCookieUrl">
            <summary>The URL to the servers cookie root (http://spotfireServer/spotfire/).</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.FixWinInetCookiesContext.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.FixWinInetCookiesContext"/> class.</summary>
            <param name="service">The connectivity service.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService.FixWinInetCookiesContext.Dispose">
            <summary>Restore the cookies saved in the constructor.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.PromptTimeoutException">
            <summary>The exception that is thrown to indicate that a user has
            experienced a timeout.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PromptTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptTimeoutException.#ctor(System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.PromptTimeoutException"/> class.
            </summary>
            <param name="message">The error message that explains the reason
            for the exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.PromptTimeoutException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.PromptTimeoutException"/> class with a 
            specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason
            for the exception.</param>
            <param name="innerException">The exception that is the cause of the 
            current exception. If the <paramref name="innerException"/> 
            parameter is not a null reference, the current exception is raised 
            in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.Subtask">
            <summary>Used to log the progress of an operation.
            </summary>
            <remarks>This class needs to be visible to the progress UI, for example progress dialog.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subtask.title">
            <summary>
            The title of the progress.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subtask.startTimeUtc">
            <summary>
            The UTC time when the progress started.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Subtask.parentScope">
            <summary>
            The parent of this sub task.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subtask.Title">
            <summary>Gets the title of the progress.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subtask.StartTimeUtc">
            <summary>
            Gets the start time of this operation as UTC.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subtask.StartTimeLocal">
            <summary>
            Gets the start time of this operation as local time.
            Use StartTimeUtc if possible for better performance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subtask.ProgressDescription">
            <summary>
            Gets a string which describes the progress.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Subtask.ParentScope">
            <summary>
            Gets or sets the parent scope for this sub task.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Subtask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.Subtask"/> class.
            </summary>
            <param name="title">The title of the task. The title must have been validated as it may not be null.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.SubTaskHandle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ParameterManager">
            <summary>
            The <c>ParameterManager</c> manages the parameters associated with a document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ParameterManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ParameterManager"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ParameterManager.TryGetParameterValue``1(System.String,``0@)">
            <summary>
            Gets the value assigned to the parameter identified by the given <paramref name="parameterName"/>.
            </summary>
            <typeparam name="T">The type of the parameter value. The supported types are: 
            <c>string</c>, <c>int</c>, <c>long</c>, <c>decimal</c>, <c>float</c>, <c>double</c>, <c>DateTime</c>, <c>TimeSpan</c>
            and <c>bool</c> or a generic list (<c>IList`1</c>) of any of these types.</typeparam>
            <param name="parameterName">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns><c>true</c> if the parameter exists and has a value that can be converted to the type given by <typeparamref name="T"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.Notification">
            <summary>
            Represents a notification that contains information about an event that occured.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Notification.notificationType">
            <summary>
            The type of the notification.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Notification.title">
            <summary>
            The title of the notification.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Notification.summary">
            <summary>
            A summary description of the notification.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ApplicationModel.Notification.details">
            <summary>
            The detailed information about the notification.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.Notification.#ctor(Spotfire.Dxp.Framework.ApplicationModel.NotificationType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.Notification"/> class.
            </summary>
            <param name="notificationType">Type of the notification.</param>
            <param name="title">The title.</param>
            <param name="summary">The summary.</param>
            <param name="details">The details.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Notification.NotificationType">
            <summary>
            Gets the notification type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Notification.Title">
            <summary>
            Gets the notification title.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Notification.Summary">
            <summary>
            Gets the summary.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Notification.HasSummary">
            <summary>
            Gets a value indicating whether the notification has a summary or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Notification.Details">
            <summary>
            Gets the detailed information about the notification.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ApplicationModel.Notification.HasDetails">
            <summary>
            Gets a value indicating whether the notification has a summary or not.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry">
            <summary>
            The ViewRegistry maps model types to view types for a given category of view type.
            </summary>
            <remarks>
            A view of a model object is typically used to display the state of the model object and to 
            translate the interaction of the user to manipulations of the model object. Views are registered 
            by overriding the 
            <see cref="M:Spotfire.Dxp.Application.Extension.AddIn.RegisterViews(Spotfire.Dxp.Application.Extension.AddIn.ViewRegistrar)"/>
            method of the <see cref="T:Spotfire.Dxp.Application.Extension.AddIn"/> class. 
            <para>
            The ViewRegistry offers support for creation of view object given a model object and a view type. When a
            view object is created, the ViewRegistry passes the model object as an argument to the constructor and thus
            allows the view object to bind to the model object. 
            The ViewRegistry does not keep track of the view created instances.
            <para>
            The ViewRegistry is typically used by view object to create cildren views of 
            model object deeper down in the model structure. For instance, the view object that displays a page 
            in the Windows.Forms view uses the ViewRegistry to create Windows.Forms.Control-views of the visualizations 
            on the page.
            </para>
            </para>
            <para>
            The ViewRegistry is available as a service.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.#ctor">
            <summary>Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.RegisterViewType(System.Type,System.Type,System.Type)">
            <summary>
            Registers a View type for a Model Object type. The <paramref name="viewBaseType"/>
            and <paramref name="modelType"/> together will uniquely identify the 
            <paramref name="viewType"/> in the registry.
            </summary>
            <param name="viewBaseType">Base type or interface for the <paramref name="viewType"/>.</param>
            <param name="modelType">The Model Object type.</param>
            <param name="viewType">The View type. Must be assignable to <paramref name="viewBaseType"/>.</param>
            <exception cref="T:System.InvalidOperationException">If the combination has already been registered.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="viewType"/> is not assignable to 
            <paramref name="viewBaseType"/>. If any argument is null.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.RegisterViewFactory``2(System.Func{``1,``0})">
            <summary>
            Registers a View factory method for a Model type and view base type.
            </summary>
            <typeparam name="TModel">The model type.</typeparam>
            <typeparam name="TViewBase">The view base type.</typeparam>
            <param name="factory">The factory method.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.Contains(System.Type)">
            <summary>
            Returns true if <paramref name="modelType"/> is registered in the ViewRegistry.
            </summary>
            <param name="modelType">The model type to look for.</param>
            <returns>True if found, false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.LookupViewType(System.Type,System.Type)">
            <summary>
            Looks up a View type for a Model Object type and View base or interface type.
            </summary>
            <param name="viewBaseType">The View base or interface type to search for.
            The returned View type will be assignable to this type.</param>
            <param name="modelType">The Model Object type to search for.</param>
            <returns>The View type registered for the parameters, if found; otherwise <c>null</c>.
            The returned View type will be assignable to <paramref name="viewBaseType"/></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.CreateView``1(System.Object)">
            <summary>
            Creates and binds a view object of type <typeparamref name="T"/> to the specified 
            <paramref name="model"/> object.
            </summary>
            <param name="model">The model object to be bound to the returned view. 
            Its type will be used when searching for the view.
            It will be supplied as the argument to the view's constructor.
            </param>
            <typeparam name="T">The view base or interface type to search for.
            The type to cast the returned view to.</typeparam>
            <returns>A view object bound to <paramref name="model"/>, or null if none is found or if the
            created view cannot be casted to <typeparamref name="T"/> (it will be created anyway,
            if possible).
            </returns>
            <remarks>
            The view found in the register must have a public constructor taking one 
            argument of <paramref name="model"/> type.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If the required constructor cannot be
            found.</exception>
            <exception cref="T:System.Exception">If the view's constructor throws an Exception that exception
            will be re-thrown. If the view cannot be constructed for other reasons.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.CreateView(System.Type,System.Object)">
            <summary>
            Creates and binds a view object of the specified <paramref name="viewBaseType"/> type to the specified 
            <paramref name="model"/> object.
            </summary>
            <param name="viewBaseType">The view type to search for.
            The returned view's type will be assignable to this type.</param>
            <param name="model">The model object to be bound to the returned view. 
            Its type will be used when searching for the view.
            It will be supplied as the argument to the view's constructor.</param>
            <returns>A view bound to <paramref name="model"/>, or null if none is found.
            The returned view's type will be assignable to <paramref name="viewBaseType"/></returns>
            <remarks>
            The View found in the register must have a public constructor taking one 
            argument of <paramref name="model"/> type.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If the required constructor cannot be
            found. If the view cannot be constructed for other reasons.</exception>
            <exception cref="T:System.Exception">If the view's constructor throws an Exception that exception
            will be re-thrown.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.CreateView``1(System.Object,System.Type)">
            <summary>
            Creates and binds a view object of type <typeparamref name="T"/> to the specified 
            <paramref name="model"/> object. The specified <paramref name="modelType"/> is used 
            to determine the type of the specified <paramref name="model"/> object when the view 
            type is looked up.
            </summary>
            <param name="model">The model object to be bound to the returned View.
            It will be supplied as the argument to the view's constructor.
            The model object must be assignable to the speficied <paramref name="modelType"/>.
            </param>
            <param name="modelType">The model object type used as key when looking up the view type.
            </param>
            <returns>A view bound to <paramref name="model"/>, or null if none is found or if the
            created view cannot be casted to <typeparamref name="T"/> (it will be created anyway,
            if possible).
            The returned view's type will be assignable to <typeparamref name="T"/>
            </returns>
            <remarks>
            The view found in the register must have a public constructor taking one 
            argument of type <paramref name="modelType"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If the required constructor cannot be
            found.</exception>
            <exception cref="T:System.Exception">If the view's constructor throws an Exception that exception
            will be re-thrown. If the view cannot be constructed for other reasons.</exception>
            <typeparam name="T">The view base or interface type to search for.
            The type to cast the returned view to.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.CreateView(System.Type,System.Object,System.Type)">
            <summary>
            Lookups, creates and binds a View to a Model Object.
            </summary>
            <param name="viewBaseType">The View base or interface type to search for.
            The returned View's type will be assignable to this type.</param>
            <param name="model">The Model Object to be bound to the returned View.
            This will be supplied as the argument to the View's constructor.</param>
            <param name="modelType">The Model Object type to search for.</param>
            <returns>A View bound to <paramref name="model"/>, or null if none is found.
            The returned View's type will be assignable to <paramref name="viewBaseType"/></returns>
            <remarks>
            The View found in the register must have a public constructor taking one 
            argument of <paramref name="model"/> type.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If the required constructor cannot be
            found or if the View's constructor throws an Exception.</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="model"/>'s type is not
            assignable to <paramref name="modelType"/>. If any argument is null.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.ValidateConstructor(System.Type,System.Type)">
            <summary>
            Validates a constructor. It must be possible to construct a view with the
            model as argument.
            </summary>
            <param name="viewType"></param>
            <param name="modelType"></param>
            <returns>The ConstructorInfo for the successfully
            validated constructor.</returns>
            <exception cref="T:System.ArgumentException">If the valid constructor is not found.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.ValidateAssignable(System.Type,System.Type)">
            <summary>
            Checks if the derived type is assignable to the base type.
            </summary>
            <exception cref="T:System.ArgumentException">If the derived type is not assignable to the base type.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry.TypePair">
            <summary>
            Holds a pair of two types, to be used as a key in hashtables.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Cef.CefPreferences">
            <summary>
            Represents the preferences that controls the CEF runtime.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Cef.CefPreferences.disableHardwareAcceleration">
            <summary>
            The disable hardware acceleration property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Cef.CefPreferences.exportRendererTimeoutMs">
            <summary>
            The export renderer timeout property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Cef.CefPreferences.ignoreGpuBlacklist">
            <summary>
            The ignore gpu blacklist property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Cef.CefPreferences.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Cef.CefPreferences"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefPreferences.Category">
            <inheritdoc/> 
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefPreferences.DisableHardwareAcceleration">
            <summary>
            Gets a value indicating whether hardware acceleration should be disabled.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefPreferences.ExportRendererTimeoutMs">
            <summary>
            Gets the offscreen rendering timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefPreferences.IgnoreGpuBlacklist">
            <summary>
            Gets a value indicating whether the GPU blacklist should be ignored.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefPreferences.SubCategory">
            <inheritdoc/> 
        </member>
        <member name="T:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions">
            <summary>
            Represents options for the Chromium Embedded Framework.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.DefaultExportRendererTimeoutMs">
            <summary>
            The default offscreen rendering timeout in milliseconds.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.FileName">
            <summary>
            The file name of settings on disk.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.Log">
            <summary>
            The logger instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.store">
            <summary>
            The bundle with settings. Access via property. Initialized lazy.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.DisableD3D11">
            <summary>
            Gets a value indicating whether Direct3D 11 should be disabled.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.DisableHardwareAcceleration">
            <summary>
            Gets or sets a value indicating whether hardware acceleration should be disabled (CEF will run without gpu process).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.ExportRendererTimeoutMs">
            <summary>
            Gets the offscreen rendering timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.IgnoreGpuBlacklist">
            <summary>
            Gets a value indicating whether the GPU blacklist should be ignored.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.MonitorShutdown">
            <summary>
            Gets a value indicating whether to monitor shutdown and kill any lingering CEF processes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.OffScreenDebugFolder">
            <summary>
            Gets the off screen debug folder path.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.RemoteDebuggingPort">
            <summary>
            Gets the remote debugging port.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.Store">
            <summary>
            Gets the bundle with settings.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.GetAppDataPath">
            <summary>
            Gets the CEF app data path.
            </summary>
            <returns>
            The CEF app data path.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.SynchronizeWithPreferences(Spotfire.Dxp.Framework.Cef.CefPreferences,Spotfire.Dxp.Framework.ApplicationModel.NotificationService)">
            <summary>
            Synchronizes the local settings with the server preferences.
            </summary>
            <param name="preferences">The preferences.</param>
            <param name="notificationService">The notification service.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.InitializeSettings">
            <summary>
            Initialzes the settings bundle, either reading it from disk or creating an empty default.
            </summary>
            <returns>
            The bundle with settings.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.Save">
            <summary>
            Saves the bundle to disk using the <see cref="F:Spotfire.Dxp.Framework.Cef.CefRuntimeOptions.FileName"/>.
            </summary>
            <returns>
              <c>True</c> if successfully saved to disk.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator">
            <summary>
            A transaction accumulator for the active transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.hiding">
            <summary>
            A flag signifying whether the accumulator hides (makes invisible)
            the commands that are added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.internalTransactionAcummulators">
            <summary>
            A stack transaction accumulators which corresponds to nested internal transactions. The purpose of this stack is to be able to rollback an nested internal transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.isExecutingCommand">
            <summary>
            A flag indicating whether the accumulator is executing a command at the moment.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.open">
            <summary>
            A flag signifying whether the accumulator is open.
            That is if it is currently accumulating.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.transactionAcummulator">
            <summary>
            The transaction acummulator which contains the commands that are not inside a nested internal transaction.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.CommandCount">
            <summary>
            Gets the count of commands in this accumulator.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.Hiding">
            <summary>
            Gets a value indicating whether this <see cref="T:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator"/> is hiding.
            That is, if the commands that are added are invisible from, an undo/redo perspective.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.IsOpen">
            <summary>
            Gets a value indicating whether this accumulator is open.
            </summary>
            <value>
              <c>true</c> if this instance is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.Close">
            <summary>
            Closes the accumulator and returns a <c>Transaction</c> with accumulated
            commands and events.
            </summary>
            <returns>The closed transaction.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.Execute(Spotfire.Dxp.Framework.Commands.UndoableCommandBase)">
            <summary>
            Execute a command and accumulate it
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.Open(System.Boolean)">
            <summary>
            Opens the accumulator so that it accumlates a new transaction.
            </summary>
            <param name="hiding">The hiding flag.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.BeginInternalTransaction">
            <summary>
            Begins an internal transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.BeginTransaction(System.Boolean)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="visible">if set to <c>true</c> [visible].</param>
            <returns>Returns the old hiding flag.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.CommitInternalTransaction">
            <summary>
            Commits an internal transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.EndTransaction(System.Boolean)">
            <summary>
            Ends the transaction.
            </summary>
            <param name="oldHiding">The old hiding flag.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.PopInternalTransaction">
            <summary>
            Pops the internal transaction at the top of the stack.
            </summary>
            <returns>The top most internal transaction</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ActiveTransactionAccumulator.ValidateOpen">
            <summary>
            Validates that the accumalor is open. 
            </summary>            
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.ApplicationThreadDocumentViewExecutionInfo">
            <summary>
            Represent the document view execution info associated with an application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ApplicationThreadDocumentViewExecutionInfo.analysisView">
            <summary>
            The analysis view.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ApplicationThreadDocumentViewExecutionInfo.#ctor(Spotfire.Dxp.Framework.ApplicationModel.AnalysisView,Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.ApplicationThreadDocumentViewExecutionInfo" /> class.
            </summary>
            <param name="analysisView">The analysis view.</param>
            <param name="executionState">State of the execution.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ApplicationThreadDocumentViewExecutionInfo.DocumentViewUnsafe">
            <summary>
            Gets the document view.
            </summary>
            <value>
            The document view.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.AssociationTable">
            <summary>
            This class is used to map document nodes to unique identifiers which are used
            in the file part of the stack. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.AssociationTable.nextId">
            <summary>
            The next available id.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.AssociationTable.idToNodeDict">
            <summary>
            A mapping from IDs to nodes
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.AssociationTable.nodeToIdDict">
            <summary>
            A mapping from nodes to IDs.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AssociationTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.AssociationTable"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AssociationTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.AssociationTable"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.AssociationTable.NextId">
            <summary>
            Gets the next free id.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AssociationTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AssociationTable.IdempotentAdd(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Adds the node to this AssociationTable if it does not already contain the node.
            </summary>
            <param name="node">The node to add.</param>
            <returns>The id of the node</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AssociationTable.Remove(Spotfire.Dxp.Framework.DocumentModel.Node,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int64,Spotfire.Dxp.Framework.DocumentModel.Node}})">
            <summary>
            Remove a node from the association table and add its entry (if any) to an
            association table slice.
            </summary>
            <param name="node">The node to remove.</param>
            <param name="associationTableSlice">The slice where the the removed entry will be added.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AssociationTable.GetNode(System.Int64)">
            <summary>
            Get the node associated with an id.
            </summary>
            <param name="nodeId">The id of the node</param>
            <returns>The associated node</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AssociationTable.ReleaseLastId">
            <summary>
            Release the last allocated id and remove its entry from the
            association table.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AssociationTable.Add(System.Collections.Generic.KeyValuePair{System.Int64,Spotfire.Dxp.Framework.DocumentModel.Node})">
            <summary>
            Add an entry to the association table.
            </summary>
            <param name="association">The association entry to add.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView">
            <summary>
            Holds information about which property that was changed including which document view that was active when the property changed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView.activeDocumentView">
            <summary>
            The active document view
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView.changedProperty">
            <summary>
            The changed property
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView.#ctor(Spotfire.Dxp.Framework.Commands.ChangedProperty,Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView"/> class.
            </summary>
            <param name="changedProperty">The changed property.</param>
            <param name="activeDocumentView">The active document view.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView.ActiveDocumentView">
            <summary>
            Gets the active document view.
            </summary>
            <value>
            The active document view.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView.ChangedProperty">
            <summary>
            Gets the changed property.
            </summary>
            <value>
            The changed property.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView.Equals(Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView)">
            <summary>
            Determines if this instance is equal to the other instance.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c>, if they are equal.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionInfo">
            <summary>
            Represent the document view execution info.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionInfo.executionState">
            <summary>
            The execution state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionInfo.#ctor(Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionInfo"/> class.
            </summary>
            <param name="executionState">State of the execution.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionInfo.DocumentViewUnsafe">
            <summary>
            Gets the document view.
            </summary>
            <value>
            The document view.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionInfo.DocumentView">
            <summary>
            Gets the document view.
            </summary>
            <value>
            The document view.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionInfo.GetDocumentView(Spotfire.Dxp.Framework.Commands.DocumentViewManager)">
            <summary>
            Gets the document view.
            </summary>
            <param name="documentViewManager">The document view manager.</param>
            <returns>The document view.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState">
            <summary>
            Represents the execution state for document views.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState.Normal">
            <summary>
            Normal execution.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState.ExecutingInternalEventHandlerWithoutView">
            <summary>
            Executing an internal event handler without view.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState.ExecutingInvariantKeeper">
            <summary>
            Executing an invariant keeper
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState.EvaluatingRuntimeProperty">
            <summary>
            Evaluating a runtime property
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey">
            <summary>
            Represents a document view key, which is used as a key to the multiplexor in a view property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewKey.RootDocumentViewKeyId">
            <summary>
            The root document view key identifier.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewKey.children">
            <summary>
            The children document views.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewKey.id">
            <summary>
            The id of the document view key.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewKey.parent">
            <summary>
            The parent document view key.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewKey.#ctor(System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewKey.Children">
            <summary>
            Gets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewKey.Id">
            <summary>
            Gets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewKey.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewKey.CreatePersistedDocumentViewKey">
            <summary>
            Creates the persisted document view key.
            </summary>
            <returns>The created persisted document view key</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewKey.AddChild(Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Adds the child.
            </summary>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewKey.IsDescendantOf(Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Determines whether this document view key is a descendant of the specified document view key.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <returns><c>true</c>, if this view key is a desenadant of the specified view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewKey.GetSingleRootDocumentViewKeyEntry``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,``0})">
            <summary>
            Gets the single root document view key entry.
            </summary>
            <typeparam name="T">The type of the entry</typeparam>
            <param name="viewKeyMultiplexor">The view key multiplexor.</param>
            <returns>The entry.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.DocumentViewKeyState">
            <summary>
            The state that is associated with a <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey"/> that is transferred in scheduled updates.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewKeyState.id">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewKeyState.parentId">
            <summary>
            The parent identifier.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewKeyState.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKeyState"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="parentId">The parent identifier.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewKeyState.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewKeyState.ParentId">
            <summary>
            Gets the parent identifier.
            </summary>
            <value>
            The parent identifier.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.DocumentViewManager">
            <summary>
            Manages the document views.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.multipleViewsEnabled">
            <summary>
            A flag indicating whether multiple views are enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.strictChecks">
            <summary>
            A flag indicating if we should do strict runtime validation checks.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.applicationThread">
            <summary>
            The application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.allDocumentViews">
            <summary>
            All document views that exists or has existed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.documentViewKeys">
            <summary>
            The document view keys.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.documentViews">
            <summary>
            The document views that exists.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.unattachedDocumentViews">
            <summary>
            The unattached document views.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.defaultDocumentView">
            <summary>
            The default document view.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.nextDocumentViewId">
            <summary>
            The next document view identifier to use.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.nextDocumentViewKeyId">
            <summary>
            The next document view key identifier to use.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewManager.currentSnapshot">
            <summary>
            The current snapshot of the document view manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewManager" /> class.
            </summary>
            <param name="multipleViewsEnabled">if set to <c>true</c> then multiple views are enabled.</param>
            <param name="strictChecks">if set to <c>true</c> then perform strict runtiem validattion checks.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.List{Spotfire.Dxp.Framework.ApplicationModel.AnalysisView},System.Collections.Generic.List{Spotfire.Dxp.Framework.Commands.PersistedAnalysisView},Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewManager"/> class.
            </summary>
            <param name="multipleViewsEnabled">if set to <c>true</c> [multiple views enabled].</param>
            <param name="strictChecks">if set to <c>true</c> [strict checks].</param>
            <param name="analysisViews">The analysis views.</param>
            <param name="persistedAnalysisViews">The persisted analysis views.</param>
            <param name="persistedDocumentViewManager">The persisted document view manager.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewManager.CurrentSnapshot">
            <summary>
            Gets the current snapshot of the document view manager.
            </summary>
            <value>
            The current snapshot.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewManager.AllDocumentViews">
            <summary>
            Gets all document views that exists or has existed.
            </summary>
            <value>
            All document views.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewManager.DocumentViews">
            <summary>
            Gets the document views.
            </summary>
            <value>
            The document views.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewManager.MultipleViewsEnabled">
            <summary>
            Gets a value indicating whether multiple views are enabled.
            </summary>
            <value>
            <c>true</c> if multiple views are enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewManager.DefaultDocumentView">
            <summary>
            Gets or sets the default document view.
            </summary>
            <value>
            The default document view.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetRawDefaultDocumentView">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.ForEachDocumentView(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetCurrentDocumentViewOrDefaultForPropertyGetOrSet">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetDefaultDocumentViewForAddExternalEvent">
            <summary>
            Gets the default document view for add external event.
            </summary>
            <returns>The default document view, or <c>null</c> if no view exists.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.Create(System.Boolean)">
            <summary>
            Creates a document view manager.
            </summary>
            <param name="multipleViewsEnabled">if set to <c>true</c> then multiple views are enabled.</param>
            <returns>The created document view manager</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.CreatePersistedDocumentViewManager">
            <summary>
            Creates a persisted document view manager.
            </summary>
            <returns>The created persisted document view manager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetDefaultDocumentView">
            <summary>
            Gets the default document view.
            </summary>
            <returns>The default view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.AttachInitialDocumentView">
            <summary>
            Attaches the initial document view.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.AttachUnattachedDocumentViews">
            <summary>
            Attaches the unattached document views.
            </summary>
            <returns>A list of the views that were attached.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetFirstAttachedDocumentView">
            <summary>
            Gets the first attached document view.
            </summary>
            <returns>The first attached view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.AddView(Spotfire.Dxp.Framework.DocumentModel.DocumentView,Spotfire.Dxp.Framework.ApplicationModel.AnalysisView)">
            <summary>
            Adds a view by spawning the specified parent view and associates it to the specified analysis view.
            </summary>
            <param name="parent">The parent.</param>
            <param name="analysisView">The analysis view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.ApplyDocumentViewsState(Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection)">
            <summary>
            Applies the state of the document views.
            </summary>
            <param name="documentViewStateCollection">The document view state collection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.CreateDocumentViewsState">
            <summary>
            Creates the state of the document views.
            </summary>
            <returns>The created state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetDocumentView(System.Int32)">
            <summary>
            Gets the document view with the specified id.
            </summary>
            <param name="documentViewId">The document view identifier.</param>
            <returns>The document view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetDocumentViewFromAllOrUnattached(System.Int32)">
            <summary>
            Gets the document view from the list of all document views, including removed views.
            </summary>
            <param name="documentViewId">The document view identifier.</param>
            <returns>The document view with the specified id.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetDocumentViewKey(System.Int32)">
            <summary>
            Gets the document view key with the specified id.
            </summary>
            <param name="documentViewKeyId">The document view key identifier.</param>
            <returns>The document view key with the specified id.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetSingleScheduledUpdateRefreshDocumentView">
            <summary>
            Gets the single scheduled update refresh document view.
            </summary>
            <returns>The single view</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetMasterDocumentView">
            <summary>
            Gets the master document view.
            </summary>
            <returns>The master document view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.RemoveView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Removes the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.RemoveUnattachedView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Removes an unattached view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.AddUnattachedView(Spotfire.Dxp.Framework.ApplicationModel.AnalysisView,Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread)">
            <summary>
            Adds an unattached view and associates it with the specified analysis view.
            </summary>
            <param name="analysisView">The analysis view.</param>
            <param name="applicationThread">The application thread.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.ValidateCanBeShared">
            <summary>
            Validates the document view manager can be shared.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.ReportIssue(System.String)">
            <summary>
            Reports a document view issue.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetLiveDocumentViewCurrentDefaultOrFirst">
            <summary>
            Gets the current document view, the default view, or the first created. 
            </summary>
            <returns>The live document view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetCurrentDocumentViewOrDefault">
            <summary>
            Gets the current document view or the default.
            </summary>
            <returns>The current view or the default.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.GetUnsafeCurrentDocumentViewOrDefault">
            <summary>
            Gets the current document view or the default, without checks. Use with care.
            </summary>
            <returns>The current view or the default.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.UpdateCurrentSnapshot">
            <summary>
            Updates the current snapshot of the document view manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewManager.InternalGetCurrentDocumentViewOrDefaultForPropertyGetOrSet">
            <summary>
            Gets the current document view for the purpose of getting or setting a view property.
            The purpose of this method is to generate appropriate exception error messages for get and set of a view property.
            </summary>
            <returns>The current document view</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.DocumentViewState">
            <summary>
            The state that is associated with a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentView"/> that is transferred in scheduled updates.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewState.id">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewState.documentViewKeyId">
            <summary>
            The document view keyid.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewState.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewState"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="documentViewKeyId">The document view keyid.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewState.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewState.DocumentViewKeyId">
            <summary>
            Gets the document view key id.
            </summary>
            <value>
            The document view key id.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection">
            <summary>
            The state that is associated with all instances of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentView"/> that is transferred in scheduled updates.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.nextDocumentViewKeyId">
            <summary>
            The next document view key identifier.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.nextDocumentViewId">
            <summary>
            The next document view identifier.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.documentViewKeyStates">
            <summary>
            The document view key states.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.allDocumentViewStates">
            <summary>
            All document view states.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.documentViewIds">
            <summary>
            The document view ids.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{Spotfire.Dxp.Framework.Commands.DocumentViewKeyState},System.Collections.Generic.List{Spotfire.Dxp.Framework.Commands.DocumentViewState},System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection"/> class.
            </summary>
            <param name="nextDocumentViewKeyId">The next document view key identifier.</param>
            <param name="nextDocumentViewId">The next document view identifier.</param>
            <param name="documentViewKeyStates">The document view key states.</param>
            <param name="allDocumentViewStates">All document view states.</param>
            <param name="documentViewIds">The document view ids.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.NextDocumentViewKeyId">
            <summary>
            Gets the next document view key identifier.
            </summary>
            <value>
            The next document view key identifier.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.NextDocumentViewId">
            <summary>
            Gets the next document view identifier.
            </summary>
            <value>
            The next document view identifier.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.DocumentViewKeyStates">
            <summary>
            Gets the document view key states.
            </summary>
            <value>
            The document view key states.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.AllDocumentViewStates">
            <summary>
            Gets all document view states.
            </summary>
            <value>
            All document view states.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection.DocumentViewIds">
            <summary>
            Gets the document view ids.
            </summary>
            <value>
            The document view ids.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.IDocumentViewManager">
            <summary>
            An interfacce for the live and snapshot implementation of the document view manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.IDocumentViewManager.GetCurrentDocumentViewOrDefaultForPropertyGetOrSet">
            <summary>
            Gets the current document view for the purpose of getting or setting a view property.
            The purpose of this method is to generate appropriate exception error messages for get and set of a view property.
            </summary>
            <returns>The current document view</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.IDocumentViewManager.GetRawDefaultDocumentView">
            <summary>
            Gets the raw default document view.
            </summary>
            <returns>The raw default document view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.IDocumentViewManager.ForEachDocumentView(System.Action)">
            <summary>
            Execute the specified action for each document view.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.IValiditySpanRestoreTarget">
            <summary>
            An interface for object that shoudl have their validty span restored at transient transaction roll back.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.IValiditySpanRestoreTarget.RestoreValiditySpan(Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Restores the validity span.
            </summary>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.NestedTransientTransactionContext">
            <summary>
            Holds structures and information needed to restore a nested transient transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.NestedTransientTransactionContext.outerTransientTransactionContext">
            <summary>
            The outer transient transaction context.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.NestedTransientTransactionContext.#ctor(System.Int32,Spotfire.Dxp.Framework.Commands.TransientTransactionContext,Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl,System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.NestedTransientTransactionContext" /> class.
            </summary>
            <param name="currentGenerationNumber">The current generation number.</param>
            <param name="outerTransientTransactionContext">The outer transient transaction context.</param>
            <param name="associatedTransactionHandle">The associated transaction handle.</param>
            <param name="nestingLevel">The nesting level.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.NestedTransientTransactionContext.TransientSnapshotDocument">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.NestedTransientTransactionContext.OnTransientTransactionCompleted">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.NestedTransientTransactionContext.AddStreamingPropertyCallback(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.NestedTransientTransactionContext.Release">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.NestedTransientTransactionContext.TryGetTransientSnapshot(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.Node@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext">
            <summary>
            Holds structures and information needed to restore an outermost transient transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.documentStateChangedNodes">
            <summary>
            The nodes that the DocumentState mechanism considered Changed at the start of the outermost transient transaction. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.documentStateNewNodes">
            <summary>
            The nodes that the DocumentState mechanism considered New at the start of the outermost transient transaction. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.rootNode">
            <summary>
            The root node, that is the document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.transientSnapshotDictionary">
            <summary>
            The dictionary of snapshot nodes for a transient transaction. The key is the live node; the value is the snapshot node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.transientSnapshotDocument">
            <summary>
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument"/> for a transient transaction. This is the snapshot of the document taken
            in startedInGeneration.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.streamingPropertyCallbacks">
            <summary>
            Callbacks for streaming properties that has postponed assignments during the transient transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.Create(Spotfire.Dxp.Framework.Commands.CommandHistory,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl)">
            <summary>
            Creates the an outer most transient transaction context.
            </summary>
            <param name="commandHistory">The command history.</param>
            <param name="node">The node.</param>
            <param name="associatedTransactionHandle">The associated transaction handle.</param>
            <returns>The created context.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.#ctor(System.Int32,Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl,Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext" /> class.
            </summary>
            <param name="currentGenerationNumber">The current generation number.</param>
            <param name="rootNode">The root node.</param>
            <param name="associatedTransactionHandle">The associated transaction handle.</param>
            <param name="transientSnapshotDocument">The transient snapshot document.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.TransientSnapshotDocument">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.OnTransientTransactionCompleted">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.AddStreamingPropertyCallback(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.Release">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.RestoreDocumentState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.OutermostTransientTransactionContext.TryGetTransientSnapshot(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.Node@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PersistedAnalysisView">
            <summary>
            A persisted analysis view. This is used for crash dumps.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedAnalysisView.documentViewid">
            <summary>
            The document view id for the analysis view.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedAnalysisView.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedAnalysisView"/> class.
            </summary>
            <param name="documentViewid">The document viewid.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedAnalysisView.DocumentViewid">
            <summary>
            Gets the document viewid.
            </summary>
            <value>
            The document viewid.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PersistedDocumentView">
            <summary>
            A persisted document view. This is used for crash dumps.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedDocumentView.documentViewKeyId">
            <summary>
            The id of the document view key.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedDocumentView.id">
            <summary>
            The id of the document view.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedDocumentView.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedDocumentView"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="documentViewKeyId">The document view key identifier.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedDocumentView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedDocumentView"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedDocumentView.DocumentViewKeyId">
            <summary>
            Gets the document view key identifier.
            </summary>
            <value>
            The document view key identifier.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedDocumentView.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedDocumentView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey">
            <summary>
            A persisted document view key. This is used for crash dumps.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey.id">
            <summary>
            The id of the document view key.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey.parentId">
            <summary>
            The document view key id of parent.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="parentId">The parent identifier.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey.ParentId">
            <summary>
            Gets the parent identifier.
            </summary>
            <value>
            The parent identifier.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager">
            <summary>
            A persisted document view manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.allDocumentViews">
            <summary>
            All document views.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.documentViewIds">
            <summary>
            The document view ids.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.documentViewKeys">
            <summary>
            The document view keys.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.nextDocumentViewId">
            <summary>
            The next document view identifier.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.nextDocumentViewKeyId">
            <summary>
            The next document view key identifier.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{Spotfire.Dxp.Framework.Commands.PersistedDocumentViewKey},System.Collections.Generic.List{Spotfire.Dxp.Framework.Commands.PersistedDocumentView},System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager"/> class.
            </summary>
            <param name="nextDocumentViewKeyId">The next document view key identifier.</param>
            <param name="nextDocumentViewId">The next document view identifier.</param>
            <param name="documentViewKeys">The document view keys.</param>
            <param name="allDocumentViews">All document views.</param>
            <param name="documentViewIds">The document view ids.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.AllDocumentViews">
            <summary>
            Gets all document views.
            </summary>
            <value>
            All document views.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.DocumentViewIds">
            <summary>
            Gets the document view ids.
            </summary>
            <value>
            The document view ids.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.DocumentViewKeys">
            <summary>
            Gets the document view keys.
            </summary>
            <value>
            The document view keys.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.NextDocumentViewId">
            <summary>
            Gets the next document view identifier.
            </summary>
            <value>
            The next document view identifier.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.NextDocumentViewKeyId">
            <summary>
            Gets the next document view key identifier.
            </summary>
            <value>
            The next document view key identifier.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedDocumentViewManager.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager">
            <summary>
            A snapshot of the document view manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager.defaultDocumentView">
            <summary>
            The default document view.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager.documentViews">
            <summary>
            The document views.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager.liveDocumentViewManager">
            <summary>
            The live document view manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentView,Spotfire.Dxp.Framework.DocumentModel.DocumentView[],Spotfire.Dxp.Framework.Commands.DocumentViewManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager"/> class.
            </summary>
            <param name="defaultDocumentView">The default document view.</param>
            <param name="documentViews">The document views.</param>
            <param name="liveDocumentViewManager">The live document view manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager.ForEachDocumentView(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager.GetCurrentDocumentViewOrDefaultForPropertyGetOrSet">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager.GetRawDefaultDocumentView">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager.InternalGetCurrentDocumentViewOrDefaultForPropertyGetOrSet">
            <summary>
            Gets the current document view for the purpose of getting or setting a view property.
            The purpose of this method is to generate appropriate exception error messages for get and set of a view property.
            </summary>
            <returns>The current document view</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.TransactionCompletedEventArgs">
            <summary>
            The event args for a CommandHistory.TransactionCompleted event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.TransactionCompletedEventArgs.WasHighlight">
            <summary>
            Gets a value indicating whether the transaction that has completed was a highlight transaction.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.TransactionCompletedEventArgs.WasStreaming">
            <summary>
            Gets a value indicating whether the transaction that has completed was a streaming transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransactionCompletedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.TransactionCompletedEventArgs" /> class.
            </summary>
            <param name="wasHighlight">if set to <c>true</c> the transaction that has completed was an invisible transaction.</param>
            <param name="wasStreaming">if set to <c>true</c> the transaction that has completed was a streaming transaction.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext">
            <summary>
            A context that contains information about a transient transaction that needs to be accessed from any thread..
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.instanceCount">
            <summary>
            A counter on the number of instances. This is used for testing and debugging purposes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.snapshotRefCount">
            <summary>
            A counter on the number of references from snapshots.
            This field is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.disposed">
            <summary>
            <c>true</c>, if this instance is disposed.
            This field is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.outerThreadSafeTransientTransactionContext">
            <summary>
            The context for the outer transient transaction, or <c>null</c>, if this is a top level transient transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.firstGeneration">
            <summary>
            The first generation of the transient transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.lastGeneration">
            <summary>
            The last generation of the transient transaction.
            This field is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.streamingPropertyTransientTransactionHoleMapping">
            <summary>
            A mapping from assignable runtime property values to the first generation of the holes for the transient transaction associated with this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.runtimePropertyTransientTransactionHoleMapping">
            <summary>
            A mapping from runtime property multiplexors to holes for the transient transaction associated with this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.undoablePropertyTransientTransactionHoleMapping">
            <summary>
            A mapping from validty spans to holes for the transient transaction associated with this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.nestingLevel">
            <summary>
            The nesting level for the associated transient transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.nestedThreadSafeTransientTransactionContexts">
            <summary>
            The nested thread safe transient transaction contexts. This field is protected by the lock on this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.#ctor(System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext"/> class.
            </summary>
            <param name="firstGeneration">The first generation.</param>
            <param name="outerThreadSafeTransientTransactionContext">The outer.</param>
            <param name="nestingLevel">The nesting level.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.InstanceCount">
            <summary>
            Gets the instance count.
            </summary>
            <value>
            The instance count.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.Add(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext[],Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Adds the specified context to the specified array of contexts.
            </summary>
            <param name="contexts">The contexts.</param>
            <param name="context">The context.</param>
            <returns>A new array with the context added.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.Remove(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext[],Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Removes the specified context from the specified array of contexts.
            </summary>
            <param name="contexts">The contexts.</param>
            <param name="context">The context.</param>
            <returns>A new array with the remaining contexts.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.CreateRuntimePropertyTransientTransactionHoleOnApplicationThread``1(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0})">
            <summary>
            Creates a runtime property transient transaction hole associated with this instance on the application thread.
            It is assumed that this instance is open.
            </summary>
            <typeparam name="T">The type of the values in the hole.</typeparam>
            <param name="currentGeneration">The current generation.</param>
            <param name="isDetached"><c>true</c>, if the node is being detached.</param>
            <param name="owner">The owner.</param>
            <returns>The created hole.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.CreateRuntimePropertyTransientTransactionHole``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},System.Int32,System.Boolean@)">
            <summary>
            Creates a runtime property transient transaction hole associated with this instance.
            </summary>
            <typeparam name="T">The type of the values in the hole.</typeparam>
            <param name="owner">The owner.</param>
            <param name="firstGen">The first gen.</param>
            <param name="isTransientTransactionOpen">if set to <c>true</c> [is transient transaction open].</param>
            <returns>The created hole.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.GetNestingLevel(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Gets the nesting level for the specified context.
            </summary>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <returns>The nesting level</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.OuterThreadSafeTransientTransactionContext">
            <summary>
            Gets the outer thread safe transient transaction context.
            </summary>
            <value>
            The outer thread safe transient transaction context, or <c>null</c>, if this is a top level transient transaction.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.FirstGeneration">
            <summary>
            Gets the first generation.
            </summary>
            <value>
            The first generation.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.NestingLevel">
            <summary>
            Gets the nesting level.
            </summary>
            <value>
            The nesting level.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.RuntimePropertyTransientTransactionHoleMapping">
            <summary>
            Gets the runtime property transient transaction hole mapping.
            </summary>
            <value>
            The runtime property transient transaction hole mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.StreamingPropertyTransientTransactionHoleMapping">
            <summary>
            Gets the streaming property transient transaction hole mapping.
            </summary>
            <value>
            The streaming property transient transaction hole mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.UndoablePropertyTransientTransactionHoleMapping">
            <summary>
            Gets the undoable property transient transaction hole mapping.
            </summary>
            <value>
            The undoable property transient transaction hole mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.LastGeneration">
            <summary>
            Gets the last generation.
            </summary>
            <value>
            The last generation.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.CreateNested(System.Int32)">
            <summary>
            Creates a nested context.
            </summary>
            <param name="currentGenerationNumber">The current generation number.</param>
            <returns>The created context</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.GetNestedThreadSafeTransientTransactionContexts(Spotfire.Dxp.Framework.Commands.CommandHistory,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Gets the nested thread safe transient transaction contexts.
            </summary>
            <param name="commandHistory">The command history.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <returns>The nested contexts</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.NestedThreadSafeTransientTransactionContexts">
            <summary>
            Gets the nested thread safe transient transaction contexts.
            </summary>
            <value>
            The nested thread safe transient transaction contexts.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.DecreaseSnapshotRefCount">
            <summary>
            Decreases the snapshot reference count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.IncreaseSnapshotRefCount">
            <summary>
            Increases the snapshot reference count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.RemoveNested(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Removes the specified nested context.
            </summary>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.TransientTransactionContextManager">
            <summary>
            Manages the transient transactions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.TransientTransactionContextManager.threadSafeTransientTransactionContexts">
            <summary>
            The thread safe transient transaction contexts.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContextManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.TransientTransactionContextManager"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContextManager.Add(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Adds the specified thread safe transient transaction context.
            </summary>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContextManager.Remove(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Removes the specified thread safe transient transaction context.
            </summary>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.TransientTransactionContextManager.ThreadSafeTransientTransactionContexts">
            <summary>
            Gets the thread safe transient transaction contexts.
            </summary>
            <value>
            The thread safe transient transaction contexts.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.WorkerThreadDocumentViewExecutionInfo">
            <summary>
            Represent the document view execution info associated with a worker thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.WorkerThreadDocumentViewExecutionInfo.documentView">
            <summary>
            The document view.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.WorkerThreadDocumentViewExecutionInfo.#ctor(Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState,Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.WorkerThreadDocumentViewExecutionInfo"/> class.
            </summary>
            <param name="executionState">State of the execution.</param>
            <param name="documentView">The document view.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.WorkerThreadDocumentViewExecutionInfo.DocumentViewUnsafe">
            <summary>
            Gets the document view.
            </summary>
            <value>
            The document view.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator">
            <summary>
            A property changed accumulator for internal events.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator.changedProperties">
            <summary>
            A queue of the accumulated changed properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator.changedPropertiesSet">
            <summary>
            A set of the accumulated changed properties so that duplicates can 
            be detected when they are added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator.open">
            <summary>
            A flag signifying whether the accumulator is open.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value>
              <c>true</c> if this instance is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator.Add(Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <summary>
            Adds a changed property to the accumulator. If the changed property already exists then it is ignored.
            </summary>
            <param name="changedProperty">The changed property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator.Add(Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedQueue)">
            <summary>
            Adds the specified property changed queue.
            </summary>
            <param name="propertyChangedQueue">The property changed queue.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator.Close">
            <summary>
            Closes the accumulator and returns a queue of changed properties.
            </summary>
            <returns>The queue of changed properties.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator.Open">
            <summary>
            Opens the accumulator.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedAccumulator.ValidateOpen">
            <summary>
            Validates that the accumalor is open. 
            </summary>            
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedQueue">
            <summary>
            A queue for property changes used for internal events.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedQueue.changedProperties">
            <summary>
            The changed properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedQueue.#ctor(System.Collections.Generic.List{Spotfire.Dxp.Framework.Commands.ChangedPropertyWithDocumentView})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedQueue"/> class.
            </summary>
            <param name="changedProperties">The changed properties.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedQueue.ChangedProperties">
            <summary>
            Gets the changed properties.
            </summary>
            <value>
            The changed properties.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.InternalEventsPropertyChangedQueue.RaiseInternal">
            <summary>
            Raises the internal events.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator">
            <summary>
            A queue of lazy values that needs to be evaluated.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator.undoRedoManager">
            <summary>
            The undo redo manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator.applicationThread">
            <summary>
            The application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator.valueContainers">
            <summary>
            The queue of value containers that needs to be evaluated.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator.hasWorker">
            <summary>
            A flag that says whether there is an active worker thread. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator.workerThreadException">
            <summary>
            The worker thread exception.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator.#ctor(Spotfire.Dxp.Framework.Commands.UndoRedoManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator"/> class.
            </summary>
            <param name="undoRedoManager">The undo redo manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator.Add(Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainerBase)">
            <summary>
            Adds the specified value container.
            </summary>
            <param name="valueContainer">The value container.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.LazyUndoableEvaluator.WorkerLoop">
            <summary>
            The work loop that evaluates.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PersistedFileStack">
            <summary>
            Represent a file stack that has been persisted as part of a crash dump. Note that it does not contain the file itself.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedFileStack.count">
            <summary>
            The number of entries in the stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedFileStack.freePosition">
            <summary>
            The position in the underlying file where
            the next pushed entry can be written.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedFileStack.position">
            <summary>
            The starting position of the top of the stack
            in the underlying file.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedFileStack.#ctor(Spotfire.Dxp.Framework.Commands.FileStack)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedFileStack"/> class.
            </summary>
            <param name="fileStack">The file stack.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedFileStack.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedFileStack"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedFileStack.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedFileStack.FreePosition">
            <summary>
            Gets the free position.
            </summary>
            <value>
            The free position.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedFileStack.Position">
            <summary>
            Gets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedFileStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack">
            <summary>
            Representas a paged command stack (an undo or redo stack that was originally paged to disk) that has been persisted as part of a crash dump. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack.associationTable">
            <summary>
            The association table.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack.fileCount">
            <summary>
            The file count.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack.fileStack">
            <summary>
            The persisted file stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack.#ctor(Spotfire.Dxp.Framework.Commands.PagedCommandStack)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack"/> class.
            </summary>
            <param name="pagedCommandStack">The paged command stack.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack.AssociationTable">
            <summary>
            Gets the association table.
            </summary>
            <value>
            The association table.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack.FileCount">
            <summary>
            Gets the file count.
            </summary>
            <value>
            The file count.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack.FileStack">
            <summary>
            Gets the file stack.
            </summary>
            <value>
            The file stack.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager">
            <summary>
            Represents a persisted undo redo manager. This is used in the crash dump tool to recreate the undo and redo stacks.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.invisibleTransactionStack">
            <summary>
            The invisible transaction stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.pagedRedoStack">
            <summary>
            The persisted paged redo stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.pagedUndoStack">
            <summary>
            The persisted paged undo stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.redoStackCount">
            <summary>
            The number of entries on the redo stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.undoStackCount">
            <summary>
            The number of entries on the undo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.#ctor(Spotfire.Dxp.Framework.Commands.UndoRedoManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager"/> class.
            </summary>
            <param name="undoRedoManager">The undo redo manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.InvisibleTransactionStack">
            <summary>
            Gets the invisible transaction stack.
            </summary>
            <value>
            The invisible transaction stack.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.PagedRedoStack">
            <summary>
            Gets the paged redo stack.
            </summary>
            <value>
            The paged redo stack.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.PagedUndoStack">
            <summary>
            Gets the paged undo stack.
            </summary>
            <value>
            The paged undo stack.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.RedoStackCount">
            <summary>
            Gets the redo stack count.
            </summary>
            <value>
            The redo stack count.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.UndoStackCount">
            <summary>
            Gets the undo stack count.
            </summary>
            <value>
            The undo stack count.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.AggregatedTransactionAccumulator">
            <summary>
            Accumulates commands and events from a transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AggregatedTransactionAccumulator.#ctor">
            <summary>
            Create an aggregated transaction accumulator.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AggregatedTransactionAccumulator.ForceAggregatedTransactionToUndoStack(Spotfire.Dxp.Framework.Commands.UndoRedoManager)">
            <summary>
            Forces the transactions in the accumulator to the undo stack. This is used in the crash dump tool to make sure that any transaction that is part of an aggregated transaction is written to the dump file.
            </summary>
            <param name="undoRedoManager">The undo redo manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.AggregatedTransactionAccumulator.Close">
            <summary>
            Returns null if a nested transaction is closed, otherwise it returns
            the transaction to put on the undo stack.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.ChangedProperty">
            <summary>
            This holds information about a changed property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ChangedProperty.trace">
            <summary>
            A trace if the changede property was triggered by streaming. This is a temporary hack to detect issues.
            Eventually we should probably prevent internal event handlers by a special form of transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.ChangedProperty.documentViewKey">
            <summary>
            The document view key for the document view that changed the property when the command was executed.
            During undo/redo, this may not necessarily be the document view key of any document view. 
            It may be an ancestor of several view if a view is created after the command was executed.
            It may also be the ancestor of no document view if the view has been removed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ChangedProperty.DocumentViewKey">
            <summary>
            Gets the document view key.
            </summary>
            <value>
            The document view key.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.ChangedProperty.Trace">
            <summary>
            Gets the trace.
            </summary>
            <value>
            The trace.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.ILookupPropertyName">
            <summary>
            Interface to implement on DocumentNodes using the PropertyChangedCommand. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ILookupPropertyName.Get(System.String)">
            <summary>
            Returns the PropertyName singleton instance associated with the specified name, or null.
            Implementations of this method must return null if no property with the specified name is defined.
            </summary>
            <param name="name">The name of the PropertyName to get.</param>
            <returns>The PropertyName singleton instance, or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.ITransactionCompletingCallback">
            <summary>
            Represents a callback that will be invoked when the transaction is completing.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ITransactionCompletingCallback.OnTransactionCompleting">
            <summary>
            Called when the transaction is completing.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.ITransactionCompletingCallback.OnTransactionRollbacking">
            <summary>
            Called if the transactionrolls back.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PropertyChangedAccumulator.open">
            <summary>
            A flag signifying whether the accumulator is open.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PropertyChangedAccumulator.changedProperties">
            <summary>
            A queue of the accumulated changed properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PropertyChangedAccumulator.changedPropertiesSet">
            <summary>
            A set of the accumulated changed properties so that duplicates can 
            be detected when they are added.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PropertyChangedAccumulator.ValidateOpen">
            <summary>
            Validates that the accumalor is open. 
            </summary>            
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PropertyChangedAccumulator.Open">
            <summary>
            Opens the accumulator.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PropertyChangedAccumulator.Add(Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <summary>
            Adds a changed property to the accumulator. If the changed property already exists then it is ignored.
            </summary>
            <param name="changedProperty">The changed property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PropertyChangedAccumulator.Close">
            <summary>
            Closes the accumulator and returns a <c>Transaction</c> with accumulated
            commands and events.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PropertyChangedCommand">
            <summary>
            The purpose of this command is to generate an event for a property on a document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PropertyChangedCommand.name">
            <summary>
            The name of the property to invoke.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PropertyChangedCommand.node">
            <summary>
            The DocumentNode on which to invoke a change event to the specified PropertyName.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PropertyChangedCommand.#ctor(Spotfire.Dxp.Framework.Commands.ILookupPropertyName,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PropertyChangedCommand"/> class.
            </summary>
            <param name="node">The DocumentNode on which the change event is invoked.</param>
            <param name="propertyName">The name of the property to be changed.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PropertyChangedCommand.Execute">
            <summary>
            Performs the command action.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PropertyChangedCommand.GetChangedProperty">
            <summary>
            Shall return the property that is changed by this command or <c>null</c>.
            </summary>
            <returns>The property that is changed by this command.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PropertyChangedQueue">
            <summary>
            A queue for events.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.RollbackAgnosticTransactionCompletingCallback">
            <summary>
            REMOVE this class when all uses of DocumentNode.AddTransactionCompletingCallback have been refactored to
            use the invariant keeper feature.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.SnapshotLock">
            <summary>
            This class defines a lock which can be acquired on one thread and released on another.
            <remarks>
            Normal locks must be released by the owning thread.
            </remarks>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.SnapshotLock.busyProof">
            <summary>
            The busyproof object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.SnapshotLock.heldByThread">
            <summary>
            The thread that holds this snapshot lock, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.SnapshotLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.SnapshotLock"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.SnapshotLock.IsHeldByCurrentThread">
            <summary>
            Gets a value indicating whether the current thread holds this snapshot lock.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.SnapshotLock.Acquire">
            <summary>
            Acquires the lock.
            </summary>
            <returns>The busyproof object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.SnapshotLock.Release(System.Object)">
            <summary>
            Releases the lock. May be called on any thread.
            </summary>
            <param name="proof">A busyproof object, returned by a previous call to <see cref="M:Spotfire.Dxp.Framework.Commands.SnapshotLock.Acquire"/>.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.TransactionAccumulator">
            <summary>
            Accumulates commands and events from a transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.TransactionAccumulator.open">
            <summary>
            A flag signifying whether the accumulator is open.
            That is if it is currently accumulating.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.TransactionAccumulator.commands">
            <summary>
            A list of accumulated commands.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.TransactionAccumulator.containsVisibleCommands">
            <summary>
            A flag signifying whether the transaction is visible on the command
            stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransactionAccumulator.ValidateOpen">
            <summary>
            Validates that the accumalor is open. 
            </summary>            
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransactionAccumulator.Close">
            <summary>
            Closes the accumulator and returns a <c>Transaction</c> with accumulated
            commands and events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransactionAccumulator.ForceTransactionsToUndoStack(Spotfire.Dxp.Framework.Commands.UndoRedoManager)">
            <summary>
            Forces the transactions in the accumulator to the undo stack. This is used in the crash dump tool to make sure that any transaction that is part of an aggregated transaction is written to the dump file.
            </summary>
            <param name="undoRedoManager">The undo redo manager.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.TransactionAccumulator.CommandCount">
            <summary>
            Gets the count of commands in this accumulator.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.TransientTransactionContext">
            <summary>
            Holds structures and information needed to restore a transient transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.associatedTransactionHandle">
            <summary>
            The handle of the associated aggregated transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.startedInGeneration">
            <summary>
            The generation number when the transient transaction was started.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.#ctor(System.Int32,Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl,System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.TransientTransactionContext" /> class.
            </summary>
            <param name="currentGenerationNumber">The current generation number.</param>
            <param name="associatedTransactionHandle">The associated transaction handle.</param>
            <param name="nestingLevel">The nesting level.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.NestingLevel">
            <summary>
            Gets the nesting level.
            </summary>
            <value>
            The nesting level.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.ThreadSafeTransientTransactionContext">
            <summary>
            Gets the thread safe transient transaction context.
            </summary>
            <value>
            The thread safe transient transaction context.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.TransientSnapshotDocument">
            <summary>
            Gets the snapshot document to use when creating snapshots on background threads while a transient transaction is executing.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.Release">
            <summary>
            Releases structures held by this instance if it is associated with the specified transaction.
            </summary>
            <returns>
            The resulting transient transaction context.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.OnTransientTransactionCompleted">
            <summary>
            Called when the transient transaction has completed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.AddStreamingPropertyCallback(System.Action)">
            <summary>
            Adds the streaming property callback.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.RestoreValiditySpans">
            <summary>
            Restores the validity spans.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.RestoreMultiplexorState">
            <summary>
            Restores the state of the multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.TryGetTransientSnapshot(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.Node@)">
            <summary>
            Tries to the get snapshot node for the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="snapshotNode">The snapshot node.</param>
            <returns>true, if a snapshot node for the specified node was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.AddValiditySpanToRestore(Spotfire.Dxp.Framework.Commands.IValiditySpanRestoreTarget,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Adds a validity span to restore.
            </summary>
            <param name="restoreTarget">The restore target.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.ValidateNotCommittingAssociatedTransaction(Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl)">
            <summary>
            Validates that this instance is not associated with the specified transaction.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.AddRuntimePropertyMultiplexorState(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexor,System.Boolean)">
            <summary>
            Adds the state of the runtime property multiplexor.
            </summary>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="readInLive">if set to <c>true</c> [read in live].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.IsAssociatedWith(Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl)">
            <summary>
            Determines whether this instance is associated with the specified transaction.
            </summary>
            <param name="handle">The handle.</param>
            <returns>true if this instance is associated with the specified transaction. </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.RestoreDocumentState">
            <summary>
            Restores attributes in nodes that are used by the DocumentState mechanism to the value they had at the start of the transient transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.TransientTransactionContext.CreateNested(Spotfire.Dxp.Framework.Commands.CommandHistory,Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl)">
            <summary>
            Creates a nested transient transaction.
            </summary>
            <param name="commandHistory">The command history.</param>
            <param name="aggregatedTransactionHandle">The aggregated transaction handle.</param>
            <returns>The created transient transaction.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.CommandHistoryState">
            <summary>A type representing the different states the command history
            can be in. The state changes when the live document is modified, read or taken snapshot of.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.Idle">
            <summary>
            The command history is in an idle state where new transactions can be started.
            Transitions to: Executing, Unexecuting, Reexecuting, Reading, RollbackingAggregated.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.Executing">
            <summary>
            The command history is currently executing a command.
            Transitions to: RaisingEvents, Idle (on rollback), 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.Unexecuting">
            <summary>
            The command history is currently unexecuting a command.
            Transitions to: RaisingEvents
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.Reexecuting">
            <summary>
            The command history is currently reexecuting a command.
            Transitions to: RaisingEvents
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.RollbackingAggregated">
            <summary>
            The command history is currently rollbacking an aggregated transaction.
            Transitions to: RaisingEvents
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.Rollbacking">
            <summary>
            The command history is currently rollbacking an aggregated transaction.
            Transitions to: RaisingEvents
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.RaisingEvents">
            <summary>
            The command history is currently raising the events that
            resulted from the transaction.
            Transitions to: RaisingHighlightEvents
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.RaisingHighlightEvents">
            <summary>
            The command history is currently raising the highlight events that
            resulted from the transaction or from the actions triggered by 
            raising the events.
            Transitions to: Idle
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.Reading">
            <summary>A ReadTransaction is being performed on the document. That is, the document is 
            being read without a surrounding Transaction.
            Transitions to: Idle
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistoryState.SettingUpInternalEventHandlers">
            <summary>Internal event handlers are being setup as part of an attach operation.
            During this phase, the document may not be modified.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.FileStack">
            <summary>
            A stack of streams stored in an underlying file stream  
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.#ctor(System.IO.FileStream)">
            <summary>
            Create a <see cref="T:Spotfire.Dxp.Framework.Commands.FileStack"/> based on an underlying file stream.
            </summary>
            <param name="stream">The underlying file stream</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.#ctor(System.IO.FileStream,Spotfire.Dxp.Framework.Commands.PersistedFileStack)">
            <summary>
            Create a <see cref="T:Spotfire.Dxp.Framework.Commands.FileStack" /> from a file stack that was persisted as part of a crash dump.
            </summary>
            <param name="stream">The file stream to use for the file stack.</param>
            <param name="persistedFileStack">The persisted file stack.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.FileStack.FreePosition">
            <summary>
            Gets the FreePosition in the underlying stream. Used to compute the 
            size of entries written to the undo/redo stacks.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.Push">
            <summary>
            Creates a stream on top of the <see cref="T:Spotfire.Dxp.Framework.Commands.FileStack"/>. 
            </summary>
            <returns>The created stream that is on top of the stack.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.Pop">
            <summary>
            Creates a stream for reading from the top of the 
            <see cref="T:Spotfire.Dxp.Framework.Commands.FileStack"/>.
            </summary>
            <returns>The stream for reading the top of the stack.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.Clear">
            <summary>
            Clear this file stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.CopyContent(System.IO.Stream)">
            <summary>
            Copies the content of the file stack stream into a target stream.
            </summary>
            <param name="targetStream">The target stream.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.FileStack.Count">
            <summary>
            The number of entries in the stream stack.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.FileStack.Position">
            <summary>
            Gets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.longToByteArray(System.Int64)">
            <summary>
            Converts a long to a byte array with least significant bits first.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.byteArrayToLong(System.Byte[])">
            <summary>
            Converts a byte array with least significant bits first to a long.
            </summary>
            <param name="buffer">The buffer</param>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.FileStack.ReadStream">
            <summary>
            The stream for reading the top of the stack.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.FileStack.WriteStream">
            <summary>
            The stream for writing the top of the stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.FileStack.Dispose(System.Boolean)">
            <summary>
            Disposes the stack.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.HistoryStack">
            <summary>
            A stack with a history of commands. This stack is used for the undo stack and the redo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.HistoryStack.PeekDisplayName">
            <summary>Returns display name of the command on the top of the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.HistoryStack.PeekDisplayName(System.Int32)">
            <summary>Returns display name of the command on the specified <paramref name="depth"/> on the stack.
            </summary>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.HistoryStack.Count">
            <summary>
            The number of entries on the stack.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.Commands.HistoryStack.Changed">
            <summary>
            This event is raised when the visible transactions on the stack is changed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DeadObject.weakReference">
            <summary>
            A weak reference top the node that should be dead.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DeadObject.reference">
            <summary>
            A weak reference top the node that should be dead.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DeadObject.time">
            <summary>
            The time when the object was registered with the wathdog as dead.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.DeadObject.secondsUncollected">
            <summary>
            The number of seconds which the object may be uncollected.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.MemoryLeakWatchdog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.MemoryLeakWatchdog.Add(System.Object)">
            <summary>
            Add an object which should be dead. The watchdog will detect if the object is
            not garbage collected.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.MemoryLeakWatchdog.Add(System.Object,System.Int32)">
            <summary>
            Add an object which should be dead. The watchdog will detect if the object is
            not garbage collected.
            </summary>
            <param name="obj"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.MemoryLeakWatchdog.Check">
            <summary>
            Checks that the nodes that have been reported to the watchdog as
            dead have been garbage collected
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PagedCommandStack">
            <summary>
            This class implements a command stack (an undo or redo stack) that
            is paged to a file.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.serializeUsingWorkerThread">
            <summary>
            True, if we should use a worker thread to serialize on the stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.TempDirectory">
            <summary>
            Temporary directory used for undo redo stacks.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.useFileForStack">
            <summary>
            Whether we should keep the undo stack entirely in memory or if it should be written to disk.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.associationTable">
            <summary>
            This table is a mapping between object references to document
            nodes and unique identifiers. The identifiers are used in the
            file part of the stack to represent a reference.
            
            This structure is manipulated by the application thread and a worker thread. 
            When it is manipulated by the worker thread the <see cref="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadBusy"/> is set.
            It may only be manipulated by the main thread if the memory stack is empty and <see cref="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadBusy"/> is not set.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.fileStack">
            <summary>
            The file part of the stack.
            
            This structure is manipulated by the application thread and a worker thread. 
            When it is manipulated by the worker thread the <see cref="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadBusy"/> is set.
            It may only be manipulated by the main thread if the memory stack is empty and <see cref="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadBusy"/> is not set.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.nonSerializedStack">
             <summary>
             This structure contains the non serialized objects owned by commands on the file part of the stack.
            
             The dictionary maps positions in the stack to a dictionary with the objects.
             That dictionary maps the position of each command within the transaction to
             the object associated with each command. 
             
             If the nonserialized object is null then it is not included. That ensures that
             the structure takes up constant memory if there are no nonserialized objects.
             
             This structure is manipulated by the application thread and a worker thread. 
             When it is manipulated by the worker thread the <see cref="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadBusy"/> is set.
             It may only be manipulated by the main thread if the memory stack is empty and <see cref="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadBusy"/> is not set.
             </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.fileCount">
            <summary>
            The number of undo entries that is stored on file.
            This counter is not the same as fileStack.Count
            since each endo/redo entry may lead to several
            entries on the file stack.
            
            This value is manipulated by the application thread and a worker thread. 
            When it is manipulated by the worker thread the <see cref="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadBusy"/> is set.
            It may only be manipulated by the main thread if the memory stack is empty and <see cref="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadBusy"/> is not set.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.stackFilePath">
            <summary>
            The path to the temporary file used for the file part of the stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.serviceProvider">
            <summary>
            A service provider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.memoryStack">
            <summary>
            The part of the stack which is stored in memory. 
            
            This structure is manipulated on the application thread and a worker thread and is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.disposed">
            <summary>
            True, if the instance has been disposed. The file stack may still not be disposed if a worker thread is busy.
            
            This structure is manipulated on the application thread and a worker thread and is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadBusy">
            <summary>
            True, if the worker thread is manipulating the filestack and related structure.
            
            This structure is manipulated on the application thread and a worker thread and is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.hasWorker">
            <summary>
            True, if there is a worker thread active. This is used in order to keep track of whether we need to get a new thread from the thread pool.
            
            This structure is manipulated on the application thread and a worker thread and is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.applicationThread">
            <summary>
            The application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.workerThreadException">
            <summary>
            An exception that occured on the worker thread when serializing an undo entry.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.#ctor(System.Boolean,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PagedCommandStack"/> class.
            </summary>
            <param name="serializeUsingWorkerThread">if set to <c>true</c> we will serialize the undo and redo stacks using a worker thread.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.#ctor(System.Boolean,Spotfire.Dxp.Framework.Commands.PersistedPagedCommnandStack,System.IO.Stream,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.PagedCommandStack"/> class.
            </summary>
            <param name="serializeUsingWorkerThread">if set to <c>true</c> [serialize using worker thread].</param>
            <param name="persistedPagedCommnandStack">The persisted paged commnand stack.</param>
            <param name="sourceStream">The source stream in the crash dump zip file.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PagedCommandStack.UseFileForStack">
            <summary>
            Gets or sets a value indicating whether [use file for stack].
            </summary>
            <value>
              <c>true</c> if [use file for stack]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PagedCommandStack.SerializeUsingWorkerThread">
            <summary>
            True, if we should use a worker thread to serialize on the stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.Push(Spotfire.Dxp.Framework.Commands.UndoRedoEntry)">
            <summary>
            Pushes the <paramref name="undoRedoEntry"/> on top of the stack.
            </summary>
            <param name="undoRedoEntry">The entry to push.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.CreateZipEntrysInCrashDump(Spotfire.Dxp.Internal.Utilities.ZipWriter,System.String)">
            <summary>
            Creates a zip entrys in the crash dump for the file in the paged command stack.
            </summary>
            <param name="zWriter">The zip writer.</param>
            <param name="entryName">Name of the entry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.WorkerLoop">
            <summary>
            The loop execute by a worker thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.PushToFile(Spotfire.Dxp.Framework.Commands.UndoRedoEntry)">
            <summary> Pushes an UndoRedoEntry onto the file stack.</summary>
            <remarks>
            Some performance measurements made on deleting a page with 5 plots
            with lots of configuration in superstoresales:
            
            Variant:                      PushToFile:    SerializeForUndoRedo:
              With DeflateStream            1128 ms        1115 ms
              Without  DeflateStream        1134 ms        1112 ms
            
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.ForceToFile">
            <summary>
            Forces the paged command stack to file. This is used by the crash dump tool to make user that the worker thread has written all entries to the page files.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.Pop">
            <summary>
            Pops an entry from the top of the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.PopFromFile">
            <summary>
            Pops from file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.Clear">
            <summary>
            Clears the stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.ClearFile">
            <summary>
            Clears the file.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PagedCommandStack.AssociationTable">
            <summary>
            Gets the association table.
            </summary>
            <value>
            The association table.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PagedCommandStack.FileCount">
            <summary>
            Gets the file count.
            </summary>
            <value>
            The file count.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.PagedCommandStack.FileStack">
            <summary>
            Gets the file stack.
            </summary>
            <value>
            The file stack.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PagedCommandStack.StackEntryPruner">
            <summary>
            A SerializationSurrogate and SurrogateSelector that will prune 
            all DocumentNode object not contained in a specified set and all 
            DocumentNodeReferenceBase objects not contained in a specified set.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PagedCommandStack.ReferencedNode">
            <summary>
            This class is used to replace a document node that is not owned
            by the command when a command is serialized. An instance contains
            the unique identifier that is used for that node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.ReferencedNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.ReferencedNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PagedCommandStack.DisconnectedUndoRedoEntry">
            <summary>
            This class represents an undo/redo entry that has been disconnected from the
            stack in memory. That a command is disconnected simply means that any node
            that is owned by the command has been removed from the association table.
            The removed entries are stored in an instance of this class.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.DisconnectedUndoRedoEntry.undoRedoEntry">
            <summary>
            The undo/redo entry
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.DisconnectedUndoRedoEntry.associationTableSlice">
            <summary>
            The slice of the asscoiation table that contains nodes owned by this entry.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.DisconnectedUndoRedoEntry.#ctor(Spotfire.Dxp.Framework.Commands.UndoRedoEntry,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int64,Spotfire.Dxp.Framework.DocumentModel.Node}})">
            <summary>
            Create a disconnected undo entry.
            </summary>
            <param name="undoRedoEntry">The undo/redo entry</param>
            <param name="associationTableSlice">The slice of the association table</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.PagedCommandStack.UndoRedoEntryLayout">
            <summary>
            This class is used to represent which embedded resources that are pushed on the
            file stack in order to represent an undo/redo entry.
            It also contains the number of unique identifiers that was allocated for the 
            entry.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.PagedCommandStack.UndoRedoEntryLayout.embeddedResourceIds">
            <summary>The top of the stack is the id of the emb that is at the top of the file stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.PagedCommandStack.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.RestoreContext">
            <summary>
            This class is passed to the unexecute and reexecute methods and provides
            a way to communicate with the command history.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.RestoreContext.AddNodeToAttach(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Adds the node to attach.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.Transaction">
            <summary>
            Instances of this class represents a transaction in the document model.
            Transaction are stored on the undo and redo stacks.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.Transaction.commands">
            <summary>
            The commands of the transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.Transaction.visible">
            <summary>
            A flag signifying whether the transaction is visible on the command
            stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.Transaction.#ctor(System.Collections.Generic.List{Spotfire.Dxp.Framework.Commands.UndoableCommandBase},System.Boolean)">
            <summary>
            Create a transaction.
            </summary>
            <param name="commands">The accumulated commands that should be executed to undo
            or redo the transaction</param>
            <param name="visible">
            A flag which specifies whether the transaction should be visible on the undo stack.
            </param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.Transaction.Commands">
            <summary>
            The commands of the transaction.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.Transaction.Visible">
            <summary>
            A flag signifying whether the transaction is visible on the command
            stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.Transaction.UnexecuteCommands(Spotfire.Dxp.Framework.Commands.PropertyChangedAccumulator)">
            <summary>
            Unexecute the commands in the transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.Transaction.ReexecuteCommands(Spotfire.Dxp.Framework.Commands.PropertyChangedAccumulator)">
            <summary>
            Reexecute the commands in the transaction
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.Transaction.ForEachOwnedNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <summary>
            Invoke the action to all document nodes owned by this transaction.
            </summary>
            <param name="action">The action to invoke</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.UndoableCommandBase">
            <summary>
            A base class for undoable commands.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.#ctor">
            <summary>
            Creates an UndoableCommandBase.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.GetChangedProperty">
            <summary>
            Shall return the property that is changed by this command or <c>null</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.Execute">
            <summary>
            Performs the command action.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.Unexecute(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <summary>
            Reverts the effects of the Execute method.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.Reexecute(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <summary>
            Reverts the effects of the Unexecute method.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.Unexecute">
            <summary>
            Reverts the effects of the Execute method.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.Reexecute">
            <summary>
            Reverts the effects of the Unexecute method.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.ForEachOwnedNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <summary>
            Invoke the action to all document nodes owned by this command.
            </summary>
            <param name="action">The action to invoke</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.Invisible">
            <summary>
            This property specifies whether the command should be invisible 
            to the user when the user inspects the undo or redo stack.
            I.e. if this comamnd is on top of the undo or redo stack 
            and the user presses undo then the invisible command and
            the command below should be executed. 
            
            This is used, for example, to get proper undo of which worksheet that is active 
            and which plot is active in a worksheet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.Undoable">
            <summary>
            Returns true if the command is undoable. Default implementation returns true.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.Name">
            <summary>
            A name of the command used by the API
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.DisplayName">
            <summary>
            A name suitable for being displayed in an application's UI.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoableCommandBase.NonSerializedObject">
             <summary>
             This is an object which is associated with the command but which is not serialized on
             the undo/redo stack. It is instead kept in memory. This can be used when a command
             needs to refer to data which cannot be serialized or it does not want to serialize.
            
             This feature should be used with great care since the amount of internal memory required by the
             undo stack may grow propertinally to the size of the undo stack.
             
             The field will be read by the command history when a command is about be serialized. The command
             history will store the object in memory and set the the property after the command has been deserialized.
             
             When the undo or redo stack is cleared then the object will be disposed if it implements IDisposable.
             </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.UndoRedoEntry">
            <summary>
            This class represents an entry on the undo or redo stack. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoEntry.undoRedoAnotherOne">
            <summary>
            This flag signal whether we should undo/redo another entry when thsi entry is undone or redone.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.UndoRedoManager">
            <summary>
            This class manages the undo and redo stacks and performs undo/redo.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoManager.serializeUsingWorkerThread">
            <summary>
            True, if the undo and redo stack should be serialized on a worker thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoManager.undoStack">
            <summary>
            The undo stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoManager.redoStack">
            <summary>
            The redo stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoManager.pagedUndoStack">
            <summary>
            The paged undo stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoManager.pagedRedoStack">
            <summary>
            The paged redo stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoManager.pushedSticky">
            <summary>
            A flag signifying whether there is a sticky command on top of the undo
            stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoManager.stickyGuid">
            <summary>
            The guid of the sticky command that was most recently pushed on the undo stack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoManager.invisibleTransactionStack">
             <summary>
             This is a stack of the invisible transactions that are on top of the undo
             stack. They are stored in a stack of their own so that we can suppport
             that the redo stack is not cleared when an invisible transaction is executed. 
            
             The top of the stack is the first element of the list.
            
             When a visible transaction is pushed onto the undo stack then the invisible
             transactions are first moved from this stack onto the undo stack.
             
             At undo we first undo the invisible commands on this stack without moving them to
             the redo stack and then perform the undo.
             
             At redo we first undo the invisible commands before performing the redo.
             </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.UndoRedoManager.stateId">
            <summary>
            A unique identifier for the state of the undo stack in the
            command history. It is used to decide whether to enable the Save
            menu item.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoRedoManager.#ctor(System.Boolean)">
            <summary>
            Creates an undo redo manager.
            </summary>
            <param name="serializeUsingWorkerThread">if set to <c>true</c> we will serialize the undo and redo stacks using a worker thread.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoRedoManager.#ctor(System.Boolean,Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager,System.IO.Stream,System.IO.Stream,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Commands.UndoRedoManager"/> class. This is used in the crash dump tool.
            </summary>
            <param name="serializeUsingWorkerThread">if set to <c>true</c> [serialize using worker thread].</param>
            <param name="persistedUndoRedoManager">The persisted undo redo manager.</param>
            <param name="undoStream">The undo stream from the crash dump zip file.</param>
            <param name="redoStream">The redo stream from the crash dump zip file.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoRedoManager.CommandHistory">
            <summary>
            Sets the command history.
            </summary>
            <value>
            The command history.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoRedoManager.UndoStack">
            <summary>
            Get the undo stack.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoRedoManager.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoRedoManager.UndoStateId">
            <summary>
            Gets a Guid that is unique for the state of the undo stack. Can be used 
            to determine if the Document is dirty.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoRedoManager.IsStarted">
            <summary>
            Gets a value indicating whether this instance is started or not. That is, if the Start method has been called. 
            </summary>
            <value>
            <c>true</c> if this instance is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoRedoManager.PagedUndoStack">
            <summary>
            Gets the paged undo stack.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoRedoManager.PagedRedoStack">
            <summary>
            Gets the paged redo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoRedoManager.PushTransaction(System.String,Spotfire.Dxp.Framework.Commands.Transaction,System.Boolean,System.Guid)">
            <summary>Pushes a transaction onto the undo stack. Called by the CommandHistory when an 
            aggregated transaction is committed or when a stand-alone transaction has executed.
            </summary>
            <param name="displayName">The name of the transaction.</param>
            <param name="transaction">The transaction to push.</param>
            <param name="sticky">A flag specifying whether the transaction is sticky.</param>
            <param name="stickyGuid">The id which identifies the transactions which should stick together.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoRedoManager.UndoCommand(System.Int32)">
            <summary>
            Unexecutes <paramref name="n"/> visible commands from the undo stack and moves them to
            the top of the redo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoRedoManager.RedoCommand(System.Int32)">
            <summary>
            Reexecutes <paramref name="n"/> visible commands from the redo stack and moves them to
            the top of the undo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoRedoManager.Clear">
            <summary>
            Removes all commands from the undo and redo stacks.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.UndoRedoManager.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.UndoRedoManager.InvisibleTransactionStack">
            <summary>
            Gets the invisible transaction stack.
            </summary>
            <value>
            The invisible transaction stack.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Commands.CommandHistory">
            <summary>
            The CommandHistory class provides the framework for an undo/redo 
            mechanism in an application and the transaction mechanism.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.notUpToDateCallbacks">
            <summary>
            Used to keep track of (for instance) work packages that are not up to date. These packages will be notified at the
            end of the transaction after the external events have been raised.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.applicationThread">
            <summary>
            Used to verify that all reads and edit transactiona are made on the correct thread.
            Also used to raise events on the UI thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.serviceProvider">
            <summary>
            The service provider used by DocumentGeneration objects to relay service requests.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.snapshotLock">
            <summary>
            An object which implements the snapshot lock.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.state">
            <summary>
            The current state of the command history.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.isStreamingTransaction">
            <summary>
            Set to <c>true</c> if the current transaction is a streaming transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.exchangeSnapshotCallbacks">
            <summary>
            A list of callbacks for exchanging snapshots.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.aggregatedTransaction">
            <summary>
            Signifies whether we are in an aggregated transaction. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.aggregatedTransactionHandleStack">
            <summary>
            The currently open aggregated transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.activeTransactionAccumulator">
            <summary>
            Used to accumulate commands from the current transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.aggregatedTransactionAccumulator">
            <summary>
            Used to accumulate an aggregated transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.externalEventAccumulator">
            <summary>
            Used to accumulate changed properties during a transaction, or during undo
            or redo of a transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.highlightPropertyChangedAccumulator">
            <summary>
            Used to accumulate changed highlight properties during a transaction, or during undo
            or redo of a transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.undoRedoManager">
            <summary>
            The undo/redo manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.transactionCompletingCallbacks">
            <summary>
            A set of callbacks, called at the end of a transaction.
            They can then do more work.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.afterTransactionCompletedCallbacks">
            <summary>
            A list of callbacks that shall be executed after the ongoing transaction (including undo 
            and redo transations) has completed. 
            Used by the SingleThreadedApplicationThread to fix bug 49339.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.disposed">
            <summary>
            A flag marking if the command history has been disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.isOnDemandLoadingAllowed">
            <summary>
            A flag marking if on demand loading is allowed. It is false if undoing or redoing.
            </summary>
            <remarks>This is a hack.</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.undoRedoEventAccumulator">
            <summary>
            An event accumulator for undo.
            Used to accumulate changed properties during undo or redo. When the transaction 
            has performed all modifications of the document, Runtime properties will be invalidated
            based on the contents of this accumulator. External events will also be raised.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.internalEventAccumulator">
            <summary>
            An event accumulator for internal events.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.documentNodeIds">
            <summary>
            Maps Ids to document nodes. Used to restore references to the current
            document from document fragments that have been serialized to the 
            clipboard, for instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.snapshotDocumentManager">
            <summary>Used to keep track of the snapshot documents.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.openTransactionHandleStack">
            <summary>Contains information about the order in which transactions are started and is used
            as a fail-early to ensure that only the innermost open transaction can be closed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.transientTransactionContextLock">
            <summary>
            The lock object securing multithreaded access for transient snapshots.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.transientTransactionContext">
            <summary>
            The context of a outermost transient transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.lazyUndoableEvaluator">
            <summary>
            A queue for lazy undoable that should be forced by a worker thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.masterLiveDocument">
            <summary>
            The master live document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.documentIsDisposing">
            <summary>
            Indicates that the document is disposing
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.Commands.CommandHistory.TransactionCompleted">
            <summary>
            Occurs when a transaction has completed and the CommandHistory returns to idle. 
            This event is raised for normal transactions as well as undo and redo transactions.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.UseFileForUndoRedoStack">
            <summary>
            Gets or sets a value indicating whether [use file for undo redo stack].
            </summary>
            <value>
            <c>true</c> if [use file for undo redo stack]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.IsUndoRedoManagerStarted">
            <summary>
            Gets a value indicating whether the undo/redo manager has started.
            </summary>
            <value>
            <c>true</c> if this instance is undo/redo manager has started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
            <value>The service provider.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.CurrentGenerationNumber">
            <summary> The generation of the live document. Each toplevel transaction/undo or redo steps
            this value as the first action it takes.
            Is FirstDocumentGeneration initially.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.IsStreamingTransaction">
            <summary>
            Gets a value indicating whether the current transaction is a streaming transaction.
            </summary>
            <value>
            <c>true</c> if the current transaction is a streaming transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.ApplicationThread">
            <summary>
            Gets the application thread.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.UndoStack">
            <summary>
            Get the undo stack.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.InvalidState(System.String)">
            <summary>
            Called when an operation is made in a state where it is not allowed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.OpenTransaction(Spotfire.Dxp.Framework.DocumentModel.TransactionHandle)">
            <summary>
            Shall only be called by TransactionHandle.
            </summary>
            <param name="transactionHandle"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.CloseTransaction(Spotfire.Dxp.Framework.DocumentModel.TransactionHandle)">
            <summary>
            Shall only be called by TransactionHandle.
            </summary>
            <param name="transactionHandle"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.CallExchangeSnapshotCallbacks">
            <summary>
            Calls the exchange snapshot callbacks.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.SetIdleState">
            <summary>Sets the state to idle and upholds the associated invariants.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.ExecuteWhenIdle(Spotfire.Dxp.Framework.ApplicationModel.WorkerThreadExecutor)">
            <summary>
            Executes the specified executor when the CommandHistory returns to Idle state.
            If the CommandHistory is Idle, the executor is executed synchronously.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.UndoTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Runs an undo transaction
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.RedoTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Runs a redo transaction
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.InternalTransaction(System.String,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            This method starts an internal transaction on the document model 
            by executing <paramref name="executor"/>. Internal transactions 
            behave like normal transactions but also enqueue internal events 
            until the outermost internal transaction is completed.
            
            </summary>
            <param name="displayName">A name of the transaction to be displayed to the user.</param>
            <param name="executor">The delegate to execute.</param>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.InternalTransactionHandle.transactionHandle">
            <summary>
            A transaction handle for an ordinary implicit transaction associated with the internal transaction. 
            This is used when an internal transaction is started without a surrounding transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Commands.CommandHistory.InternalTransactionHandle.rollbackAtException">
            <summary>
            If set to <c>true</c>, then the internal transaction should be rolled back when an exeption occurs. 
            If set to <c>false</c> then the internal transaction should not be rolled back when an excpetion occurs. However, the internal events are supressed so that
            we do not raise events in a potentially inconsistent state
            the intrenla events 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.InvisibleTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor,System.Boolean)">
            <summary>
            This method starts an invisible transaction on the document model by executing
            <paramref name="executor" />.
            If there is already an ongoing transaction then the transaction is included in the current
            transaction.
            All commands that are executed as a result of the operations
            performed by <paramref name="executor" /> will be recorded in
            the transaction so that the transaction can be unexecuted if the user
            requests an undo.
            The transaction is invisible in the sense
            that the user will not see the transaction as an entry on the undo stack.
            If the user makes an undo then the transaction will be silently unexecuted
            together with the enclosing visible transaction.
            </summary>
            <param name="executor">The delegate to execute.</param>
            <param name="isHighlight">set to <c>true</c> if the transaction is a highlight transaction.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.ExecuteWithOnDemandDisabled(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Executes some code while disallowing on-demand/data function jobs from running.
            </summary>
            <param name="executor">The delegate to execute.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.HighlightTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            This method starts a transaction where the highlight is set. This is a special construct
            for highlight because it may change as a result of an event.
            For example, if a plot is closed it will clear the highlight in the plot. There can only
            be such an highlight if the mouse is over the plot so it happens when a plot is closed
            by keyboard shortcut.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.StickyTransaction(System.Guid,Spotfire.Dxp.Framework.DocumentModel.Executor)">
             <summary>
             This method starts a sticky transaction on the document model by executing
             <paramref name="executor"/>. 
             If there is already an ongoing transaction then the transaction is included in the current
             transaction.
             
             All commands that are executed as a result of the operations 
             performed by <paramref name="executor"/> will be recorded in
             the transaction so that the transaction can be unexecuted if the user
             requests an undo.
            
             Sticky transactions should be used to impement undo of for example sliders. When you move 
             a slider such as the range slider in the filter panel it makes a modification of the document
             and this modification should immediately be reflected in the user interface. However there
             should only be one entry on the undo stack so that the entire drag of the slider can be undone
             by pressing undo once.
             
             To implement this behaviour the slider should generate a GUID and use it as a parameter to
             one sticky transactions for each modification
             
             The transactions are sticky in the sense that consecutive sticky transactions with the same GUID
             will yield a common entry on the undo stack.
             
             A sequence of sticky transactions is similiar to an aggregated transaction in 
             the sense that both will yield only one entry on the undo stack. 
             However it is more robust to use sticky transactions if it is difficult to decide when
             an aggregated transaction should be committed.
             For if a slider loses its mouse up event any other transaction will be allowed and will create
             an independent entry which will break up the sequence of sticky transactions.
             </summary>
             <param name="guid">The id which identifies the transactions which should stick together.</param>
             <param name="executor">The delegate to execute.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.FireInvalidationTriggersForAssignableRuntimeProperty(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTrace)">
            <summary>
            Fires the runtime property invalidaton triggers for an assignable runtime property.
            </summary>
            <param name="ownerNode">The owner node.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="streamingTriggerTrace">The streaming trigger trace.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.Execute(Spotfire.Dxp.Framework.Commands.UndoableCommandBase)">
            <summary>
            This method executes and command as part of a transaction. The command is is accumulated
            in the transaction so that it can be unexecuted at undo. 
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.BeginAggregatedTransaction(System.String,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
             <summary>
             Begin an aggregated transaction. Aggregated transactions should be used to implement modal
             dialogs where the interactions of the user immediately affects the user interface but where
             the user should have the option to cancel the dialog and rollback the modifications.
             
             An aggregated transaction will yield only one entry on the undo stack even if the user
             makes several modification of the document.
             
             Aggregated transactions may be nested which is useful if a modal dialog pops another modal dialog.
            
             Aggregated transactions obey the following rules.
            
             <para>
                A series of nested aggregated transaction yields only one entry on the undo stack
                which appears when the topmost aggregated transation is committed.
             </para>
            
             <para>
                If a nested aggregated transaction is rollbacked then only the currently active
                aggregated transaction is rollbacked.
             </para>
            
             <para>
                If an exception is thrown in an included transaction then only the included transaction
                is rollbacked.
             </para>
             </summary>
             <param name="displayName">A name of the transaction to be displayed to the user.</param>
             <param name="transient"><c>True</c> if transient transaction; otherwise <c>False</c>.</param>
             <param name="node">If transient, a node in the document to take snapshot of; otherwise null.</param>
             <returns>An aggregated transaction handle.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.ForceAggregatedTransactionsToUndoStack">
            <summary>
            Forces all aggregated transactions to the undo stack. This is used in the crash dump tool to make sure that any transaction that is part of an aggregated transaction is written to the dump file.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.CommitAggregatedTransaction(Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl)">
            <summary>
            Commits the aggerated transaction.
            </summary>
            <param name="handle">The handle of the aggerated transaction to commit.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.RollbackAggregatedTransaction(Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl)">
            <summary>
            Rollbacks the aggregated transaction.
            </summary>
            <param name="handle">The handle of the aggregated transaction to rollback.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.AddTransactionCompletingCallback(Spotfire.Dxp.Framework.Commands.ITransactionCompletingCallback)">
            <summary>Adds a transaction completing callback.
            The callback will be called at the end of the transaction, and
            can then do some more work, which will be included in the transaction.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.EnqueuePropertyChanged(Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <summary>
            This method is called by an document node when a property on the node has changed.
            </summary>
            <param name="changedProperty">The changed property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.SetupInternalEventHandlers(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Boolean)">
            <summary>Changes state to SettingUpInternalEventHandlers and sets up internal event handlers in
            the specified node. Called as part of the Attach operation of a node.
            </summary>
            <param name="node"></param>
            <param name="initiallyDirty"><c>true</c> if the invariant keeper should be initially dirty, <c>false</c> otherwise.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.Transaction(Spotfire.Dxp.Framework.Commands.UndoableCommandBase)">
            <summary>
            Create a transaction with one command in it.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.Transaction(System.String,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            This method starts a transaction on the document model by executing
            <paramref name="executor"/>. If there is already
            an ongoing transaction then the transaction is included in the current
            transaction.
            
            All commands that are executed as a result of the operations 
            performed by <paramref name="executor"/> will be recorded in
            the transaction so that the transaction can be unexecuted if the user
            requests an undo.
            </summary>
            <param name="displayName">A name of the transaction to be displayed to the user.</param>
            <param name="executor">The delegate to execute.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.BeginTransientTransaction(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Starts a transient transaction on the document.
            
            No external events are raised during the transient transaction and when it ends
            all modifications made to the document are rolled back.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.BeginTransaction">
            <summary>
            Starts a transaction on the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.Clear">
            <summary>
            Removes all commands from the undo and redo stacks.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.UndoCommand">
            <summary>
            Undoes the transaction on top of the undo stack and moves it to 
            the top of the redo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.UndoAll">
            <summary>
            Undoes everything on the undo stack. This is used in the crash dump tool.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.UndoCommand(System.Int32)">
            <summary>
            Unexecutes <paramref name="n"/> visible commands from the undo stack and moves them to
            the top of the redo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.RedoCommand">
            <summary>
            Redoes the transaction on top of the redo stack and moves it to 
            the top of the undo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.RedoCommand(System.Int32)">
            <summary>
            Reexecutes <paramref name="n"/> visible commands from the redo stack and moves them to
            the top of the undo stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.CanUndo">
            <summary>
            Checks if we can undo one step. This is used by the UI to decide whether to
            enable the undo button or not.
            </summary>
            <returns>True, if the undo button should be enabled</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.IsInsideAnAggregatedTransaction">
            <summary>
            Checks if we are inside an aggregated transaction.
            This is used by the UI to decide whether to enable the undo button or not.
            </summary>
            <remarks>
            The MainForm UI checks if the generation number has changed, and only
            then updates the UI. A special case is when completing an already
            started aggregated transaction; this does not increase the generation
            number, but the UI should still be updated.
            See comments for bug #58119 for more details.
            </remarks>
            <returns>True, if we are currently inside an aggregated transaction.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.IsInsideTransientTransaction">
            <summary>
            Checks if a transient transaction is executing.
            This is used by WorkPackages that should not schedule
            the work since their result should still be valid
            after the transient transaction is completed.
            </summary>
            <returns>True, if a transient transaction is executing.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.CanRedo">
            <summary>
            Checks if we can redo one step. This is used by the UI to decide whether to
            enable the redo button or not.
            </summary>
            <returns>True, if the redo button should be enabled</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.AddExchangeSnapshotCallback(System.Action)">
            <summary>
            Adds an exchange snapshot callback.
            </summary>
            <param name="exchangeSnapshotCallback">The exchange snapshot callback.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.RemoveExchangeSnapshotCallback(System.Action)">
            <summary>
            Removes the exchange snapshot callback.
            </summary>
            <param name="exchangeSnapshotCallback">The exchange snapshot callback.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.UndoStateId">
            <summary>
            Gets a Guid that is unique for the state of the undo stack. Can be used 
            to determine if the Document is dirty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.CanDoCommand(System.Object)">
            <summary>Finds the CommandHistory for the target object
            and checks if it is OK to execute commands on it.
            If no CommandHistory is found, true is .
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>false</c> if a CommandHistory is found, and it is currently
            undoing or redoing a command, otherwise, <c>true</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.FindInstance(System.Object)">
            <summary>Finds the CommandHistory for the target object.
            The target object should implement IServiceProvider
            (but may do so explicitly),
            or be a CommandHistory instance.
            </summary>
            <param name="target">Target object.</param>
            <returns>CommandHistory; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.Dispose">
            <summary>
            Disposes the command history.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.CreateSnapshot``1(``0,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Create a snapshot.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="node"></param>
            <param name="snapshotSuccededCallback"></param>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.SnapshotDocumentManager">
            <summary>
            Gets the snapshot document manager.
            
            This property may be read on any thread.
            </summary>
            <value>The snapshot document manager.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.CurrentGeneration">
            <summary> The generation of the live document. Each toplevel transaction/undo or redo steps
            this value as the first action it takes.
            Is FirstDocumentGeneration initially.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Commands.CommandHistory.IsExecuting">
            <summary>
            Gets a value indicating whether current command history is executing a command.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.BeginDisposeOfDocument">
            <summary>
            Indicates that the dispose of the document has begun.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.CreatePersistedUndoRedoManager">
            <summary>
            Creates the persisted undo redo manager. This is used in the carsh dump tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Commands.CommandHistory.CreateZipEntrysInCrashDump(Spotfire.Dxp.Internal.Utilities.ZipWriter)">
            <summary>
            Creates zip entrys in the crash dump for undo and redo stack.
            </summary>
            <param name="zWriter">The z writer.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AggregatedStreamingSubscriptionHandle">
            <summary>
            An aggregated streaming subscription handle that combines several handles.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AggregatedStreamingSubscriptionHandle.handles">
            <summary>The list of handles to dispose.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedStreamingSubscriptionHandle.#ctor(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AggregatedStreamingSubscriptionHandle" /> class.
            </summary>
            <param name="handles">The list of handles to dispose.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedStreamingSubscriptionHandle.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AnalysisViewOverride">
            <summary>
            The analysis view override.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AnalysisViewOverride.analysisView">
            <summary>
            The analysis view to override with. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AnalysisViewOverride.#ctor(Spotfire.Dxp.Framework.ApplicationModel.AnalysisView)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AnalysisViewOverride"/> class.
            </summary>
            <param name="analysisView">The analysis view.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AnalysisViewOverride.DocumentView">
            <summary>
            Gets the document view.
            </summary>
            <value>
            The document view.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ApplicationThreadDocumentViewUseHandle">
            <summary>
            A handle to the use of a document view as the current view. The previous value of the current document view
            is restored when this object is disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ApplicationThreadDocumentViewUseHandle.executionInfoToRestore">
            <summary>
            The execution information to restore.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ApplicationThreadDocumentViewUseHandle.overrideToRestore">
            <summary>
            The override to restore.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ApplicationThreadDocumentViewUseHandle.#ctor(Spotfire.Dxp.Framework.Commands.ApplicationThreadDocumentViewExecutionInfo,Spotfire.Dxp.Framework.DocumentModel.AnalysisViewOverride)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ApplicationThreadDocumentViewUseHandle" /> class.
            </summary>
            <param name="executionInfoToRestore">The execution information to restore.</param>
            <param name="overrideToRestore">The override to restore.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ApplicationThreadDocumentViewUseHandle.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager">
            <summary>
            Keeps track of the most recent generation when a user modification affected an assignable runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager.mostRecentGenerationAffectedByUser">
            <summary>
            The most recent generation affected by user.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager.MostRecentGenerationAffectedByUser">
            <summary>
            Gets or sets the most recent generation affected by user.
            </summary>
            <value>
            The most recent generation affected by user.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingQueryInitializationResult`1">
            <summary>
            Represents the result of initializating a streaming query that depend on streaming data  from another query that is not yet available.
            </summary>
            <typeparam name="T">The type of the values returned by the query.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingQueryInitializationResult`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingQueryInitializationResult`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingQueryInitializationResult`1.OnDisposeWhenHandleReturned(System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingQueryInitializationResult`1.CreateStreamingPropertyQueryState(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction">
            <summary>
            Represents an action to close the query that underlies a streaming property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction.streamerHandleToDispose">
            <summary>
            The handle to the query to close.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction.triggeredByUser">
            <summary>
            <c>true</c>, if the close of the query was triggered by an action of the user.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction.#ctor(System.IDisposable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction"/> class.
            </summary>
            <param name="streamerHandleToDispose">The streamer handle to dispose.</param>
            <param name="triggeredByUser">if set to <c>true</c> [triggered by user].</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction.StreamerHandleToDispose">
            <summary>
            Gets the streamer handle to dispose.
            </summary>
            <value>
            The streamer handle to dispose.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction.TriggeredByUser">
            <summary>
            Gets a value indicating whether the close of the query was triggered by an action of the user.
            </summary>
            <value>
              <c>true</c> if [triggered by user]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ComputedStreamingPropertyQueryValue`1">
            <summary>
            Represents a computed value that is returned from a streaming query.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ComputedStreamingPropertyQueryValue`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ComputedStreamingPropertyQueryValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ComputedStreamingPropertyQueryValue`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ComputedStreamingPropertyQueryValue`1.ComputeOnWorkerThread">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ComputedStreamingPropertyQueryValue`1.DiscardValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ComputedStreamingPropertyQueryValue`1.ExtractValue">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ContinuousStreamingQueryInitializationResult`1">
            <summary>
            Represents the result of initializating a streaming query that results in a continuous query.
            </summary>
            <typeparam name="T">The type of the values returned by the query.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ContinuousStreamingQueryInitializationResult`1.streamingQueryHandle">
            <summary>
            The streaming query handle.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ContinuousStreamingQueryInitializationResult`1.#ctor(System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ContinuousStreamingQueryInitializationResult`1"/> class.
            </summary>
            <param name="streamingQueryHandle">The streaming query handle.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ContinuousStreamingQueryInitializationResult`1.OnDisposeWhenHandleReturned(System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ContinuousStreamingQueryInitializationResult`1.CreateStreamingPropertyQueryState(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ILimitationSource">
            <summary>
            An interface for instances that limits the validity of a runtime property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ILimitationSource.TryGetFirstGenerationOfNestedValiditySpanHole(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <summary>
            Tries the get first generation of nested validity span hole.
            </summary>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="holeFirstGeneration">The hole first generation.</param>
            <returns><c>true</c>, if succesful.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ILimitationSource.FirstGenerationOfParentHole">
            <summary>
            Gets the first generation of parent hole.
            </summary>
            <value>
            The first generation of parent hole.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InitializeStreamingQueryDelegate`2">
            <summary>
            A delegate that shoudl create a stremer which sends to values to the specified stream sink.
            </summary>
            <typeparam name="T">The values in the steram.</typeparam>
            <typeparam name="TNode">The type of the owner node.</typeparam>
            <param name="documentNode">A document node which can be used to read settings needed for the streamer.</param>
            <param name="triggeredByUser">if set to <c>true</c> then the query was triggered by the user.</param>
            <param name="streamingPropertySink">The stream sink.</param>
            <returns>A handle to the streamer which will be dispsoed when the stream is no longer needed.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentViewAction`1">
            <summary>
            A class for creating actions that should be executed with the current document view.
            </summary>
            <typeparam name="T">The type of the value passed to teh action</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentViewAction`1.Create(System.Action{`0})">
            <summary>
            Creates an action that executes in the current document view from the specified action.
            </summary>
            <param name="action">The action.</param>
            <returns>The created action</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentViewFunc`1">
            <summary>
            A class for creating functions that should be executed with the current document view.
            </summary>
            <typeparam name="T">The type of the value returned from the function</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentViewFunc`1.Create(System.Func{`0})">
            <summary>
            Creates an function that executes in the current document view from the specified function.
            </summary>
            <param name="func">The function.</param>
            <returns>The created function</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DummyStreamingSubscriptionHandle">
            <summary>
            A dummy streaming subscription handle.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2">
            <summary>
            A dynamic subscription handle which can react to changes in the document and modify the set of subscriptions.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TSubscriberNode">The type of the subscriber nodes.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2.documentNodeHandle">
            <summary>
            A node handle for the document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2.nodeEnumerator">
            <summary>
            The node enumerator.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2.subscriptionDelegate">
            <summary>
            The subscription delegate.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2.threadSafeEventManager">
            <summary>
            The thread safe event manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2.subscriptionHandles">
            <summary>
            A dictionary which maps node handles for subscription nodes to active subscription handles.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2.#ctor(`0,System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Func{`1,Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle},Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2"/> class.
            </summary>
            <param name="documentNode">A document node.</param>
            <param name="nodeEnumerator">An delegate that given the document node can enumerate a set of subscription nodes.</param>
            <param name="subscriptionDelegate">A delegate that creates a subscription given a subscription node.</param>
            <param name="trigger">A trigger. When the trigger fires <paramref name="nodeEnumerator"/> is rexecuted and <paramref name="subscriptionDelegate" />
            is called for added nodes and the subscription handles are disposed for removed nodes</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2.OnTriggerFired">
            <summary>
            Called when the trigger fired.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DynamicStreamingSubscriptionHandle`2.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ExternalStreamingEventHandler">
            <summary>
            The type of external streaming event handlers.
            </summary>
            <param name="isStreamingUpdate">set to <c>true</c> if the event was caused by a streaming transaction.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IViewProperty">
            <summary>
            An interface for view properties. 
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.INode" />
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IViewProperty.RestoreValiditySpan(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Restores the validity span for the specified document view key.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValue`1">
            <summary>
            Represents a lazy value that is returned from a streaming query.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValue`1.computer">
            <summary>
            A delegate that wil compute the value when invoked.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValue`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValueComputer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValue`1"/> class.
            </summary>
            <param name="computer">The computer.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValue`1.ComputeOnWorkerThread">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValue`1.DiscardValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValue`1.ComputeValue">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValueComputer`1">
            <summary>
            The type of a delegate that is used with <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyStreamingPropertyQueryValue`1"/> 
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <returns>The value</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingPropertyQueryState`1">
            <summary>
            Represents the state of a streaming property query where it is not applicable to generate a query.
            </summary>
            <typeparam name="T">The type of the values returned by the query. </typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingPropertyQueryState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingPropertyQueryState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingPropertyQueryState`1.OnInvalidationTriggerFired(System.Boolean,Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingPropertyQueryState`1.DisposeOnApplicationThread(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingQueryInitializationResult`1">
            <summary>
            Represents the result of initializating a streaming query in a state where it is not applicable and there shopuld really not be any subscription active.
            </summary>
            <typeparam name="T">The type of the values returned by the query.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingQueryInitializationResult`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingQueryInitializationResult`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingQueryInitializationResult`1.OnDisposeWhenHandleReturned(System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NotApplicableStreamingQueryInitializationResult`1.CreateStreamingPropertyQueryState(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.INonSharedRuntimePropertyValue">
            <summary>
            An interface which allows instances of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1" />
            to be typed with the same type.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.INonSharedRuntimePropertyValue.LimitValiditySpanDueToEvaluation(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Limits the validity span due to evaluation.
            </summary>
            <param name="limitationSource">The limitation source.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> [is valid in live ignoring streaming].</param>
            <param name="isClosedDueToException">if set to <c>true</c> [is closed due to exception].</param>
            <param name="isOwningThread">if set to <c>true</c> [is owning thread].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.INonSharedRuntimePropertyValue.PropagateValiditySpanDueToModificationInLive(System.Int32,System.Boolean)">
            <summary>
            Propagates the validity span due to modification in live.
            </summary>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject`1">
            <summary>
            A interface for the lock object for runtime property multiplexors.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject`1.CloseRuntimePropertyTransientTransactionHole(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0},System.Int32)">
            <summary>
            Closes the specified runtime property transient transaction hole.
            </summary>
            <param name="ttMux">The tt mux.</param>
            <param name="currentGeneration">The current generation.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject`1.RuntimePropertyMultiplexor">
            <summary>
            Gets the runtime property multiplexor.
            </summary>
            <value>
            The runtime property multiplexor.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject`1.OnRuntimePropertyValueInvalidationStateChangedForValueInHole(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0},System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Called when runtime property value invalidation state changed for a value in the specified hole.
            </summary>
            <param name="runtimePropertyTransientTransactionHole">The runtime property transient transaction hole.</param>
            <param name="lastGenerationForRuntimePropertyValue">The last generation for runtime property value.</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> [is valid in live ignoring streaming].</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject`1.TryInsertTrigger(Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Tries the insert trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <returns><c>true</c>, if the trigger was inserted</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject`1.RestoreTriggersAtTransientTransactionRollback(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Restores the triggers at transient transaction rollback.
            </summary>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject`1.CreateOrExtendHoleForComputingValue(System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <summary>
            Creates a hole or extends an existing hole which is in the validty span of a currently computing runtime property value.
            </summary>
            <param name="firstGen">The first gen.</param>
            <param name="context">The context.</param>
            <param name="holeFirstGen">The hole first gen.</param>
            <returns>
            The first generation of the hole. Note that this may smaller than the provided first generation if the hole already existed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject`1.MigrateFromHole(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}[]@,System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0},System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@)">
            <summary>
            Migrates the specified runtime property value from a transient transaction hole.
            </summary>
            <param name="limitationSource">The limitation source.</param>
            <param name="readPropertyThreadSafeTransientTransactionContext">The read property thread safe transient transaction context.</param>
            <param name="firstGenerationOfReadProperty">The first generation of read property.</param>
            <param name="lastGenerationOfReadProperty">The last generation of read property.</param>
            <param name="holeRuntimePropertyValues">The hole runtime property values.</param>
            <param name="holeValidIgnoringStreamingCount">The hole valid ignoring streaming count.</param>
            <param name="holeComputedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [hole computed values valid ignoring streaming no longer in mux].</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
            <param name="source">The source.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="waitingThreadsThatStillIsInValiditySpan">The waiting threads that still is in validity span.</param>
            <param name="waitingThreadsThatIsNoLongerInValiditySpan">The waiting threads that is no longer in validity span.</param>
            <returns>
            The hole that the values migrated to.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyTransientTransactionHole">
            <summary>
            A non generic interface implemented by instances of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyTransientTransactionHole.FirstGeneration">
            <summary>
            Gets the first generation of the hole.
            </summary>
            <value>
            The first generation.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyTransientTransactionHole.Close(System.Int32)">
            <summary>
            Closes the hodl with the specified current generation.
            </summary>
            <param name="currentGeneration">The current generation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyTransientTransactionHole.RestoreTriggersAtTransientTransactionRollback">
            <summary>
            Restores the triggers at transient transaction rollback.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyTransientTransactionHole.Extend(System.Int32,System.Int32@)">
            <summary>
            Extends this instance to the specified first generation.
            </summary>
            <param name="newFirstGen">The new first gen.</param>
            <param name="holeFirstGen">The hole first gen.</param>
            <returns><c>true</c> if the operation had any effect.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue">
            <summary>
            An interface which allows instances of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1"/>
            to be typed with the same type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue.IsValidInLive">
            <summary>
            Gets a value indicating whether this instance is valid in live.
            </summary>
            <value>
              <c>true</c> if this instance is valid in live; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue.FirstGenerationWithoutSynchronization">
            <summary>
            Gets the first generation without synchronization.
            </summary>
            <value>
            The first generation without synchronization.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue.ComputedInGeneration">
            <summary>
            Gets the generation that the value was computed in.
            </summary>
            <value>
            The computed in generation.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue.LastGenerationWithoutSynchronization">
            <summary>
            Gets the last generation without synchronization.
            </summary>
            <value>
            The last generation without synchronization.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue.HasValue">
            <summary>
            Gets a value indicating whether this instance has a value.
            </summary>
            <value>
              <c>true</c> if this instance has value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner`1">
            <summary>
            An interface for runtime property value owners.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner`1.Mux">
            <summary>
            Gets the runtime property multiplexor.
            </summary>
            <value>
            The runtime property multiplexor.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner`1.LockObject">
            <summary>
            Gets the lock object.
            </summary>
            <value>
            The lock object.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner`1.OnRuntimePropertyValueInvalidationStateChanged(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Called when the runtime property value invalidation state changed.
            </summary>
            <param name="lastGenerationForRuntimePropertyValue">The last generation for runtime property value.</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> [is valid in live ignoring streaming].</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner`1.Remove(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Removes the specified runtime property value.
            </summary>
            <param name="runtimePropertyValue">The runtime property value to remove.</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner`1.ThreadSafeTransientTransactionContext">
            <summary>
            Gets the thread safe transient transaction context.
            </summary>
            <value>
            The thread safe transient transaction context.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner`1.FirstGenerationOfParentHole">
            <summary>
            Gets the first generation of parent hole.
            </summary>
            <value>
            The first generation of parent hole.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner`1.Migrate(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0},System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@)">
            <summary>
            Migrates the specified runtime property value.
            </summary>
            <param name="limitationSource">The limitation source.</param>
            <param name="readPropertyThreadSafeTransientTransactionContext">The read property thread safe transient transaction context.</param>
            <param name="firstGenerationOfReadProperty">The first generation of read property.</param>
            <param name="lastGenerationOfReadProperty">The last generation of read property.</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="waitingThreadsThatStillIsInValiditySpan">The waiting threads that still is in validity span.</param>
            <param name="waitingThreadsThatIsNoLongerInValiditySpan">The waiting threads that is no longer in validity span.</param>
            <returns>
            The hole that the value migrated to.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueState`1">
            <summary>
            An interface for classes that hold state for runtime property values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueState`1.CloseValiditySpanDueToModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToTearDown{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Closes the validity span due to modification in live.
            </summary>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
            <param name="triggersToTearDown">The triggers to tear down.</param>
            <param name="runtimeAttachedSubTree">The runtime attached sub tree.</param>
            <param name="firstValidGeneration">The first valid generation.</param>
            <param name="invalidated">if set to <c>true</c> [invalidated].</param>
            <param name="invalidatedIfStreamingIsIgnored">if set to <c>true</c> [invalidated if streaming is ignored].</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueState`1.Mux">
            <summary>
            Gets the mux.
            </summary>
            <value>
            The mux.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueState`1.RuntimePropertyValue">
            <summary>
            Gets the runtime property value.
            </summary>
            <value>
            The runtime property value.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1">
            <summary>
            Represents a hole in the validty of the values in a runtime property multiplexor due to modifications in a transient transaction.
            </summary>
            <typeparam name="T">The type of the values in the hole.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.firstGeneration">
            <summary>
            The first generation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.lastGeneration">
            <summary>
            The last generation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.runtimePropertyValues">
            <summary>
            The runtime property values.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.validIgnoringStreamingCount">
            <summary>
            The count of runtime property values in the hole which are valid or valid if streaming is ignored.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.computedValuesValidIgnoringStreamingNoLongerInMux">
            <summary>
            <c>true</c>, if computed values that was valid in live if streaming is ignored has been removed from the hole.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.mostRecentGenerationAffectedByUser">
            <summary>
            The most recent generation where the trigger has detected that the runtime property has been affected by a user (non-streaming) modification.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.mostRecentInvalidationGeneration">
            <summary>
            The most recent generation where the trigger has detected that the runtime property has been affected by a change of the document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.lockObject">
            <summary>
            The lock object associated with this instance. This is a runtime property multiplexor or for shared nodes it is the associated override.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.FirstGeneration">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.FirstGenerationOfParentHole">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.#ctor(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1"/> class.
            </summary>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="lockObject">The lock object.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.Migrate(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0},System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.GetNestingLevel(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0})">
            <summary>
            Gets the nesting level of the associated transient transaction for the specified hole or 0 if the specified hole is <c>null</c>.
            </summary>
            <param name="runtimePropertyTransientTransactionHole">The runtime property transient transaction hole.</param>
            <returns>The nesting level.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.RestoreTriggersAtTransientTransactionRollback">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.Close(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.ThreadSafeTransientTransactionContext">
            <summary>
            Gets the thread safe transient transaction context associated with this instance.
            </summary>
            <value>
            The thread safe transient transaction context.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.LockObject">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.Mux">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.LastGeneration">
            <summary>
            Gets the last generation.
            </summary>
            <value>
            The last generation.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.Extend(System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.ExtendDueToMigration(System.Int32)">
            <summary>
            Extends this instance to the specified first generation due to migration.
            </summary>
            <param name="newFirstGen">The new first gen.</param>
            <returns>The previous first generation</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.MigrateTo(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0})">
            <summary>
            Migrates the specified runtime property value to this instance.
            </summary>
            <param name="runtimePropertyValue">The runtime property value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.LookupOrInsertRuntimePropertyValue(System.Int32,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <summary>
            This method searches the hole for a runtime property value that is valid for
            <paramref name="currentThreadGeneration" />.
            If there is no such value it creates and inserts such a value.
            The method returns true if it created a value and false otherwise.
            It should be noted that the entry that is returned was valid for
            <paramref name="currentThreadGeneration" /> when this method held the lock on the
            runtime property value. However, the value may no longer be valld when it is returned.
            That can happen if the value is currently evaluating in which case the interval may shrink.
            It can also happen if the value is invalidated because of a modification on the live document.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="ownerNode">The owner node.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="needsTrigger">if set to <c>true</c> [needs trigger].</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="insertedRuntimePropertyValueValidity">The inserted runtime property value validity.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.CloseValiditySpanDueToDetachOrUserModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.Commands.ChangedProperty,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0}@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,System.Int32,System.Boolean,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@)">
            <summary>
            Called when an invalidation trigger fired because of a detach or a non streaming transaction.
            </summary>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="changedProperty">The changed property.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent open hole.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> then the validity span should be closed because of a detach of a runtime attached subtree due to streaming.</param>
            <param name="invalidatedIgnoringStreaming">set to <c>true</c> if the multiplexor was invalidated ignoring streaming.</param>
            <param name="triggerToTearDown">The trigger to tear down.</param>
            <param name="documentViewForTriggerTearDown">The document view for trigger tear down.</param>
            <returns>
            A array of affected runtime property values, or <c>null</c> if no such values exist.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.Remove(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Removes the specified runtime property value from this instance.
            </summary>
            <param name="runtimePropertyValue">The runtime property value to remove.</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.OnRuntimePropertyValueInvalidationStateChanged(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.OnRuntimePropertyValueInvalidationStateChanged(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{`0},System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0}@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0})">
            <summary>
            Called when runtime property value invalidation state changed for a value in this instance.
            </summary>
            <param name="lockObject">The lock object.</param>
            <param name="lastGenerationForRuntimePropertyValue">The last generation for runtime property value.</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> [is valid in live ignoring streaming].</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent hole for open transient transaction.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.NeedsTriggers">
            <summary>
            Checks if the hole needs a trigger to be set up.
            </summary>
            <returns><c>true</c>, if a trigger is needed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.GetLast">
            <summary>
            Gets the last value.
            </summary>
            <returns>The last value or <c>null</c> if no value exists.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.AddInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0})">
            <summary>
            Add the invalidation declarer.
            </summary>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <returns>
            An unfold closure
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.RemoveInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0})">
            <summary>
            Removes the invalidation declarer.
            </summary>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <returns>
            A trigger that should be torn down.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole`1.TryInsertTrigger(Spotfire.Dxp.Framework.DocumentModel.Trigger@,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Tries to insert the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="triggerThatHasBeenSetUp">The trigger that has been set up.</param>
            <returns>
              <c>true</c>, if the trigger was inserted
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionNonSharedRuntimePropertyMultiplexor`1">
            <summary>
            A runtime property multiplexor that has been created in a transient transaction for a node that has been attached in the transient transaction.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionNonSharedRuntimePropertyMultiplexor`1.threadSafeTransientTransactionContext">
            <summary>
            The thread safe transient transaction context.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionNonSharedRuntimePropertyMultiplexor`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionNonSharedRuntimePropertyMultiplexor`1"/> class.
            </summary>
            <param name="ownerMux">The owner mux.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="liveDependencyDeclarer">The dependency declarer.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionNonSharedRuntimePropertyMultiplexor`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,`0},Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionNonSharedRuntimePropertyMultiplexor`1"/> class.
            </summary>
            <param name="ownerMux">The owner mux.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="liveDependencyDeclarer">The dependency declarer.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionNonSharedRuntimePropertyMultiplexor`1.ThreadSafeTransientTransactionContext">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray">
            <summary>
            A static class with methods that operates on an array of runtime property values and takes transient transaction holes into account..
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.GetLiveValue``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@)">
            <summary>
            Gets the live value. This method may only be called on the application thread when there exists a value that is valid in the live document.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent hole for open transient transaction.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <returns>
            The live value
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.GetDocumentView">
            <summary>
            Gets the document view.
            </summary>
            <returns>The document view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.WaitForPendingTriggerSetup``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,System.Boolean@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.DocumentView@)">
            <summary>
            Waits for a pending trigger setup.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="triggerIsBeingSetUp">if set to <c>true</c> [trigger is being set up].</param>
            <param name="useDocumentViewFromTriggerSetup">if set to <c>true</c> [use document view from trigger setup].</param>
            <param name="documentViewFromTriggerSetup">The document view from trigger setup.</param>
            <returns><c>true</c>, if this thread needs to set up the trigger becuase no other thread has set up the trigger..</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.Remove``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,System.Int32@,System.Boolean@)">
            <summary>
            Removes the specified runtime property value.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="runtimePropertyValue">The runtime property value to remove.</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.OnRuntimePropertyValueInvalidationStateChanged``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},System.Int32@,System.Boolean@,System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0},Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Called when a runtime property value was invalidated because a property was read on the computing thread.
            </summary>
            <typeparam name="T">The type of the values in the runtime property.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent open hole.</param>
            <param name="ownerHole">The owner hole.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="lastGenerationForRuntimePropertyValue">The last generation for runtime property value.</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> [is valid in live ignoring streaming].</param>
            <param name="runtimePropertyValueInvalidationState">The runtime property value state known to multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.AddInvalidationDeclarer``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``0})">
            <summary>
            Add the invalidation declarer.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent hole for open transient transaction.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <returns>
            An unfold closure
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.RemoveInvalidationDeclarer``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``0})">
            <summary>
            Removes the invalidation declarer.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent hole for open transient transaction.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <returns>
            A trigger that should be torn down.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.OnInvalidationTriggerFiredByStreaming``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[],System.Int32)">
            <summary>
            Called when an invalidation trigger fired because of a streaming transaction.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="mostRecentInvalidationGeneration">The most recent invalidation generation.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="currentGeneration">The current generation.</param>
            <returns>
            A runtime property value that should be invalidated or <c>null</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.TryInsertTrigger``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Tries to insert the trigger.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent open hole.</param>
            <param name="trigger">The trigger.</param>
            <param name="triggerIsBeingSetUp">if set to <c>true</c> [trigger is being set up].</param>
            <param name="triggerThatHasBeenSetUp">The trigger that has been set up.</param>
            <returns>
              <c>true</c>, if the trigger was inserted
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.Migrate``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{``0},System.Int32,System.Int32,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@)">
            <summary>
            Migrates the specified runtime property value.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="limitationSource">The limitation source.</param>
            <param name="readPropertyThreadSafeTransientTransactionContext">The read property thread safe transient transaction context.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent hole for open transient transaction.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="source">The source.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="firstGenerationOfReadProperty">The first generation of read property.</param>
            <param name="lastGenerationOfReadProperty">The last generation of read property.</param>
            <param name="waitingThreadsThatStillIsInValiditySpan">The waiting threads that still is in validity span.</param>
            <param name="waitingThreadsThatIsNoLongerInValiditySpan">The waiting threads that is no longer in validity span.</param>
            <returns>
            The hole that the value migrated to.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.CreateOrExtendHoleForComputingValue``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <summary>
            Creates a hole or extends an existing hole which is in the validty span of a currently computing runtime property value.
            </summary>
            <typeparam name="T">The type of the values in the hole.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent hole for open transient transaction.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="firstGen">The first gen.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="holeFirstGen">The first generation of the hole..</param>
            <returns><c>true</c>, if the operation had an effect.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.CloseRuntimePropertyTransientTransactionHole``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0},System.Int32)">
            <summary>
            Closes the runtime property transient transaction hole.
            </summary>
            <typeparam name="T">The type of the values in the hole.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent open hole.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="ttMux">The tt mux.</param>
            <param name="currentGeneration">The current generation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.RestoreTriggersAtTransientTransactionRollback``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <summary>
            Restores the triggers at transient transaction rollback.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent hole for open transient transaction.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="triggerIsBeingSetUp">if set to <c>true</c> [trigger is being set up].</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.LookupOrInsertRuntimePropertyValue``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,System.Int32@,System.Boolean@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Int32,System.Int32,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.DocumentView@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <summary>
            This method searches the multiplexor for a runtime property value that is valid for
            <paramref name="currentThreadGeneration" />.
            If there is no such value it creates and inserts such a value.
            The method returns true if it created a value and false otherwise.
            It should be noted that the entry that is returned was valid for
            <paramref name="currentThreadGeneration" /> when this method held the lock on the
            runtime property value. However, the value may no longer be valld when it is returned.
            That can happen if the value is currently evaluating in which case the interval may shrink.
            It can also happen if the value is invalidated because of a modification on the live document.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <param name="triggerIsBeingSetUp">if set to <c>true</c> [trigger is being set up].</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent open hole.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="multiplexorLastGeneration">The multiplexor last generation.</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="mostRecentInvalidationGeneration">The most recent invalidation generation.</param>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="ownerNode">The owner node.</param>
            <param name="dependencyDeclarer">The dependency declarer.</param>
            <param name="multiplexorFirstGeneration">The multiplexor first generation.</param>
            <param name="multiplexorFirstGenerationIgnoringStreaming">The multiplexor first generation ignoring streaming.</param>
            <param name="useDocumentViewFromTriggerSetup">if set to <c>true</c> [use document view from trigger setup].</param>
            <param name="documentViewFromTriggerSetup">The document view from trigger setup.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="insertedRuntimePropertyValueValidity">The inserted runtime property value validity.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.TransientTransactionRuntimePropertyValueArray.CloseValiditySpanDueToDetachOrUserModificationInLive``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.Commands.ChangedProperty,System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Called when an invalidation trigger fired because of a detach or a non streaming transaction.
            </summary>
            <typeparam name="T">The type of the values in the runtime property.</typeparam>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="changedProperty">The changed property.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> then the validity span should be closed because of a detach of a runtime attached subtree due to streaming.</param>
            <param name="lockObject">The lock object.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="mostRecentInvalidationGeneration">The most recent invalidation generation.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [valid ignoring streaming].</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent open hole.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="invalidated">if set to <c>true</c> [invalidated].</param>
            <param name="invalidatedIfStreamingIsIgnored">if set to <c>true</c> [invalidated if streaming is ignored].</param>
            <param name="shallRaiseEvents">if set to <c>true</c> [shall raise events].</param>
            <returns>
            A array of affected runtime property values, or <c>null</c> if no such values exist.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValueOverride">
            <summary>
            Represents the session override state for a shared assignable runtime property value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValueOverride.assignableRuntimePropertyUserModificationManager">
            <summary>
            The assignable runtime property user modification manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValueOverride.isLastGenerationLimitedByStreaming">
            <summary>
            <c>true</c>, if the last generation was limited by a modification during a streaming transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValueOverride.lastGeneration">
            <summary>
            The last generation where the value is valid.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValueOverride.#ctor(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValueOverride"/> class.
            </summary>
            <param name="lastGeneration">The last generation.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="assignableRuntimePropertyUserModificationManager">The assignable runtime property user modification manager.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValueOverride.AssignableRuntimePropertyUserModificationManager">
            <summary>
            Gets the assignable runtime property user modification manager.
            </summary>
            <value>
            The assignable runtime property user modification manager.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValueOverride.IsLastGenerationLimitedByStreaming">
            <summary>
            Gets a value indicating whether this instance is last generation limited by streaming.
            </summary>
            <value>
            <c>true</c> if this instance is last generation limited by streaming; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValueOverride.LastGeneration">
            <summary>
            Gets the last generation where the value is valid.
            </summary>
            <value>
            The last generation where the value is valid.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ComputedValue`1">
            <summary>
            Represents a computed value as read from a runtime property along with its validity information.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ComputedValue`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ComputedValue`1.runtimePropertyValueValidity">
            <summary>
            The runtime property value validity.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ComputedValue`1.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ComputedValue`1" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="runtimePropertyValueValidity">The runtime property value validity.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ComputedValue`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ComputedValue`1.RuntimePropertyValueValidity">
            <summary>
            Gets the runtime property value validity.
            </summary>
            <value>
            The runtime property value validity.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ComputedValue`1.LimitGenerationsUsedByRuntimeProperty">
            <summary>
            Limits the generation used by the currently evaluating runtime
            property, if any.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel">
            <summary>
            The level of a thread safe invalidation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel.NotValidInLiveIfStreamingIsIgnored">
            <summary>
            The property is not valid in live if streaming is ignored.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel.NotValidInLive">
            <summary>
            The property is not valid in live.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.PublicationState">
            <summary>
            Contains information about the state of a runtime property value when it is published.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.PublicationState.validity">
            <summary>
            The validity.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.PublicationState.threadsWaitingForEvaluation">
            <summary>
            The threads waiting for evaluation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.PublicationState.#ctor(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.PublicationState"/> class.
            </summary>
            <param name="validity">The validity.</param>
            <param name="threadsWaitingForEvaluation">The threads waiting for evaluation.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.PublicationState.Validity">
            <summary>
            Gets the validity.
            </summary>
            <value>
            The validity.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.PublicationState.NotifyWaitingThreads">
            <summary>
            Notifies the waiting threads.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState">
            <summary>
            Represents the invalidation state of a runtime property value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState.None">
            <summary>
            The value is not invalid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState.Invalid">
            <summary>
            The value is invalid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState.InvalidDueToUserOrDetached">
            <summary>
            The value invalid due to a user modification (i.e., it is not invalidated by streaming) or the value is part of a detahed subtree. 
            Note that if the value was part of a runtime attahced sub tree then it may have been detached by streaming.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity">
            <summary>
            Information for when a runtime property value is valid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.firstGeneration">
            <summary>
            The first generation which this value is valid in. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.lastGeneration">
            <summary>
            The last generation which this value is valid in.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.firstGenerationIgnoringStreaming">
            <summary>
            The first generation which this value is valid in, ignoring streaming transactions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.isLastGenerationLimitedByStreaming">
            <summary>
            <c>true</c>, if the last generation was determined by a streaming transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.isValidInLiveIgnoringStreaming">
            <summary>
            <c>true</c>, if the value was valid in live ignoring streaming when the value was read.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.#ctor(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity" /> class.
            </summary>
            <param name="limitationSource">The limitation source.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> [is valid in live ignoring streaming].</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.IsValidInLiveIgnoringStreaming">
            <summary>
            Gets a value indicating whether this instance is valid in live ignoring streaming.
            </summary>
            <value>
            <c>true</c> if this instance is valid in live ignoring streaming; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.LastGeneration">
            <summary>
            Gets the last generation.
            </summary>
            <value>
            The last generation.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.FirstGeneration">
            <summary>
            Gets the first generation.
            </summary>
            <value>
            The first generation.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity.LimitGenerationsUsedByRuntimeProperty">
            <summary>
            Limits the generation used by the currently evaluating runtime
            properties, if any.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValueState`1">
            <summary>
            Rerpesents the state of a runtime property value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValueState`1.runtimePropertyValueOverride">
            <summary>
            The runtime property value override
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValueState`1.sharedRuntimePropertyValue">
            <summary>
            The shared runtime property value
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValueState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValueState`1"/> class.
            </summary>
            <param name="runtimePropertyValueOverride">The runtime property value override.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValueState`1.Mux">
            <summary>
            Gets the runtime property multiplexor that holds this value.
            </summary>
            <value>
            The mux.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValueState`1.RuntimePropertyValue">
            <summary>
            Gets the underlying runtime property value.
            </summary>
            <value>
            The runtime property value.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValueState`1.CloseValiditySpanDueToModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToTearDown{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode@,System.Int32@,System.Boolean@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty">
            <summary>
            Represents a thread that is evaluating a runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.thread">
            <summary>
            The thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.progress">
            <summary>
            The progress.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.threadTransactionInfo">
            <summary>
            The thread transaction information
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.surroundingLimitationTarget">
            <summary>
            The current limitation target when the evaluation started.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.threadsWaitingForEvaluation">
            <summary>
            The threads waiting for evaluation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.#ctor(System.Threading.Thread,Spotfire.Dxp.Framework.ApplicationModel.MonitorableProgress,Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty"/> class.
            </summary>
            <param name="thread">The thread.</param>
            <param name="progress">The progress.</param>
            <param name="threadTransactionInfo">The thread transaction information.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.Thread">
            <summary>
            Gets the thread.
            </summary>
            <value>
            The thread.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.Progress">
            <summary>
            Gets the progress.
            </summary>
            <value>
            The progress.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.ThreadTransactionInfo">
            <summary>
            Gets the thread transaction information.
            </summary>
            <value>
            The thread transaction information.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.ThreadsWaitingForEvaluation">
            <summary>
            Gets the threads waiting for evaluation.
            </summary>
            <value>
            The threads waiting for evaluation.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.SurroundingLimitationTarget">
            <summary>
            Gets the surrounding limitation target.
            </summary>
            <value>
            The surrounding limitation target.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.GetWaitingThreadsThatStillIsInValiditySpan(System.Int32,System.Int32)">
            <summary>
            Gets the waiting threads that still is in validity span.
            </summary>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <returns>
            The waiting threads that still is in validity span
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadEvaluatingRuntimeProperty.RemoveWaitingThreadsThatIsNoLongerInValiditySpan(System.Int32,System.Int32)">
            <summary>
            Gets the waiting threads that still is in validity span.
            </summary>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <returns>
            The waiting threads that still is in validity span
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty">
            <summary>
            Information about a thread that waits for another thread that evaluates a runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.limitationTarget">
            <summary>
            The limitation target.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.threadTransactionInfo">
            <summary>
            The thread transaction information
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.isNoLongerValid">
            <summary>
            Set to <c>true</c> if the value that the thread is waiting for is no longer valid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.hasPublishedValue">
            <summary>
            Set to <c>true</c> if a value has been published.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.#ctor(Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty"/> class.
            </summary>
            <param name="threadTransactionInfo">The thread transaction information.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.ThreadTransactionInfo">
            <summary>
            Gets the thread transaction information.
            </summary>
            <value>
            The thread transaction information.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.LimitValiditySpanDueToEvaluation(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Limit the waiting thread.
            </summary>
            <param name="limitationSource">The limitation source.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> [is valid in live ignoring streaming].</param>
            <param name="isClosedDueToException">if set to <c>true</c> [is closed due to exception].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.PropagateValiditySpanClosedDueToModificationInLive(System.Int32,System.Boolean)">
            <summary>
            Propagates the validity span due to modification in live.
            </summary>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.WaitForComputation">
            <summary>
            Waits for the computation of the runtime property.
            </summary>
            <returns><c>true</c>, if the value is no longer valid for the waiting thread.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.OnNoLongerInSpan">
            <summary>
            Called by the computing thread when the value is no longer valid for the waiting thread because the generation fro the waiting thread is no longer in the validity span.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty.OnValuePublished">
            <summary>
            Called by the computing thread when the value has been pulished.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1">
            <summary>
            Base class for assignable runtime property values.
            </summary>
            <typeparam name="T">The type of the contained values.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.firstGeneration">
            <summary>
            The first generation where the value is valid
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.firstGenerationIgnoringStreaming">
            <summary>
            The first generation where the value would have been valid if streaming transactions are ignored.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1"/> class.
            </summary>
            <param name="assignableRuntimePropertyValue">The assignable runtime property value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.FirstGenerationIgnoringStreaming">
            <summary>
            Gets the first generation ignoring streaming.
            </summary>
            <value>
            The first generation ignoring streaming.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.RawValue">
            <summary>
            Gets the raw value.
            </summary>
            <value>
            The raw value.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.GetStreamingPropertyValue(`0)">
            <summary>
            Gets the streaming property value.
            </summary>
            <param name="initialValue">The initial value.</param>
            <returns>The value</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.GetInvalidationState(System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Gets the last generation where the value is valid.
            </summary>
            <param name="lastGeneration">The last generation.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.TryGetFirstGenerationOfNestedValiditySpanHole(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.FirstGenerationOfParentHole">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.CloseValiditySpanAndAssignOwner(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager)">
            <summary>
            Closes the validity span and assign an owner.
            </summary>
            <param name="previousGeneration">The previous generation.</param>
            <param name="isStreamingTransaction">if set to <c>true</c> [is streaming transaction].</param>
            <param name="assignableRuntimePropertyUserModificationManager">The assignable runtime property user modification manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.CloseValiditySpan(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager)">
            <summary>
            Closes the validity span.
            </summary>
            <param name="previousGeneration">The previous generation.</param>
            <param name="isStreamingTransaction">if set to <c>true</c> [is streaming transaction].</param>
            <param name="assignableRuntimePropertyUserModificationManager">The assignable runtime property user modification manager.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.StreamingPropertyTransientTransactionValueValiditySpan">
            <summary>
            Represents the validty span of a streaming property. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.StreamingPropertyTransientTransactionValueValiditySpan.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.StreamingPropertyTransientTransactionValueValiditySpan"/> class.
            </summary>
            <param name="firstGenerationOfParentHole">The first generation of parent hole.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.StreamingPropertyTransientTransactionValueValiditySpan.TryGetFirstGenerationOfNestedValiditySpanHole(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue`1.StreamingPropertyTransientTransactionValueValiditySpan.FirstGenerationOfParentHole">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IAssignableRuntimePropertyValue">
            <summary>
            A marker interface for assignable runtime property values.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueBase" />
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueBase">
            <summary>
            Base interface for runtime properties and assignable runtime properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueBase.Dispose">
            <summary>
            Disposes the rtp value. 
            This method is called by DocumentGenerationManger and DocumentGenerationMembers 
            when a generation dies and there is no other generation in which the value is valid. 
            That is, the value itself shall die. 
            If the value held by the runtime property value implements IDisposableRuntimePropertyValue, it is disposed.
            If this a runtime property then the rtp value from the rtp value multiplexor. 
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ISharedAssignableRuntimePropertyValue">
            <summary>
            A marker interface for shared assignable runtime property values.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1">
            <summary>
            Holds the value in an assignable runtime property value which is not shared.
            </summary>
            <typeparam name="T">The type of the contained values.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.lastGeneration">
            <summary>
            The last generation where the value is valid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.isLastGenerationLimitedByStreaming">
            <summary>
            <c>true</c>, if the last generation was limited by a modification during a streaming transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.assignableRuntimePropertyUserModificationManager">
            <summary>
            The assignable runtime property user modification manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1"/> class.
            </summary>
            <param name="sharedAssignableRuntimePropertyValue">The shared assignable runtime property value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.GetInvalidationState(System.Int32@,System.Boolean@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.CloseValiditySpan(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1">
            <summary>
            Holds the value in an assignable runtime property value which is shared.
            </summary>
            <typeparam name="T">The type of the contained values.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1" /> class.
            </summary>
            <param name="firstGeneration">The first generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1"/> class.
            </summary>
            <param name="nonSharedAssignableRuntimePropertyValue">The non shared assignable runtime property value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1.GetInvalidationState(System.Int32@,System.Boolean@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedAssignableRuntimePropertyValue`1.CloseValiditySpan(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyUserModificationManager)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorOverride">
            <summary>
            An interface for RuntimePropertyMultiplexorOverride.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorOverride.IsEmpty">
            <summary>
            Determines whether the runtime property multiplexor.
            </summary>
            <returns><c>true</c>, if the runtime proerty multiplxor is empty.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1">
            <summary>
            This class is the non shared variant of the RuntimePropertyMultiplexor class.
            </summary>
            <typeparam name="T">The type of the runtime property values.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.runtimePropertyValues">
            <summary>
            A list of runtime property values. The entries in the list are ordered based on the generation they were computed in.
            <para>
            The list may be read and modified by any thread and is therefore protected by the lock of 
            this object.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.trigger">
            <summary>
            The invalidation triggers. Setup when a value is created or if a runtime property is
            read while configuring a subtree that is going to be runtime attached.
            The triggers are torn down when <see cref="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.validIgnoringStreamingCount"/> is 0 and
            and <see cref="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.computedValuesValidIgnoringStreamingNoLongerInMux"/> is <c>false</c>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.documentViewId">
            <summary>
            The document view id that was used to set up the trigger or -1 if no view was used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.validIgnoringStreamingCount">
            <summary>
            The count of runtime property values in the multiplexor which are valid or valid if streaming is ignored.
            Note that if the runtime property multiplexor is part of a runtime attached sub tree that has been detached because the sub tree was invalidated due to streaming
            then values in the multiplexor that has been invalidated due to a detach of the subtree is not included in this count even if the reason for the detach is due to streaming.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.mostRecentHoleForOpenTransientTransaction">
            <summary>
            This is the most recent hole for an open transient transaction.
            The transient transaction may be the currently open transient transaction if a hole exist for that transaction.
            Or it may be an outer transient transaction (i.e. a loower nesting level) if no hole exists at for the current transient transaction
            (or any open transaction transaction on an intermediate nesting level).
            This hole is typically open unless the node has been detached in the transient transaction becuase then the hole will be closed.
            Also while a transient transaction is rolled back the hole will first be closed an in a later pass this field will be updated to reflect
            that the transient transaction is closed during rollback.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.computedValuesValidIgnoringStreamingNoLongerInMux">
            <summary>
            <c>true</c>, if computed values that was valid in live if streaming is ignored has been removed from the mux.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.triggerIsBeingSetUp">
            <summary>
            <c>true</c>, if the trigger is currently set up on any thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.mostRecentGenerationAffectedByUser">
            <summary>
            The most recent generation where the trigger has detected that the runtime property has been affected by a user (non-streaming) modification.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.mostRecentInvalidationGeneration">
            <summary>
            The most recent generation where the trigger has detected that the runtime property has been affected by a change of the document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.hasValueBeenReadInLive">
            <summary>
            True, if this value has been read in live. If this field is true then
            we raise internal and external events when this runtime property is
            invalidated. This field may only be read and modified on the application thread
            and is not protected by a lock.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.lastGeneration">
            <summary>
            The last generation for which the multiplexor may be used. This is originally set
            to the indefinite generation but may later be limited to a definite generation.
            <para>
            This field may be read on any thread and is therefore protected by the lock on this object.
            </para>
            <para>
            The field is modified in three cases. 
            </para>
            When the node that owns the runtime property is detached in the live document or during configuration for
            being attached. This always takes place on the application thread.
            <para>
            When a runtime property which contains a published runtime attached sub tree is invalidated.
            This always takes place on the application thread.
            </para>
            <para>
            When a runtime attached sub tree that is not valid in live is going to be published.
            This happens on the thread that computed the runtime attached sub tree. In this case the
            sub tree has not yet been published to other threads so there is no need to take the lock.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.unfoldManager">
            <summary>
            The unfold manager for mutable property triggers used for invalidation events.
            <para>
            This field and the entire contents of this structure may only be read and modified 
            while holding the lock on the value in the multiplexor which is valid in live.
            </para>
            <para>
            If there is no such value it suffices to hold the lock on the multiplexor.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.internalUnfoldManager">
            <summary>
            The unfold manager for mutable property triggers used for internal events.
            <para>
            This field and the entire contents of this structure may only be read and modified on 
            the application thread when operating on the live document.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.externalUnfoldManager">
            <summary>
            The unfold manager for mutable property triggers used for external events.
            <para>
            This field and the entire contents of this structure may only be read and modified on 
            the application thread when operating the live document.
            </para>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1" /> class.
            </summary>
            <param name="ownerMux">The snapshot multiplexor of the node that owns the runtime property.</param>
            <param name="propertyName">The property name of the runtime property.</param>
            <param name="liveDependencyDeclarer">The dependency declarer.</param>
            <param name="firstGeneration">The first generation in which the multiplexor is valid.</param>
            <exception cref="T:System.InvalidOperationException">Attempt to create a RuntimePropertyMultiplexor without owner multiplexor.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1" /> class.
            </summary>
            <param name="ownerMux">The snapshot multiplexor of the node that owns the runtime property.</param>
            <param name="propertyName">The property name of the runtime property.</param>
            <param name="liveDependencyDeclarer">The dependency declarer.</param>
            <param name="firstGeneration">The first generation in which the multiplexor is valid.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <exception cref="T:System.InvalidOperationException">Attempt to create a RuntimePropertyMultiplexor without owner multiplexor.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,`0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,`0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1" /> class.
            </summary>
            <param name="ownerMux">The owner mux.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="liveDependencyDeclarer">The dependency declarer.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="otherRuntimePropertyValue">The other runtime property values.</param>
            <param name="hasValueBeenReadInLive">if set to <c>true</c> [has value been read in live].</param>
            <param name="trigger">The trigger.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="internalUnfoldManager">The internal unfold manager.</param>
            <param name="externalUnfoldManager">The external unfold manager.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.LockObject">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.RuntimePropertyMultiplexor">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.HasValueBeenReadInLive">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.FirstGenerationOfParentHole">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.UnfoldManager">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.InternalUnfoldManager">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.ExternalUnfoldManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.PropagateDeterminedLastGenerationInSubTreeToBePublished(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.Remove(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.OnRuntimePropertyValueInvalidationStateChangedForValueInHole(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0},System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.OnRuntimePropertyValueInvalidationStateChanged(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.OnInvalidationTriggerFiredByStreaming(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.CloseRuntimePropertyTransientTransactionHole(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.CloseValiditySpanDueToDetachOrUserModificationInLiveCore(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.Commands.ChangedProperty,System.Int32,System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.ThreadSafeTransientTransactionContext">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.LookupOrInsertRuntimePropertyValue(System.Int32,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.DocumentView@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.AddInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.RemoveInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.GetLiveValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.LookupRuntimePropertyValue(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.RestoreTriggersAtTransientTransactionRollback(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.CreateShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.Migrate(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0},System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.MigrateFromHole(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}[]@,System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0},System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.CreateOrExtendHoleForComputingValue(System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyMultiplexor`1.TryInsertTrigger(Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1">
            <summary>
            A runtime property value that is not shared.
            </summary>
            <typeparam name="T">The type of the runtime property value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.threadEvaluatingRuntimeProperty">
            <summary>
            The thread evaluating runtime property, or <c>null</c> if the value is not evaluating.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.value">
            <summary>
            The actual value in the runtime property value. This is originally
            set to the default value of the property type and
            set when the value has been computed.
            <para>
            The field is protected by the lock on this instance.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.hasComputedValue">
            <summary>
            This is set to true when the value has been computed and assigned to the value field.
            However the value may not yet have been published to other threads because the declarers
            for the mutable property trigger on this runtime property has not yet been set up.
            <para>
            If the runtime property value is valid in live when this field assigned true, 
            then the declarers that is hosted by the multiplexor and copied
            and the declarers are unfolded. Thus any declarers which are added afterwards has
            to be unfolded while they are added.
            </para>
            The field is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.firstGeneration">
            <summary>
            The first generation which this property is valid in. 
            This field is modifed while the property is computed by the thread that is computing and read by other threads
            who are searching the multiplexor for values. 
            <para>
            Once the property has been computed then the value is fixed.
            </para>
            <para>
            The field is protected by the lock on this instance.
            </para>
            <para>
            If a thread is searching for a value in a certain generation and sees that this 
            runtime property value could apply while the value is evaluating then that thread
            will wait until either the value has been computed or the validity span of the value
            has changed. Thus modifying this field requires that you pulse the monitor.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.firstGenerationIgnoringStreaming">
            <summary>
            The first generation which this property is valid in, ignoring streaming transactions.
            This field is modifed while the property is computed by the thread that is computing and read by other threads
            who are searching the multiplexor for values. 
            <para>
            Once the property has been computed then the value is fixed.
            </para>
            <para>
            The field is protected by the lock on this instance.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.lastGeneration">
            <summary>
            The last generation which this property is valid in.
            <para>
            This field is modified while the property is computed by the thread that is computing and read by other threads
            who are searching the multiplexor for values.
            </para>
            <para>
            It may also be concurrently modified by the application thread because the application thread modifies a property
            which the runtime property depends on. Another reason is if the node that contains the runtime property
            is removed from the live document.
            </para>
            <para>
            In both these cases the value of the last generation will be modified from containing the indefinite generation
            to the generation number of the currently ongoing modifying transaction. Once the field has been set to a definite
            generation it cannot be set to another definite generation by any other thread than the thread that computes the value.
            </para>
            <para>
            The field is protected by the lock on this instance.
            </para>
            <para>
            If a thread is searching for a value in a certain generation and sees that this 
            runtime property value could apply while the value is evaluating then that thread
            will wait until either the value has been computed or the validity span of the value
            has changed. Thus modifying this field requires that you pulse the moitor.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.isLastGenerationLimitedByStreaming">
            <summary>
            <c>true</c>, if the last generation was determined by a streaming transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.allPropertiesWereValidInLiveIgnoringStreamingWhenReadByComputingThread">
            <summary>
            <c>true</c>, if all properties were valid in live ignoring streaming when read by computing thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.mostRecentGenerationAffectedByUserKnownToRuntimePropertyValue">
            <summary>
            The most recent generation that a user make a modification of the document that affected this property as known to the runtime property value.
            This field is protected by the lock on this instance.
            Note that the value is also stored in a field in the multiplexor which is protected by the lock on the multiplexor.
            It is stored in the multiplexor as well as in each runtime property value so that the state of the multiplexor and each of the runtime property values
            can be updated while holding the lock on the respective instance. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.runtimePropertyValueInvalidationState">
            <summary>
            The invalidation state of the runtime property value which is an abstraction (approximation) of the state in this instance.
            This field is protected by the lock on the associated multiplexor (or multiplexor override for shared nodes). 
            That is, it may only be read or written while holding the lock on the multiplexor, in constarst to the other fields in this instance which are protected by the lock on this instance.
            Since the fields are protected by different locks this approximation may be inconsistent with the state of the instance for brief periods of time.
            If the state of this instance is modified such that the value of the this field does match the state of the object then the thread that makes the modification
            must take the lock on the multiplexor and update the value of this field.
            Conversely, if the application thread updates this field (because a modification of the document triggered an invalidation) then it should proceed to and take the 
            lock on the runtime property value and update the other fields.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.runtimePropertyValueOwner">
            <summary>
            The owner of this value. This is typically a runtime property multiplexor.
            
            This value is updated while the value is computing but not changed when the computation is complete.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.#ctor(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner{`0},System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1" /> class.
            </summary>
            <param name="computedInGeneration">The computed in generation.</param>
            <param name="runtimePropertyValueOwner">The runtime property value owner.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="allPropertiesWereValidInLiveIgnoringStreamingWhenReadByComputingThread">if set to <c>true</c> [all properties were valid in live ignoring streaming when read by computing thread].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.#ctor(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner{`0},System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1" /> class.
            </summary>
            <param name="computedInGeneration">The computed in generation.</param>
            <param name="runtimePropertyValueOwner">The runtime property value owner.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.#ctor(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},System.Int32,System.Int32,`0,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1" /> class.
            </summary>
            <param name="computedInGeneration">The computed in generation.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="value">The value.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.Mux">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.RuntimePropertyValueInvalidationState">
            <summary>
            Gets the state of the runtime property value invalidation.
            </summary>
            <value>
            The state of the runtime property value invalidation.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.FirstGenerationWithoutSynchronization">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.HasValue">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.LastGenerationWithoutSynchronization">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.FirstGenerationIgnoringStreaming">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.IsLastGenerationLimitedByStreaming">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.HasValueThatIsValidInLive">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.HasValueImpl">
            <summary>
            Gets a value indicating whether the value has been computed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.FirstGenerationOfParentHole">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.LimitValiditySpanDueToEvaluation(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.LimitValiditySpanDueToMigration(System.Int32,System.Int32,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@)">
            <summary>
            Limits the validity span due to migration.
            </summary>
            <param name="firstGenerationOfReadProperty">The first generation of read property.</param>
            <param name="lastGenerationOfReadProperty">The last generation of read property.</param>
            <param name="waitingThreadsThatStillIsInValiditySpan">The waiting threads that still is in validity span.</param>
            <param name="waitingThreadsThatIsNoLongerInValiditySpan">The waiting threads that is no longer in validity span.</param>
            <returns><c>true</c>, if the value is valid.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.PropagateLimitingToOtherThreads(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty},System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty})">
            <summary>
            Propagates the limiting to other threads.
            </summary>
            <param name="limitationSource">The limitation source.</param>
            <param name="readPropertyThreadSafeTransientTransactionContext">The read property thread safe transient transaction context.</param>
            <param name="firstGenerationOfReadProperty">The first generation of read property.</param>
            <param name="lastGenerationOfReadProperty">The last generation of read property.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> [is valid in live ignoring streaming].</param>
            <param name="isClosedDueToException">if set to <c>true</c> [is closed due to exception].</param>
            <param name="waitingThreadsThatStillIsInValiditySpan">The waiting threads that still is in validity span.</param>
            <param name="waitingThreadsThatIsNoLongerInValiditySpan">The waiting threads that is no longer in validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.AddDeclarerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldClosure{`0,Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.RemoveDeclarerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.Trigger@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.InsertTriggerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.Create(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner{`0},System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <summary>
            Creates a runtime property value.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="runtimePropertyValueOwner">The runtime property value owner.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="allPropertiesWereValidInLiveIgnoringStreamingWhenReadByComputingThread">if set to <c>true</c> [all properties were valid in live ignoring streaming when read by computing thread].</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="insertedRuntimePropertyValueValidity">The inserted runtime property value validity.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.CreateValidity">
            <summary>
            Creates the validity.
            </summary>
            <returns>The validity</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.WaitForComputation(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.CloseValiditySpanDueToDetachOrUserModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.OnInvalidationTriggerFiredByStreaming">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.PublishValue(`0)">
            <summary>
            This will set and publish a value of the runtime property. This method may only be called once.
            </summary>
            <param name="valueToPublish">The value.</param>
            <returns>The published value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.MakeValueAvailableToOtherThreads">
            <summary>
            Makes the value available to other threads.
            </summary>
            <returns>The publication state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.TryGetValue(`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.PublishValueRuntimeAttachedValue(`0,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode)">
            <summary>
            This will set and publish a runtime attahced value of the runtime property. This method may only be called once.
            </summary>
            <param name="valueToPublish">The value.</param>
            <param name="documentNode">The document node.</param>
            <returns>
            The published value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.ComputeInvalidationState">
            <summary>
            Computes the state of the invalidation.
            </summary>
            <returns>The computed state</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.CloseValiditySpanDueToModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToTearDown{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode@,System.Int32@,System.Boolean@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.PropagateValiditySpanClosedDueToModificationInLiveToWaitingThreads(System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty},System.Int32,System.Boolean)">
            <summary>
            Propagates the validity span closed due to modification in live to waiting threads.
            </summary>
            <param name="waitingThreadsThatStillIsInValiditySpan">The waiting threads that still is in validity span.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.PropagateValiditySpanDueToModificationInLive(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.RemoveAndDispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.RemoveFromMux(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0})">
            <summary>
            Removes this instance from the specified mux.
            </summary>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue`1.RuntimePropertyValue">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1">
            <summary>
            Represents the session override state for a runtime property multiplexor.
            </summary>
            <typeparam name="T">The type of the value in the runtime property valus in the override state.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.runtimePropertyValues">
            <summary>
            A list of runtime property values. The entries in the list are ordered based on the generation they were computed in.
            <para>
            The list may be read and modified by any thread and is therefore protected by the lock of 
            this object.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.trigger">
            <summary>
            The invalidation triggers. Setup when a value is created or if a runtime property is
            read while configuring a subtree that is going to be runtime attached.
            The triggers are torn down when <see cref="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.validIgnoringStreamingCount"/> is 0 and
            and <see cref="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.computedValuesValidIgnoringStreamingNoLongerInMux"/> is <c>false</c>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.documentViewId">
            <summary>
            The document view id that was used to set up the trigger or -1 if no view was used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.validIgnoringStreamingCount">
            <summary>
            The count of runtime property values in the multiplexor which are valid or valid if streaming is ignored.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.computedValuesValidIgnoringStreamingNoLongerInMux">
            <summary>
            <c>true</c>, if computed values that was valid in live if streaming is ignored has been removed from the mux.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.triggerIsBeingSetUp">
            <summary>
            <c>true</c>, if the trigger is currently set up on any thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.mostRecentGenerationAffectedByUser">
            <summary>
            The most recent generation where the trigger has detected that the runtime property has been affected by a user (non-streaming) modification.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.mostRecentInvalidationGeneration">
            <summary>
            The most recent generation where the trigger has detected that the runtime property has been affected by a change of the document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.lastGeneration">
            <summary>
            The last generation for which the multiplexor may be used. This is originally set
            to the indefinite generation but may later be limited to a definite generation.
            <para>
            This field may be read on any thread and is therefore protected by the lock on this object.
            </para>
            <para>
            The field is modified in three cases. 
            </para>
            <para>
            When the node that owns the runtime property is detached in the live document or during configuration for
            being attached. This always takes place on the application thread.
            </para>
            <para>
            When a runtime property which contains a published runtime attached sub tree is invalidated.
            This always takes place on the application thread.
            </para>
            <para>
            When a runtime attached sub tree that is not valid in live is going to be published.
            This happens on the thread that computed the runtime attached sub tree. In this case the
            sub tree has not yet been published to other threads so there is no need to take the lock.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.mostRecentHoleForOpenTransientTransaction">
            <summary>
            This is the most recent hole for an open transient transaction.
            The transient transaction may be the currently open transient transaction if a hole exist for that transaction.
            Or it may be an outer transient transaction (i.e. a loower nesting level) if no hole exists at for the current transient transaction
            (or any open transaction transaction on an intermediate nesting level).
            This hole is typically open unless the node has been detached in the transient transaction becuase then the hole will be closed.
            Also while a transient transaction is rolled back the hole will first be closed an in a later pass this field will be updated to reflect
            that the transient transaction is closed during rollback.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.runtimePropertyMultiplexor">
            <summary>
            The runtime property multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}[],System.Int32,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1" /> class.
            </summary>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.FirstGenerationOfParentHole">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.LockObject">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.RuntimePropertyMultiplexor">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.Mux">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.ThreadSafeTransientTransactionContext">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.MostRecentGenerationAffectedByUserWithoutSynchronization">
            <summary>
            Gets the most recent generation affected by user without synchronization.
            </summary>
            <value>
            The most recent generation affected by user without synchronization.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.OnRuntimePropertyValueInvalidationStateChangedForValueInHole(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0},System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.MigrateFromHole(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}[]@,System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0},System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.Migrate(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0},System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ThreadWaitingForRuntimeProperty}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.TryInsertTrigger(Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.LookupOrInsertRuntimePropertyValue(System.Int32,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Int32,System.Int32,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.DocumentView@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <summary>
            This method searches the multiplexor for a runtime property value that is valid for
            <paramref name="currentThreadGeneration" />.
            If there is no such value it creates and inserts such a value.
            The method returns true if it created a value and false otherwise.
            It should be noted that the entry that is returned was valid for
            <paramref name="currentThreadGeneration" /> when this method held the lock on the
            runtime property value. However, the value may no longer be valld when it is returned.
            That can happen if the value is currently evaluating in which case the interval may shrink.
            It can also happen if the value is invalidated because of a modification on the live document.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="ownerNode">The owner node.</param>
            <param name="dependencyDeclarer">The dependency declarer.</param>
            <param name="firstGeneration">The first generation of the multiplexor.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="useDocumentViewFromTriggerSetup">if set to <c>true</c> [use document view from trigger setup].</param>
            <param name="documentViewFromTriggerSetup">The document view from trigger setup.</param>
            <param name="foundRuntimePropertyValue">The found runtime property value.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="insertedRuntimePropertyValueValidity">The inserted runtime property value validity.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.CreateOrExtendHoleForComputingValue(System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.CloseValiditySpanDueToDetachOrUserModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.Commands.ChangedProperty,System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Called when an invalidation trigger fired because of a detach or a non streaming transaction.
            </summary>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="changedProperty">The changed property.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> then the validity span should be closed because of a detach of a runtime attached subtree due to streaming.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="invalidated">if set to <c>true</c> [invalidated].</param>
            <param name="invalidatedIfStreamingIsIgnored">if set to <c>true</c> [invalidated if streaming is ignored].</param>
            <param name="shallRaiseEvents">if set to <c>true</c> [shall raise events].</param>
            <returns>
            A array of affected runtime property values, or <c>null</c> if no such values exist.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.CloseRuntimePropertyTransientTransactionHole(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{`0},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.RestoreTriggersAtTransientTransactionRollback(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.OnRuntimePropertyValueInvalidationStateChanged(System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Called when a runtime property value was invalidated because a property was read on the computing thread.
            </summary>
            <param name="lastGenerationForRuntimePropertyValue">The last generation for runtime property value.</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> [is valid in live ignoring streaming].</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.LookupRuntimePropertyValue(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}@)">
            <summary>
            Looks up the runtime property value that is valid in the current thread generation from the array of runtime property values.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="runtimePropertyValue">The runtime property value, if found; otherwise <c>null</c>.</param>
            <returns><c>true</c>, if there is a runtime property value for the current generation; otherwise <c>false</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.TryGetLast(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue@)">
            <summary>
            Tries to the get last runtime property value.
            </summary>
            <param name="runtimePropertyValue">The runtime property value, if found; otherwise <c>null</c>.</param>
            <returns><c>true</c>, if the value was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.Remove(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.GetLiveValue">
            <summary>
            Gets the live value. This method may only be called on the application thread when there exists a value that is valid in the live document.
            </summary>
            <returns>The live value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.AddInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0})">
            <summary>
            Add the invalidation declarer.
            </summary>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <returns>
            An unfold closure
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.RemoveInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0})">
            <summary>
            Removes the invalidation declarer.
            </summary>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <returns>A trigger.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride`1.OnInvalidationTriggerFiredByStreaming(System.Int32)">
            <summary>
            Called when an invalidation trigger fired because of a streaming transaction.
            </summary>
            <param name="currentGeneration">The current generation.</param>
            <returns>
            The last runtime property value in the multiplexor.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray">
            <summary>
            A static class with methods that operates on an array of runtime property values.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.AddInvalidationDeclarer``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[],Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0})">
            <summary>
            Add the invalidation declarer.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="runtimePropertMultiplexor">The runtime propert multiplexor.</param>
            <returns>
            An unfold closure
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.GetLast``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[])">
            <summary>
            Gets last runtime property value from the array of runtime property values.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <returns>The runtime property value, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.IsEmpty``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[])">
            <summary>
            Determines whether the specified runtime property values array is empty.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="runtimePropertyValues">The runtime property values array.</param>
            <returns><c>true</c>, if the runtime proerty values array is empty.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.CheckIfTriggerShouldBeTornDown(Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,System.Boolean@,System.Boolean)">
            <summary>
            Checks if trigger should be torn down.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <param name="ownsTrigger">if set to <c>true</c> [owns trigger].</param>
            <returns>
            A thrigger that should be torn down or <c>null</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Unexpected negative counter</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.UpdateInvalidationState(System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Updates the invalidation state.
            </summary>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="newInvalidationState">New state of the invalidation.</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.OnInvalidationTriggerFiredByStreaming``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueState{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Called when the invalidation trigger fired due to streaming.
            </summary>
            <typeparam name="T">The type of the value in the runtime property value.</typeparam>
            <param name="runtimePropertyValueState">State of the runtime property value.</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
            <returns>
              <c>true</c>, if the value is affected.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.CloseRuntimePropertyValueValiditySpanDueToDetachOrUserModificationInLive``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueState{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Closes the runtime property value validity span due to a detach or a user modification in live.
            </summary>
            <typeparam name="T">The type of the value in the runtime property value.</typeparam>
            <param name="runtimePropertyValueState">State of the runtime property value.</param>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="runtimePropertyValueInvalidationState">The runtime property value state known to multiplexor.</param>
            <returns> The runtime property value state if the property is affected by the invalidation. Otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.CloseValiditySpanDueToDetachOrUserModificationInLive``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.Commands.ChangedProperty,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyTransientTransactionHole{``0},Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@,System.Int32,System.Boolean,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,System.Int32@)">
            <summary>
            Called when an invalidation trigger fired because of a detach or a non streaming transaction.
            </summary>
            <typeparam name="T">The type of the values in the runtime property.</typeparam>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="changedProperty">The changed property.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="mostRecentInvalidationGeneration">The most recent invalidation generation.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [valid ignoring streaming].</param>
            <param name="mostRecentHoleForOpenTransientTransaction">The most recent open hole.</param>
            <param name="ownerHole">The owner hole.</param>
            <param name="trigger">The trigger.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> then the validity span should be closed because of a detach of a runtime attached subtree due to streaming.</param>
            <param name="invalidatedIgnoringStreaming">set to <c>true</c> if the multiplexor was invalidated ignoring streaming.</param>
            <param name="triggerToTearDown">The trigger to tear down.</param>
            <param name="documentViewForTriggerTearDown">The document view for trigger tear down.</param>
            <returns>
            A array of affected runtime property values, or <c>null</c> if no such values exist.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.ComputeInvalidationState(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Computes the invalidation state.
            </summary>
            <param name="lastGeneration">The last generation.</param>
            <param name="allPropertiesWereValidInLiveIgnoringStreamingWhenReadByComputingThread">if set to <c>true</c> [all properties were valid in live ignoring streaming when read by computing thread].</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <returns>The computed state</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.UpdateTriggerReferenceCounts``1(System.Int32@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{``0})">
            <summary>
            Updates the trigger reference counts.
            </summary>
            <typeparam name="T">The type of the values in the runtime property.</typeparam>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <returns>
              <c>true</c>, if a trigger should be set up.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.NeedsTrigger(System.Int32@,System.Boolean@)">
            <summary>
            Checks if a trigger is needed..
            </summary>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <returns><c>true</c>, if a trigger is needed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.LookupOrInsertRuntimePropertyValue``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,System.Int32@,System.Boolean@,System.Int32@,System.Int32@,System.Int32@,System.Int32,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner{``0},System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <summary>
            This method searches the multiplexor for a runtime property value that is valid for
            <paramref name="currentThreadGeneration" />.
            If there is no such value it creates and inserts such a value.
            The method returns true if it created a value and false otherwise.
            It should be noted that the entry that is returned was valid for
            <paramref name="currentThreadGeneration" /> when this method held the lock on the
            runtime property value. However, the value may no longer be valld when it is returned.
            That can happen if the value is currently evaluating in which case the interval may shrink.
            It can also happen if the value is invalidated because of a modification on the live document.
            </summary>
            <typeparam name="T">The type of the values in the runtime property.</typeparam>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <param name="multiplexorLastGeneration">The last generation.</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="mostRecentInvalidationGeneration">The most recent invalidation generation.</param>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="ownerNode">The owner node.</param>
            <param name="multiplexorFirstGeneration">The first generation of the multiplexor.</param>
            <param name="multiplexorFirstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="runtimePropertyValueOwner">The runtime property value owner.</param>
            <param name="needsTrigger">if set to <c>true</c> [needs trigger].</param>
            <param name="foundRuntimePropertyValue">The found runtime property value.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="insertedRuntimePropertyValueValidity">The inserted runtime property value validity.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.CreateRuntimePropertyValueBetweenOtherValues``1(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner{``0},System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <summary>
            Creates the runtime property value limited by other value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="runtimePropertyValueOwner">The runtime property value owner.</param>
            <param name="previousFirstGenerationIgnoringStreaming">The previous first generation ignoring streaming.</param>
            <param name="previousLastGeneration">The previous last generation.</param>
            <param name="previousIsLastGenerationLimitedByStreaming">if set to <c>true</c> [previous is last generation limited by streaming].</param>
            <param name="currentFirstGeneration">The current first generation.</param>
            <param name="currentFirstGenerationIgnoringStreaming">The current first generation ignoring streaming.</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="insertedRuntimePropertyValueValidity">The inserted runtime property value validity.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.CreateRuntimePropertyValueAtEndOfMultiplexor``1(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner{``0},System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <summary>
            Creates the runtime property value at end of multiplexor.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="runtimePropertyValueOwner">The runtime property value owner.</param>
            <param name="previousFirstGenerationIgnoringStreaming">The previous first generation ignoring streaming.</param>
            <param name="previousLastGeneration">The previous last generation.</param>
            <param name="previousIsLastGenerationLimitedByStreaming">if set to <c>true</c> [previous is last generation limited by streaming].</param>
            <param name="multiplexorLastGeneration">The last generation.</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="mostRecentInvalidationGeneration">The most recent invalidation generation.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="insertedRuntimePropertyValueValidity">The inserted runtime property value validity.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.LookupOrInsertRuntimePropertyValue``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueOwner{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{``0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <summary>
            This method searches the multiplexor for a runtime property value that is valid for
            <paramref name="currentThreadGeneration" />.
            If there is no such value it creates and inserts such a value.
            The method returns true if it created a value and false otherwise.
            It should be noted that the entry that is returned was valid for
            <paramref name="currentThreadGeneration" /> when this method held the lock on the
            runtime property value. However, the value may no longer be valld when it is returned.
            That can happen if the value is currently evaluating in which case the interval may shrink.
            It can also happen if the value is invalidated because of a modification on the live document.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="multiplexorFirstGeneration">The first generation.</param>
            <param name="multiplexorFirstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="multiplexorLastGeneration">The last generation.</param>
            <param name="mostRecentGenerationAffectedByUser">The most recent generation affected by user.</param>
            <param name="mostRecentInvalidationGeneration">The most recent invalidation generation.</param>
            <param name="runtimePropertyValueOwner">The runtime property value owner.</param>
            <param name="foundRuntimePropertyValue">The runtime property value.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="insertedRuntimePropertyValueValidity">The inserted runtime property value validity.</param>
            <exception cref="T:System.InvalidOperationException">Unexpected representation of an empty list of runtime property values.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.MigrateFrom``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@,System.Int32@,System.Boolean@)">
            <summary>
            Migrates the specified runtime property value.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <exception cref="T:System.InvalidOperationException">Unexpected negative reference count</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.Remove``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[]@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0})">
            <summary>
            Removes the specified runtime property value for the array of values.
            </summary>
            <typeparam name="T">The type of the values</typeparam>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.RemoveInvalidationDeclarer``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[],Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0})">
            <summary>
            Removes the invalidation declarer.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <returns>A trigger that should be torn down.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.TryGetLast``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[],Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue@)">
            <summary>
            Tries to the get last runtime property value from the array of runtime property values.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="runtimePropertyValue">The runtime property value, if found; otherwise <c>null</c>.</param>
            <returns><c>true</c>, if the value was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.TryInsertTrigger(System.Int32@,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.Trigger@,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Tries to insert the trigger.
            </summary>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <param name="computedValuesValidIgnoringStreamingNoLongerInMux">if set to <c>true</c> [computed values valid ignoring streaming no longer in mux].</param>
            <param name="trigger">The trigger.</param>
            <param name="triggerThatHasBeenSetUp">The trigger that has been set up.</param>
            <returns>
              <c>true</c>, if the trigger was inserted
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueArray.LookupRuntimePropertyValue``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}[],System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0}@)">
            <summary>
            Looks up the runtime property value that is valid in the current thread generation from the array of runtime property values.
            </summary>
            <typeparam name="T">The type of the values in the runtime property values.</typeparam>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="runtimePropertyValue">The runtime property value, if found; otherwise <c>null</c>.</param>
            <returns><c>true</c>, if there is a runtime property value for the current generation; otherwise <c>false</c></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride">
            <summary>
            Represents the session override state for a runtime property value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.lastGeneration">
            <summary>
            The last generation which this property is valid in.
            <para>
            This field is modifed while the property is computed by the thread that is computing and read by other threads
            who are searching the multiplexor for values.
            </para>
            <para>
            It may also be concurrently modifed by the application thread because the application thread modifes a property
            which the runtime property depends on. Another reason is if the node that contains the runtime property
            is removed from the live document.
            </para>
            <para>
            In both these cases the value of the last generation will be modified from containing the indefinite generation
            to the generation number of the currently ongoing modifying transaction. Once the field has been set to a definite
            generation it cannot be set to another definite generation by any other thread than the thread that computes the value.
            </para>
            The field is protected by the lock on this instance.
            <para>
            If a thread is searching for a value in a certain generation and sees that this 
            runtime property value could apply while the value is evaluating then that thread
            will wait until either the value has been computed or the validity span of the value
            has changed. Thus modifying this field requires that you pulse the moitor.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.isLastGenerationLimitedByStreaming">
            <summary>
            <c>true</c>, if the last generation was determined by streaming.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.mostRecentGenerationAffectedByUserKnownToRuntimePropertyValue">
            <summary>
            The most recent generation that a user make a modification of the document that affected this property as known to the runtime property value.
            This field is protected by the lock on this instance.
            Note that the value is also stored in a field in the multiplexor which is protected by the lock on the multiplexor.
            It is stored in the multiplexor as well as in each runtime property value so that the state of the multiplexor and each of the runtime property values
            can be updated while holding the lock on the respective instance. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.runtimePropertyValueInvalidationState">
            <summary>
            The invalidation state of the runtime property value which is an abstraction (approximation) of the state in this instance.
            This field is protected by the lock on the associated multiplexor (or multiplexor override for shared nodes). 
            That is, it may only be read or written while holding the lock on the multiplexor, in constarst to the other fields in this instance which are protected by the lock on this instance.
            Since the fields are protected by different locks this approximation may be inconsistent with the state of the instance for brief periods of time.
            If the state of this instance is modified such that the value of the this field does match the state of the object then the thread that makes the modification
            must take the lock on the multiplexor and update the value of this field.
            Conversely, if the application thread updates this field (because a modification of the document triggered an invalidation) then it should proceed to and take the 
            lock on the runtime property value and update the other fields.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride" /> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.LastGenerationWithoutSynchronization">
            <summary>
            Gets the last generation of the runtime property value. This method does not synchronize with other threads so the value may be inaccurate.
            Also, return value may become inaccurate, immediately after the property has returned its value becuase it is modified on another thread.
            </summary>
            <value>
            The last generation of the runtime property value.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.IsLastGenerationLimitedByStreaming">
            <summary>
            Gets a value indicating whether the last generation was determined by streaming.
            </summary>
            <value>
            <c>true</c> if this instance is last generation limited by streaming; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.MostRecentGenerationAffectedByUserKnownToRuntimePropertyValue">
            <summary>
            Gets the most recent generation affected by user known to runtime property value.
            </summary>
            <value>
            The most recent generation affected by user known to runtime property value.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.CloseValiditySpanDueToDetachOrUserModificationInLive``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,System.Int32@)">
            <summary>
            Closes the runtime property value validity span due to a detach or a user modification in live.
            </summary>
            <typeparam name="T">The type of the value in the runtime property value.</typeparam>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <returns>
              <c>true</c>, if the property is affected by the invalidation.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.AddDeclarerIfValidInLive``1(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldClosure{``0,Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0})">
            <summary>
            Adds the declarer to the runtime property value if it is valid in live.
            </summary>
            <typeparam name="T">The type of the value in the runtime property value.</typeparam>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="unfoldClosure">The unfold closure.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <returns><c>true</c>, if the declarer was added.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.RemoveDeclarerIfValidInLive``1(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``0},Spotfire.Dxp.Framework.DocumentModel.Trigger@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{``0})">
            <summary>
            Removes the declarer from the runtime property value if it is valid in live.
            </summary>
            <typeparam name="T">The type of the value in the runtime property value.</typeparam>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="trigger">The trigger.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <returns>
              <c>true</c>, if the declarer was removed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.CloseValiditySpanDueToModificationInLive``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,``0,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0},System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToTearDown{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode@,System.Boolean@,System.Boolean@)">
            <summary>
            Closes the validity span if it is open. This method may only be called on the main thread.
            </summary>
            <typeparam name="T">The type of the value in the runtime property value.</typeparam>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="value">The value.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
            <param name="triggersToTearDown">The triggers to tear down.</param>
            <param name="runtimeAttachedSubTree">The runtime attached sub tree.</param>
            <param name="invalidated">if set to <c>true</c> [invalidated].</param>
            <param name="invalidatedIfStreamingIsIgnored">if set to <c>true</c> [invalidated if streaming is ignored].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.InsertTriggerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Insert the trigger into the unfold entry if the runtime property value is valid in live.
            </summary>
            <param name="unfoldEntry">The unfold entry.</param>
            <param name="trigger">The trigger.</param>
            <returns>True, if the insertion was succesful</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.OnInvalidationTriggerFiredByStreaming``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue{``0})">
            <summary>
            Called when the invalidation trigger fired due to streaming.
            </summary>
            <typeparam name="T">The type of the value in the runtime property value.</typeparam>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <returns>
              <c>true</c>, if the value is affected.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride.RemoveRuntimePropertyValueFromMux``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{``0})">
            <summary>
            Removes the runtime property value from mux.
            </summary>
            <typeparam name="T">The type of the value in the runtime property value.</typeparam>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="mux">The mux.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1">
            <summary>
            This class is the shared variant of the RuntimePropertyMultiplexor class.
            </summary>
            <typeparam name="T">The type of the runtime property values.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.hasValueBeenReadInLive">
            <summary>
            True, if this value has been read in live. If this field is true then
            we raise internal and external events when this runtime property is
            invalidated. This field is readonly.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.runtimePropertyValue">
            <summary>
            This represents the run time property values when the master document was created.
            That list had at most one value so we can represent the empty list as <c>null</c>
            and the singleton list by its value.
            <para>
            The field is readonly.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.externalUnfoldManager">
            <summary>
            The unfold manager for mutable property triggers used for external events.
            <para>
            This field is readonly. 
            However the entire contents of this structure may only be read and modified on 
            the application thread when operating the live document.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.internalUnfoldManager">
            <summary>
            The unfold manager for mutable property triggers used for internal events.
            <para>
            This field is readonly. 
            However the entire contents of this structure may only be read and modified on 
            the application thread when operating on the live document.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.unfoldManager">
            <summary>
            The unfold manager for mutable property triggers used for invalidation events.
            <para>
            This field is readonly.
            However the contents of this structure may only be read and modified 
            while holding the lock on the value in the multiplexor which is valid in live.
            If there is no such value it suffices to hold the lock on the multiplexor.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.trigger">
            <summary>
            The trigger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Int32,System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}[],Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,`0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,`0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1" /> class.
            </summary>
            <param name="ownerMux">The owner mux.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="liveDependencyDeclarer">The dependency declarer.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="otherRuntimePropertyValues">The other runtime property values.</param>
            <param name="trigger">The trigger.</param>
            <param name="hasValueBeenReadInLive">if set to <c>true</c> [has value been read in live].</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="internalUnfoldManager">The internal unfold manager.</param>
            <param name="externalUnfoldManager">The external unfold manager.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.HasValueBeenReadInLive">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.UnfoldManager">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.InternalUnfoldManager">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.ExternalUnfoldManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.PropagateDeterminedLastGenerationInSubTreeToBePublished(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.Remove(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.OnInvalidationTriggerFiredByStreaming(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.AddInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.CloseValiditySpanDueToDetachOrUserModificationInLiveCore(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.Commands.ChangedProperty,System.Int32,System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.GetLiveValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.LookupOrInsertRuntimePropertyValue(System.Int32,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.DocumentView@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.LookupRuntimePropertyValue(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.RemoveInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.CreateOverride(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexor)">
            <summary>
            Creates the session override.
            </summary>
            <param name="multiplexor">The multiplexor.</param>
            <returns>The created override.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.CreateOverride">
            <summary>
            Creates the session override.
            </summary>
            <returns>The created override.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.GetOrAddOverride">
            <summary>
            Gets or adds an override.
            </summary>
            <returns>The override.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.TryGetRuntimePropertyMultiplexorOverride(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexorOverride{`0}@)">
            <summary>
            Tries the get runtime property multiplexor collection override.
            </summary>
            <param name="runtimePropertyMultiplexorOverride">The runtime property multiplexor override.</param>
            <returns><c>true</c>, if an overide exists</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.GetRuntimePropertyMultiplexorOverride">
            <summary>
            Gets the runtime property multiplexor override.
            </summary>
            <returns>The runtime property multiplexor override.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyMultiplexor`1.ThreadSafeTransientTransactionContext">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1">
            <summary>
            Represents the shared variant of the runtime property value class.
            </summary>
            <typeparam name="T">The type of the runtime property value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.firstGeneration">
            <summary>
            The first generation which this property is valid in. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.value">
            <summary>
            The actual value in the runtime property value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.#ctor(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},System.Int32,`0,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1"/> class.
            </summary>
            <param name="computedInGeneration">The computed in generation.</param>
            <param name="mux">The mux.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="value">The value.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.FirstGenerationOfParentHole">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.Mux">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.LastGenerationWithoutSynchronization">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.FirstGenerationWithoutSynchronization">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.FirstGenerationIgnoringStreaming">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.IsLastGenerationLimitedByStreaming">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.HasValue">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.HasValueThatIsValidInLive">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.CloseValiditySpanDueToDetachOrUserModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.OnInvalidationTriggerFiredByStreaming">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.AddDeclarerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldClosure{`0,Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.InsertTriggerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.RemoveDeclarerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.Trigger@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.WaitForComputation(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.RemoveAndDispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.GetOrAddOverride">
            <summary>
            Gets or adds the override.
            </summary>
            <returns>The override</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.CreateOverride(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue)">
            <summary>
            Creates the override given a specified runtime property value.
            </summary>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <returns>The created override.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.GetLastGenerationWithoutSynchronization">
            <summary>
            Gets the last generation of the runtime property value. This method does not synchronize with other threads so the value may be inaccurate.
            Also, return value may become inaccurate, immediately after the property has returned its value becuase it is modified on another thread.
            </summary>
            <returns>The last generation of the runtime property value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.GetLastGenerationWithoutSynchronization(System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Gets the last generation of the runtime property value. This method does not synchronize with other threads so the value may be inaccurate.
            Also, return value may become inaccurate, immediately after the property has returned its value becuase it is modified on another thread.
            </summary>
            <param name="lastGeneration">The last generation.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="mostRecentGenerationAffectedByUserKnownToRuntimePropertyValue">The most recent generation affected by user known to runtime property value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.TryGetValue(`0@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.SharedRuntimePropertyValue`1.CloseValiditySpanDueToModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},System.Int32,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueOverride,Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToTearDown{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Closes the validity span if it is open. This method may only be called on the main thread.
            </summary>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
            <param name="runtimePropertyValueOverride">The runtime property value override.</param>
            <param name="triggersToTearDown">The triggers to tear down.</param>
            <param name="runtimeAttachedSubTree">The runtime attached sub tree.</param>
            <param name="firstValidGeneration">The first valid generation.</param>
            <param name="invalidated">set to <c>true</c> if the runtime property value was invalidated.</param>
            <param name="invalidatedIfStreamingIsIgnored">if set to <c>true</c> [invalidated if streaming is ignored].</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection">
            <summary>
            This is a collection of runtime property values.
            
            Instances of this class is kept in document generations that owns runtime property values.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection.rtpValues">
            <summary>
            A list of runtime property values. 
            
            Each value is coupled with the first generation of the validity span of the runtime property value.
            
            The first generation is used to determine when a runtime property value shall be disposed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection.Add(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueBase)">
            <summary>
            Add a runtime property value.
            </summary>
            <param name="firstGeneration"></param>
            <param name="runtimePropertyValue"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection.DisposeAllRuntimePropertyValues">
            <summary>
            Dispose all runtime property values in this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection.DisposeAllRuntimePropertyValuesWithALargerFirstGeneration(System.Int32)">
            <summary>
            Removes all rtpValues that have a firstGeneration that is larger the the specified generation.
            </summary>
            <param name="generation">The generation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection.MergeFrom(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection)">
            <summary>
            Inserts the runtime property values from <paramref name="documentGenerationMembers"/> into this instance.
            </summary>
            <param name="documentGenerationMembers"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IConfigureForRuntimeAttachValueManager">
            <summary>
            An interface which allows instances of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1"/>
            to be typed with the same type.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1">
            <summary>
            This class is used to keep the value of runtime properties that were computed during the configuration
            of a sub tree for runtime attach.
            
            When a runtime attached sub tree is published so that it becomes available for other threads
            than the computing thread then the values of computed runtime properties are frozen and cannot
            be invalidated. If the value of a runtime property was not evaluated druing the configuration then
            the instances of this class is replaced by a runtime property multiplexor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.hasBeenPublished">
            <summary>
            The value has been (or is about to be) published to other threads.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.hasValueBeenReadInLive">
            <summary>
            True, if this value has been read in live. 
            This field may only be read and modified on the application thread
            and is not protected by a lock.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.hasValue">
            <summary>
            True, if the runtime property has a value.
            /// </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.value">
            <summary>
            The value of the runtime property, if it has been computed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.propertyName">
            <summary>
            The property name of the runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.owner">
            <summary>
            The owner of this instance. This is the document node which contains
            the runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.trigger">
            <summary>
            A trigger for invalidtion events which has been set up for this runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.unfoldManager">
            <summary>
            The unfold manager for mutable property triggers used for invalidation events.
            
            This field and the entire contents of this structure may be read and modified 
            without holding the lock while configuring for runtime attach. Once the value
            has been published it is required to hold the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.internalUnfoldManager">
            <summary>
            The unfold manager for mutable property triggers used for internal events.
            
            This field and the entire contents of this structure may only be read and modified on 
            the application thread when operating on the live document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.externalUnfoldManager">
            <summary>
            The unfold manager for mutable property triggers used for external events.
            
            This field and the entire contents of this structure may only be read and modified on 
            the application thread when operating the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1"/> class.
            </summary>
            <param name="owner">The document node that owns the runtime property.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.OnAncestorDetachedOrInvalidated(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.OnAncestorDetachedOrInvalidatedDuringConfigureForRuntimeAttach">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.PropagateDeterminedLastGenerationInSubTreeToBePublished(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.CreateMultiplexorForInvalidRuntimeProperty(System.Int32,System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,`0}@)">
            <summary>
            Creates runtime property multiplexors for every invalid runtime property in the runtime attached
            sub tree that is the value of this runtime property.
            </summary>
            <param name="firstGeneration">The first generation for the runtime property multiplexors.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming for the runtime property multiplexors.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <returns>
            True, if this instance is invalid and should be replaced a multiplexor.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.IsEvaluated">
            <summary>
            Gets a value indicating whether value has been evaluated yet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.IsValidInLive">
            <summary>
            Gets a value indicating whether this instance is valid in live.
            </summary>
            <value>
            <c>true</c> if this instance is valid in live; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.GetValue(Spotfire.Dxp.Framework.DocumentModel.StatelessPropertyComputer{`0},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.SetUpTrigger(Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Add a trigger which invalidates the runtime property associated to this instance.
            </summary>
            <param name="trigger"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.TearDownTriggers">
            <summary>
            Tears down the triggers which invalidates the runtime property associated to this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#GetCommandHistory">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#Generation">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#Owner">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ConfigureForRuntimeAttachValueManager`1.OnInvalidationTriggerFired(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason,Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.EvaluatingRuntimeProperty">
            <summary>
            This class is used to represent a currently evaluating runtime property which
            is stored in a stack in the thread context of each thread which evaluatees a runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.EvaluatingRuntimeProperty.runtimePropertyValue">
            <summary>
            A reference to the runtime property value for the runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.EvaluatingRuntimeProperty.nestedConfiguringRuntimeProperties">
            <summary>
            A stack of nested runtime properties which are evaluating while this runtime property
            is configuring for runtime attach.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.EvaluatingRuntimeProperty.SetUpTriggersOnNestedRuntimeProperties(Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Set up a trigger on all nested runtime properties which are currently evaluating.
            This is called when a runtime property is read while configuring for runtime attach.
            </summary>
            <param name="trigger"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.EvaluatingRuntimeProperty.EvaluateRuntimePropertyDuringConfigureForRuntimeAttach(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IConfigureForRuntimeAttachValueManager,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Run a delegate which evaluates a runtime property which is read during configuration for runtime attach of this property.
            This method will put the runtime property that is read during configuration on a stack in this runtime property.
            </summary>
            <param name="configureForRuntimeAttachValueManager">The value manager of the runtime property that is read while configuring.</param>
            <param name="executor"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.EvaluatingRuntimeProperty.LimitValiditySpanDueToEvaluation(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <inhertitdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.EvaluatingRuntimeProperty.PropagateValiditySpanClosedDueToModificationInLive(System.Int32,System.Boolean)">
            <inhertitdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1">
            <summary>
            This is a base class for classes which are responsible for managing the different values that a runtime
            property may have in different generations.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.OnAncestorDetachedOrInvalidated(System.Boolean)">
            <summary>
            This method is called when an ancestor is detached or invalidated.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.OnAncestorDetachedOrInvalidatedDuringConfigureForRuntimeAttach">
            <summary>
            This method is called when an ancestor is detached or invalidated during configuration for runtime attach.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.PropagateDeterminedLastGenerationInSubTreeToBePublished(System.Int32)">
            <summary>
            This method is used to propagate the last generation in which the runtime property multiplexors
            in the a runtime attached sub tree shall be valid.
            </summary>
            <param name="lastGeneration"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.GetValue(Spotfire.Dxp.Framework.DocumentModel.StatelessPropertyComputer{`0},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Get the value of the runtime property. This method will retrieve the value of the runtime property that
            is valid for the generation stored in the thread context. If there is no such value it will be computed using 
            <paramref name="propertyComputer"/> and stored so that it need not be computed if read again.
            </summary>
            <param name="propertyComputer">A delegate which computes the value of the runtime property.</param>
            <param name="dependencyDeclarer">A delegate which computes a trigger which defines the dependencies
            of the runtime property.</param>
            <param name="ownerNode">The node that owns the runtime property.</param>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.IsEvaluated">
            <summary>
            Gets a value indicating whether value has been evaluated yet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.IsEvaluatedAndValidInLive">
            <summary>
            Gets a value indicating whether this instance is evaluated and valid in live.
            </summary>
            <value>
            <c>true</c> if this instance is evaluated and valid in live; otherwise, <c>false</c>.
            </value>
            <remarks>If <c>true</c>, then the property may be <c>false</c> directly after.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.IsValidInLive">
            <summary>
            Gets a value indicating whether this instance is valid in live.
            </summary>
            <value>
            <c>true</c> if this instance is valid in live; otherwise, <c>false</c>.
            </value>
            <remarks>If <c>true</c>, then the property may be <c>false</c> directly after.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.AddInvalidation(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.RemoveInvalidation(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager`1.RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexor">
            <summary>
            A non generic interface for run time property multiplexors.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1">
            <summary>
            This class is used to hold the values of a runtime property in different generations.
            When a runtime property is read an instance of this class is searched in order to find
            the value that applies for the generation stored in the thread context.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.propertyName">
            <summary>
            The property name associated to the runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.ownerMux">
            <summary>
            The snapshot multiplexor for the node that contains the runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.firstGeneration">
            <summary>
            The first generation for which the multiplexor is valid. This is originally set
            to the generation when the runtime property was created and is thereafter never changed.
            If the runtime property is a part of a runtime attached sub tree then it is set to the
            first generation of the runtime attached sub tree when it is published.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.firstGenerationIgnoringStreaming">
            <summary>
            The first generation ignoring streaming for which the multiplexor is valid. This is originally set
            to the generation when the runtime property was created and is thereafter never changed.
            If the runtime property is a part of a runtime attached sub tree then it is set to the
            first generation ignoring streaming of the runtime attached sub tree when it is published.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.liveDependencyDeclarer">
            <summary>
            The dependency declarer.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1" /> class.
            </summary>
            <param name="ownerMux">The owner mux.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="liveDependencyDeclarer">The dependency declarer.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.TryGetFirstGenerationOfNestedValiditySpanHole(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.FirstGeneration">
            <summary>
            Gets the first generation.
            </summary>
            <value>
            The first generation.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.FirstGenerationIgnoringStreaming">
            <summary>
            Gets the first generation ignoring streaming.
            </summary>
            <value>
            The first generation ignoring streaming.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.SetUpTrigger(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexorLockObject{`0},Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer)">
            <summary>
            Sets up the trigger.
            </summary>
            <param name="lockObject">The lock object.</param>
            <param name="ownerNode">The owner node.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="dependencyDeclarer">The dependency declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.TearDownTriggers(Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Int32)">
            <summary>
            Tears down triggers.
            </summary>
            <param name="triggerToTearDown">The trigger to tear down.</param>
            <param name="documentViewId">The document view identifier.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.GetValue(Spotfire.Dxp.Framework.DocumentModel.StatelessPropertyComputer{`0},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.OnInvalidationTriggerFiredByStreaming(System.Int32)">
            <summary>
            Called when an invalidation trigger fired because of a streaming transaction.
            </summary>
            <param name="currentGeneration">The current generation.</param>
            <returns>
            A runtime property value that should be invalidated or <c>null</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.CloseValiditySpanDueToDetachOrUserModificationInLiveCore(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.Commands.ChangedProperty,System.Int32,System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Called when an invalidation trigger fired because of a detach or a non streaming transaction.
            </summary>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="changedProperty">The changed property.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> then the validity span should be closed because of a detach of a runtime attached subtree due to streaming.</param>
            <param name="invalidated">if set to <c>true</c> [invalidated].</param>
            <param name="invalidatedIfStreamingIsIgnored">if set to <c>true</c> [invalidated if streaming is ignored].</param>
            <param name="shallRaiseEvents">if set to <c>true</c> [shall raise events].</param>
            <returns>
            A array of affected runtime property values, or <c>null</c> if no such values exist.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.CloseValiditySpanDueToDetachOrUserModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.Commands.ChangedProperty,System.Int32,System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Closes the validity span due to a detach or user modification in live.
            </summary>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="changedProperty">The changed property.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> then the validity span should be closed because of a detach of a runtime attached subtree due to streaming.</param>
            <param name="invalidated">if set to <c>true</c> then the runtime property was invalidated.</param>
            <param name="invalidatedIfStreamingIsIgnored">if set to <c>true</c> then the runtime property was invalidated if streaming is ignored.</param>
            <param name="shallRaiseEvents">if set to <c>true</c> [shall raise events].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.OnInvalidationTriggerFired(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason,Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.LookupOrEvaluateValue(Spotfire.Dxp.Framework.DocumentModel.StatelessPropertyComputer{`0},Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer)">
            <summary>
            Search for the value in the multiplexor which is valid in the generation of the document
            where the runtime property is read. If no value is found the an entry is created in the
            search structure and the value is computed.
            </summary>
            <param name="propertyComputer">The property computer.</param>
            <param name="ownerNode">The owner node.</param>
            <param name="dependencyDeclarer">The dependency declarer.</param>
            <returns>
            The computed value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.ComputeValue(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0},Spotfire.Dxp.Framework.DocumentModel.StatelessPropertyComputer{`0},Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            This method computes the value of a runtime property value.
            </summary>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="propertyComputer">The property computer.</param>
            <param name="ownerNode">The owner node.</param>
            <returns>
            The computed value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.OnAncestorDetachedOrInvalidated(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.OnAncestorDetachedOrInvalidatedDuringConfigureForRuntimeAttach">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.InvalidateMultiplexor">
            <summary>
            This method is called when a value in the multiplexor has been invalidated on the live thread.
            It will invalidate the multiplexor itself.
            </summary>
            <returns>
            True, if we shall raise events due to the invalidation.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.FireInvalidationTriggers(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason,Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTrace)">
            <summary>
            This method fires the invalidation triggers that are set up to depend on this property.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="invalidationReason">The invalidation reason.</param>
            <param name="streamingTriggerTrace">The streaming trigger trace.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.EnqueueEventForNotPersistedProperty(Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTrace)">
            <summary>
            Enqueues that this property was invalidated so that an internal and external event can be raised.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.AddInvalidation(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.RemoveInvalidation(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.AddInvalidationDeclarerWithoutUnfolding(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Adds a declarer without unfolding it. This method may only be called while holding the lock
            on the multiplexor and on the value in the multiplexor that is valid in live. If there
            is no such value then it suffices to hold the lock on the multiplexor.
            </summary>
            <param name="threadSafeInvalidationTarget"></param>
            <param name="declarer"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.RemoveInvalidationDeclarerWithoutFolding(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Removes a declarer without folding it. This method may only be called while holding the lock
            on the multiplexor and on the value in the multiplexor that is valid in live. If there
            is no such value then it suffices to hold the lock on the multiplexor.
            </summary>
            <param name="threadSafeInvalidationTarget"></param>
            <param name="declarer"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.RemoveFoldedInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Removes a declarer which is already folded. This method may only be called while holding the lock
            on the multiplexor and on the value in the multiplexor that is valid in live. If there
            is no such value then it suffices to hold the lock on the multiplexor.
            </summary>
            <param name="threadSafeInvalidationTarget"></param>
            <param name="declarer"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.GetDeclarersToUnfold">
            <summary>
            Get the declarers that should be unfolded when a value valid in live is computed.
            
            Calling this method requires that you hold the lock on the value in this multiplexor
            that is valid in live.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.FetchAndClearTriggers">
            <summary>
            Gets the triggers which should be torn when a value in the multiplexor is invalidated.
            
            Calling this method requires that you hold the lock on the value in this multiplexor
            that is valid in live. In this case the value that is in the process of being invalidated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.IsEvaluated">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.IsValidInLive">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.LookupOrInsertRuntimePropertyValue(System.Int32,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.Boolean@,Spotfire.Dxp.Framework.DocumentModel.DocumentView@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedRuntimePropertyValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueValidity@)">
            <summary>
            This method searches the multiplexor for a runtime property value that is valid for
            <paramref name="currentThreadGeneration" />.
            If there is no such value it creates and inserts such a value.
            The method returns true if it created a value and false otherwise.
            It should be noted that the entry that is returned was valid for
            <paramref name="currentThreadGeneration" /> when this method held the lock on the
            runtime property value. However, the value may no longer be valid when it is returned.
            That can happen if the value is currently evaluating in which case the interval may shrink.
            It can also happen if the value is invalidated because of a modification on the live document.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="ownerNode">The owner node.</param>
            <param name="dependencyDeclarer">The dependency declarer.</param>
            <param name="useDocumentViewFromTriggerSetup">if set to <c>true</c> [use document view from trigger setup].</param>
            <param name="documentViewFromTriggerSetup">The document view from trigger setup.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="insertedRuntimePropertyValue">The inserted runtime property value.</param>
            <param name="insertedRuntimePropertyValueValidity">The inserted runtime property value validity.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.LookupRuntimePropertyValue(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0}@)">
            <summary>
            Looks up the runtime property value that is valid in the current thread generation from the array of runtime property values.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <param name="runtimePropertyValue">The runtime property value, if found; otherwise <c>null</c>.</param>
            <returns><c>true</c>, if there is a runtime property value for the current generation; otherwise <c>false</c></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.HasValueBeenReadInLive">
            <summary>
            True, if this value has been read in live. If this property is true then
            we raise internal and external events when this runtime property is
            invalidated. This field may only be read and modified on the application thread.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.ExternalUnfoldManager">
            <summary>
            <para>The unfold manager for mutable property triggers used for external events.</para>
            <para>This field and the entire contents of this structure may only be read and modified on 
            the application thread when operating the live document.</para>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.InternalUnfoldManager">
            <summary>
            <para>The unfold manager for mutable property triggers used for internal events.</para>
            <para>This field and the entire contents of this structure may only be read and modified on 
            the application thread when operating on the live document.</para>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.Remove(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueInvalidationState@)">
            <summary>
            Removes a runtime property value from the multiplexor.
            </summary>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="runtimePropertyValueInvalidationState">State of the runtime property value invalidation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.AddInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Add the invalidation declarer.
            </summary>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <returns>An unfold closure</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.RemoveInvalidationDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Removes the invalidation declarer.
            </summary>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <returns>A trigger that shoudl be torn down</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.GetLiveValue">
            <summary>
            Gets the live value. This method may only be called on the application thread when there exists a value that is valid in the live document.
            </summary>
            <returns>The live value</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor`1.UnfoldManager">
            <summary>
            <para>The unfold manager for mutable property triggers used for invalidation events.</para>
            <para>This field and the entire contents of this structure may only be read and modified 
            while holding the lock on the value in the multiplexor which is valid in live.</para>
            <para>If there is no such value it suffices to hold the lock on the multiplexor.</para>
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1">
            <summary>
            Rerepesents a value in a runtime property and additional info about its validity.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue" />
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner" />
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.ILimitationSource" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.computedInGeneration">
            <summary>
            The generation which originally computed (or is currently computing) the value of the
            runtime property.
            
            This is used when the multiplexor is searched for a value in a certain generation.
            
            This value is set when this instance is created and is therafter never changed.
            Thus reading it requires no lock.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1"/> class.
            </summary>
            <param name="computedInGeneration">The computed in generation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.#ctor(System.Int32,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1" /> class.
            </summary>
            <param name="computedInGeneration">The computed in generation.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.Mux">
            <summary>
            Gets the runtime property multiplexor that holds this value.
            </summary>
            <value>
            The mux.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.ComputedInGeneration">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.TryGetFirstGenerationOfNestedValiditySpanHole(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.FirstGenerationOfParentHole">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.AddDeclarer(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Adds the declarer.
            </summary>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <returns>An unfold closure.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.CloseValiditySpanDueToModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueState{`0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0},System.Int32,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Closes the validity span if it is open. This method may only be called on the main thread.
            </summary>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
            <param name="shallRaiseEvents">if set to <c>true</c> [shall raise events].</param>
            <param name="invalidatedIfStreamingIsIgnored">if set to <c>true</c> [invalidated if streaming is ignored].</param>
            <returns>
            True, if the runtime property value was invalidated. That is, the span was closed
            and the runtime property value has computed a value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#GetCommandHistory">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#Generation">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#Owner">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.IsValidInLive">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.CloseValiditySpanDueToDetachOrUserModificationInLive(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,System.Int32@)">
            <summary>
            Closes the runtime property value validity span due to a detach or a user modification in live.
            </summary>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="validIgnoringStreamingCount">The valid ignoring streaming count.</param>
            <returns>
              <c>true</c>, if the property is affected by the invalidation.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.OnInvalidationTriggerFiredByStreaming">
            <summary>
            Called when the invalidation trigger fired due to streaming.
            </summary>
            <returns><c>true</c>, if the value is affected.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.LastGenerationWithoutSynchronization">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.FirstGenerationWithoutSynchronization">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.FirstGenerationIgnoringStreaming">
            <summary>
            Gets the first generation ignoring streaming.
            </summary>
            <value>
            The first generation ignoring streaming.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.IsLastGenerationLimitedByStreaming">
            <summary>
            Gets a value indicating whether the last generation is limited by streaming.
            </summary>
            <value>
              <c>true</c> if this instance is last generation limited by streaming; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.HasValue">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.HasValueThatIsValidInLive">
            <summary>
            Gets a value indicating whether this instance has value that is valid in live.
            </summary>
            <value>
            <c>true</c> if this instance has value that is valid in live; otherwise, <c>false</c>.
            </value>
            <remarks>If <c>true</c>, then the property may be <c>false</c> directly after.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.AddDeclarerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldClosure{`0,Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@)">
            <summary>
            Adds the declarer to the runtime property value if it is valid in live.
            </summary>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="unfoldClosure">The unfold closure.</param>
            <returns>
              <c>true</c>, if the declarer was added.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.RemoveDeclarerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},Spotfire.Dxp.Framework.DocumentModel.Trigger@)">
            <summary>
            Removes the declarer from the runtime property value if it is valid in live.
            </summary>
            <param name="threadSafeInvalidationTarget">The thread safe invalidation target.</param>
            <param name="declarer">The declarer.</param>
            <param name="trigger">The trigger.</param>
            <returns><c>true</c>, if the declarer was removed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.InsertTriggerIfValidInLive(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Insert the trigger into the unfold entry if the runtime property value is valid in live.
            </summary>
            <param name="unfoldEntry">The unfold entry.</param>
            <param name="trigger">The trigger.</param>
            <returns>
            True, if the insertion was succesful
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.WaitForComputation(System.Int32)">
            <summary>
            Waits for the computation of this property value.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <returns>
            The computed value o <c>null</c> if the value is not applicable because the span no longer matches the generation of the snapshot for this thread.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.RawGetValue">
            <summary>
            Reads the value when we know that there is one and that it has already been read on the application thread.
            May only be called on the application thread.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.RemoveAndDispose">
            <summary>
            Removes the runtime property value from the multiplexor and disposes the contained value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.TryGetValue(`0@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="value">The value, if it exists.</param>
            <returns><c>true</c>, if a value has been computed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValue`1.RestoreUnfoldedDeclarersAtTransientTransactionRollback(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyMultiplexor{`0})">
            <summary>
            Restores unfolded declarers when a transient transaction is rolled back.
            </summary>
            <param name="runtimePropertyMultiplexor">The runtime property multiplexor.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingQueryInitializationResult`1">
            <summary>
            Represents the result of initializating a streaming query that results in a query with a static result.
            </summary>
            <typeparam name="T">The type of the values returned by the query.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingQueryInitializationResult`1.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingQueryInitializationResult`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingQueryInitializationResult`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingQueryInitializationResult`1.OnDisposeWhenHandleReturned(System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingQueryInitializationResult`1.CreateStreamingPropertyQueryState(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1">
            <summary>
            Represents the state of a streaming property query which is initializing the query.
            </summary>
            <typeparam name="T">The type of the values returned by the query. </typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.nextValueComputer">
            <summary>
            The next value computer.
            Will be set if a call to <see cref="M:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)"/> is made while a value is currently being computed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.closeQueryWhenFirstValueIsAssigned">
            <summary>
            A flag which is <c>true</c> if the query should be closed when the first value has been assigned.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.closeQueryWhenHandleReturned">
            <summary>
            If set to <c>true</c> then close the query when the query handle is returned.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1"/> class.
            </summary>
            <param name="nextValueComputer">The next value computer.</param>
            <param name="closeQueryWhenFirstValueIsAssigned">if set to <c>true</c> [close query when first value is assigned].</param>
            <param name="closeQueryWhenHandleReturned">if set to <c>true</c> [close query when handle returned].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.OnHandleReturned(Spotfire.Dxp.Framework.DocumentModel.StreamingQueryInitializationResult{`0},System.Boolean,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.OnInvalidationTriggerFired(System.Boolean,Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.DisposeOnApplicationThread(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InitializingStreamingPropertyQueryState`1.OnInitialSnapshotFailed(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingPropertyQueryState`1">
            <summary>
            Represents the state of a streaming property query which could not be issued because the query depends on another streaming query
            which is waiting for an initail result.
            </summary>
            <typeparam name="T">The type of the values returned by the query. </typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingPropertyQueryState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingPropertyQueryState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingPropertyQueryState`1.OnInvalidationTriggerFired(System.Boolean,Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AwaitingStreamingDataStreamingPropertyQueryState`1.DisposeOnApplicationThread(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IdleContinuousStreamingPropertyQueryState`1">
            <summary>
            Represents the state of a streaming property query which has a continuous query towards an external system and is waiting for new values.
            </summary>
            <typeparam name="T">The type of the values returned by the query. </typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.IdleContinuousStreamingPropertyQueryState`1.streamerHandle">
            <summary>
            A handle to the streamer which will be disposed when the stream is no longer needed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.IdleContinuousStreamingPropertyQueryState`1.queryHasProducedValueAndAssignedProperty">
            <summary>
            A flag which is <c>true</c> if the query has produced a value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.IdleContinuousStreamingPropertyQueryState`1.closeQueryWhenFirstValueIsAssigned">
            <summary>
            A flag which is <c>true</c> if the query should be closed when the first value has been assigned.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IdleContinuousStreamingPropertyQueryState`1.#ctor(System.IDisposable,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.IdleContinuousStreamingPropertyQueryState`1"/> class.
            </summary>
            <param name="streamerHandle">The streamer handle.</param>
            <param name="queryHasProducedValueAndAssignedProperty">if set to <c>true</c> [query has produced value and assigned property].</param>
            <param name="closeQueryWhenFirstValueIsAssigned">if set to <c>true</c> [close query when first value is assigned].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IdleContinuousStreamingPropertyQueryState`1.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IdleContinuousStreamingPropertyQueryState`1.OnInvalidationTriggerFired(System.Boolean,Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IdleContinuousStreamingPropertyQueryState`1.DisposeOnApplicationThread(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotFailedStreamingPropertyQueryState`1">
            <summary>
            Represents the state of a streaming property query where the initial snapshot could not be created.
            </summary>
            <typeparam name="T">The type of the values returned by the query. </typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotFailedStreamingPropertyQueryState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotFailedStreamingPropertyQueryState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotFailedStreamingPropertyQueryState`1.DisposeOnApplicationThread(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1">
            <summary>
            Represents the state of a streaming property query which has a continuous query towards an external system and is materializing a value.
            </summary>
            <typeparam name="T">The type of the values returned by the query. </typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.streamerHandle">
            <summary>
            A handle to the streamer which will be disposed when the stream is no longer needed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.nextValueComputer">
            <summary>
            The next value computer.
            Will be set if a call to <see cref="M:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)"/> is made while a value is currently being computed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.queryHasProducedValueAndAssignedProperty">
            <summary>
            A flag which is <c>true</c> if the query has produced a value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.closeQueryWhenFirstValueIsAssigned">
            <summary>
            A flag which is <c>true</c> if the query should be closed when the first value has been assigned.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.#ctor(System.IDisposable,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1"/> class.
            </summary>
            <param name="streamerHandle">The streamer handle.</param>
            <param name="nextValueComputer">The next value computer.</param>
            <param name="queryHasProducedValueAndAssignedProperty">if set to <c>true</c> [query has produced value and assigned property].</param>
            <param name="closeQueryWhenFirstValueIsAssigned">if set to <c>true</c> [close query when first value is assigned].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.OnValueAssigned(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.OnInvalidationTriggerFired(System.Boolean,Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.DisposeOnApplicationThread(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.BusyContinuousQueryStreamingPropertyQueryState`1.OnNewValueOnApplicationThread(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingPropertyQueryState`1">
            <summary>
            Represents the state of a streaming property query where the result of the query is static so that no query is actually posed to the external system.
            This may a query that yields an error or a query where the WHERE clause is false so that the result is known.
            </summary>
            <typeparam name="T">The type of the values returned by the query. </typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingPropertyQueryState`1.hasPropertyHasBeenAssigned">
            <summary>
            <c>true</c> if the streaming property has been assigned with the static result.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingPropertyQueryState`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingPropertyQueryState`1"/> class.
            </summary>
            <param name="hasPropertyHasBeenAssigned">if set to <c>true</c> [property has been assigned].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingPropertyQueryState`1.OnValueAssigned(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingPropertyQueryState`1.OnInvalidationTriggerFired(System.Boolean,Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingPropertyQueryState`1.DisposeOnApplicationThread(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StaticStreamingPropertyQueryState`1.OnNewValueOnApplicationThread(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StoppingStreamingPropertyQueryState`1">
            <summary>
            Represents the state of a streaming property query that is stopping.
            </summary>
            <typeparam name="T">The type of the values returned by the query. </typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StoppingStreamingPropertyQueryState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StoppingStreamingPropertyQueryState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StoppingStreamingPropertyQueryState`1.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StoppingStreamingPropertyQueryState`1.OnInvalidationTriggerFired(System.Boolean,Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StoppingStreamingPropertyQueryState`1.DisposeOnApplicationThread(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StoppingStreamingPropertyQueryState`1.OnNewValueOnApplicationThread(System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue`1">
            <summary>
            Represents a value that is returned from a streaming query.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue`1.ComputeOnWorkerThread">
            <summary>
            Gets a value indicating whether whether the value should be computed on a worker thread.
            </summary>
            <value>
              <c>true</c> if the value should be computed on on a worker thread; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue`1.ComputeValue">
            <summary>
            Computes the value. Subclasses should override this method if <see cref="P:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue`1.ComputeOnWorkerThread"/> returrns <c>true</c>.
            This method will be called at most once. The underlying implementation should free all associated resources.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue`1.ExtractValue">
            <summary>
            Extracts the value. Subclasses should override this method if <see cref="P:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue`1.ComputeOnWorkerThread"/> returrns <c>false</c>.
            This method will be called at most once. The underlying implementation should free all associated resources.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue`1.DiscardValue">
            <summary>
            Discards the value. This is called if and only if <see cref="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue`1.ComputeValue"/> or <see cref="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue`1.ExtractValue"/> is not called.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertySink`2">
            <summary>
            Represents a streaming property sink which receives values and updates the streaming property in the document.
            </summary>
            <typeparam name="T">The type of the values in the stream.</typeparam>
            <typeparam name="TNode">The type of the node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertySink`2.streamingPropertyQuery">
            <summary>
            The stream manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertySink`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertySink`2" /> class.
            </summary>
            <param name="streamingPropertyQuery">The stream manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertySink`2.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0})">
            <summary>
            Called by the steramer when a new value is produced by the streamer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStreamInvalidationState">
            <summary>
            Represents the invalidation state of a streaming property stream.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStreamInvalidationState.isInvalidDueToUser">
            <summary>
            A flag which is <c>true</c> if the query has been invalid by streaming.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStreamInvalidationState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStreamInvalidationState"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStreamInvalidationState.OnSnapshotCreated">
            <summary>
            Called while holding the transaction lock when the snapshot for a streaming property query is created.
            </summary>
            <returns><c>true</c>, if the query should be considered as triggered by the user.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStreamInvalidationState.OnInvalidationTriggerFired(System.Boolean)">
            <summary>
            Called when the invalidation trigger has fired.
            </summary>
            <param name="isStreaming">set to <c>true</c> if the invalidation occurs in a streaming transaction.</param>
            <returns><c>true</c>, if the invalidations states changed.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IStreamSubscriptionManagerHolder">
            <summary>
            A non generic interface for stream subscription manager holders.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.NonSharedAssignableRuntimePropertyValueManager`1">
            <summary>
            A non shared value manager for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1"/>
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.NonSharedAssignableRuntimePropertyValueManager`1.assignableRuntimePropertyUserModificationManager">
            <summary>
            The assignable runtime property user modification manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NonSharedAssignableRuntimePropertyValueManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.NonSharedAssignableRuntimePropertyValueManager`1"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="owner">The owner.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NonSharedAssignableRuntimePropertyValueManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.NonSharedAssignableRuntimePropertyValueManager`1" /> class.
            </summary>
            <param name="other">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1"/> that is unsharing.</param>
            <param name="sharedComponentFactory">The component factory</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NonSharedAssignableRuntimePropertyValueManager`1.GetOrCreateAssignableRuntimePropertyUserModificationManager">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.NonSharedStreamSubscriptionManagerHolder`2">
            <summary>
            A <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2"/> that is not shared.
            </summary>
            <typeparam name="T">The tyep of values in the stream</typeparam>
            <typeparam name="TNode">The type of the node which contains the streaming property.</typeparam>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.NonSharedStreamSubscriptionManagerHolder`2.streamSubscriptionManager">
            <summary>
            The subscription manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NonSharedStreamSubscriptionManagerHolder`2.#ctor(`1,Spotfire.Dxp.Framework.DocumentModel.PropertyName,`0,Spotfire.Dxp.Framework.DocumentModel.InitializeStreamingQueryDelegate{`0,`1},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.TimeSpan,Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.NonSharedStreamSubscriptionManagerHolder`2"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="initialValue">The initial value.</param>
            <param name="initializeStreamingQueryDelegate">The create streamer delegate.</param>
            <param name="createStreamerDependencyDeclarer">The create streamer dependency declarer.</param>
            <param name="subscriptionGracePeriod">The subscription grace period.</param>
            <param name="valueManager">The value manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NonSharedStreamSubscriptionManagerHolder`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder{`0,`1},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.NonSharedStreamSubscriptionManagerHolder`2" /> class.
            </summary>
            <param name="other">The other <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2"/></param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NonSharedStreamSubscriptionManagerHolder`2.GetOrCreateSubscriptionManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NonSharedStreamSubscriptionManagerHolder`2.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NonSharedStreamSubscriptionManagerHolder`2.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedStreamSubscriptionManagerHolder`2">
            <summary>
            A <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2"/> that is shared.
            </summary>
            <typeparam name="T">The tyep of values in the stream</typeparam>
            <typeparam name="TNode">The type of the node which contains the streaming property.</typeparam>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2" />
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedStreamSubscriptionManagerHolder`2.#ctor(`1,Spotfire.Dxp.Framework.DocumentModel.PropertyName,`0,Spotfire.Dxp.Framework.DocumentModel.InitializeStreamingQueryDelegate{`0,`1},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.TimeSpan,Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedStreamSubscriptionManagerHolder`2"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="initialValue">The initial value.</param>
            <param name="initializeStreamingQueryDelegate">The create streamer delegate.</param>
            <param name="createStreamerDependencyDeclarer">The create streamer dependency declarer.</param>
            <param name="subscriptionGracePeriod">The subscription grace period.</param>
            <param name="valueManager">The value manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedStreamSubscriptionManagerHolder`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder{`0,`1},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedStreamSubscriptionManagerHolder`2"/> class.
            </summary>
            <param name="other">The other <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2"/></param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedStreamSubscriptionManagerHolder`2.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedStreamSubscriptionManagerHolder`2.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedStreamSubscriptionManagerHolder`2.GetOrCreateSubscriptionManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedStreamSubscriptionManagerHolder`2.CreateOverride(Spotfire.Dxp.Framework.DocumentModel.IStreamSubscriptionManagerHolder)">
            <summary>
            Creates the override.
            </summary>
            <param name="streamSubscriptionManagerHolder">The stream subscription manager holder.</param>
            <returns>The created override</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan">
            <summary>
            Represents the validity of the result of a snapshot read based on the validities of the properties when they were read.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan.firstGeneration">
            <summary>
            The first generation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan.lastGeneration">
            <summary>
            The last generation
            </summary>
            <remarks>
            Note that, if an assignments on the application thread affects a property after the property has been read (but while the read is still executing) then that is not taken into account.
            Thus to draw any conclusion about the validity of the result this needs to be combined with an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ExternalStreamingEventHandler"/> unless this executes on the 
            application thread so that no concurrent assignments can take place.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan.allPropertiesWereValidInLiveIgnoringStreamingWhenReadByComputingThread">
            <summary>
            <c>true</c> if all properties were valid in live ignoring streaming when they were read by the computing thread.
            </summary>
            <remarks>
            Note that, if an assignments on the application thread affects a property after the property has been read (but while the read is still executing) then that is not taken into account.
            Thus to draw any conclusion about the validity of the result this needs to be combined with an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ExternalStreamingEventHandler"/> unless this executes on the 
            application thread so that no concurrent assignments can take place.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan"/> class.
            </summary>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="allPropertiesWereValidInLiveIgnoringStreamingWhenReadByComputingThread">if set to <c>true</c> [all properties were valid in live ignoring streaming when read by computing thread].</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan.LastGeneration">
            <summary>
            Gets the last generation when the result of the read is valid based on the validity of properties when they were read.
            </summary>
            <remarks>
            Note that, if an assignments on the application thread affects a property after the property has been read (but while the read is still executing) then that is not taken into account.
            Thus to draw any conclusion about the validity of the result this needs to be combined with an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ExternalStreamingEventHandler"/> unless this executes on the 
            application thread so that no concurrent assignments can take place.
            </remarks>
            <value>
            The last generation.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan.FirstGeneration">
            <summary>
            Gets the first generation when the result of the read is valid.
            </summary>
            <value>
            The first generation.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan.IsValidInLiveIgnoringStreaming">
            <summary>
            Gets a value indicating whether all properties were valid in live ignoring streaming based on the validity of properties when they were read.
            </summary>
            <remarks>
            Note that, if an assignments on the application thread affects a property after the property has been read (but while the read is still executing) then that is not taken into account.
            Thus to draw any conclusion about the validity of the result this needs to be combined with an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ExternalStreamingEventHandler"/> unless this executes on the 
            application thread so that no concurrent assignments can take place.
            </remarks>
            <value>
            <c>true</c> if this instance is valid in live ignoring streaming based on the validity of properties when they were read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadValiditySpan.IsValidInLive">
            <summary>
            Gets a value indicating whether all properties were valid in live based on the validity of properties when they were read.
            </summary>
            <remarks>
            Note that, if an assignments on the application thread affects a property after the property has been read (but while the read is still executing) then that is not taken into account.
            Thus to draw any conclusion about the validity of the result this needs to be combined with an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ExternalStreamingEventHandler"/> unless this executes on the 
            application thread so that no concurrent assignments can take place.
            </remarks>
            <value>
            <c>true</c> if this instance is valid in live based on the validity of properties when they were read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryState`1">
            <summary>
            Represents the state of a streaming property query.
            </summary>
            <typeparam name="T">The type of the values returned by the query. </typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryState`1.GetStateDisplayString">
            <summary>
            Gets the state display string.
            </summary>
            <returns>The display string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryState`1.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <summary>
            Called when a new value computer is received.
            </summary>
            <param name="valueComputer">The value computer.</param>
            <param name="valueComputerToDispose">A value computer that should be disposed by the caller.</param>
            <param name="valueComputerToRun">The value computer to run.</param>
            <returns>The new state</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryState`1.OnHandleReturned(Spotfire.Dxp.Framework.DocumentModel.StreamingQueryInitializationResult{`0},System.Boolean,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <summary>
            Called when the handle of a query is return.
            </summary>
            <param name="queryResult">The query result.</param>
            <param name="invalid"><c>true</c> if the query delegate has read an invalid property in the model.</param>
            <param name="isQueryInvalidatedByStreaming">if set to <c>true</c> [is query invalidated by streaming].</param>
            <param name="valueComputerToRun">The initial value computer.</param>
            <param name="disposeStreamerAndNotify">if set to <c>true</c> [dispose streamer and notify].</param>
            <param name="streamerHandleToDispose">The streamer handle to dispose.</param>
            <param name="valueComputerToDispose">The value computer to dispose.</param>
            <returns>The new state</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryState`1.OnValueAssigned(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <summary>
            Called when a value for the query is assigned to the streaming property..
            </summary>
            <param name="disposeStreamer">if set to <c>true</c> [dispose streamer].</param>
            <param name="streamerHandleToDispose">The streamer handle to dispose.</param>
            <param name="nextValueComputerToInvoke">The next value computer to invoke.</param>
            <returns>The new state</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryState`1.OnInvalidationTriggerFired(System.Boolean,Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <summary>
            Called when the invalidation trigger has fired.
            </summary>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
            <param name="closeQueryAction">The close query action.</param>
            <param name="valueComputerToDispose">The value computer to dispose.</param>
            <returns>The new state</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryState`1.DisposeOnApplicationThread(System.Boolean@,System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <summary>
            Called on application thread when the query is streaming property query is disposed. This typically happens because the last subscription is 
            closed.
            </summary>
            <param name="disposeStreamerAndNotify">if set to <c>true</c> [dispose streamer and notify].</param>
            <param name="streamerHandleToDispose">The streamer handle to dispose.</param>
            <param name="valueComputerToDispose">The value computer to dispose.</param>
            <returns>The new state</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryState`1.OnInitialSnapshotFailed(System.Boolean@)">
            <summary>
            Called when the creation of the initial snapshot for the query failed.
            </summary>
            <param name="disposeStreamerAndNotify">if set to <c>true</c> [dispose streamer and notify].</param>
            <returns>The new state</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryState`1.OnNewValueOnApplicationThread(System.Boolean@)">
            <summary>
            Called on the application thread when a new value has been computed and is ready to be assigned to the streaming property.
            </summary>
            <param name="discardValue">if set to <c>true</c> then the value should be discarded and not assigned.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2">
            <summary>
            Handles a stream for a streaming property.
            A stream typically corresponds to a sequence a continuous query to an external system. 
            This class will create and post a new query if the specified trigger fires for the previous query or if the query was not valid in live when it was created.
            </summary>
            <typeparam name="T">The type of the values of the stream.</typeparam>
            <typeparam name="TNode">The type of the owning document node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.initializeStreamingQueryDelegate">
            <summary>
            A delegate that initializes the streaming query given the owner document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.createStreamerDependencyDeclarer">
            <summary>
            A delegate that returns a trigger that specifies when when the streaming query needs to be recreated because it is no longer valid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.liveNode">
            <summary>
            The live node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.applicationThread">
            <summary>
            The application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.streamSubscriptionManager">
            <summary>
            The stream subscription manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.invalidationState">
            <summary>
            The invalidation state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.isStopping">
            <summary>
            A flag which is <c>true</c> if we are stopping this streaming property stream. 
            We will notify the stream subscription manager when the stop is complete so that it can start a new streaming property stream when there is any subscriber.
            This field is protected by the lock on this object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.streamingPropertyQuery">
            <summary>
            The current query.
            This field is protected by the lock on this object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.trigger">
            <summary>
            The trigger.
            This field is protected by the lock on this object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.InitializeStreamingQueryDelegate{`0,`1},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,`1,Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread,Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2"/> class.
            </summary>
            <param name="initializeStreamingQueryDelegate">The create streamer delegate.</param>
            <param name="createStreamerDependencyDeclarer">The create streamer dependency declarer.</param>
            <param name="liveNode">The live node.</param>
            <param name="applicationThread">The application thread.</param>
            <param name="streamSubscriptionManager">The stream subscription manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.OnNewValueOnApplicationThread(`0)">
            <summary>
            Called on the application thread when a new value is received.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.StartAsync">
            <summary>
            Starts this streaming property stream. The method is asynchronous and the streaming property stream will execute on a worker thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.StartOnWorkerThread">
            <summary>
            Starts this streaming property stream.. This method should be called on a worker thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.CreateAndStartStreamerManagerOnWorkerThread(System.Boolean)">
            <summary>
            Creates and start a streamer manager. This method should be called on a worker thread.
            </summary>
            <param name="triggeredByUser">if set to <c>true</c> [triggered by user].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.OnStreamManagerStoppedOnWorkerThread(System.Boolean)">
            <summary>
            Called when the stream manager stopped. This method should be called on a worker thread.
            </summary>
            <param name="triggeredByUser">if set to <c>true</c> [triggered by user].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.RestoreInitialValue">
            <summary>
            Restores the initial value of the property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.DisposeOnApplicationThread">
            <summary>
            Disposes this streaming property stream. This method should be called on the application thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream`2.OnInvalidationTriggerFired(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason,Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IStreamingProperty">
            <summary>
            An interface for streaming properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IStreamingProperty.TransferStateToSnapshot(Spotfire.Dxp.Framework.DocumentModel.IStreamingProperty)">
            <summary>
            Transfers state to snapshot from the live property when a snapshot is created.
            </summary>
            <param name="streamingProperty">The streaming property.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IStreamSubscriptionManager">
            <summary>
            A non generic interface for stream subscription managers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IStreamSubscriptionManager.UnSubscribe">
            <summary>
            Unsubscribe to updates of the streaming property.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2">
            <summary>
            Manages a streamer for a streaming property.
            A streamer typically corresponds to a continuous query towards an external system. 
            The responsibility of this class is to dispose the streamer when the query is no longer valid and notify the streaming property stream so that it can create a new streamer manager.
            </summary>
            <typeparam name="T">The type of the values in the stream</typeparam>
            <typeparam name="TNode">The type of the document node that owns the streaming property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.applicationThread">
            <summary>
            The application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.liveNode">
            <summary>
            The live node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.initializeStreamingQueryDelegate">
            <summary>
            A delegate that creates the streamer given the owner document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.streamingPropertyStream">
            <summary>
            The stream subscription.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.state">
            <summary>
            The state. Protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.invalidationState">
            <summary>
            The invalidation state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStream{`0,`1},`1,Spotfire.Dxp.Framework.DocumentModel.InitializeStreamingQueryDelegate{`0,`1},Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyStreamInvalidationState)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2" /> class.
            </summary>
            <param name="applicationThread">The application thread.</param>
            <param name="streamingPropertyStream">The stream subscription.</param>
            <param name="liveNode">The live node.</param>
            <param name="initializeStreamingQueryDelegate">The create streamer delegate.</param>
            <param name="invalidationState">State of the invalidation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.StartOnWorkerThread(System.Boolean)">
            <summary>
            Starts the streamer manager. This method should be called on a worker thread.
            </summary>
            <param name="triggeredByUser">if set to <c>true</c> [triggered by user].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.ComputeValueOnWorkerThread(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0})">
            <summary>
            Executes a value computer delegate and updates the document with the computed value.
            This method should be called on a worker thread.
            </summary>
            <param name="valueComputer">The value computer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0})">
            <summary>
            Called when a new value is received.
            </summary>
            <param name="valueComputer">The value computer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.OnNewValueOnApplicationThread(`0)">
            <summary>
            Called on the application thread when a new value is received.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.DisposeStreamerAndNotifyOnWorkerThread(Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction)">
            <summary>
            Disposes the streamer. This method should be called on a worker thread.
            </summary>
            <param name="closeQueryAction">The close query action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.DisposeStreamerAndNotifyAsync(Spotfire.Dxp.Framework.DocumentModel.CloseQueryAction)">
            <summary>
            Disposes the streamer. The method is asynchronous and the dispose will execute on a worker thread.
            </summary>
            <param name="closeQueryAction">The close query action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.DisposeOnApplicationThread">
            <summary>
            Disposes the streamer manager. This method should be called on the application thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQuery`2.OnInvalidationTriggerFired(System.Boolean)">
            <summary>
            Called when the invalidation trigger has fired.
            </summary>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler">
            <summary>
            Handles the existence of an AggregatedTransactionHandle and allows idempotent begin, commmit and rollback of aggregated transactions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler.model">
            <summary>
            The model node used to start transactions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler.handle">
            <summary>
            The current edit transaction, or null. Used for changes made to the document in the prepared export report builder. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler.IsTransactionActive">
            <summary>
            Gets a value indicating whether this instance has an active transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler.Begin">
            <summary>
            Begins an aggregated transaction, if there is no active transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler.Rollback">
            <summary>
            Rolls back the active transaction, if any.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler.Commit">
            <summary>
            Commits the active transaction, if any.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IdempotentAggregatedTransactionHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.NodeExtensions">
            <summary>
            Extension methods for Node and related classes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NodeExtensions.GetRoot(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Gets the root node. That is, the ancestor node that is not owned by any other node. 
            </summary>
            <param name="node">The node.</param>
            <returns>The root node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NodeExtensions.GetAncestorOrSelf``1(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Gets the the closest ancestor, or this node itself, that is the specified type.
            </summary>
            <typeparam name="T">The type searched for.</typeparam>
            <param name="node">The node.</param>
            <returns>Gets the the closest ancestor, or this node itself.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.PropertyStreamingSubscriptionHandle">
            <summary>
            Represent a subscription of a stream for a streaming property.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PropertyStreamingSubscriptionHandle.subscriptionManager">
            <summary>
            The subscription manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyStreamingSubscriptionHandle.#ctor(Spotfire.Dxp.Framework.DocumentModel.IStreamSubscriptionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyStreamingSubscriptionHandle"/> class.
            </summary>
            <param name="subscriptionManager">The subscription manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyStreamingSubscriptionHandle.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2">
            <summary>
            Represents a streaming property.
            </summary>
            <typeparam name="T">The value of the property</typeparam>
            <typeparam name="TNode">The type of the owner node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.owner">
            <summary>
            The owner.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.initialValue">
            <summary>
            The initial value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.valueManager">
            <summary>
            The value manager
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.initializeStreamingQueryDelegate">
            <summary>
            A delegate that creates the streamer given the owner document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.createStreamerDependencyDeclarer">
            <summary>
            A delegate that returns a trigger that specifies when when the streamer needs to be recreated because it is no longer valid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.subscriptionGracePeriod">
            <summary>
            The subscription grace period.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.streamSubscriptionManagerHolder">
            <summary>
            The stream subscription manager holder.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.transientTransactionContext">
            <summary>
            The transient transaction context.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.#ctor(`1,Spotfire.Dxp.Framework.DocumentModel.PropertyName,`0,Spotfire.Dxp.Framework.DocumentModel.InitializeStreamingQueryDelegate{`0,`1},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="initialValue">The initial value.</param>
            <param name="initializeStreamingQueryDelegate">The create streamer delegate.</param>
            <param name="createStreamerDependencyDeclarer">The create streamer declarer.</param>
            <param name="subscriptionGracePeriod">The subscription grace period.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#PropertyName">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#IStreamingProperty#TransferStateToSnapshot(Spotfire.Dxp.Framework.DocumentModel.IStreamingProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#Activate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ActivateForConfigureForRuntimeAttach">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ReleaseValueManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidated(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidatedDuringConfigureForRuntimeAttach">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingProperty`2.Subscribe">
            <summary>
            Subscribes to this streaming property. This means that a stream which continuously updates this property will be started unless it is already running.
            </summary>
            <returns>A handle to teh subscription which shoudl be disposed when the stream is no longer needed.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingQueryInitializationResult`1">
            <summary>
            Represents the result of initializating a streaming query.
            </summary>
            <typeparam name="T">The type of the values returned by the query.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingQueryInitializationResult`1.CreateStreamingPropertyQueryState(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@,System.Boolean@)">
            <summary>
            Creates the state of the streaming property query.
            </summary>
            <param name="nextValueComputer">The next value computer.</param>
            <param name="closeQueryWhenFirstValueIsAssigned">if set to <c>true</c> [close query when first value is assigned].</param>
            <param name="initialValueComputer">The initial value computer.</param>
            <param name="disposeStreamerAndNotify">if set to <c>true</c> [dispose streamer and notify].</param>
            <returns>The state</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingQueryInitializationResult`1.OnDisposeWhenHandleReturned(System.IDisposable@,Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0}@)">
            <summary>
            Called when the query handle shoudl be disposed immediately after the the handle is returned.
            </summary>
            <param name="streamerHandleToDispose">The streamer handle to dispose.</param>
            <param name="valueComputerToDispose">The value computer to dispose.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2">
            <summary>
            This class is responsible for running a computation based on a snapshot on a worker thread. 
            The computation is reexecuted whenever the result is no longer valid in live.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.applicationThread">
            <summary>
            The application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.liveNode">
            <summary>
            The live node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.computer">
            <summary>
            The computer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.newResultCallback">
            <summary>
            The callback to be called when a new result has been computed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.disableInteractionCallback">
            <summary>
            The callback that should be called when the interaction in the UI should be disabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.isInteractionDisabled">
            <summary>
            <c>true</c> if the UI should be diasabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.isDisposed">
            <summary>
            <c>true</c> if this insatnce has been disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.resultValidInLive">
            <summary>
            The last result, if it is still valid in live.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.externalEventManager">
            <summary>
            The external event manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.currentJobState">
            <summary>
            The current job state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread,`0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{`0,`1},System.Action{Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult{`0,`1}},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2" /> class.
            </summary>
            <param name="applicationThread">The application thread.</param>
            <param name="liveNode">The live node.</param>
            <param name="trigger">The trigger.</param>
            <param name="computer">The computer.</param>
            <param name="newResultCallback">The new result callback.</param>
            <param name="disableInteractionCallback">The disable interaction callback.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.ExchangeSnapshotCallback">
            <summary>
            The snapshot exchange callback.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.OnTriggerFired(System.Boolean)">
            <summary>
            Called when the trigger fires.
            </summary>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.Create(Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread,`0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{`0,`1},System.Action{Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult{`0,`1}},System.Action)">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2"/>.
            </summary>
            <param name="applicationThread">The application thread.</param>
            <param name="liveNode">A live document node. This instance will create new snapshots from this node whenever the computation needs to be reexecuted.</param>
            <param name="trigger">A trigger that specifies dependencies for the computer.</param>
            <param name="computer">The computer, that takes a snapshot and computes a result.</param>
            <param name="newResultCallback">A callback which will be invoked when a new result has been computed provided that the result is valid in live, or valid in live if streaming is ignored. The callback would typically render the result in the UI and allow user interaction.</param>
            <param name="disableInteractionCallback">A callback that will be invoked if the previous result is no longer valid due to a non streaming modification of the document (typically, a user modification). The callback is not guaranteed to be invoked immediately when the result is no longer valid.</param>
            <returns>A streaming snapshot computer.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.CreateAndStartJob">
            <summary>
            Creates and start a job.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.InvokeDisableInteractionCallback(Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer{`0,`1}.JobState)">
            <summary>
            Invokes the disable interaction callback if the specified jobstate is still the current job state.
            </summary>
            <param name="jobstate">The jobstate.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.ExecuteJobOnWorkerThread(Spotfire.Dxp.Framework.DocumentModel.Snapshot{`0},Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer{`0,`1}.JobState)">
            <summary>
            Executes the job.
            </summary>
            <param name="snapshot">The snapshot.</param>
            <param name="jobState">State of the job.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.OnJobCancelled">
            <summary>
            Called when job is cancelled.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.HandleResultOnApplicationThread(Spotfire.Dxp.Framework.DocumentModel.Snapshot{`0},`1)">
            <summary>
            Handles the result on the application thread.
            </summary>
            <param name="snapshot">The snapshot.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.DisableUi">
            <summary>
            Disables the UI.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState">
            <summary>
            Represents the state of the ongoing job.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState.progress">
            <summary>
            The progress ocject associated with the thread that executes the job.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState.isValidInLive">
            <summary>
            <c>true</c>, if the result valid in live.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState.isValidIfStreamingIsIgnored">
            <summary>
            <c>true</c>, if the is valid in live if streaming is ignored.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState.Progress">
            <summary>
            Gets the progress.
            </summary>
            <value>
            The progress.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState.IsValidInLive">
            <summary>
            Gets a value indicating whether the result of the job is valid in live. The value of this property is only accurate if the job has completed and the property is read on the application thread.
            </summary>
            <value>
            <c>true</c> if the result of the job is valid in live; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState.IsValidIfStreamingIsIgnored">
            <summary>
            Gets a value indicating whether the result of the job is valid in live if streaming updates are ignored. The value of this property is only accurate if the job has completed and the property is read on the application thread.
            </summary>
            <value>
            <c>true</c> if the result of the job is valid in live if streaming updates are ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotComputer`2.JobState.OnInvalid(System.Boolean)">
            <summary>
            This method is called when the job is no longer valid.
            </summary>
            <param name="isStreaming">if set to <c>true</c> then job is no longer valid due to streaming.</param>
            <returns><c>true</c>, if it was detected that the job is no longer valid in live, if streaming is ignored.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2">
            <summary>
            This class represents a result from a streaming snapshot computer.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2.streamingSnapshotResultHolder">
            <summary>
            The streaming snapshot result holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2"/> class.
            </summary>
            <param name="streamingSnapshotResultHolder">The streaming snapshot result holder.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2.CurrentSnapshot">
            <summary>
            Gets the current snapshot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2.LiveNode">
            <summary>
            Gets the live node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2.Read(System.Action{`0})">
            <summary>
            Reads the current snapshot.
            </summary>
            <param name="action">The action to invoke.</param>
            <exception cref="T:System.InvalidOperationException">If current snapshot is null.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResult`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2">
            <summary>
            Holds the result of a streaming snapshot computer,
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.refCount">
            <summary>
            The reference count.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.currentSnapshot">
            <summary>
            The current snapshot. This snapshot is replaced after any transaction on the document provided that the result is still valid in live.
            It will be <c>null</c> if this instance is disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.liveNode">
            <summary>
            The live node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.Snapshot{`0},`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2"/> class.
            </summary>
            <param name="currentSnapshot">The current snapshot.</param>
            <param name="liveNode">The live node.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.CurrentSnapshot">
            <summary>
            Gets the current snapshot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.LiveNode">
            <summary>
            Gets the live node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.ExchangeSnapshot">
            <summary>
            Exchanges the snapshot.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.Read(System.Action{`0})">
            <summary>
            Reads the current snapshot.
            </summary>
            <param name="action">The action to invoke.</param>
            <exception cref="T:System.InvalidOperationException">If current snapshot is null.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.DecRefCount">
            <summary>
            Decreases the reference count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSnapshotResultHolder`2.IncRefCount">
            <summary>
            Increases the reference count.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle">
            <summary>
            A base class for streaming subscription handles.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTrace">
            <summary>
            Base clase for nodes that represents propagation traces for stream properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTrace.Push(Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTrace,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Pushes the specified node and propery name onto the specified trace but returns <c>null</c> if teh specified trace is <c>null.</c>
            </summary>
            <param name="trace">The trace.</param>
            <param name="node">The node.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The constructed trace</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceCons">
            <summary>
            Represents a propagation trace for stream properties with at least one entry.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTrace" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceCons.trace">
            <summary>
            The trace.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceCons.node">
            <summary>
            The node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceCons.propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceCons.#ctor(Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTrace,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceCons"/> class.
            </summary>
            <param name="trace">The trace.</param>
            <param name="node">The node.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceCons.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceEmpty">
            <summary>
            Represents and empty propagation trace for stream properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceEmpty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceEmpty"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTraceEmpty.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertySink`1">
            <summary>
            Represents a streaming property sink which receives values and updates the streaming property in the document.
            </summary>
            <typeparam name="T">The type of the values in the stream.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamingPropertySink`1.OnNewValue(Spotfire.Dxp.Framework.DocumentModel.StreamingPropertyQueryValue{`0})">
            <summary>
            Called by the steramer when a new value is produced by the streamer.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2">
            <summary>
            Manages subscriptions of updates to a streaming property. 
            The responsibility of this class is to count how many subscribers there are and close the streaming property stream if there are no subscriber and the grace period is over.
            </summary>
            <typeparam name="T">The type of the values of the stream.</typeparam>
            <typeparam name="TNode">The type of the node that own the property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.liveNode">
            <summary>
            The live node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.propertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.applicationThread">
            <summary>
            The application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.initializeStreamingQueryDelegate">
            <summary>
            A delegate that creates the streamer given the owner document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.createStreamerDependencyDeclarer">
            <summary>
            A delegate that returns a trigger that specifies when when the streamer needs to be recreated because it is no longer valid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.subscriptionGracePeriod">
            <summary>
            The subscription grace period.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.initialValue">
            <summary>
            The initial value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.valueManager">
            <summary>
            The value manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.subscriptionCount">
            <summary>
            The subscription count.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.timeOfNosubscribers">
            <summary>
            The most recent point in time when when there wre no longer any subscribers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.gracePeriodTimer">
            <summary>
            The grace period timer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.streamingPropertyStream">
            <summary>
            The streaming property stream, or <c>null</c> if there is no active streaming property stream.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.isDisposingStreamSubscription">
            <summary>
            A flag which is <c>true</c> if we are currently disposing the streaming property stream. 
            We will not start any new streaming property stream until the current streaming property stream has
            been disposed so that the connection with the external system has been closed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.InitializeStreamingQueryDelegate{`0,`1},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,`0,`1,Spotfire.Dxp.Framework.DocumentModel.PropertyName,System.TimeSpan,Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2" /> class.
            </summary>
            <param name="initializeStreamingQueryDelegate">The create streamer delegate.</param>
            <param name="createStreamerDependencyDeclarer">The create streamer declarer.</param>
            <param name="initialValue">The initial value.</param>
            <param name="liveNode">The live node.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="subscriptionGracePeriod">The subscription grace period.</param>
            <param name="valueManager">The value manager.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.PropertyName">
            <summary>
            Gets the property name. Only exposed for logging purposes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.UnSubscribe">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.TimerCallback(System.Object)">
            <summary>
            The timer callback.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.CheckGracePeriodOnApplicationThread">
            <summary>
            Checks the subscription grace period while executing on the application thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.OnStreamingPropertyStreamStoppedOnWorkerThread">
            <summary>
            Called on a worker therad when the streaming property stream has stopped.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.Subscribe">
            <summary>
            Subscribes to updates of the streaming property.
            </summary>
            <returns>A subscription handle which should be disposed when the subscription is no longer needed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.OnAncestorDetachedOrInvalidated">
            <summary>
            This method is called when an ancestor is detached or invalidated.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.OnNewValueOnApplicationThread(`0)">
            <summary>
            Called on the application thread when a new value is received.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.RestoreInitialValue">
            <summary>
            Restores the initial value of the property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManager`2.CreateTransientTransactionOverride(Spotfire.Dxp.Framework.Commands.TransientTransactionContext)">
            <summary>
            Creates the transient transaction override.
            </summary>
            <param name="transientTransactionContext">The transient transaction context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2">
            <summary>
            Holds a lazily created subscription manager. The purpose of class is to make sure that we get new subscription managers for shared nodes but at the same time
            we do not want to create subsription mananagers for every streaming property when a session is created. Thus we create when needed.
            </summary>
            <typeparam name="T">The tyep of values in the stream</typeparam>
            <typeparam name="TNode">The type of the node which contains the streaming property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.owner">
            <summary>
            The owner.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.propertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.initialValue">
            <summary>
            The initial value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.initializeStreamingQueryDelegate">
            <summary>
            A delegate that creates the streamer given the owner document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.createStreamerDependencyDeclarer">
            <summary>
            A delegate that returns a trigger that specifies when when the streamer needs to be recreated because it is no longer valid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.subscriptionGracePeriod">
            <summary>
            The subscription grace period.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.valueManager">
            <summary>
            The value manager
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.#ctor(`1,Spotfire.Dxp.Framework.DocumentModel.PropertyName,`0,Spotfire.Dxp.Framework.DocumentModel.InitializeStreamingQueryDelegate{`0,`1},Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,System.TimeSpan,Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="initialValue">The initial value.</param>
            <param name="initializeStreamingQueryDelegate">The create streamer delegate.</param>
            <param name="createStreamerDependencyDeclarer">The create streamer dependency declarer.</param>
            <param name="subscriptionGracePeriod">The subscription grace period.</param>
            <param name="valueManager">The value manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder{`0,`1},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2"/> class.
            </summary>
            <param name="other">The other <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2"/></param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.GetOrCreateSubscriptionManager">
            <summary>
            Gets the or create the subscription manager.
            </summary>
            <returns>The subscription manager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.CreateSubscriptionManager">
            <summary>
            Creates a subscription manager.
            </summary>
            <returns>The created subscription manager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.Subscribe">
            <summary>
            Subscribes to updates of the streaming property.
            </summary>
            <returns>A subscription handle which should be disposed when the subscription is no longer needed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StreamSubscriptionManagerHolder`2.OnAncestorDetachedOrInvalidated">
            <summary>
            This method is called when an ancestor is detached or invalidated.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadThreadTransactionInfo">
            <summary>
            The thread transaction info for a snapshot read.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadThreadTransactionInfo.snapshotDocumentViewManager">
            <summary>
            The snapshot document view manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadThreadTransactionInfo.#ctor(System.Int32,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,Spotfire.Dxp.Framework.Commands.SnapshotDocumentViewManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadThreadTransactionInfo" /> class.
            </summary>
            <param name="generation">The generation.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="snapshotDocumentViewManager">The snapshot document view manager.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotReadThreadTransactionInfo.SnapshotDocumentViewManager">
            <summary>
            Gets the snapshot document view manager.
            </summary>
            <value>
            The snapshot document view manager.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.TransactionExtensions">
            <summary>
            Extension methods for transactions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TransactionExtensions.ExecuteTransaction``1(Spotfire.Dxp.Framework.DocumentModel.ITransactions,System.Func{``0})">
            <summary>
            Executes a transaction and returns a value.
            </summary>
            <typeparam name="T">Return type.</typeparam>
            <param name="transactions">The transactions.</param>
            <param name="func">The function to execute.</param>
            <returns>The value returned by the supplied function.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValiditySpanRestoreTarget">
            <summary>
            A transient transaction validity span restore target for view properties.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Commands.IValiditySpanRestoreTarget" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValiditySpanRestoreTarget.target">
            <summary>
            The target propert.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValiditySpanRestoreTarget.documentViewKey">
            <summary>
            The document view key.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValiditySpanRestoreTarget.#ctor(Spotfire.Dxp.Framework.DocumentModel.IViewProperty,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValiditySpanRestoreTarget"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValiditySpanRestoreTarget.RestoreValiditySpan(Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.VisibilityAwareStreamingSubscriptionHandle">
            <summary>
            A subscription which reacts to changes in the visibility of the UI layer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.VisibilityAwareStreamingSubscriptionHandle.createSubscription">
            <summary>
            Function to setup new subscription.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.VisibilityAwareStreamingSubscriptionHandle.documentView">
            <summary>
            The document view this subscription belongs to.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.VisibilityAwareStreamingSubscriptionHandle.subscription">
            <summary>
            Current subscription. Will be null when unsubscribed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.VisibilityAwareStreamingSubscriptionHandle.#ctor(System.Func{Spotfire.Dxp.Framework.DocumentModel.StreamingSubscriptionHandle},Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.VisibilityAwareStreamingSubscriptionHandle"/> class.
            </summary>
            <param name="createSubscription">Function to setup subscription. May be called immediately.</param>
            <param name="documentView">The document view this subscription belongs to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.VisibilityAwareStreamingSubscriptionHandle.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.WorkerThreadDocumentViewUseHandle">
            <summary>
            A handle to the use of a document view as the current view. The previous value of the current document view
            is restored when this object is disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.WorkerThreadDocumentViewUseHandle.executionInfoToRestore">
            <summary>
            The execution information to restore.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.WorkerThreadDocumentViewUseHandle.#ctor(Spotfire.Dxp.Framework.Commands.DocumentViewExecutionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.WorkerThreadDocumentViewUseHandle"/> class.
            </summary>
            <param name="executionInfoToRestore">The execution information to restore.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.WorkerThreadDocumentViewUseHandle.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1">
            <summary>
            Represents a form of runtime properties which can be assigned values in a transaction on the live document.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.owner">
            <summary>
            The owner.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.initialValue">
            <summary>
            The initial value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.valueManager">
            <summary>
            The value manager
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#PropertyName">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#IAssignableRuntimeProperty#TransferStateToSnapshot(Spotfire.Dxp.Framework.DocumentModel.IAssignableRuntimeProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#Activate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ActivateForConfigureForRuntimeAttach">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidated(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidatedDuringConfigureForRuntimeAttach">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ReleaseValueManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1">
            <summary>
            A value manager for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1"/>
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.owner">
            <summary>
            The owner.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.propertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.runtimePropertyValue">
            <summary>
            The runtime property value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.NonSharedAssignableRuntimePropertyValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="owner">The owner.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1"/> class.
            </summary>
            <param name="other">The other.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.GetStreamingPropertyValue(`0)">
            <summary>
            Gets the streaming property value.
            </summary>
            <param name="initialValue">The initial value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.FireInvalidationTriggersForStreamingPropertyDuringTransientTransaction">
            <summary>
            Fires the invalidation triggers for streaming property during transient transaction.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.Value">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.RuntimePropertyValue">
            <summary>
            Gets or sets the value with validty span.
            </summary>
            <value>
            The value with validty span.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.GetOrCreateAssignableRuntimePropertyUserModificationManager">
            <summary>
            Gets the assignable runtime property user modification manager or creates one if it does not exist.
            </summary>
            <returns>The assignable runtime property user modification manager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.GetSnapshotValueManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.OnAncestorDetachedOrInvalidated">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1.CreateTransientTransactionOverride(Spotfire.Dxp.Framework.Commands.TransientTransactionContext,`0)">
            <summary>
            Creates the transient transaction override.
            </summary>
            <param name="transientTransactionContext">The transient transaction context.</param>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation">
            <summary>
            Represents the location of a document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.Unspecified">
            <summary>
            The document location is unspecified.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.entry">
            <summary>
            The library entry.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.id">
            <summary>
            The library entry identifier.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.originType">
            <summary>
            The location type of the data source or file.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.path">
            <summary>
            The path to the file.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.#ctor(Spotfire.Dxp.Internal.DocumentLocationType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation"/> class.
            </summary>
            <param name="originType">Type of the origin.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.#ctor(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation"/> class.
            </summary>
            <param name="entry">The library entry.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.DerivedDocumentTitle">
            <summary>Gets the derived document title.
            Derives a document title from the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.Path"/>
            given the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.OriginType"/>.
            For a <see cref="F:Spotfire.Dxp.Internal.DocumentLocationType.DxpFileFromDisk"/> the file name
            without extension is returned.
            For a <see cref="F:Spotfire.Dxp.Internal.DocumentLocationType.DxpFileFromLibrary"/> the last
            part of the path is returned.
            For a <see cref="F:Spotfire.Dxp.Internal.DocumentLocationType.OtherDxpFile"/> the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.Path"/> is 
            returned.
            For all others origin types an empty string is returned.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.Id">
            <summary>
            Gets the library identifier.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.LibraryEntry">
            <summary>
            Gets the library entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.OriginType">
            <summary>
            Gets the origin type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode">
            <content>
            Abstract base class for all Document Nodes.
            </content>
            <summary>Abstract base class for all Document Nodes.
            </summary>
            <remarks>
            Each class that inherits from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> must follow the design pattern for document nodes.
            This includes:
            <list type="bullet">
            <item>
            <description>The class must be marked with the <see cref="T:System.SerializableAttribute"/> attribute.</description>
            </item>
            <item>
            <description>If objects of the class are intended to be persisted when the TIBCO Spotfire document is saved, the class 
            must be marked with the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute"/> attribute.</description>
            </item>
            <item>
            <description>The class must not implement any of the <see cref="T:System.IDisposable"/> or 
            <see cref="T:System.Runtime.Serialization.IDeserializationCallback"/> interfaces.</description>
            </item>
            <item>
            <description>The class must not declare any <c>event</c>s.</description>
            </item>
            <item>
            <description>All fields declared in the class must be marked <c>readonly</c>.</description>
            </item>
            <item>
            <description>The type of each field declared in the class must be one of the following:
                <list type="bullet">
                    <item>
                    <description>A primitive type (string, bool, float, etc.).
                    </description>
                    </item>
                    <item>
                    <description>An immutable type.
                    </description>
                    </item>
                    <item>
                    <description>A type that derives from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.
                    </description>
                    </item>
                    <item>
                    <description>One of the Undoable building blocks of the document model (<see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/>, 
                    <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>, <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2"/>, etc.).
                    </description>
                    </item>
                    <item>
                    <description>An instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/> type.
                    </description>
                    </item>
                    <item>
                    <description>An instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeConstant`1"/> type.
                    </description>
                    </item>
                    </list>
            </description>
            </item>
            <item>
            <description>The class must declare a nested class called <c>PropertyNames</c> that derives from the 
            <c>PropertyNames</c> class declared by the inherited document node class. The <c>PropertyNames</c> class 
            declared in this class shall shadow the inherited <c>PropertyNames</c> class, which is accomplished using the 
            <c>new</c> keyword.</description>
            </item>
            <item>
            <description>The class must declare a protected (or private if this class is sealed) deserialization constructor 
            in which <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{``0}@)"/>
            or <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeReadOnlyProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,``0@)"/> are called to deserialize 
            persisted state and initialize the fields of this class.</description>
            </item>
            <item>
            <description>The class must override <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> in 
            which <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{``0})"/> or <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeReadOnlyProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,``0)"/> are called to serialize 
            the state held by the fields of this class.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.GetNullableProperty``1(Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{``0})">
            <summary>
            Gets the value of a nullable property, or null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The nullable value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{``0})">
            <summary>
            Serializes the override of an undoable styled property with value of type <typeparamref name="T" />, if there is one.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">The name of the property to serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SetNullableProperty``1(Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{``0},System.Nullable{``0})">
            <summary>
            Gets the value of a nullable property, or null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The nullable value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SetNullablePropertyValue``1(Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{``0},``0)">
            <summary>
            Sets the value of a styled property.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.GetNullablePropertyOverride``1(Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{``0})">
            <summary>
            Gets the override for a styled undoable property, or null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>
            The override undoable property instance, or a NullableUndoablePropertyNullValue, or null.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ResetNullableProperty``1(Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{``0})">
            <summary>
            Resets the override, if any, of a nullable property.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1">
            <summary>
            Command class for the assignment of the value of an UndoableProperty.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.propertyId">
            <summary>
            The id of the PropertyName instance.
            Used to lookup the PropertyName when this command is deserialized from undo/redo.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.target">
            <summary>
            The document node that shall own the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.undoableProperty">
            <summary>
            The undoable property to add, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,`0,Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1"/> class.
            This is the constructor for the Add case.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1"/> class.
            This is the constructor for the Remove case.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.DisplayName">
            <summary>
            Gets a name suitable for being displayed in an application's UI.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.Name">
            <summary>
            Gets a name of the command used by the API
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#Generation">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#Owner">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.Execute">
            <summary>
            Performs the command action.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.ForEachOwnedNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.GetChangedProperty">
            <summary>
            Shall return the property that is changed by this command or <c>null</c>.
            </summary>
            <returns>The changed property.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.Reexecute(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <summary>
            Reverts the effects of the Unexecute method.
            </summary>
            <param name="restoreContext">The restore context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.Unexecute(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <summary>
            Reverts the effects of the Execute method.
            </summary>
            <param name="restoreContext">The restore context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#GetCommandHistory">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.AddOverrideToTargetDuringUndoRedo(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <summary>
            Adds the override to target during undo redo.
            </summary>
            <param name="restoreContext">The restore context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.NullablePropertyOverrideCommand`1.RemoveOverrideFromTarget">
            <summary>
            Removes the override from target.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.PropertyNames">
            <summary>
            The property names for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>. Base class for PropertyNames classes in all 
            classes deriving from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.PropertyNames.#ctor">
            <summary>
            Throws an exception to prevent this class from being instantiated. Classes deriving from 
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.PropertyNames"/> shall only have static readonly members of type <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.PropertyNames.CreatePropertyName(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> class.
            NOTE: This method shall only be called to initialize static readonly members in classes
            that derive from the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.PropertyNames"/> class.
            </summary>
            <param name="name">The name of the underlying property that is represented by this class. 
            To guarantee that serialzation always works it is crucial that this name 
            is the same as the name of the underlying property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.PropertyNames.CreateStyledPropertyName``1(System.String,``0,System.Boolean,System.String)">
            <summary>
            Creates a propety name for a styled property.
            </summary>
            <typeparam name="T">The type of the property value</typeparam>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <param name="inherited">if set to <c>true</c> the property inherits its value.</param>
            <param name="unit">The unit, or null.</param>
            <returns>
            A property name.
            </returns>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.PropertyNames.IsAttached">
            <summary>
            The PropertyName of the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.IsAttached"/> property. 
            Using a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SubTreeTrigger"/> with this PropertyName, event handlers can be set up 
            that are called when new sub trees are attached to the document.
            Internal event handlers are called with the root of the attached sub tree and the IsAttached 
            PropertyName.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.documentNodeId">
            <summary>
            An id used for dealing with external references to document nodes from, for example, the clipboard.
            The id is preserved by undo and save. The id is not preserved by cloning.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DocumentNodeId">
            <summary>
            Get the id for this node. The id is unique for this node that is kept during serialization 
            for persistence, undo/redo and snapshot creation.
            That is, snapshots of this node have the same value as this node. If this node is detached from 
            the document and later attached again by undo, it will have the same id.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.New">
            <summary>
            Gets a value indicating whether this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> is new in the DocumentState sense.
            Such nodes will be serailized/persisted by the DocumentState mechanism in the web player.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ClearNewFlag">
            <summary>
            Clear (sets to false) the New flag used by the DocumentState mechanism.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeclareInternalEventHandlers(Spotfire.Dxp.Framework.DocumentModel.InternalEventManager)">
            <summary>Override this method to declare handlers of internal events.
            </summary>
            <param name="eventManager">The internal event manager</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.InternalDeclareInternalEventHandlers(Spotfire.Dxp.Framework.DocumentModel.InternalEventManager)">
            <summary>Override this method to declare handlers of internal events.
            This method is called from the DocumentNode.DeclareInternalEventHandlers method,
            and is a fix for bug #51661. It must be used when adding new InternalEventHandlers 
            to ApiExtendable classes or their base classes.
            </summary>
            <param name="eventManager">The event manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.IsDescendantOf(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>Determines whether this instance is a descendant of the specified node.
            Note: A node is not considered a descendant of itself.
            </summary>
            <param name="node">The potential ancestor node.</param>
            <returns>
            	<c>true</c> if this instance is a descendant of the
            specified node; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.InvalidateRuntimeNodes(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason)">
            <summary>
            Invalidate the runtime nodes that depends on the property <paramref name="propertyName" /> on this node.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="invalidationReason">The invalidation reason.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ValidateAttached">
            <summary>Validates that the node is attached.
            </summary>
            <exception cref="T:System.InvalidOperationException">if the node is not attached to a document.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.IsAttached">
            <summary>
            Gets a value indicating whether this node is attached.
            </summary>
            <value>
            	<c>true</c> if this node is attached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.IsSnapshot">
            <summary>
            Gets a value indicating whether this node is in a snapshot state.
            </summary>
            <value>
            	<c>true</c> if this node is in a snapshot state; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CanBeModified">
            <summary>
            Gets a value indicating whether this instance can be modified or not.
            </summary>
            <value>
            <c>true</c> if this instance can be modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CopySubtree``1(Spotfire.Dxp.Framework.Persistence.PersistenceManager)">
            <summary> Copies the sub tree spanned from this node, returning a 
            DocumentNodeCopy that can be instantiated multiple times. If there are outgoing references
            then they will be replaced by an id of the referred node. The id is only valid in a running
            instance of TIBCO Spotfire. This methid can thus support copy/paste to clipboard within a running instance
            but not between instances.
            </summary>
            <remarks>
            This method can be used on nodes that are not attached.
            <para>
            This method is protected to prevent arbitrary nodes to be copied 
            using the public API of DocumentNode. Each node that wants to 
            support copying shall implement a public Copy() method that just 
            invokes the CopySubtree() method and returns the result.
            </para>
            </remarks>
            <exception cref="T:System.Runtime.Serialization.SerializationException">if the sub 
            tree spanned from this node is not closed with respect to non-owning
            document node references. That is, if one of the nodes in the sub tree 
            has an UndoableCrossReferenceProperty or UndoableReferencedCollection 
            that refer to document nodes that are not part of the sub tree.</exception>
            <param name="persistenceManager">The PersistenceManager that shall perform
            the serialization-base copying of the sub tree.</param>
            <returns>A copy of the sub tree spanned from this node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CopySubtree``1">
            <summary> Copies the sub tree spanned from this node, returning a 
            DocumentNodeCopy that can be instantiated multiple times. The sub 
            tree spanned from this node must be closed with respect to non-owning
            document node references.
            </summary>
            <returns>A copy of the sub tree spanned from this node.</returns>
            <remarks>
            This method can only be used on nodes that are attached.
            <para>
            This method is protected to prevent arbitrary nodes to be copied 
            using the public API of DocumentNode. Each node that wants to 
            support copying shall implement a public Copy() method that just 
            invokes the CopySubtree() method and returns the result.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">if this node cannot get the 
            <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceManager"/> service, which is typically the
            case if this node is not attached.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">if the sub 
            tree spanned from this node is not closed with respect to non-owning
            document node references. That is, if one of the nodes in the sub tree 
            has an UndoableCrossReferenceProperty or UndoableReferencedCollection 
            that refer to document nodes that are not part of the sub tree.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DuplicateSubtree``1">
            <summary>Returns a copy of the sub tree spanned from this node that 
            has the same outwards non-owning references. The returned copy will 
            be in state New and is intended to be attached to the document 
            immediately.</summary>
            <remarks>If any operations are performed on the document between the 
            construction of the duplicate and its attachement to the document, 
            an inconsistent document may result.
            </remarks>
            <spotfireinternal/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DuplicateSubtree``1(Spotfire.Dxp.Framework.DocumentModel.CloneTransformations)">
            <summary>
            Duplicates the sub tree spanned from this node. The returned copy is modified according 
            to the specified clone transformations.
            </summary>
            <param name="transformations">The transformations.</param>
            <returns>A cloned and transformed copy of the sub tree spanned from this node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DuplicateSubtreeKeepDocumentNodeIDs``1">
            <summary>
            Duplicates the sub tree spanned by this, while keeping the document node ids.
            </summary>
            <typeparam name="T">The type of the returned document node</typeparam>
            <returns>A copy of the document node tree in state new.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ImmediateDispose">
            <summary>
            Disposes the tree spanned from this node immediately, without 
            generating any Commands.
            Can be called even if the owner is set. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.AddTransactionCompletingCallback(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>Adds a transaction completing callback.
            The callback will be called at the end of the transaction, and
            can then do some more work, which will be included in the transaction.
            </summary>
            <param name="executor">The executor callback.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.EnsureInvariantHolds(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Ensures that the invariant associated with the specified property name holds
            by executing the executor previously registered with a call to AddInvariantKeeper
            on the InternalEventHandler in the DeclareInternalEventHandlers override.
            </summary>
            <seealso cref="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.AddInvariantKeeper(Spotfire.Dxp.Framework.DocumentModel.Executor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.Trigger[])"/>
            <param name="propertyName"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Transaction(System.String,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            This method starts a transaction on the document model by executing
            <paramref name="executor"/>. If there is already
            an ongoing transaction then the transaction is included in the current
            transaction.
            
            All commands that are executed as a result of the operations 
            performed by <paramref name="executor"/> will be recorded in
            the transaction so that the transaction can be unexecuted if the user
            requests an undo.
            </summary>
            <param name="displayName">A name of the transaction to be displayed to the user.</param>
            <param name="executor">The delegate to execute.</param>
            <remarks>This code should not be called, use 
            Transactions.ExecuteTransaction instead.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.BeginTransaction">
            <summary>
            Begins a transaction, returning a transaction handle that must be disposed in order to commit the transaction.
            </summary>
            <returns>A transaction handle that must be disposed in order to commit the transaction.</returns>
            <seealso cref="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.ExecuteTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.InternalTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Starts an internal transaction on the document model by 
            executing the specified <paramref name="executor"/> delegate. 
            </summary>
            
            <param name="executor">The delegate to execute.</param>
            
            <remarks>
            If there is already an ongoing transaction, internal or normal, then the transaction 
            is included in the current transaction.
            <para>
            As with normal transactions, all commands that are 
            executed as a result of the operations 
            performed by <paramref name="executor"/> will be recorded in
            the transaction so that the transaction can be unexecuted if the user
            requests an undo.
            </para> 
            <para>
            All internal events raised by operations
            performed by the <paramref name="executor"/> are enqueued until the 
            outermost internal transation
            completes. Duplicate internal events are removed
            while the <paramref name="executor"/> is running. Thus if a property <c>X</c>
            is changed several times during the internal transaction, only one internal
            event will be raise to listeners on changes of <c>X</c>.
            </para>
            <para>
            Internal transactions are intended to be used when implementing methods that perform 
            large, composite operations on a sub tree in the document that need to appear atomic 
            from the point of view of internal event handlers. All scenarios where it is motivated 
            to use an internal transaction involve internal event handlers that trigger on changes 
            in a sub tree and then access properties in the changed subtree under the assumption 
            that some invariant is upheld. In such cases, wrapping the changes made by the operation 
            in an internal transaction is essential since it guarantees that any internal event handlers 
            are called first after all changes have been made and the invariant holds. 
            </para>
            <para>
            For example, consider a custom node, <c>MyCustomNode</c>, that contains two undoable cross reference 
            properties to data columns, <c>ColumnReference1</c> and <c>ColumnReference2</c>, with the invariant 
            that they either both refer to data columns or both are null. Suppose that there is an internal event 
            handler that triggers when either <c>ColumnReference1</c> or <c>ColumnReference2</c> is changed. If a
            method on <c>MyCustomNode</c> changes the references without using an internal transaction, the event 
            handler will be invoked immediately when the first reference is changed. In this case, the event handler 
            can access <c>ColumnReference1</c> and <c>ColumnReference2</c> while <c>MyCustomNode</c> is in a transient
            inconsistent state where the invariant is not upheld.
            </para>
            <para>
            <b>CAVEAT:</b> In an operation that uses an internal transaction, do not change properties outside of the 
            sub tree that defines the operations! Doing so might place the document in a transient inconsistent 
            state and cause a crash if the document is accessed within the internal transaction.
            </para>
            <para>
            TIBCO Spotfire uses internal event handlers to keep different parts of the document in synch. For instance, 
            the filters in a filtering scheme are synchronized with the columns in the data tables by internal event 
            handlers. Thus if an internal transaction is wrapped around code that first removes some data columns and 
            then inspects the filters, the filters will be read in an inconsistent state.
            </para>
            </remarks>
            
            <seealso cref="T:Spotfire.Dxp.Application.Extension.CustomNode"/>
            <seealso cref="T:Spotfire.Dxp.Data.DataTable"/>
            <seealso cref="T:Spotfire.Dxp.Data.DataColumn"/>
            <seealso cref="T:Spotfire.Dxp.Application.Filters.FilteringScheme"/>
            
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.InternalTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor,System.Boolean)">
            <summary>
            Execute an internal transaction.
            </summary>
            <param name="executor">The executor.</param>
            <param name="rollbackNestedInternalTransactionAtException">if set to <c>true</c> then the transaction will be rollbacked if an exception is thrown. Otherwise, the transaction will only rollback if it is the top level transaction.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.BeginInternalTransaction">
            <summary>
            Begins an internal transaction, returning a transaction handle that must 
            be disposed in order to commit the transaction.
            </summary>
            <returns>A transaction handle that must be disposed in order to commit the transaction.</returns>
            
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.TransactionHandle"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.BeginStickyTransaction(System.Guid)">
            <summary>
            Begins a sticky transaction, returning a transaction handle that must 
            be disposed in order to commit the transaction.
            </summary>
            <param name="guid">The id which identifies the transactions which should stick together</param>
            <returns>A transaction handle that must be disposed in order to commit the transaction.</returns>
            
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.TransactionHandle"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ExecuteReadTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Invokes executor in a read transaction. 
            </summary>
            <remarks>
            Exposed for performance reasons so that a sequence of N reads 
            do not have to initialze the transaction thread context N times.
            </remarks>
            <param name="executor"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.InvisibleTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
             <summary>
             This method starts an invisible transaction on the document model by executing
             <paramref name="executor"/>. 
             If there is already an ongoing transaction then the transaction is included in the current
             transaction.
             
             All commands that are executed as a result of the operations 
             performed by <paramref name="executor"/> will be recorded in
             the transaction so that the transaction can be unexecuted if the user
             requests an undo.
            
             The transaction is invisible in the sense 
             that the user will not see the transaction as an entry on the undo stack. 
             If the user makes an undo then the transaction will be silently unexecuted
             together with the enclosing visible transaction.
             </summary>
             <param name="executor">The delegate to execute.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.StickyTransaction(System.Guid,Spotfire.Dxp.Framework.DocumentModel.Executor)">
             <summary>
             This method starts a sticky transaction on the document model by executing
             <paramref name="executor"/>. 
             If there is already an ongoing transaction then the transaction is included in the current
             transaction.
             
             All commands that are executed as a result of the operations 
             performed by <paramref name="executor"/> will be recorded in
             the transaction so that the transaction can be unexecuted if the user
             requests an undo.
            
             Sticky transactions should be used to impement undo of for example sliders. When you move 
             a slider such as the range slider in the filter panel it makes a modification of the document
             and this modification should immediately be reflected in the user interface. However there
             should only be one entry on the undo stack so that the entire drag of the slider can be undone
             by pressing undo once.
             
             To implement this behaviour the slider should generate a GUID and use it as a parameter to
             one sticky transactions for each modification
             
             The transactions are sticky in the sense that consecutive sticky transactions with the same GUID
             will yield a common entry on the undo stack.
             
             A sequence of sticky transactions is similiar to an aggregated transaction in 
             the sense that both will yield only one entry on the undo stack. 
             However it is more robust to use sticky transactions if it is difficult to decide when
             an aggregated transaction should be committed.
             For if a slider loses its mouse up event any other transaction will be allowed and will create
             an independent entry which will break up the sequence of sticky transactions.
             </summary>
             <param name="guid">The id which identifies the transactions which should stick together.</param>
             <param name="executor">The delegate to execute.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#ITransactions#BeginAggregatedTransaction">
            <summary>
            Implements <see cref="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.BeginAggregatedTransaction"/>.
            </summary>
            <returns>The aggregated transaction handle.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.BeginAggregatedTransaction(System.String)">
             <summary>
             Begins an aggregated transaction.
            
             Aggregated transactions provides the functionality to aggregate transactions which needs
             to be separate transactions while first executed but which should be unexecuted
             as one transaction at undo and redo.
             
             It also provides rollback of the transaction. This can be used to implement cancel
             on modal dialogs.
             </summary>
             <param name="displayName">A name of the transaction to be displayed to the user.</param>
             <returns>An aggregated transaction handle.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.BeginTransientTransaction">
            <summary>
            Begins a transient transaction.
            
            No external events are raised during the transient transaction and when it ends
            all modifications made to the document are rolled back.
            </summary>
            <returns>A transient transaction handle.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ValidateExternalEventSubscriber(System.Delegate)">
            <summary>
            Validates that subscribers to external event does not belong 
            to the same document model as the publisher of the event.
            </summary>
            <remarks>
            If subscribers from the same document model, that is, objects that 
            have the same command history, subscribe to external events,
            the undo mechanism will break.
            <para>
            The external events are triggered on execute, undo and redo of operations.
            During undo and redo it is not allowed to record new undoable commands,
            thus the external events must not be used by objects taking part of the
            same unod history. They must record all actions taken on the internal execute 
            event as an undoable command that will be replayed on undo and redo.
            </para>
            </remarks>
            <example>
            <para>
            This example shows the how to implement an event that validates that the 
            subscribers are valid subscriber for an external event. 
            <code lang="C#">
            private event EventHandler&lt;MyEventArgs&gt; myExternalEvent;
            /// &lt;summary&gt;
            /// Rased ...
            /// &lt;/summary&gt;
            public event EventHandler&lt;MyEventArgs&gt; MyExternalEvent
            {
                add
                {
                    ValidateExternaEventSubscriber(value);
                    myExternalEvent += value;
                }
                remove
                {
                    myExternalEvent -= value;
                }
            }
            </code>
             </para>
            </example>
            <param name="subscriber">The event subscriber.</param>
            <seealso cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ValidateInternalEventSubscriber(System.Delegate)"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ValidateInternalEventSubscriber(System.Delegate)">
            <summary>
            Validates that a subscriber to an event intended for usage inside the 
            document model.
            </summary>
            <remarks>
            Subscribers from the same document model, that is, objects that 
            have the same command history, must be serializable to enable
            serialization of the document node exposing the event. Subscribers to 
            internal events must also be document nodes that has the same
            command history as the event publisher.
            <para>
            Internal events are raised only on execution of the operation that the event
            is a notification for. During undo and redo the subscriber of internal events
            should undo and redo the operation that was performed when the event
            was raised.
            </para>
            <para>
            The InternalEventHandler{TArgs} class should be used
            to implement internal events.
            </para>
            </remarks>
            <param name="subscriber">The subscriber.</param>
            <exception cref="T:System.ArgumentException">
            is thrown if the supplied event handler is not serializable or does not belong to the
            same command history or does not inherit from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.
            </exception>
            <seealso cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ValidateExternalEventSubscriber(System.Delegate)"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.EnqueuedToBeAttachedFromUndo">
            <summary>
            Marks all nodes inte the tree spanned from this node with state EnqueuedToBeAttached or EnqueuedToBeFrozen.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#IDocumentNode#EnqueuedToBeAttachedFromUndo">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.AttachFromReconfigured">
            <summary>
            Attaches the subtree rooted at this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ReconfigureAndAttachFromDetached">
            <summary>
            Attaches the subtree rooted at this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.InternalSetupInternalEventHandlers(System.Boolean)">
            <summary>
            Only called by the CommandHistory.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.WPS_SetupExternalEventHandlers">
            <summary>Override this method to declare handling of external events. This method is provided to
            perform a workaround. Use this method only if you are certain that it is really required.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.WPS_TearDownExternalEventHandlers">
            <summary>Override this method to declare handling of external events. This method is provided to
            perform a workaround. Use this method only if you are certain that it is really required.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ValidatePropertyDuplicates">
            <summary>
            Validates that there are no duplicate properties definied on nodes in 
            the subtree spanned from this node.
            This will catch common errors resulting from copy-paste programming.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#IDocumentNode#PropagateResolveCompatibility(Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection,System.IServiceProvider)">
            <summary>
            Propagates the ResolveCompatibility call through the tree.
            This call is initiated by the <seealso cref="T:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader"/>.
            </summary>
            <param name="compatibilityItems">The compatibility item collection.</param>
            <param name="serviceProvider">The object that can provide services to nodes in the document. This 
            service provider must be able to provide all services in the AnalysisApplication and upwards 
            when compatibility for the Document is resolved.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ResolveCompatibility(Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection,Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection)">
            <summary>
            Override to resolve deserialization compatibility issues.
            This callback is invoked depth-first in the document after all nodes have been deserialized.
            </summary>
            <param name="compatibilityItems">The compatibility item collection. 
            Can be used to lookup items added by the deserialization constructor.</param>
            <param name="compatibilityCallbacks">The compatibility callback collection.
            Can be used to add callbacks that will </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.OnConfigure">
            <summary>
            Allows a node to configure itself to the surrounding document.
            </summary>
            
            <remarks>
            This method is called when this node is attached (added to) to the document for the first time.
            This method is not called at undo or redo.
            <para>
            The purpose of the method is to allow a node to configure itself depending on the
            surrounding document. It may especially configure itself with respect to the 
            <see cref="T:Spotfire.Dxp.Data.DataManager"/>.
            The node may modify its undoable state. These modifications will not be recorded on the undo
            stack.
            The node has an owner and can lookup ancestors and services. 
            </para>
            <para>
            This method is called pre-order in a depth-first traversal of the sub tree that is being attached.
            The owner of the node has been configured when this method is called but the children of the node 
            have not been configured yet.
            </para>
            <para>
            Make sure to call <c>base.OnConfigure()</c> at the start of the overriding method.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.OnConfigured">
            <summary>
            Allows a node to configure itself to the surrounding document.
            </summary>
            
            <remarks>
            This method is called when this node is attached (added to) to the document for the first time.
            This method is not called at undo or redo.
            <para>
            The purpose of the method is to allow a node to configure itself depending on the
            surrounding document. It may especially configure itself with respect to the 
            <see cref="T:Spotfire.Dxp.Data.DataManager"/>.
            The node may modify its undoable state. These modifications will not be recorded on the undo
            stack.
            The node has an owner and can lookup ancestors and services. 
            </para>
            <para>
            This method is called post-order in a depth-first traversal of the sub tree that is being attached.
            The children of the node have already been configured when this method is called but this method has not been
            called on the owner of the node.
            </para>
            <para>
            Make sure to call <c>base.OnConfigured()</c> at the start of the overriding method.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.OnReconfigure">
            <summary>
            Allows a node to reconfigure itself to a new part of the surrounding document.
            </summary>
            
            <remarks>
            This method is called when this node is attached (added to) to the document when it has been moved.
            This method is not called at undo or redo.
            <para>
            The purpose of the method is to allow a node to reconfigure itself depending on the
            surrounding document.
            The node may modify its undoable state. 
            These modifications will (in constrast to <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.OnConfigure"/>) be recorded on the undo
            stack.
            The node has an owner and can lookup ancestors and services. 
            </para>
            <para>
            This method is called pre-order in a depth-first traversal of the sub tree that is being re-attached.
            The owner of the node has been reconfigured when this method is called but the children of the node 
            has not been reconfigured yet.
            </para>
            <para>
            Make sure to call <c>base.OnReconfigure()</c> at the start of the overriding method.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.OnReconfigured">
            <summary>
            Allows a node to reconfigure itself to a new part of the surrounding document.
            </summary>
            
            <remarks>
            This method is called when this node is attached (added to) to the document when it has been moved.
            This method is not called at undo or redo.
            <para>
            The purpose of the method is to allow a node to reconfigure itself depending on the
            surrounding document.
            The node may modify its undoable state. 
            These modifications will (in constrast to <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.OnConfigured"/>) be recorded on the undo
            stack.
            The node has an owner and can lookup ancestors and services. 
            </para>
            <para>
            This method is called post-order in a depth-first traversal of the sub tree that is being re-attached.
            The children of the node have already been reconfigured when this method is called but this method has not 
            yet been called on the owner of the node.
            </para>
            <para>
            Make sure to call <c>base.OnReconfigured()</c> at the start of the overriding method.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#IDocumentNode#ConfigureAndAttachFromNew">
            <summary>
            Configures and attaches the subtree rooted at this node. Called on a new document 
            from the DocumentManager and when new nodes are added to the existing document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#IDocumentNode#AttachDocumentFromNew">
            <summary>
            Attaches an entire document that has been deserialised.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SetOwnerCommand.subTree">
            <summary>The root node of the sub tree that is detached by this command.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SetOwnerCommand.owner">
            <summary>The old owner of the sub tree.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.IsAttachedCommand">
            <summary>
            The purpose of this command is to generate an event for the IsAtttached property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.AttachSubTreeWhileExecuting(Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase)">
            <summary>
            This method attaches a subtree and generates commands so that the attach can be restored
            at undo.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateZombieReferencesToNodesInSubTree(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Called from state transitions that detaches this node.
            If this node is an element in a zombie collection the zombie collection should be notified
            and a zombie should be created moreover zombie must be created for all nodes subtree
            that is detaching.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateZombieReferencesToNodesInZombieCollection(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCollection)">
            <summary>
            Handles recursion from a node directly under the owning zombie collection (node is an AvlNode)
            until it reaches an element in the collection (node is a DocumentNode).
            </summary>        
            <returns><c>True</c> if the owning zombie collection contains any zombies; <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateZombieReferencesToNodesInSubTree(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Handles recursion from an element in a zombie collection (node is a DocumentNode)
            until a nested zombie collection is reached. The nested zombie collection is later returned.
            </summary>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.RestoreMatchingZombieReferencesToNodesInSubTree(Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase)">
            <summary>
            Called from state transitions that attaches this node and when the key of an item in a collection is changed.
            If this node is an element in a zombie collection the zombie collection should be notified.
            If the zombie collection holds nested zombie holders they should be propagated to
            attached sub-tree.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.RestoreMatchingZombieReferencesToNodesInSubTree(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.IZombieHolder)">
            <summary>
            Handles recursion from an element in a zombie collection (node is a DocumentNode)
            until a nested zombie collection is reached.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.RestoreMatchingZombieReferencesToNodesInZombieCollection(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCollection)">
            <summary>
            Handles recursion from a node directly under the owning zombie collection (node is an AvlNode)
            until it reaches an element in the collection (node is a DocumentNode).
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.AttachSubTreeWhileReconfiguring(Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase)">
            <summary>
            This method attaches a subtree and generates commands so that the attach can be restored
            at undo.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DetachSubTreeWhileExecuting(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            This method detaches a subtree and generates commands so that the detach can be restored
            at undo.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DetachSubtreeDuringUndoRedo(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <summary>
            This method detaches a subtree whule undoing or redoing. This method does not generate any commands.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DetachSubTreeWhileClosing">
            <summary>
            This method detaches a subtree and generates commands so that the detach can be restored
            at undo.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node},System.Boolean)">
            <summary>
            Override this method and apply <paramref name="action"/>
            to all children not managed by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>
            class.
            </summary>
            <param name="action">The action.</param>
            <param name="includeFrozen">if set to <c>true</c> [include frozen].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#IDocumentNode#GetUndoableProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Returns the undoable property owned by this node that has the
            specified propertyName, or <c>null</c> if no such property is found.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#IDocumentNode#GetMutableProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Returns the IMutableProperty (an UndoableProperty or an UndoableCrossReferenceProperty) 
            owned by this node that has the specified propertyName, or <c>null</c> if no such property is found.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{``0}@,``0)">
            <summary>
            Creates an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/> and assigns it to the specified <paramref name="field"/>.
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/> will have the specified <paramref name="propertyName"/> and <paramref name="initialValue"/>.
            </summary>
            <typeparam name="T">The type of the value held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/>.</typeparam>
            <param name="propertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/>.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
            <param name="initialValue">The initial value held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty{``0}@,``0)">
            <summary>
            Creates an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/> and assigns it to the specified <paramref name="field"/>.
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/> will have the specified <paramref name="propertyName"/> and <paramref name="initialValue"/>.
            </summary>
            <typeparam name="TNode">The type of the value held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/>.
            This type must derive from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.</typeparam>
            <param name="propertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/>.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
            <param name="initialValue">The initial value held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{``0}@,``0)">
            <summary>
            Creates an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1"/> and assigns it to the specified <paramref name="field"/>.
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1"/> will have the specified <paramref name="propertyName"/> and <paramref name="initialValue"/>.
            </summary>
            <typeparam name="TNode">The type of the value held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1"/>.
            This type must derive from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.</typeparam>
            <param name="propertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1"/>.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
            <param name="initialValue">The initial value held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableList{``0}@)">
            <summary>
            Creates an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> and assigns it to the specified <paramref name="field"/>.
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> will have the specified <paramref name="propertyName"/>.
            </summary>
            <typeparam name="T">The type of the values held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>.</typeparam>
            <param name="propertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableSet{``0}@)">
            <summary>
            Creates an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1"/> and assigns it to the specified <paramref name="field"/>.
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1"/> will have the specified <paramref name="propertyName"/>.
            </summary>
            <typeparam name="T">The type of the values held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1"/>.</typeparam>
            <param name="propertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1"/>.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList{``0}@)">
            <summary>
            Creates an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/> and assigns it to the specified <paramref name="field"/>.
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/> will have the specified <paramref name="propertyName"/>.
            </summary>
            <typeparam name="T">The type of the values held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>.
            This type must derive from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.</typeparam>
            <param name="propertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateProperty``2(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary{``0,``1}@)">
            <summary>
            Creates an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2"/> and assigns it to the specified <paramref name="field"/>.
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2"/> will have the specified <paramref name="propertyName"/>.
            </summary>
            <typeparam name="TKey">The type of the keyes used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2"/>.
            This type must implement <see cref="T:System.IComparable`1"/> and may not derive from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.
            </typeparam>
            <typeparam name="TValue">The type of the values held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2"/>.
            </typeparam>
            <param name="propertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2"/>.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateProperty``2(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection{``0,``1}@)">
            <summary>
            Creates an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/> and assigns it to the specified <paramref name="field"/>.
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/> will have the specified <paramref name="propertyName"/>.
            </summary>
            <typeparam name="TKey">The type of the keyes used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/>.
            This type must implement <see cref="T:System.IComparable`1"/> and may not derive from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.
            </typeparam>
            <typeparam name="TNode">The type of the values held by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/>.
            This type must derive from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.
            </typeparam>
            <param name="propertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> used by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/>.</param>
            <param name="keyPropertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> of the property on the values in the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/> 
            that is used to get the key for each value. This property must be implemented with an UndoableProperty.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateReadOnlyProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName,``0,``0@)">
            <summary>
            Creates a read-only property of type <typeparamref name="T"/> and assigns it to the specified <paramref name="field"/>.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/>.</param>
            <param name="value">The value assigned to the property.</param>
            <param name="field">The field that the property value will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.AddDocumentNodeAsOwnerToNode``1(``0)">
            <summary>
            Adds the specified childNode as a child owned by this node. Sets the owner references of the child node to this node.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="childNode">The child node to add.</param>
            <returns>The child node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.AreDocumentNodeIDsDeserialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns <c>true</c> if the document node ids of this document were created through persisted deserialization, <c>false</c> otherwise.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{``0}@)">
            <summary>
            Deserializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/> with value of type <typeparamref name="T"/>
            stored in <paramref name="info"/> with key <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{``0})">
            <summary>
            Deserializes a styled undoable property with value of type <typeparamref name="T"/>
            stored in <paramref name="info"/> with key <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy{``0}@)">
            <summary>
            Deserializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1"/> with value of type <typeparamref name="T"/>
            stored in <paramref name="info"/> with key <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
            <remarks>
            This method will perform the deserialization differently depending on the <paramref name="context"/>.
            Property objects must be serialized in undo operations but are not be serialized
            when the document is saved.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.HighlightProperty{``0}@)">
            <summary>
            Deserializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1"/> with value of type <typeparamref name="T"/>
            stored in <paramref name="info"/> with key <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
            <remarks>
            This method will perform the deserialization differently depending on the <paramref name="context"/>.
            Property objects must be serialized in undo operations but are not be serialized
            when the document is saved.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty{``0}@)">
            <summary>
            Deserializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/> with value of type <typeparamref name="T"/>
            stored in <paramref name="info"/> with key <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializePropertyFromValue``2(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableZombieCrossReferenceProperty{``0,``1}@)">
            <summary>
            Used for backwards compability when deserializing saved normal cross references to zombie cross references.
            </summary>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializePropertyFromValue``2(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableZombieCrossReferenceProperty{``0,``1}@)">
            <summary>
            Used for backwards compability when deserializing saved normal cross references to zombie cross references.
            </summary>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.HasSerializedProperty(System.Runtime.Serialization.SerializationInfo,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Checks if a property is serialized.
            </summary>
            <param name="info"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeReadOnlyProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,``0@)">
            <summary>
            Deserializes a read-only property of type <typeparamref name="T"/>
            stored in <paramref name="info"/> with key <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">The field that the deserialized property value will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeReadOnlyProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,``0)">
            <summary>
            Serializes a read-only property of type <typeparamref name="T"/>
            stored in <paramref name="info"/> with key <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableList{``0}@)">
            <summary>
            Deserializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> with value of type <typeparamref name="T"/>
            stored in <paramref name="info"/> with key given by <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList{``0}@)">
            <summary>
            Deserializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/> with value of type <typeparamref name="T"/>
            stored in <paramref name="info"/> with key given by <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableSet{``0})">
            <summary>Serializes an UndoableSet storing it in <paramref name="info"/> 
            with key given by the property name of the <paramref name="set"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="set">The set to Serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableSet{``0}@)">
            <summary>Deserializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1"/> with value of type <typeparamref name="T"/> 
            stored in <paramref name="info"/> with key <paramref name="propertyName"/>. 
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``2(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary{``0,``1})">
            <summary>Serializes an UndoableDictionary storing it in <paramref name="info"/> 
            with key given by the property name of the <paramref name="dictionary"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="dictionary">The dictionary to Serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``2(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary{``0,``1}@)">
            <summary>Deserializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2"/> 
            stored in <paramref name="info"/> with key given by <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">The name of the dictionary.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``2(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection{``0,``1})">
            <summary>
            Serializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/> storing it in <paramref name="info"/>
            with key given by the property name of the <paramref name="keyedCollection"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the keyedCollection.</param>
            <param name="context">The context.</param>
            <param name="keyedCollection">The keyed collection that shall be serialized.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializeProperty``2(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection{``0,``1}@)">
            <summary>
            Deserializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/>
            stored in <paramref name="info"/> with key given by <paramref name="propertyName"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="keyPropertyName">Name of the key property of the nodes in keyed collection.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``3(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection{``0,``1,``2})">
            <summary>
            Serializes an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/> storing it in <paramref name="info"/>
            with key given by the property name of the <paramref name="keyedZombieCollection"/>.
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the keyedCollection.</param>
            <param name="context">The context.</param>
            <param name="keyedZombieCollection">The keyed zombie collection that shall be serialized.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeserializePropertyFromArray``3(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection{``0,``1,``2}.ZombieComputer,Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection{``0,``1,``2}@)">
            <summary>
            Deserializes an UndoableKeyedZombieCollection from the data serialized by an UndoableKeyedCollection, 
            UndoableList or UndoableSet. This method is intended to be used for backward compatibility when an undoable
            structure has been replaced with an UndoableKeyedZombieCollection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.AddCompatibilityItem(System.Runtime.Serialization.StreamingContext,System.String,System.Object)">
            <summary>
            Adds a compatibility item for this node. This item is accessible later in the
            <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ResolveCompatibility(Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection,Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection)"/> phase.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The name (typically the property name).</param>
            <param name="value">The value (typically the property value).</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.GetPersistedVersion(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Type)">
            <summary>Can be used in the deserialization constructor to get the persistence version that this class 
            was marked with when it was originally serialized. Will return null 
            if the specified caller type has no correspondence in the serialized information
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
            <param name="type">The caller type. IMPORTANT: Do not use <c>this.GetType()</c>, use <c>typeof(MyClass)</c> 
            instead if called in MyClass.</param>
            <returns>PersistenceVersionAttribute, or null if the specified caller type has no correspondence in the 
            serialized information.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.GetPersistedTypeName(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Type)">
            <summary>Can be used in the deserialization constructor to get the type name that the class 
            corresponding to this class had when it was originally serialized. Will return null 
            if the specified caller type has no correspondence in the serialized information
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
            <param name="type">The caller type. IMPORTANT: Do not use <c>this.GetType()</c>, use <c>typeof(MyClass)</c> 
            instead if called in MyClass.</param>
            <returns>The persisted type name, or an empty string if the specified caller type has no correspondence in the 
            serialized information.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{``0})">
            <summary>Serializes an UndoableProperty with value of type <typeparamref name="T"/> 
            storing it in <paramref name="info"/> with key <paramref name="property"/>.Name. 
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="property">The property to Serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy{``0})">
            <summary>Serializes an UndoableProperty with value of type <typeparamref name="T"/> 
            storing it in <paramref name="info"/> with key <paramref name="property"/>.Name. 
            </summary>
            <remarks>
            This method will perform the serialization differently depending on the <paramref name="context"/>. 
            Property objects must be serialized in undo operations but should not be serialized
            when the document is saved.
            </remarks>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="property">The property to Serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.HighlightProperty{``0})">
            <summary>Serializes an HighlightProperty with value of type <typeparamref name="T"/> 
            storing it in <paramref name="info"/> with key <paramref name="property"/>.Name. 
            </summary>
            <remarks>
            This method will perform the serialization differently depending on the <paramref name="context"/>. 
            Property objects must be serialized in undo operations but should not be serialized
            when the document is saved.
            </remarks>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="property">The property to Serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty{``0})">
            <summary>Serializes an Undoable*Property with value of type <typeparamref name="T"/> 
            storing it in <paramref name="info"/> with key <paramref name="property"/>.Name. 
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="property">The property to Serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{``0})">
            <summary>Serializes an Undoable*Property with value of type <typeparamref name="T"/> 
            storing it in <paramref name="info"/> with key <paramref name="property"/>.Name. 
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="property">The property to Serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{``0})">
            <summary>Serializes an Undoable*Property with value of type <typeparamref name="T"/> 
            storing it in <paramref name="info"/> with key <paramref name="property"/>.Name. 
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="property">The property to Serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableList{``0})">
            <summary>Serializes an UndoableList with values of type <typeparamref name="T"/> 
            storing it in <paramref name="info"/> with key <paramref name="list"/>.Name. 
            </summary>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="list">The list to Serialize.</param>
            <remarks>
            This method will perform the serialization differently depending on the <paramref name="context"/>. 
            List objects must be serialized in undo operations but should not be serialized
            when the document is saved.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.SerializeProperty``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList{``0})">
            <summary>Serializes an UndoableList with values of type <typeparamref name="T"/> 
            storing it in <paramref name="info"/> with key <paramref name="list"/>.Name. 
            </summary>
            <remarks>
            This method will perform the serialization differently depending on the <paramref name="context"/>. 
            List objects must be serialized in undo operations but should not be serialized
            when the document is saved.
            </remarks>
            <param name="info">The SerializationInfo for the document node that owns the property.</param>
            <param name="context">The context.</param>
            <param name="list">The list to Serialize.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#ITransactions#ExecuteTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Implements <see cref="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.ExecuteTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#ITransactions#ExecuteInvisibleTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Implements <see cref="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.ExecuteInvisibleTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#ITransactions#ExecuteStickyTransaction(System.Guid,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Implements <see cref="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.ExecuteStickyTransaction(System.Guid,Spotfire.Dxp.Framework.DocumentModel.Executor)"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Context">
            <summary>
            Gets the context of this node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Transactions">
            <summary>
            Gets a collection of methods for executing transactions on the document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#INodeContext#IsDescendantOf(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Implements <see cref="M:Spotfire.Dxp.Framework.DocumentModel.INodeContext.IsDescendantOf(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#INodeContext#GetService``1">
            <summary>
            Implements <see cref="M:Spotfire.Dxp.Framework.DocumentModel.INodeContext.GetService``1"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.Spotfire#Dxp#Framework#DocumentModel#INodeContext#GetAncestor``1">
            <summary>
            Implements <see cref="M:Spotfire.Dxp.Framework.DocumentModel.INodeContext.GetAncestor``1"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.EnqueueEventForNotPersistedProperty(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.StreamingTriggerTrace)">
            <summary>
            This method is called when a runtime
            property has been invalidated or when a facade property has triggered.
            It enqueues an event in the transaction manager if the node is in a state where events
            should be raised.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="streamingTriggerTrace">The streaming trigger trace.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CollectInternalEventHandlers(Spotfire.Dxp.Framework.DocumentModel.PropertyName,System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection}})">
            <summary>
            This method is called in the internal event raising phase if an undoable property of this document
            node has changed or if a runtime property has been invalidated.
            The method traverses upwards in the document tree and fires internal event triggers.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="ancestors">The ancestors.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.FireInternalEventSubTreeTriggers(Spotfire.Dxp.Framework.DocumentModel.PropertyName,System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection}})">
            <summary>
            This method is called in the external event raising phase
            if an undoable property on a node in the subtree of this document node has
            changed or if a runtime property on a node in the subtree of this document
            node has been invalidated.
            The method traverses upwards in the document tree and fires external event triggers. The triggers will enqueue
            external event handlers that should be called.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="ancestors">The ancestors.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.FireExternalEventTriggers(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.Commands.DocumentViewKey,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection})">
            <summary>
            This method is called in the external event raising phase if an undoable property of this document
            node has changed or if a runtime property has been invalidated.
            The method traverses upwards in the document tree and fires external event triggers. The triggers will enqueue
            external event handlers that should be called.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="connectionQueue">The connection queue.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateRuntimeConstant``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeConstant{``0}@,Spotfire.Dxp.Framework.DocumentModel.PropertyComputer{``0})">
            <summary>
            Creates a runtime constant. A runtime constant is a property in the document model 
            whose value is computed once when first accessed. The value is then disposed
            along with the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.
            </summary>
            <typeparam name="T">The type of the runtime constant.</typeparam>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeConstant`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
            <param name="factoryMethod">A delegate that creates the value of the runtime constant.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateRuntimeProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty{``0}@,Spotfire.Dxp.Framework.DocumentModel.DependencyDeclarer,Spotfire.Dxp.Framework.DocumentModel.PropertyComputer{``0})">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/>.
            </summary>
            
            <remarks>
            A runtime property is a property in the document model 
            whose value is computed based on the values of other properties. The value of a runtime
            property is computed when the value is asked for. The result of the computation is kept so that 
            it need not be recomputed if it is needed again.
            <para>
            The value in the runtime property is invalidated (that is cleared) when any 
            property that the runtime node depends on is changed.
            </para>
            </remarks>
            
            <typeparam name="T">The Type of the values held by the runtime property. This must be an immutable type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
            <param name="dependencyDeclarer">A delegate that declares the properties that the created RuntimeProperty depends on.</param>
            <param name="propertyComputer">A delegate that computes the value of the RuntimeProperty.</param>
            
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/>.
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateRuntimeProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty{``0}@,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,Spotfire.Dxp.Framework.DocumentModel.StatelessPropertyComputer{``0})">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/>.
            </summary>
            
            <typeparam name="T">The Type of the values held by the runtime property. This must be an immutable type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="field">The field that the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/> will be assigned to. This shall be a <c>readonly</c> field.</param>
            <param name="dependencyDeclarer">A delegate that declares the properties that the created RuntimeProperty depends on.</param>
            <param name="propertyComputer">A delegate that computes the value of the RuntimeProperty.</param>
            
            <remarks>
            A runtime property is a property in the document model 
            whose value is computed based on the values of other properties. The value of a runtime
            property is computed when the value is asked for. The result of the computation is kept so that 
            it need not be recomputed if it is needed again.
            <para>
            The value in the runtime property is invalidated (that is cleared) when any 
            property that the runtime node depends on is changed.
            </para>
            </remarks>
            
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateEventRelay(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer)">
            <summary>
            Creates an event relay. An event relay is a property in the document model 
            which propagates event.
            
            An event is raised for the event relay whenever when the trigger returned by the 
            specified <paramref name="dependencyDeclarer"/> fires.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="dependencyDeclarer">A delegate that declares the properties that the created event relay depends on.</param>
            <remarks>
            This method is the same as calling <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateEventRelay(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,Spotfire.Dxp.Framework.DocumentModel.EventRelayMode)"/>
            and passing <see cref="F:Spotfire.Dxp.Framework.DocumentModel.EventRelayMode.PropagateEventsInAffectedViews"/> as the event relay mode.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateEventRelay(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer,Spotfire.Dxp.Framework.DocumentModel.EventRelayMode)">
            <summary>
            Creates an event relay. An event relay is a property in the document model
            which propagates event.
            An event is raised for the event relay whenever when the trigger returned by the
            specified <paramref name="dependencyDeclarer" /> fires.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="dependencyDeclarer">A delegate that declares the properties that the created event relay depends on.</param>
            <param name="eventRelayMode">The event relay mode.</param>
            <remarks>
            Note that there is a performance penalty with passing in <see cref="F:Spotfire.Dxp.Framework.DocumentModel.EventRelayMode.PropagateEventsInAffectedViews"/> for <paramref name="eventRelayMode" />.
            Thus you should use <see cref="F:Spotfire.Dxp.Framework.DocumentModel.EventRelayMode.DoNotPropagateViewEvents"/> unless the event relay needs to propagate events from view properties.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateEventRelay(Spotfire.Dxp.Framework.DocumentModel.PropertyName[],Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer)">
            <summary>
            Creates an event relay. An event relay is a property in the document model 
            who propagate event.
            
            An event is raised for the event relay whenever when the trigger returned by the 
            specified <paramref name="dependencyDeclarer"/> fires.
            </summary>
            <param name="propertyNames">The property names.</param>
            <param name="dependencyDeclarer">A delegate that declares the properties that the created FacadeProperty depends on.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.CreateEventRouter(Spotfire.Dxp.Framework.DocumentModel.StatelessEventRouter,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer)">
            <summary>
            Creates an event router, capable of relaying events to properties on target nodes.
            </summary>
            <param name="routeMethod">A method that can compute the property and target node(s) to route an event to.</param>
            <param name="dependencyDeclarer">A method that can compute the trigger for the events that this instance shall route.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.GetPropertyNamesForType(System.Type)">
            <summary>
            Gets the property names for document node, including properties declared in base classes.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <returns>A set of property names.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.GetPropertyNamesDeclaredOnType(System.Type)">
            <summary>
            Gets the property names decalared in a document node type. Does not include inherited property names.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <returns>A set of property names.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.ExecuteCommand_HACK_DO_NOT_USE(Spotfire.Dxp.Framework.Commands.UndoableCommandBase)">
            <summary>
            Executes the specified command. Should not be used.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ApplyStateException">
            <summary>
            This exception is thrown if an exception is thrown when a document state is being applied. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ApplyStateException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ApplyStateException"/> class.
            </summary>
            <param name="originalException">The original exception</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ApplyStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ApplyStateException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentView">
            <summary>
            This class is used to control which view of the document that is used when getting and settings properties of the document model.
            A document has multiple views if the user has opened multiple browser tabs for the document in the web client, or if a javascript mashup uses
            multiple views. 
            <para>
            Each view of the document can have different values for active page, active visualization, active data table, active marking, and active filtering selection.
            The value of these properties depends on the currently active view of the document. This class provides the API for getting and setting the current view of the document.
            We will refer to these properties as view properties.
            </para>
            <para>
            The current document view is stored in a thread static variable and is thus associated with the current thread. 
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentView.MasterDocumentViewId">
            <summary>
            The master document view identifier. This is used as the id for the first view that is created.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentView.workerThreadExecutionInfo">
            <summary>
            The document view execution info for worker threads.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentView.analysisView">
            <summary>
            The analysis view that is associated with the document view.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentView.applicationThread">
            <summary>
            The application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentView.documentViewManager">
            <summary>
            The document view manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentView.id">
            <summary>
            An id of the document view.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentView.documentViewKey">
            <summary>
            The document view key that is currently associated to the document view. 
            This is used as key in the view property multiplexors when getttig and setting view properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentView.visible">
            <summary>
            The visibility of the UI for this document view.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.#ctor(System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread,Spotfire.Dxp.Framework.ApplicationModel.AnalysisView,Spotfire.Dxp.Framework.Commands.DocumentViewManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentView" /> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="applicationThread">The application thread.</param>
            <param name="analysisView">The analysis view.</param>
            <param name="documentViewManager">The document view manager.</param>
        </member>
        <member name="E:Spotfire.Dxp.Framework.DocumentModel.DocumentView.VisibleChanged">
            <summary>
            Event that fires when visibility changes for the whole UI layer;
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.Visible">
            <summary>
            Gets or sets a value indicating whether the UI layer for this document view is visible or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.Current">
            <summary>
            Gets the view of the document that is currently associated with the current thread. 
            The current view of the document determines the value of the properties for active page, active visualization, active data table, active marking, 
            and active filtering selection.
            </summary>
            <value>
            The current document view, or null.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.UnsafeCurrent">
            <summary>
            Gets the current document view without any checks. This should be used with care.
            </summary>
            <value>
            The unsafe current.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.WorkerThreadExecutionInfo">
            <summary>
            Gets or sets the worker thread execution information for teh current thread.
            </summary>
            <value>
            The worker thread execution information.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.AnalysisView">
            <summary>
            Gets the analysis view that is associated with this document view.
            </summary>
            <value>
            The analysis view.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.DocumentViewKey">
            <summary>
            Gets or sets the document view key.
            </summary>
            <value>
            The document view key.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.DocumentViewManager">
            <summary>
            Gets the document view manager.
            </summary>
            <value>
            The document view manager.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.Id">
            <summary>
            Gets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.CurrentExecutionInfo">
            <summary>
            Gets the current execution information.
            </summary>
            <value>
            The current execution information.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.CurrentWithoutOverride">
            <summary>
            Gets the current without override.
            </summary>
            <value>
            The current without override.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentView.UnsafeCurrentWithoutOverride">
            <summary>
            Gets the unsafe current document view without override.
            </summary>
            <value>
            The unsafe current document view without override.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.BeginUse(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Sets the specifed document view as the current view of the document for the current thread.
            <para>
            The current view of the document determines the value of the properties for active page, active visualization, active data table, active marking, 
            and active filtering selection.
            </para>
            This method returns a handle that must be disposed. The current document view will be restored when the handle is disposed.
            </summary>
            <param name="documentView">The document view, or <c>null</c>.</param>
            <returns>A handle that should be disposed when the specifed view no longer should be the current view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.ForEach(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Action)">
            <summary>
            Executes the specified action for each view of the document.
            </summary>
            <param name="documentNode">Any document node in the document.</param>
            <param name="action">The action that will be executed once in each view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.BeginUse(Spotfire.Dxp.Framework.DocumentModel.DocumentView,Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState)">
            <summary>
            Sets the specifed document view as the current view of the document for the current thread.
            <para>
            The current view of the document determines the value of the properties for active page, active visualization, active data table, active marking,
            and active filtering selection.
            </para>
            This method returns a handle that must be disposed. The current document view will be restored when the handle is disposed.
            </summary>
            <param name="documentView">The document view.</param>
            <param name="documentViewExecutionState">State of the document view execution.</param>
            <returns>
            A handle that should be disposed when the specifed view no longer should be the current view.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.GetCurrent(Spotfire.Dxp.Framework.Commands.DocumentViewManager)">
            <summary>
            Gets the current document view.
            </summary>
            <param name="documentViewManager">The document view manager.</param>
            <returns>The current document view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.GetSingleInitialViewEntryOrDefault``1(System.Collections.Generic.Dictionary{System.Int32,``0})">
            <summary>
            Gets the single initial view entry or the default if no entry is found.
            </summary>
            <typeparam name="T">The type of the entries.</typeparam>
            <param name="viewMultiplexor">The view multiplexor.</param>
            <returns>The entry or the default </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.GetUnsafeCurrent(Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread)">
            <summary>
            Gets the current document view provided that the current document views belongs to the specified application thread.
            </summary>
            <param name="applicationThread">The application thread.</param>
            <returns>The current document view</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.TryGetSingleInitialViewEntry``1(System.Collections.Generic.Dictionary{System.Int32,``0},``0@)">
            <summary>
            Tries to get the single initial view entry.
            </summary>
            <typeparam name="T">The type of the entries.</typeparam>
            <param name="viewMultiplexor">The view multiplexor.</param>
            <param name="value">The value.</param>
            <returns><c>true</c>, if the entry was found, otherwise <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.Use(Spotfire.Dxp.Framework.DocumentModel.DocumentView,System.Action)">
            <summary>
            Execute the specified action with the specified document view as the current document view.
            </summary>
            <param name="documentView">The document view.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.Use(Spotfire.Dxp.Framework.DocumentModel.DocumentView,Spotfire.Dxp.Framework.Commands.DocumentViewExecutionState,System.Action)">
            <summary>
            Execute the specified action with the specified document view as the current document view.
            </summary>
            <param name="documentView">The document view.</param>
            <param name="documentViewExecutionState">State of the document view execution.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.IsDescendantOf(Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Determines whether this document view is a descendant of the specified document view key.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <returns><c>true</c>, if this view key is a desenadant of the specified view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.CreatePersistedDocumentView">
            <summary>
            Creates a persisted document view.
            </summary>
            <returns>The created persisted document view.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentView.GetCurrentWithoutOverride(Spotfire.Dxp.Framework.Commands.DocumentViewManager)">
            <summary>
            Gets the current document view without override.
            </summary>
            <param name="documentViewManager">The document view manager.</param>
            <returns>The current document view without override</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InternalEventExecutionMode">
            <summary>
            Controls how an internal event handler should be executed in the different views of the document.
            A document has multiple views if the user has opened multiple browser tabs for the document in the web client, or if a javascript mashup uses
            multiple views.
            <para>
            Each view of the document can have different values for active page, active visualization, active data table, active marking, and active filtering selection.
            The value of these properties depends on the currently active view of the document. We will refer to these properties as view properties.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventExecutionMode.ExecuteWithoutView">
            <summary>
            An event handler that is declared to execute in this mode may not get or set any view property.
            The event handler is only executed once each time it is triggered, even if there are multiple views of the document.
            <para>
            This mode should be used if the event handler does not get or set view properties, because it leads to best performance.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventExecutionMode.ExecuteInAffectedViews">
            <summary>
            An event handler that is declared to execute in this mode may get or set view properties.
            The event handler is executed for each document view where the event was triggered.
            Thus, if there are multiple views of the document, then the event handler may be executed multiple times.
            <para>
            Note that, if an ordinary property was modified then the event will be executed in all views where the trigger 
            fires. This may have performance implications so this mode should only be used if the event handler needs to get or set view properties.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventExecutionMode.ExecuteInCurrentView">
            <summary>
            An event handler that is declared to execute in this mode may get or set view properties.
            The event handler is executed in the document view where the event was triggered. 
            <para>
            Note that, if an ordinary property was modified then that affects all views but the event will still only 
            execute in the view that was active when the modification took place. This ensures that the event is executed only once
            which is good for performance. However, the event handler may not be able enforce the invariant it is intended to enforce, in all views.
            </para>
            <para>
            This mode is rarely useful. It is provided primarily for backwards compatibility purposes and is the default for the previously existing API, because
            it is a trade off between the two other modes.
            </para>
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.EventRelayMode">
            <summary>
            Controls how the event relay propagates events in the different views of the document.
            A document has multiple views if the user has opened multiple browser tabs for the document in the web client, or if a javascript mashup uses
            multiple views.
            <para>
            Each view of the document can have different values for active page, active visualization, active data table, active marking, and active filtering selection.
            The value of these properties depends on the currently active view of the document. This type is used to control how events from these properties
            are propagated. See <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentView"/> for further documentation. 
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.EventRelayMode.DoNotPropagateViewEvents">
            <summary>
            The event relay does not propagate events for properties which may have different values in different views. 
            Instead, an exception will be thrown if the event relay depends on such a property. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.EventRelayMode.PropagateEventsInAffectedViews">
            <summary>
            The event relay propagates events in the views that are affected by the property change. Thus if the event relay depends on the active page then the 
            event relay is only propagated in the view where the active page changes. If the event relay depends on a property that has the same value in all views,
            then the event relay will propagate the event in all views.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1">
            <summary>
            Represents a filtered unfold manager.
            </summary>
            <typeparam name="T">The type of values in the associated mutable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1.invalidationFilterManager">
            <summary>
            The invalidation filter manager
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1.unfoldManager">
            <summary>
            The unfold manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1.InvalidationFilterManager">
            <summary>
            Gets the invalidation filter manager.
            </summary>
            <value>
            The invalidation filter manager.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1.UnfoldManager">
            <summary>
            Gets the unfold manager.
            </summary>
            <value>
            The unfold manager.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns><c>true</c>, if it is empty.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IAssignableRuntimeProperty">
            <summary>
            An interface for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1"/>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IAssignableRuntimeProperty.TransferStateToSnapshot(Spotfire.Dxp.Framework.DocumentModel.IAssignableRuntimeProperty)">
            <summary>
            Transfers state to snapshot from the live property when a snapshot is created.
            </summary>
            <param name="assignableRuntimeProperty">The assignable runtime property.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IAssignableRuntimePropertyValueManager`1">
            <summary>
            An interface for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager`1"/>
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IAssignableRuntimePropertyValueManager`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IAssignableRuntimePropertyValueManager`1.GetStreamingPropertyValue(`0)">
            <summary>
            Gets the streaming property value.
            </summary>
            <param name="initialValue">The initial value.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IAssignableRuntimePropertyValueManager`1.GetSnapshotValueManager">
            <summary>
            Gets the snapshot value manager.
            </summary>
            <returns>The snapshot value manager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IAssignableRuntimePropertyValueManager`1.OnAncestorDetachedOrInvalidated">
            <summary>
            This method is called when an ancestor is detached or invalidated.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection`1">
            <summary>
            An interface for collection that can find a value for a given document view.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection`1.SearchForValue(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Searches for value for the given <paramref name="documentView"/>.
            </summary>
            <param name="documentView">The document view.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IMutableViewPropertySnapshotMultiplexor">
            <summary>
            A marker interface for a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1"/> 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IMutableViewPropertySnapshotMultiplexor.CreateFilteredUnfoldManagersOverride">
            <summary>
            Creates the filtered unfold managers override.
            </summary>
            <returns>The created override</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager">
            <summary>
            Manages the invalidation filters.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.invalidationFilters">
            <summary>
            The invalidation filters.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.isShared">
            <summary>
            A flag, indictating whether the invalidation manager is shared or not.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.Add(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter)">
            <summary>
            Adds an invalidation filter for the speciffied target.
            </summary>
            <param name="target">The target.</param>
            <param name="invalidationFilter">The invalidation filter.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.Remove(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget)">
            <summary>
            Removes the invalidation filter for the specified target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.TryGetInvalidationFilter(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter@)">
            <summary>
            Tries to get the invalidation filter for the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="invalidationFilter">The invalidation filter.</param>
            <returns><c>true</c>, if the invalidation filter was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.CreateOverride(Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager)">
            <summary>
            Creates the override.
            </summary>
            <param name="invalidationFilterManager">The invalidation filter manager.</param>
            <returns>The override.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.CreateOverride">
            <summary>
            Creates the override.
            </summary>
            <returns>The override</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.LazyDictionaryEntry`2">
            <summary>
            Hadles lazy update of the dictionary when sharing and unsharing.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.LazyDictionaryEntry`2.dictionary">
            <summary>
            The dictionary to update.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.LazyDictionaryEntry`2.key">
            <summary>
            The key to update.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.LazyDictionaryEntry`2.value">
            <summary>
            The value to update with.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.LazyDictionaryEntry`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.LazyDictionaryEntry`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.LazyDictionaryEntry`2.SetKey(`0)">
            <summary>
            Sets the key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InvalidationFilterManager.LazyDictionaryEntry`2.SetValue(`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IPropertyNameInternals">
            <summary>
            [jagat, 2010-01-11]: Made this interface FriendVisible(true). It is often convenient to read the string 
            name when deserializing old files for compatibility.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IPropertyNameInternals.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ISharedAssignableRuntimePropertyValueManager">
            <summary>
            An interface for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedAssignableRuntimePropertyValueManager`1"/>
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferenceViewProperty">
            <summary>
            An interface for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1"/>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferenceViewProperty.Target">
            <summary>
            Gets or sets the target. This is used for document state (web player state).
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferenceViewProperty.Targets">
            <summary>
            Gets the targets. This is used for document state (web player state).
            </summary>
            <value>
            The targets.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferenceViewProperty.GetSnapshotValueInfoMultiplexor">
            <summary>
            Gets the snapshot value info multiplexor.
            </summary>
            <returns>The snapshot value info multiplexor. </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferenceViewProperty.SetSnapshotValueInfoMultiplexor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor}})">
            <summary>
            Sets the snapshot value info multiplexor.
            </summary>
            <param name="valueInfoMultiplexor">The value info multiplexor.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValue`1">
            <summary>
            A generic class for lazily computed values that are stored in an undoable structure.
            </summary>
            <typeparam name="T">The type of the lazily computed value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValue`1.valueContainer">
            <summary>
            A container for the lazily computed value. We need this container because snapshot serializatuion of this object should not force evaluation
            of the value. That is prevented by the container.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValue`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.LazyUndoableComputer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValue`1"/> class.
            </summary>
            <param name="computer">The computer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValue`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValue`1"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValue`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValue`1.ValueContainer">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValue`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1">
            <summary>
            A container for lazy values.
            This class is needed because snapshot serializatuion of lazy undoable values should not force evaluation
            of the value.
            </summary>
            <typeparam name="T">The type fo the lazily computed value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.computed">
            <summary>
            True, if the value has been computed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.computer">
            <summary>
            The computer. Will be null when the value has been computed and the computer has been disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.computing">
            <summary>
            True, if a thread is currently computing the value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.value">
            <summary>
            The value if, it has been computed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.LazyUndoableComputer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1"/> class.
            </summary>
            <param name="computer">The computer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.Force">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainer`1.IsComputed">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableComputer`1">
            <summary>
            Base class for computers of lazy undoable values.
            </summary>
            <typeparam name="T">The type of the value returned by the computer when it is run.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableComputer`1.Compute">
            <summary>
            Computes the value.
            </summary>
            <returns>The computed value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableComputer`1.Dispose">
            <summary>
            Disposes the computer.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueBase">
            <summary>
            A base class for lazily computed values that are stored in an undoable structure.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueBase"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueBase"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueBase.IsComputed">
            <summary>
            Gets a value indicating whether the value is computed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueBase.ValueContainer">
            <summary>
            Gets the value container.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainerBase">
            <summary>
            A non generic base class for container for lazy values.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainerBase"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainerBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainerBase"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainerBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainerBase.Force">
            <summary>
            Force the evaluation of the lazy value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyUndoableValueContainerBase.IsComputed">
            <summary>
            Determines whether the lazy value is computed.
            </summary>
            <returns>
              <c>true</c> if this instance is computed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1">
            <summary>
            A specialized version of the SnapshotMultiplexor for mutable view nodes that holds the unfold manager for 
            mutable property triggers set up by runtime properties.
            </summary>
            <typeparam name="T">The type of the node held by the associated mutable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.filteredUnfoldManagerMultiplexor">
            <summary>
            The filtered unfold managers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.areMutablePropertyTriggersActive">
            <summary>
            A flag indication whether the mutable property triggers are active.
            This field is protected by the lock on filteredUnfoldManagerMultiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1"/> class.
            </summary>
            <param name="liveNode">The live node.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.MutableProperty">
            <summary>
            Gets the mutable property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.AreMutablePropertyTriggersActive">
            <summary>
            Gets or sets a value indicating whether mutable property triggers are active.
            </summary>
            <value>
            <c>true</c> if the mutable property triggers are active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.AddInvalidation(Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{`0},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.DocumentView,Spotfire.Dxp.Framework.DocumentModel.IMutableProperty{`0},Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Adds the invalidation.
            </summary>
            <param name="filteredUnfoldManager">The filtered unfold manager.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
            <param name="documentView">The document view.</param>
            <param name="mutableProperty">The mutable property.</param>
            <param name="target">The target.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.RemoveInvalidation(Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{`0},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.IMutableProperty{`0},Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Removes the invalidation.
            </summary>
            <param name="filteredUnfoldManager">The filtered unfold manager.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
            <param name="mutableProperty">The mutable property.</param>
            <param name="target">The target.</param>
            <param name="declarer">The declarer.</param>
            <exception cref="T:System.InvalidOperationException">Invalidation filter not found.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.Share(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.UnShare(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.AddInvalidation(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.RemoveInvalidation(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.CreateFilteredUnfoldManagersOverride">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.ActivateAndUnfoldMutablePropertyTriggers(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{`0}})">
            <summary>
            Activates and unfold mutable property triggers.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.FoldMutablePropertyTriggers(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{`0}},Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <param name="values">The values.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.FoldMutablePropertyTriggersAndMarkAsInactive(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{`0}})">
            <summary>
            Folds the mutable property triggers and mark as inactive.
            </summary>
            <param name="valueInfoMultiplexor">The value info multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.UnfoldMutablePropertyTriggers(`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <param name="value">The value.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.CreateFilteredUnfoldManagersOverride(Spotfire.Dxp.Framework.DocumentModel.IMutableViewPropertySnapshotMultiplexor)">
            <summary>
            Creates the filtered unfold managers override.
            </summary>
            <param name="mutableViewPropertySnapshotMultiplexor">The mutable view property snapshot multiplexor.</param>
            <returns>The created override</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutableViewPropertySnapshotMultiplexor`1.GetSingleInitialViewFilteredUnfoldManager">
            <summary>
            Gets the filtered unfold manager fro the signle view that exists when sharing a document.
            </summary>
            <returns>The filtered unfold manager</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedAssignableRuntimePropertyValueManager`1">
            <summary>
            A value manager for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1"/> used in shared nodes.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedAssignableRuntimePropertyValueManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimePropertyValueManager{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedAssignableRuntimePropertyValueManager`1"/> class.
            </summary>
            <param name="other">The other.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedAssignableRuntimePropertyValueManager`1.RuntimePropertyValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedAssignableRuntimePropertyValueManager`1.GetOrCreateAssignableRuntimePropertyUserModificationManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedAssignableRuntimePropertyValueManager`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedAssignableRuntimePropertyValueManager`1.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedSnapshotAssignableRuntimePropertyValueManager`1">
            <summary>
            A value manager for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1"/> used in shared snapshots.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedSnapshotAssignableRuntimePropertyValueManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedSnapshotAssignableRuntimePropertyValueManager`1"/> class.
            </summary>
            <param name="other">The other.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedSnapshotAssignableRuntimePropertyValueManager`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedSnapshotAssignableRuntimePropertyValueManager`1.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedViewEventRelay">
            <summary>
            Represents a shared view event relay. This is a kind of event relay that may depend on view propertis.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedViewEventRelay.#ctor(Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedViewEventRelay"/> class.
            </summary>
            <param name="eventRelay">The event relay.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedViewEventRelay.Trigger">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedViewEventRelay.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1">
            <summary>
            A value manager for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AssignableRuntimeProperty`1"/> used in snapshots.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.runtimePropertyValue">
            <summary>
            The runtime property value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1" /> class.
            </summary>
            <param name="runtimePropertyValue">The runtime property value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1"/> class.
            </summary>
            <param name="other">The other.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.GetStreamingPropertyValue(`0)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.ToSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.GetSnapshotValueManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.OnAncestorDetachedOrInvalidated">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotAssignableRuntimePropertyValueManager`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotCrossReferenceViewPropertyValueInfo">
            <summary>
            A helper class for snapshot value infos for cross reference view properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotCrossReferenceViewPropertyValueInfo.RawGetNode``1(Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor})">
            <summary>
            Gets the raw value from the specified value info.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="valueInfo">The value info.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotCrossReferenceViewPropertyValueInfo.GetNode``1(Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor})">
            <summary>
            Gets the value from the specified value info, limiting the current validity span.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="valueInfo">The value info.</param>
            <returns>
            The value
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotCrossReferenceViewPropertyValueInfo.CreateFromValueInfo``1(Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0})">
            <summary>
            Creates an instance of this class from the provided value information.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="valueInfo">The value information.</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotCrossReferenceViewPropertyValueInfo.GetNodeFromSnapshotMultiplexor``1(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor)">
            <summary>
            Gets the node from snapshot a multiplexor.
            </summary>
            <typeparam name="T">The type of the node</typeparam>
            <param name="snapshotMultiplexor">The snapshot multiplexor.</param>
            <returns>The node</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of an attached undoable view property.
            </summary>
            <typeparam name="T">The type of the value of the undoable view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.viewPropertyState">
            <summary>
            The view property state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="viewPropertyState">State of the view property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="sharedUndoableCrossReferenceViewPropertyNodeState">The shared undoable cross reference property node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.ViewPropertyState">
            <summary>
            Gets the state of the view property.
            </summary>
            <value>
            The state of the view property.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.ClearChangedFlag">
            <summary>
            Clears the changed flag.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory">The shared component factory</param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.GetSingleViewValueInfo">
            <summary>
            Gets the single view value info.
            </summary>
            <returns>The value info</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.GetValueMultiplexor">
            <summary>
            Gets the value multiplexor.
            </summary>
            <returns>The value multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.HasChanged(System.Boolean)">
            <summary>
            Determines whether the value of the property has changed for the current document view.
            This is used for document state (web player state).
            </summary>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns><c>true</c>, if the value has changed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.RestoreValiditySpan(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Restores the validity span.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState`1.GetValueInfo">
            <summary>
            Gets the value information.
            </summary>
            <returns>The value info.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of a Configuring undoable view property.
            </summary>
            <typeparam name="T">The type of the value of the undoable view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1.viewPropertyState">
            <summary>
            The view property state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="viewPropertyState">State of the view property.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1.ViewPropertyState">
            <summary>
            Gets the state of the view property.
            </summary>
            <value>
            The state of the view property.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableViewPropertyNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of a Detached undoable view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.valueMultiplexor">
            <summary>
            The value multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="valueMultiplexor">The value multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.CreateDisposedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.CreateEnqueuedToBeAttachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.CreateEnqueuedToBeFrozenNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.CreateReconfiguringNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.GetValueMultiplexor">
            <summary>
            Gets the value multiplexor.
            </summary>
            <returns>The value multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.SetValueMultiplexor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,`0})">
            <summary>
            Sets the value multiplexor.
            </summary>
            <param name="valueMux">The value mux.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of a Disposed undoable view property.
            </summary>
            <typeparam name="T">The type of the value of the undoable view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableViewPropertyNodeState`1.Singleton">
            <summary>
            A singleton.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableViewPropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableViewPropertyNodeState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableViewPropertyNodeState`1.Create">
            <summary>
            Creates a disposed node state.
            </summary>
            <returns>The node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of a EnqueuedToBeAttached undoable view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1.valueMultiplexor">
            <summary>
            The value multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="valueMultiplexor">The value multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1.CreateAttachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1.CreateDetachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableViewPropertyNodeState`1.DummyAction``1(``0)">
            <summary>
            A Dummy action that does nothing.
            </summary>
            <typeparam name="TEntry">The type of the entry.</typeparam>
            <param name="entry">The entry.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ISharedSnapshotUndoableViewPropertyNodeState">
            <summary>
            A marker interface for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1"/>
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableViewPropertyNodeState">
            <summary>
            A marker interface for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1"/>
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableViewPropertyNodeState`1">
            <summary>
            An interface for node states for undoable view properties.
            </summary>
            <typeparam name="T">The type of the value in the property.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Sets the value of the property for the specified document view key.
            </summary>
            <param name="property">The prperty.</param>
            <param name="value">The value to set.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableViewPropertyNodeState`1.GetValue">
            <summary>
            Gets the value of the property for the current document view.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableViewPropertyNodeState`1.RawGetValue">
            <summary>
            Gets the value of the property for the current document view without limiting the validity span.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of a New undoable view property.
            </summary>
            <typeparam name="T">The type of the value of the undoable view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.RawSetValue(`0)">
            <summary>
            Sets the value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.CreateAttachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.CreateConfiguringForRuntimeAttachNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.CreateConfiguringNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.CreateDetachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.CreateFrozenNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.CreateReconfiguringNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of a Reconfiguring undoable view property.
            </summary>
            <typeparam name="T">The type of the value of the undoable view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1.viewPropertyState">
            <summary>
            The view property state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="viewPropertyState">State of the view property.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1.ViewPropertyState">
            <summary>
            Gets the state of the view property.
            </summary>
            <value>
            The state of the view property.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableViewPropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of a shared snapshot undoable view property.
            </summary>
            <typeparam name="T">The type of the value of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.masterDocumentValueInfo">
            <summary>
            The master document value information.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="snapshotNodeState">The previous snapshot node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.MasterDocumentValueInfo">
            <summary>
            Gets the master document value information.
            </summary>
            <value>
            The master document value information.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.UnshareSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.UpdateValiditySpanInSnapshots(System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.GetValueInfo">
            <summary>
            Gets the value info.
            </summary>
            <returns>The value info.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState`1.TryGetValueMultiplexorOverride(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{`0}}@)">
            <summary>
            Tries to get a value multiplexor overrride.
            </summary>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <returns><c>true</c>, if the multiplexor override was found</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of a Shared undoable view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.masterDocumentValueInfo">
            <summary>
            The master document value information
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableViewPropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="attachedUndoableCrossReferenceViewPropertyNodeState">State of the attached undoable cross reference view property node.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.MasterDocumentValueInfo">
            <summary>
            Gets the master document value information.
            </summary>
            <value>
            The master document value information.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.CreateAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Transition to attached node state.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The node state as attached.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.GetSnapshotValueInfoMultiplexor">
            <summary>
            Gets the snapshot value info multiplexor.
            </summary>
            <returns>The multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.GetValueMultiplexor">
            <summary>
            Gets the value multiplexor.
            </summary>
            <returns>The value multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.HasChanged(System.Boolean)">
            <summary>
            Determines whether the value of the property has changed for the current document view.
            This is used for document state (web player state).
            </summary>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns>
              <c>true</c>, if the value has changed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.SearchForValue(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.RestoreValiditySpan(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Restores the validity span.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.GetValueInfo(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Gets the value info.
            </summary>
            <param name="documentView">The document view.</param>
            <returns>The value info.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.GetValueInfo">
            <summary>
            Gets the value info.
            </summary>
            <returns>The value info</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableViewPropertyNodeState`1.TryGetValueMultiplexorOverride(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{`0}}@)">
            <summary>
            Tries to get the value multiplexor override.
            </summary>
            <param name="multiplexor">The multiplexor.</param>
            <returns><c>true</c>, if the multiplexor was found</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1">
            <summary>
            Represents the state of a Snapshot undoable view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.valueMultiplexor">
            <summary>
            The value multiplexor
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="generation">The generation when the snapshot was taken.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableViewPropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1"/> class.
            </summary>
            <param name="sharedSnapshotUndoableCrossReferenceViewPropertyNodeState">State of the shared snapshot undoable cross reference view property node.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.GetValueInfo">
            <summary>
            Gets the value information.
            </summary>
            <returns>The value information.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.CreateSharedSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.SetSnapshotValueInfoMultiplexor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{`0}})">
            <summary>
            Sets the snapshot value info multiplexor.
            </summary>
            <param name="valueMux">The snapshot value info multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.UpdateValiditySpanInSnapshots(System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableViewPropertyNodeState`1.GetSingleViewValueInfo">
            <summary>
            Gets the single view value information.
            </summary>
            <returns>The value info.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyExceptionCreator">
            <summary>
            A helper class for creating exceptions with relevant error messages.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyExceptionCreator.AttemptToGetValue(Spotfire.Dxp.Framework.DocumentModel.InternalNodeState)">
            <summary>
            Creates an exception for attempts to get the value in an illegal state.
            </summary>
            <param name="internalNodeState">State of the internal node.</param>
            <returns>An invalid operation exception.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyExceptionCreator.AttemptToSetValue(Spotfire.Dxp.Framework.DocumentModel.InternalNodeState)">
            <summary>
            Creates an exception for attempts to set the value in an illegal state.
            </summary>
            <param name="internalNodeState">State of the internal node.</param>
            <returns>An invalid operation exception.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1">
            <summary>
            A class for undoable cross reference view property state that is common to several states.
            </summary>
            <typeparam name="T">The type of the crossreferenced nodes.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.areMutablePropertyTriggersActive">
            <summary>
            A flag indicating whether the mutable property triggers are active.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.externalUnfoldManagerMultiplexor">
            <summary>
            The external unfold manager multiplexor
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.internalUnfoldManagerMultiplexor">
            <summary>
            The internal unfold manager multiplexor
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.rootChanged">
            <summary>
            A flag keeping track of whether the value property has rootChanged for the root view key.
            This is used for document state (web player state).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.valueInfoMultiplexor">
            <summary>
            The value info multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.#ctor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{`0}},System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,`0}},System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,`0}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1"/> class.
            </summary>
            <param name="valueInfoMultiplexor">The value information multiplexor.</param>
            <param name="externalUnfoldManagerMultiplexor">The external unfold manager multiplexor.</param>
            <param name="internalUnfoldManagerMultiplexor">The internal unfold manager multiplexor.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.#ctor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1"/> class.
            </summary>
            <param name="valueInfoMultiplexor">The value information multiplexor.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.AreMutablePropertyTriggersActive">
            <summary>
            Gets a value indicating whether the mutable property triggers are active.
            </summary>
            <value>
            <c>true</c> if the mutable property triggers are active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.ValueInfoMultiplexor">
            <summary>
            Gets the value info multiplexor.
            </summary>
            <value>
            The value info multiplexor.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.Create(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,`0})">
            <summary>
            Creates an instance from the specified value multiplexor.
            </summary>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.Create(`0)">
            <summary>
            Creates an instance from the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.ActivateAndUnfoldMutablePropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <summary>
            Activates the and unfold mutable property triggers.
            </summary>
            <param name="property">The property.</param>
            <exception cref="T:System.InvalidOperationException">Attempt to activate a MutablePropertyTriggerManager that is already activated.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <summary>
            Adds pointers from the nodes that the property points to back to the property.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.AddExternalEvent(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Adds the external event.
            </summary>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.AddInternalEvent(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Adds the internal event.
            </summary>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.ClearChangedFlag">
            <summary>
            Clears the changed flag.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.FoldMutablePropertyTriggersAndMarkAsInactive(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <summary>
            Folds the mutable property triggers and mark as inactive.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.GetSingleInitialViewExternalUnfoldManager">
            <summary>
            Gets the external unfold manager for the single view that exists when sharing a document.
            </summary>
            <returns>The external unfold  manager</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.GetSingleInitialViewInternalUnfoldManager">
            <summary>
            Gets the internal unfold manager for the single view that exists when sharing a document.
            </summary>
            <returns>The internal unfold  manager</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.GetSingleViewValueInfo">
            <summary>
            Gets the value info for the single view that exists when sharing a document.
            </summary>
            <returns>The value info</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.GetSnapshotValueInfoMultiplexor">
            <summary>
            Gets the snapshot value info multiplexor.
            </summary>
            <returns>The snapshot value info multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.GetValueInfo(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Gets the value information.
            </summary>
            <param name="documentView">The document view.</param>
            <returns>The value info.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.GetValueInfo">
            <summary>
            Gets the value information.
            </summary>
            <returns>The value info.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.HasChanged(System.Boolean)">
            <summary>
            Determines whether the value of the property has changed for the current document view.
            This is used for document state (web player state).
            </summary>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns><c>true</c>, if the value has changed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.RawGetValue">
            <summary>
            Gets the raw value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.ReactToDetachOfReferencedNode(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Reacts to detach of a referenced node.
            </summary>
            <param name="property">The property.</param>
            <param name="documentNode">The document node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <summary>
            Remove pointers from the nodes that the property points to back to the property.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.RemoveExternalEvent(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Removes the external event.
            </summary>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.RemoveInternalEvent(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Removes the internal event.
            </summary>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Sets the value of the property for the specified document view key.
            </summary>
            <param name="property">The prperty.</param>
            <param name="value">The value to set.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.RestoreValiditySpan(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Restores the validity span.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.SearchForValue(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.FoldMutablePropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <param name="node">The node.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState`1.UnfoldMutablePropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <param name="node">The node.</param>
            <param name="value">The value.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1">
            <summary>
            A class for view property state that is common to several states.
            </summary>
            <typeparam name="T">The type of the crossreferenced nodes.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.rootChanged">
            <summary>
            A flag keeping track of whether the value property has rootChanged for the root view key.
            This is used for document state (web player state).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.valueInfoMultiplexor">
            <summary>
            The value info multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.#ctor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1"/> class.
            </summary>
            <param name="valueInfoMultiplexor">The value information multiplexor.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.ValueInfoMultiplexor">
            <summary>
            Gets the value info multiplexor.
            </summary>
            <value>
            The value info multiplexor.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.RestoreValiditySpan(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Restores the validity span.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.Create(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,`0})">
            <summary>
            Creates an instance from the specified value multiplexor.
            </summary>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.Create(`0)">
            <summary>
            Creates an instance from the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.ClearChangedFlag">
            <summary>
            Clears the changed flag.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.GetSingleViewValueInfo">
            <summary>
            Gets the value info for the single view that exists when sharing a document.
            </summary>
            <returns>The value info</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.GetSnapshotValueInfoMultiplexor">
            <summary>
            Gets the snapshot value info multiplexor.
            </summary>
            <returns>The snapshot value info multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.GetValueInfo(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Gets the value information.
            </summary>
            <param name="documentView">The document view.</param>
            <returns>The value info.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.GetValueInfo">
            <summary>
            Gets the value information.
            </summary>
            <returns>The value info.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.HasChanged(System.Boolean)">
            <summary>
            Determines whether the value of the property has changed for the current document view.
            This is used for document state (web player state).
            </summary>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns><c>true</c>, if the value has changed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.RawGetValue">
            <summary>
            Gets the raw value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Sets the value of the property for the specified document view key.
            </summary>
            <param name="property">The prperty.</param>
            <param name="value">The value to set.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableViewPropertyState`1.SearchForValue(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            An interface for the node state classes for the leafs of an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>. 
            </summary>
            <typeparam name="T">The type of the cross referenced node.</typeparam>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a Attached undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the AttachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceListLeafNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the AttachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="sharedUndoableCrossReferenceListLeafNodeState">The shared undoable cross reference list leaf node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the AttachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState`1.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory">The shared component factory</param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a New undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the NewUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.CreateConfiguringForRuntimeAttachNodeState">
            <summary>
            Used for state transition to ConfiguringForRuntimeAttach.
            </summary>
            <returns>The ConfiguringForRuntimeAttach node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.CreateConfiguringNodeState">
            <summary>
            Used for state transition to Configuring.
            </summary>
            <returns>The Configuring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceListLeafNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a Configuring undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the ConfiguringUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the ConfiguringUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceListLeafNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceListLeafNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a EnqueuedToBeAttached undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a EnqueuedToBeFrozen undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferenceListLeafNodeState`1.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a RuntimeAttached undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the RuntimeAttachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the RuntimeAttachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="sharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState">Shared version of this node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates the state of the shared node.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The shared node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a Frozen undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the FrozenUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the FrozenUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the FrozenUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="frozenUndoableCrossReferenceListLeafNodeState">The frozen node state.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the FrozenUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="frozenUndoableCrossReferenceListLeafNodeState">The frozen state.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a Reconfiguring undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the ReconfiguringUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the ReconfiguringUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceListLeafNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a Snapshot undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceListLeafNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceListLeafNodeState`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SnapshotUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="generation">The generation where the snapshot is taken..</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceListLeafNodeState`1.CreateSharedSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates the state of the shared snapshot node.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The shared node snapshot node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a Detached undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the DetachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the DetachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1.CreateEnqueuedToBeAttachedNodeState">
            <summary>
            Used for state transition to EnqueuedToBeAttached.
            </summary>
            <returns>The EnqueuedToBeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1.CreateEnqueuedToBeFrozenNodeState">
            <summary>
            Used for state transition to EnqueuedToBeFrozen.
            </summary>
            <returns>The EnqueuedToBeFrozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceListLeafNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a Disposed undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the DisposedUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a ConfiguringForRuntimeAttach undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferenceListLeafNodeState`1.CreateRuntimeAttachedNodeState">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a Shared undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceListLeafNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the SharedUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="attachedUndoableCrossReferenceListLeafNodeState">The attached state to initialize the new instance from.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceListLeafNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceListLeafNodeState`1.CreateAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Transition to attached node state.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The node state as attached.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceListLeafNodeState`1.RemoveSessionOverrides">
            <summary>
            Removes the session overrides.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the shared runtime attached undoable cross reference list leaf node state.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferenceListLeafNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="runtimeAttachedUndoableCrossReferenceListLeafNodeState">The previous runtime attached undoable cross reference list leaf node state</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>
            Gets or sets the snapshot multiplexor of the target node.
            </summary>
            <exception cref="T:System.InvalidOperationException">When trying to set the value.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <exception cref="T:System.InvalidOperationException">When trying to set the value.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferenceListLeafNodeState`1.CreateRuntimeAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceListLeafNodeState`1">
            <summary>
            Represents the state of a Snapshot undoable cross reference list leaf.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference list leaf.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceListLeafNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceListLeafNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceListLeafNodeState{`0})">
            <summary>
            Initializes a new instance of the SharedSnapshotUndoableCrossReferenceListLeafNodeState class.
            </summary>
            <param name="snapshotNodeState">The previous snapshot node state.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceListLeafNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceListLeafNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceListLeafNodeState`1.UnshareSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of an attached undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value of the undoable cross reference view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.viewPropertyState">
            <summary>
            The view property state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="viewPropertyState">State of the view property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="sharedUndoableCrossReferenceViewPropertyNodeState">The shared undoable cross reference property node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.AreMutablePropertyTriggersActive">
            <summary>
            Gets a value indicating whether the mutable property triggers are active.
            </summary>
            <value>
            <c>true</c> if the mutable property triggers are active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.ViewPropertyState">
            <summary>
            Gets the state of the view property.
            </summary>
            <value>
            The state of the view property.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.ClearChangedFlag">
            <summary>
            Clears the changed flag.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory">The shared component factory</param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.GetSingleViewExternalUnfoldManager">
            <summary>
            Gets the single view external unfold manager.
            </summary>
            <returns>The unfold manager</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.GetSingleViewInternalUnfoldManager">
            <summary>
            Gets the single view internal unfold manager.
            </summary>
            <returns>The unfold manager</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.GetSingleViewValueInfo">
            <summary>
            Gets the single view value info.
            </summary>
            <returns>The value info</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.GetValueMultiplexor">
            <summary>
            Gets the value multiplexor.
            </summary>
            <returns>The value multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.HasChanged(System.Boolean)">
            <summary>
            Determines whether the value of the property has changed for the current document view.
            This is used for document state (web player state).
            </summary>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns><c>true</c>, if the value has changed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.RestoreValiditySpan(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Restores the validity span.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState`1.GetValueInfo">
            <summary>
            Gets the value information.
            </summary>
            <returns>The value info.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of a Configuring undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.viewPropertyState">
            <summary>
            The view property state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="viewPropertyState">State of the view property.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.ViewPropertyState">
            <summary>
            Gets the state of the view property.
            </summary>
            <value>
            The state of the view property.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferenceViewPropertyNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of a Detached undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.valueMultiplexor">
            <summary>
            The value multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="valueMultiplexor">The value multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.CreateDisposedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.CreateEnqueuedToBeAttachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.CreateEnqueuedToBeFrozenNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.CreateReconfiguringNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.GetValueMultiplexor">
            <summary>
            Gets the value multiplexor.
            </summary>
            <returns>The value multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.SetValueMultiplexor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,`0})">
            <summary>
            Sets the value multiplexor.
            </summary>
            <param name="valueMux">The value mux.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of a Disposed undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1.Singleton">
            <summary>
            A singleton.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1.Create">
            <summary>
            Creates a disposed node state.
            </summary>
            <returns>The node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of a EnqueuedToBeAttached undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.valueMultiplexor">
            <summary>
            The value multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="valueMultiplexor">The value multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.CreateAttachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.CreateDetachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferenceViewPropertyNodeState`1.DummyAction``1(``0)">
            <summary>
            A Dummy action that does nothing.
            </summary>
            <typeparam name="TEntry">The type of the entry.</typeparam>
            <param name="entry">The entry.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ISharedSnapshotUndoableCrossReferenceViewPropertyNodeState">
            <summary>
            A marker interface for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1"/>
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableCrossReferenceViewPropertyNodeState">
            <summary>
            A marker interface for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1"/>
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            An interface for node states for undoable cross reference view properties.
            </summary>
            <typeparam name="T">The type of the value in the property.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Sets the value of the property for the specified document view key.
            </summary>
            <param name="property">The prperty.</param>
            <param name="value">The value to set.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <summary>
            Gets the value of the property for the current document view.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <summary>
            Gets the value of the property for the current document view without limiting the validity span.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <summary>
            Adds pointers from the nodes that the property points to back to the property.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <summary>
            Remove pointers from the nodes that the property points to back to the property.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of a New undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.RawSetValue(`0)">
            <summary>
            Sets the value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.CreateAttachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.CreateConfiguringForRuntimeAttachNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.CreateConfiguringNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.CreateDetachedNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.CreateFrozenNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.CreateReconfiguringNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of a Reconfiguring undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.viewPropertyState">
            <summary>
            The view property state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="viewPropertyState">State of the view property.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.ViewPropertyState">
            <summary>
            Gets the state of the view property.
            </summary>
            <value>
            The state of the view property.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferenceViewPropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of a shared snapshot undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.masterDocumentValueInfo">
            <summary>
            The master document value information.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="snapshotNodeState">The previous snapshot node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.MasterDocumentValueInfo">
            <summary>
            Gets the master document value information.
            </summary>
            <value>
            The master document value information.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.UnshareSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.UpdateValiditySpanInSnapshots(System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.GetValueInfo">
            <summary>
            Gets the value info.
            </summary>
            <returns>The value info.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState`1.TryGetValueMultiplexorOverride(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor}}@)">
            <summary>
            Tries to get a value multiplexor overrride.
            </summary>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <returns><c>true</c>, if the multiplexor override was found</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of a Shared undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.masterDocumentAreMutablePropertyTriggersActive">
            <summary>
            The master document flag on whther mutable property triggers are active
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.masterDocumentExternalUnfoldManager">
            <summary>
            The master document external unfold manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.masterDocumentInternalUnfoldManager">
            <summary>
            The master document internal unfold manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.masterDocumentValueInfo">
            <summary>
            The master document value information
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferenceViewPropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="attachedUndoableCrossReferenceViewPropertyNodeState">State of the attached undoable cross reference view property node.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.AreMutablePropertyTriggersActive">
            <summary>
            Gets or sets a value indicating whether [are mutable property triggers active].
            </summary>
            <value>
            <c>true</c> if [are mutable property triggers active]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.MasterDocumentAreMutablePropertyTriggersActive">
            <summary>
            Gets a value indicating whether [master document are mutable property triggers active].
            </summary>
            <value>
            <c>true</c> if [master document are mutable property triggers active]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.MasterDocumentExternalUnfoldManager">
            <summary>
            Gets the master document external unfold manager.
            </summary>
            <value>
            The master document external unfold manager.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.MasterDocumentInternalUnfoldManager">
            <summary>
            Gets the master document internal unfold manager.
            </summary>
            <value>
            The master document internal unfold manager.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.MasterDocumentValueInfo">
            <summary>
            Gets the master document value information.
            </summary>
            <value>
            The master document value information.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.ActivateAndUnfoldMutablePropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <summary>
            Activates the and unfold mutable property triggers.
            </summary>
            <param name="property">The property.</param>
            <exception cref="T:System.InvalidOperationException">Attempt to activate a MutablePropertyTriggerManager that is already activated.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.AddExternalEvent(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Adds the external event.
            </summary>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.AddInternalEvent(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Adds the internal event.
            </summary>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.CreateAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Transition to attached node state.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The node state as attached.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.FoldMutablePropertyTriggersAndMarkAsInactive(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <summary>
            Folds the mutable property triggers and mark as inactive.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.GetSnapshotValueInfoMultiplexor">
            <summary>
            Gets the snapshot value info multiplexor.
            </summary>
            <returns>The multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.GetValueMultiplexor">
            <summary>
            Gets the value multiplexor.
            </summary>
            <returns>The value multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.HasChanged(System.Boolean)">
            <summary>
            Determines whether the value of the property has changed for the current document view.
            This is used for document state (web player state).
            </summary>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns>
              <c>true</c>, if the value has changed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.ReactToDetachOfReferencedNode(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Reacts to detach of a referenced node.
            </summary>
            <param name="property">The property.</param>
            <param name="documentNode">The document node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.RemoveExternalEvent(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Removes the external event.
            </summary>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.RemoveInternalEvent(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Removes the internal event.
            </summary>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.SearchForValue(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.RestoreValiditySpan(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Restores the validity span.
            </summary>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.FoldMutablePropertyTriggers``1(Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableCrossReferenceViewPropertyNodeState,System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableCrossReferenceViewPropertyNodeState,System.Object},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,`0},System.Int32,Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="nodeState">State of the node.</param>
            <param name="unfoldManagersMapping">The unfold managers mapping.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.UnfoldMutablePropertyTriggers``1(Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableCrossReferenceViewPropertyNodeState,System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableCrossReferenceViewPropertyNodeState,System.Object},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,`0},System.Int32,`0,Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="nodeState">State of the node.</param>
            <param name="unfoldManagersMapping">The unfold managers mapping.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="value">The value.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.AddEvent``1(``0,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableCrossReferenceViewPropertyNodeState,System.Object},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,`0},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Adds the event.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
            <param name="unfoldManagersMapping">The unfold managers mapping.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.FoldMutablePropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <param name="property">The property.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.FoldMutablePropertyTriggers``1(System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableCrossReferenceViewPropertyNodeState,System.Object},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,`0},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="unfoldManagersMapping">The unfold managers mapping.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.GetValueInfo(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Gets the value info.
            </summary>
            <param name="documentView">The document view.</param>
            <returns>The value info.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.GetValueInfo">
            <summary>
            Gets the value info.
            </summary>
            <returns>The value info</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.RemoveEvent``1(``0,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableCrossReferenceViewPropertyNodeState,System.Object},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,`0},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Removes the event.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
            <param name="unfoldManagersMapping">The unfold managers mapping.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.TryGetValueMultiplexorOverride(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{`0}}@)">
            <summary>
            Tries to get the value multiplexor override.
            </summary>
            <param name="multiplexor">The multiplexor.</param>
            <returns><c>true</c>, if the multiplexor was found</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.UnfoldMutablePropertyTriggers``1(System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.State.ISharedUndoableCrossReferenceViewPropertyNodeState,System.Object},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,`0},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="unfoldManagersMapping">The unfold managers mapping.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferenceViewPropertyNodeState`1.UnfoldMutablePropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <param name="node">The node.</param>
            <param name="value">The value.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1">
            <summary>
            Represents the state of a Snapshot undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference view property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.valueMultiplexor">
            <summary>
            The value multiplexor
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="generation">The generation when the snapshot was taken.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferenceViewPropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1"/> class.
            </summary>
            <param name="sharedSnapshotUndoableCrossReferenceViewPropertyNodeState">State of the shared snapshot undoable cross reference view property node.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.GetValueInfo">
            <summary>
            Gets the value information.
            </summary>
            <returns>The value information.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.AddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.RemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.CreateSharedSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.SetSnapshotValueInfoMultiplexor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor}})">
            <summary>
            Sets the snapshot value info multiplexor.
            </summary>
            <param name="valueMux">The snapshot value info multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.UpdateValiditySpanInSnapshots(System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferenceViewPropertyNodeState`1.GetSingleViewValueInfo">
            <summary>
            Gets the single view value information.
            </summary>
            <returns>The value info.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyExceptionCreator">
            <summary>
            A helper class for creating exceptions with relevant error messages.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyExceptionCreator.AttemptToGetValue(Spotfire.Dxp.Framework.DocumentModel.InternalNodeState)">
            <summary>
            Creates an exception for attempts to get the value in an illegal state.
            </summary>
            <param name="internalNodeState">State of the internal node.</param>
            <returns>An invalid operation exception.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyExceptionCreator.AttemptToSetValue(Spotfire.Dxp.Framework.DocumentModel.InternalNodeState)">
            <summary>
            Creates an exception for attempts to set the value in an illegal state.
            </summary>
            <param name="internalNodeState">State of the internal node.</param>
            <returns>An invalid operation exception.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyExceptionCreator.AttemptToAddBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.InternalNodeState)">
            <summary>
            Creates an exception for attempts to add backwards pointers in an illegal state.
            </summary>
            <param name="internalNodeState">State of the internal node.</param>
            <returns>An invalid operation exception.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.UndoableCrossReferenceViewPropertyExceptionCreator.AttemptToRemoveBackwardsPointers(Spotfire.Dxp.Framework.DocumentModel.InternalNodeState)">
            <summary>
            Creates an exception for attempts to remove backwards pointers in an illegal state.
            </summary>
            <param name="internalNodeState">State of the internal node.</param>
            <returns>An invalid operation exception.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerArray">
            <summary>
            A class for manipulating arrays of snapshot nodes used in <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState"/>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerArray.AddOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner[],Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Adds a specified owner to the specified array of owners.
            </summary>
            <param name="owners">The owners to add to.</param>
            <param name="owner">The owner to add.</param>
            <returns>The resulting array of owners.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerArray.GetOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner[],System.Int32)">
            <summary>
            Gets the owner in the specified current generation.
            </summary>
            <param name="owners">The owners.</param>
            <param name="currentGeneration">The current thread generation.</param>
            <returns>The owner, or <c>null</c>, if there is no owner.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerArray.RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner[],Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Removes the specified owner from a specified list owners.
            </summary>
            <param name="owners">The owners.</param>
            <param name="owner">The owner to remove.</param>
            <returns>The resulting array of owners.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection">
            <summary>
            A collection of owners of a snapshot. This is stored in the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides"/> for sessions towards a shared document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.owners">
            <summary>
            The owners.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.isCurrent">
            <summary>
            A flag saying whether the youngest snapshot is a snapshot of the curent live node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection"/> class.
            </summary>
            <param name="owners">The owners.</param>
            <param name="isCurrent">if set to <c>true</c> [is current].</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.IsCurrent">
            <summary>
            Gets a value indicating whether the youngest snapshot is a snapshot of the live node.
            </summary>
            <value>
            <c>true</c> if this instance is current; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.Create(Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState)">
            <summary>
            Creates a snapshot owner collection from the specified shared snapshot node state.
            </summary>
            <param name="sharedSnapshotNodeState">State of the shared snapshot node.</param>
            <returns>The created snapshot owner collection.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.Add(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Adds the specified owner.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Removes the specified owner.
            </summary>
            <param name="owner">The owner to remove.</param>
            <returns><c>true</c>, if the snapshot should be disposed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.GetOwner(System.Int32)">
            <summary>
            Gets the owner in the specified current generation.
            </summary>
            <param name="currentGeneration">The current generation.</param>
            <returns>The owner in the specified generation.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.ReleaseAsCurrentSnapshot">
            <summary>
            Releases the sanpshot as the current snapshot.
            </summary>
            <returns><c>true</c>, if the snapshot should be disposed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotOwnerCollection.ShallBeDisposed">
            <summary>
            Determines whether the snapshot shall be disposed.
            </summary>
            <returns><c>true</c>, if the snapshot shall be disposed.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedNodeState">
            <summary>
            This class is used to represent the state in an attached node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState">
            <summary>
            This class is used to represent the state in an attached document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.internalEventManager">
            <summary>
            The internal event manager of the attached document node that corresponds to this instance.
            
            This field  may only be read and modiifed on the application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.eventTriggers">
            <summary>
            The triggers for internal and external events that are set up on the node 
            that is associated with this node state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory"></param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.GetInternalEventManager">
            <summary>
            Gets the internal event manager.
            </summary>
            <returns>The internal event manager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.AttachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.DetachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.AddChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Adds a child.
            </summary>
            <param name="child">The child to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.RemoveChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Removes a child.
            </summary>
            <param name="child">The child to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState">
            <summary>
            This class is used to represent the state in an attached undoable node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState.validitySpan">
            <summary>
            The validity span object of an attache undoable node.
            
            This field is assigned when the node is attached or if the corresponding undoable node 
            is modified. This happens on the application thread while holding the snapshot lock.
            
            The validity span is read on the application thread when a property is read. 
            
            It may also be read by any thread which takes a snapshot. That requires that the thread
            holds the snapshot lock.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState.changed">
            <summary>
            Determines if the property has been changed according to the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState.AsAttachedUndoableNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory"></param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState.ValiditySpan">
            <summary>
            The validity span object of the undoable node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState.RestoreValiditySpan(Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState.Changed">
            <summary>
            Gets and sets whether the undoable node is changed.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a Attached undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the AttachedUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the AttachedUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="sharedUndoableCrossReferencePropertyNodeState">The shared undoable cross reference property node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState`1.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory">The shared component factory</param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a New undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the NewUndoableCrossReferencePropertyNodeState class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.CreateConfiguringForRuntimeAttachNodeState">
            <summary>
            Used for state transition to ConfiguringForRuntimeAttach.
            </summary>
            <returns>The ConfiguringForRuntimeAttach node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.CreateConfiguringNodeState">
            <summary>
            Used for state transition to Configuring.
            </summary>
            <returns>The Configuring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableCrossReferencePropertyNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a Configuring undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the ConfiguringUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableCrossReferencePropertyNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a EnqueuedToBeAttached undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a EnqueuedToBeFrozen undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableCrossReferencePropertyNodeState`1.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a RuntimeAttached undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the RuntimeAttachedUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the RuntimeAttachedUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="sharedRuntimeAttachedUndoableCrossReferencePropertyNodeState">Shared version of this node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState`1.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates the state of the shared node.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The shared node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a Frozen undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the FrozenUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferencePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the FrozenUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="frozenUndoableCrossReferencePropertyNodeState">The frozen node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableCrossReferencePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the FrozenUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="frozenUndoableCrossReferencePropertyNodeState">The frozen state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a Reconfiguring undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the ReconfiguringUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferencePropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a Snapshot undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferencePropertyNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferencePropertyNodeState`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SnapshotUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="generation">The generation where the snapshot is taken..</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferencePropertyNodeState`1.CreateSharedSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates the state of the shared snapshot node.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The shared node snapshot node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a Detached undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the DetachedUndoableCrossReferencePropertyNodeState class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the DetachedUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.CreateEnqueuedToBeAttachedNodeState">
            <summary>
            Used for state transition to EnqueuedToBeAttached.
            </summary>
            <returns>The EnqueuedToBeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.CreateEnqueuedToBeFrozenNodeState">
            <summary>
            Used for state transition to EnqueuedToBeFrozen.
            </summary>
            <returns>The EnqueuedToBeFrozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableCrossReferencePropertyNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a Disposed undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableCrossReferencePropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the DisposedUndoableCrossReferencePropertyNodeState class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a ConfiguringForRuntimeAttach undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableCrossReferencePropertyNodeState`1.CreateRuntimeAttachedNodeState">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a Shared undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableCrossReferencePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the SharedUndoableCrossReferencePropertyNodeState class.
            </summary>
            <param name="attachedUndoableCrossReferencePropertyNodeState">The attached state to initialize the new instance from.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1.CreateAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Transition to attached node state.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The node state as attached.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableCrossReferencePropertyNodeState`1.RemoveSessionOverrides">
            <summary>
            Removes the session overrides.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a Attached undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the associated node.</param>
            <param name="previousState">The previous state to initialize this instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="sharedUndoablePropertyNodeState">The shared version of this node state..</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory">The shared component factory</param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a ConfiguringForRuntimeAttach undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the associated node.</param>
            <param name="previousState">The previous state to initialize this instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1.CreateRuntimeAttachedNodeState">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a Configuring undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the associated node.</param>
            <param name="previousState">The previous state to initialize this instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a Attached zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState{`0,`1})">
            <summary>
            Initializes a new instance of the AttachedUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableZombieCrossReferencePropertyNodeState`2.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory">The shared component factory</param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a New zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.#ctor">
            <summary>
            Initializes a new instance of the NewUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.CreateConfiguringForRuntimeAttachNodeState">
            <summary>
            Used for state transition to ConfiguringForRuntimeAttach.
            </summary>
            <returns>The ConfiguringForRuntimeAttach node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.CreateConfiguringNodeState">
            <summary>
            Used for state transition to Configuring.
            </summary>
            <returns>The Configuring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableZombieCrossReferencePropertyNodeState`2.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a Configuring zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState{`0,`1})">
            <summary>
            Initializes a new instance of the ConfiguringUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableZombieCrossReferencePropertyNodeState`2.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableZombieCrossReferencePropertyNodeState`2.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a EnqueuedToBeAttached zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState{`0,`1})">
            <summary>
            Initializes a new instance of the EnqueuedToBeAttachedUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableZombieCrossReferencePropertyNodeState`2.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a EnqueuedToBeFrozen zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState{`0,`1})">
            <summary>
            Initializes a new instance of the EnqueuedToBeFrozenUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableZombieCrossReferencePropertyNodeState`2.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a RuntimeAttached zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.snapshotZombie">
            <summary>
            The Zombie object of the associated zombie cross reference, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState{`0,`1})">
            <summary>
            Initializes a new instance of the RuntimeAttachedUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableZombieCrossReferencePropertyNodeState{`0,`1},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the FrozenUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="previousState">The previous state to initialize the new instance from.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a Frozen zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState{`0,`1})">
            <summary>
            Initializes a new instance of the FrozenUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoableZombieCrossReferencePropertyNodeState{`0,`1},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the FrozenUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="previousState">The previous state to initialize the new instance from.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoableZombieCrossReferencePropertyNodeState`2.CreateSharedFrozenNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates the state of the shared frozen node.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a Reconfiguring zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState{`0,`1})">
            <summary>
            Initializes a new instance of the ReconfiguringUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableZombieCrossReferencePropertyNodeState`2.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a Snapshot zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableZombieCrossReferencePropertyNodeState`2.snapshotZombie">
            <summary>
            The Zombie object of the associated zombie cross reference, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableZombieCrossReferencePropertyNodeState`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SnapshotUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="generation">The generation where the snapshot is taken..</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a Detached zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2.#ctor">
            <summary>
            Initializes a new instance of the DetachedUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState{`0,`1})">
            <summary>
            Initializes a new instance of the DetachedUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2.CreateEnqueuedToBeAttachedNodeState">
            <summary>
            Used for state transition to EnqueuedToBeAttached.
            </summary>
            <returns>The EnqueuedToBeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2.CreateEnqueuedToBeFrozenNodeState">
            <summary>
            Used for state transition to EnqueuedToBeFrozen.
            </summary>
            <returns>The EnqueuedToBeFrozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableZombieCrossReferencePropertyNodeState`2.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a Disposed zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableZombieCrossReferencePropertyNodeState`2.#ctor">
            <summary>
            Initializes a new instance of the DisposedUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a ConfiguringForRuntimeAttach zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState{`0,`1})">
            <summary>
            Initializes a new instance of the ConfiguringForRuntimeAttachUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="owner">The owner of the node.</param>
            <param name="previousState">The previous state to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableZombieCrossReferencePropertyNodeState`2.CreateRuntimeAttachedNodeState">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a Shared zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableZombieCrossReferencePropertyNodeState`2.zombieHolder">
            <summary>
            The zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableZombieCrossReferencePropertyNodeState{`0,`1},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the SharedUndoableZombieCrossReferencePropertyNodeState class.
            </summary>
            <param name="attachedUndoableZombieCrossReferencePropertyNodeState">The attached state to initialize the new instance from.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableZombieCrossReferencePropertyNodeState`2.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a Detached undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the associated node.</param>
            <param name="previousState">The previous state to initialize this instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.CreateEnqueuedToBeAttachedNodeState">
            <summary>
            Used for state transition to EnqueuedToBeAttached.
            </summary>
            <returns>The EnqueuedToBeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.CreateEnqueuedToBeFrozenNodeState">
            <summary>
            Used for state transition to EnqueuedToBeFrozen.
            </summary>
            <returns>The EnqueuedToBeFrozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a Disposed undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoablePropertyNodeState`1.Singleton">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoablePropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoablePropertyNodeState`1"/> class.
            Prevents a default instance of the DisposedUndoablePropertyNodeState class from being created.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoablePropertyNodeState`1.Create">
            <summary>
            Creates an instance of the DisposedUndoablePropertyNodeState class.
            </summary>
            <returns>An instance of the DisposedUndoablePropertyNodeState class.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1">
            <summary>
            Represents the state of an EnqueuedToBeAttached undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the associated node.</param>
            <param name="previousState">The previous state to initialize this instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1">
            <summary>
            Represents the state of an EnqueuedToBeFrozen undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the associated node.</param>
            <param name="previousState">The previous state to initialize this instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a Frozen undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the associated node.</param>
            <param name="previousState">The previous state to initialize this instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="previousState">The previous state to initialize this instance from.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1.CreateSharedFrozenNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates the state of the shared frozen node.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The shared frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ISharedComponent">
            <summary>
            Implemeneted by all components that are replaced with a shared version when the document is set to state Shared.
            Also implemented by components that need to adapt to sharing by replacing some of its fields with shared equivalents.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ISharedComponent.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ISharedComponent.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ISharedComponent.RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a New undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.keyedCollectionListener">
            <summary>
            The keyed collection entry that reacts to changes of the associated undoable 
            property, or null if the owning node is not in a keyed collection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.KeyedCollectionListener">
            <summary>
            Sets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.CreateConfiguringForRuntimeAttachNodeState">
            <summary>
            Used for state transition to ConfiguringForRuntimeAttach.
            </summary>
            <returns>The ConfiguringForRuntimeAttach node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.CreateConfiguringNodeState">
            <summary>
            Used for state transition to Configuring.
            </summary>
            <returns>The Configuring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachNodeState">
            <summary>
            Used to represent the state of a node that is configured for runtime attach.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachNodeState.visited">
            <summary>
            A flag which records whether the node associated with this node state has been visited
            during configuration
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachNodeState.CreateRuntimeAttachedNodeState">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachDocumentNodeState">
            <summary>
            Used to represent the state of a document node that is configured for runtime attach.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachDocumentNodeState.CreateRuntimeAttachedNodeState">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachDocumentNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableNodeState">
            <summary>
            Used to represent the state of a document node that is configured for runtime attach.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableNodeState.CreateRuntimeAttachedNodeState">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringForRuntimeAttachUndoableNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringNodeState">
            <summary>
            Used to represent the state of a configuring node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringNodeState.visited">
            <summary>
            A flag which records whether the node associated with this node state has been visited
            during configuration
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringNodeState.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState">
            <summary>
            Used to represent the state of a configuring document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState.AddChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Adds a child.
            </summary>
            <param name="child">The child to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState.RemoveChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Removes a child.
            </summary>
            <param name="child">The child to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableNodeState">
            <summary>
            Used to represent the state of a configuring undoable node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableNodeState.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ConfiguringUndoableNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedNodeState">
            <summary>
            Used to represent the state of a detached node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedNodeState.CreateEnqueuedToBeAttachedNodeState">
            <summary>
            Used for state transition to EnqueuedToBeAttached.
            </summary>
            <returns>The EnqueuedToBeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedNodeState.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedNodeState.CreateEnqueuedToBeFrozenNodeState">
            <summary>
            Used for state transition to EnqueuedToBeFrozen.
            </summary>
            <returns>The EnqueuedToBeFrozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedDocumentNodeState">
            <summary>
            Used to represent the state of a detached document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedDocumentNodeState.children">
            <summary>
            A list of children of the document node that is associated to this state.
            
            Elements are added to the list when the document node deserializes properties in its deserialization constructor.
            Note this is only necessary because the detached state is used too broadly.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.DetachedDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedDocumentNodeState.CreateEnqueuedToBeAttachedNodeState">
            <summary>
            Used for state transition to EnqueuedToBeAttached.
            </summary>
            <returns>The EnqueuedToBeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedDocumentNodeState.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedDocumentNodeState.CreateEnqueuedToBeFrozenNodeState">
            <summary>
            Used for state transition to EnqueuedToBeFrozen.
            </summary>
            <returns>The EnqueuedToBeFrozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedDocumentNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableNodeState">
            <summary>
            Used to represent the state of a detached undoable node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableNodeState.CreateEnqueuedToBeAttachedNodeState">
            <summary>
            Used for state transition to EnqueuedToBeAttached.
            </summary>
            <returns>The EnqueuedToBeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableNodeState.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableNodeState.CreateEnqueuedToBeFrozenNodeState">
            <summary>
            Used for state transition to EnqueuedToBeFrozen.
            </summary>
            <returns>The EnqueuedToBeFrozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DetachedUndoableNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedNodeState">
            <summary>
            Used to represent the state of a disposed node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DisposedNodeState.Owner">
            <summary>
            Returns null. A node in state Disposed has no owner.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DisposedNodeState.SnapshotInfo">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#ReleaseAsCurrentSnapshot(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#AddOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#GetOwner(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.DisposedNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#Generation">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.DisposedNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#IsSnapshotOfLive">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedDocumentNodeState">
            <summary>
            Used to represent the state of a disposed document node.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.DisposedUndoableNodeState">
            <summary>
            Used to represent the state of a disposed undoable node.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedNodeState">
            <summary>
            This class is used to represent the state in a node that is enqueued to be attached.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedNodeState.encountered">
            <summary>
            Used to record that the node has been encountered in the algorithm which computes non overlapping sub trees
            when a set of trees are attached by undo or redo.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedDocumentNodeState">
            <summary>
            This class is used to represent the state in a document node that is enqueued to be attached.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedDocumentNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedDocumentNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedDocumentNodeState.AddChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Adds a child.
            </summary>
            <param name="child">The child to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedDocumentNodeState.RemoveChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Removes a child.
            </summary>
            <param name="child">The child to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableNodeState">
            <summary>
            This class is used to represent the state in an undoable node that is enqueued to be attached.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeAttachedUndoableNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenNodeState.encountered">
            <summary>
            Used to record that the node has been encountered in the algorithm which computes non overlapping sub trees
            when a set of trees are attached by undo or redo.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenNodeState.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenDocumentNodeState.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenDocumentNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableNodeState.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.EnqueuedToBeFrozenUndoableNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenNodeState.MasterDocumentOwner">
            <summary>
            Gets the owner in the master document, ignoring session overrides.
            </summary>
            <value>
            The owner in the master document.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenNodeState.CreateFrozenNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Attached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The Attached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.FrozenNodeState">
            <summary>
            Represents the state in a frozen node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
            <returns>The cross reference list.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.FrozenDocumentNodeState">
            <summary>
            Represents the state in a frozen document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.FrozenDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.FrozenDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.FrozenDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.NewNodeState">
            <summary>
            Represents the state of a new node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewNodeState.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewNodeState.CreateConfiguringNodeState">
            <summary>
            Used for state transition to Configuring.
            </summary>
            <returns>The Configuring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewNodeState.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewNodeState.CreateConfiguringForRuntimeAttachNodeState">
            <summary>
            Used for state transition to ConfiguringForRuntimeAttach.
            </summary>
            <returns>The ConfiguringForRuntimeAttach node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState">
            <summary>
            Represents the state of a new node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.children">
            <summary>
            A list of children of the document node that is associated to this state.
            
            Elements are added to the list when the document node creates properties in its constructor or when it deserializes
            a property in its deserialization constructor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.CreateConfiguringNodeState">
            <summary>
            Used for state transition to Configuring.
            </summary>
            <returns>The Configuring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.CreateConfiguringForRuntimeAttachNodeState">
            <summary>
            Used for state transition to ConfiguringForRuntimeAttach.
            </summary>
            <returns>The ConfiguringForRuntimeAttach node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableNodeState">
            <summary>
            Represents the state of a new undoable node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableNodeState.CreateConfiguringNodeState">
            <summary>
            Used for state transition to Configuring.
            </summary>
            <returns>The Configuring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableNodeState.CreateReconfiguringNodeState">
            <summary>
            Used for state transition to Reconfiguring.
            </summary>
            <returns>The Reconfiguring node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableNodeState.CreateConfiguringForRuntimeAttachNodeState">
            <summary>
            Used for state transition to ConfiguringForRuntimeAttach.
            </summary>
            <returns>The ConfiguringForRuntimeAttach node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableNodeState.CreateFrozenNodeState">
            <summary>
            Used for state transition to Frozen.
            </summary>
            <returns>The Frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NewUndoableNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.InternalNodeState">
            <summary>
            Gets the internal node state.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.NodeType">
            <summary>
            Gets the type of the node associated to this instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsSnapshotNodeState">
            <summary>
            Gets this instance casted to SnapshotNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsSharedSnapshotNodeState">
            <summary>
            Gets this instance casted to SnapshotNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsSnapshotUndoableNodeState">
            <summary>
            Gets this instance casted to SnapshotUndoableNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsAttachedNodeState">
            <summary>
            Gets this instance casted to AttachedNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsAttachedUndoableNodeState">
            <summary>
            Gets this instance casted to AttachedUndoableNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsAttachedDocumentNodeState">
            <summary>
            Gets this instance casted to AttachedDocumentNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsDetachedNodeState">
            <summary>
            Gets this instance casted to DetachedNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsDetachedDocumentNodeState">
            <summary>
            Gets this instance casted to DetachedDocumentNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsRuntimeAttachedNodeState">
            <summary>
            Gets this instance casted to RuntimeAttachedNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsRuntimeAttachedDocumentNodeState">
            <summary>
            Gets this instance casted to RuntimeAttachedDocumentNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsRuntimeAttachedDocumentNodeSubtreeRootState">
            <summary>
            Gets this instance casted to RuntimeAttachedDocumentNodeSubtreeRootState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsFrozenNodeState">
            <summary>
            Gets this instance casted to FrozenNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsFrozenDocumentNodeState">
            <summary>
            Gets this instance casted to FrozenDocumentNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsNewNodeState">
            <summary>
            Gets this instance casted to NewNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsNewDocumentNodeState">
            <summary>
            Gets this instance casted to NewDocumentNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsConfiguringForRuntimeAttachNodeState">
            <summary>
            Gets this instance casted to ConfiguringForRuntimeAttachNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsConfiguringForRuntimeAttachDocumentNodeState">
            <summary>
            Gets this instance casted to ConfiguringForRuntimeAttachDocumentNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsConfiguringNodeState">
            <summary>
            Gets this instance casted to ConfiguringNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsConfiguringDocumentNodeState">
            <summary>
            Gets this instance casted to ConfiguringDocumentNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsReconfiguringNodeState">
            <summary>
            Gets this instance casted to ReconfiguringNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsReconfiguringDocumentNodeState">
            <summary>
            Gets this instance casted to ReconfiguringDocumentNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsEnqueuedToBeAttachedNodeState">
            <summary>
            Gets this instance casted to EnqueuedToBeAttachedNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsEnqueuedToBeFrozenNodeState">
            <summary>
            Gets this instance casted to EnqueuedToBeFrozenNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsDisposedNodeState">
            <summary>
            Gets this instance casted to DisposedNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsSharedUndoableNodeState">
            <summary>
            Gets this instance casted to SharedUndoableNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsSharedRuntimeAttachedNodeState">
            <summary>
            Gets this instance casted to SharedRuntimeAttachedNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsSharedNodeState">
            <summary>
            Gets this instance casted to SharedNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AsSharedFrozenNodeState">
            <summary>
            Gets this instance casted as SharedFrozenNodeState.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.Owner">
            <summary>
            Gets the node owner.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AddOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Adds the specified owner.
            </summary>
            <param name="owner">The owner to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Removes the specified owner.
            </summary>
            <param name="owner">The owner to remove.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.OwnerCount">
            <summary>
            Gets the owner count of a runtime attached sub tree.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
            <returns>The cross reference list.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.GetReferringNodes">
            <summary>
            Gets the nodes that refer to this node.
            </summary>
            <returns>The nodes that refer to this node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.GetZombieCrossReferencesThatReferenceThisNode``2">
            <summary>
            Get zombie cross references that reference this node.
            </summary>
            <typeparam name="TNode">The node type.</typeparam>
            <typeparam name="TZombie">The zombie type.</typeparam>
            <returns>The zombie cross references that reference this node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AddBackwardsPointerToCrossReference(Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBaseCrossReference)">
            <summary>
            Add a backwards pointer to a cross reference.
            </summary>
            <param name="crossReference">The cross reference</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.RemoveBackwardsPointerToCrossReference(Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBaseCrossReference,System.String)">
            <summary>
            Remove a backwards pointer to a cross reference.
            </summary>
            <param name="crossReference">The cross reference</param>
            <param name="nodeTypeName">The type of the node for error message purposes.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.ValidateNoBackwardsPointersToCrossReferences(System.String)">
            <summary>
            Validate that there are no backwards pointers to cross refrerences.
            </summary>
            <param name="nodeTypeName">The type of the node for error message purposes.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.NotifyCrossReferencesThatNodeIsGoingToDetach(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Notifies cross references that node is going to detach.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.ValidateNoCrossReferencesDuringDispose(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Validate that there are no cross references to me during dispose.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.EventTriggers">
            <summary>
            Gets the event triggers, or null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.HasEventTriggers">
            <summary>
            Gets a value indicating if this instance has any event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.ValiditySpan">
            <summary>
            Gets or sets the validity span.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.ValidateNoEventTriggers(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Validates that there are no event triggers on the specified node.
            </summary>
            <param name="documentNode">The document node that should not have any triggers.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild})">
            <summary>
            Applies the specified action to all children of the associated node.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.ForEachManagedChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <summary>
            Applies the specified action to all node children of the associated node.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AddChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Adds a child.
            </summary>
            <param name="child">The child to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.RemoveChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Removes a child.
            </summary>
            <param name="child">The child to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.ForEachNotPersistedProperty(System.Action{Spotfire.Dxp.Framework.DocumentModel.INotPersistedProperty})">
            <summary>
            Applies the specified action to all non-node children of the associated node.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AddNotPersistedProperty(Spotfire.Dxp.Framework.DocumentModel.INotPersistedProperty)">
            <summary>
            Adds a not persisted property.
            </summary>
            <param name="notPersistedProperty">The not persisted property to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.GetKeyedCollectionListenerForUndobaleProperty``1(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{``0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property, or null.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.SnapshotInfo">
            <summary>
            Gets the snapshot information.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.IsSnapshot">
            <summary>
            Gets a value indicating whether this is a snapshot.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.TearDownEventHandlers">
            <summary>
            Tears down all event handlers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.AttachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Attaches the document view.
            </summary>
            <param name="documentView">The document view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.DetachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Detaches the document view.
            </summary>
            <param name="documentView">The document view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.CreateSharedFrozenNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to SharedFrozen.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The shared frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.GetInternalEventManager">
            <summary>
            Gets the internal event manager.
            </summary>
            <returns>The internal event manager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.LimitGenerationUsedByRuntimeProperty">
            <summary>
            This method is called whenever reading from a mutable property with the exception
            of highlight properties which cannot be read by runtime properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.NodeState.UpdateValiditySpanInSnapshots(System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Updates the validity span for the specified <paramref name="documentViewKey"/> in snapshots created
            in the specified <paramref name="snapshotGeneration"/> or later.
            </summary>
            <param name="snapshotGeneration">The snapshot generation.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
            <returns><c>true, if the validty span was updated.</c></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringNodeState">
            <summary>
            Used to represent the state of a configuring node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringNodeState.visited">
            <summary>
            A flag which records whether the node associated with this node state has been visited
            during configuration
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState">
            <summary>
            Used to represent the state of a configuring document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState.AddChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Adds a child.
            </summary>
            <param name="child">The child to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState.RemoveChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Removes a child.
            </summary>
            <param name="child">The child to remove.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState.EventTriggers">
            <summary>
            Returns the EventTriggers. They must be available in Reconfiguring since 
            MutablePropertyTriggers are activated and unfolded in the Reconfiguring subtree.
            (This override fixes bug #48138)
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableNodeState">
            <summary>
            Used to represent the state of a reconfiguring undoable node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableNodeState.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoableNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a Reconfiguring undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the associated node.</param>
            <param name="previousState">The previous state to initialize this instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1.CreateAttachedNodeState">
            <summary>
            Used for state transition to Attached.
            </summary>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ReconfiguringUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedNodeState">
            <summary>
            This class is used to represent the state of a runtime attached node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedNodeState.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Shared.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The Shared node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedNodeState.RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Removes the specified owner.
            </summary>
            <param name="owner">The owner to remove.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeState">
            <summary>
            This class is used to represent the state of a runtime attached document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableNodeState">
            <summary>
            This class is used to represent the state of a runtime attached undoable node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeSubtreeRootState">
            <summary>
            This class is used to represent the state of the top node in a runtime attached subtree.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeSubtreeRootState.owners">
            <summary>
            The runtime property values that owns the runtime attached subtree.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeSubtreeRootState.OwnerCount">
            <summary>Gets the number of owners for the runtime attached subtree.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a RuntimeAttached undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="owner">The owner of the associated node.</param>
            <param name="previousState">The previous state to initialize this instance from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="sharedRuntimeAttachedUndoablePropertyNodeState">Shared version of this node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1.CreateSharedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates the shared version of the node state.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The shared node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory">
            <summary>
            Creates shared versions of components in the document model framework.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory.toShared">
            <summary>
            Indicates if the shared component factory should create shared equivalents or vice versa.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory.sharedComponents">
            <summary>
            Maps components to their shared equivalents.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory.deferredAssignments">
            <summary>
            Maps components to assignment delegates that shall consume the shared equivalent of the component upon its creation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory.deferredCalls">
            <summary>
            The list of deferred calls.
            </summary>
            <remarks>Link list to avoid consecutive memory allocation that exists in the List, Stack implementations.</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory.depth">
            <summary>
            The recursion depth.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory"/> class.
            </summary>
            <param name="toShared">Indicates if the shared component factory should create shared equivalents or vice versa.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory.IsToShared">
            <summary>
            Gets a value indicating whether the shared component factory should create shared equivalents.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory.Run">
            <summary>
            Executes the pending jobs.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory.Get``1(``0,System.Action{``0})">
            <summary>
            Gets the shared equivalent of the specified component and (lazily) calls the specified assignment delegate.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="component">The component.</param>
            <param name="assignment">The assignemnt delegate that will be called with the shared equivalent of the component.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2">
            <summary>
            A dictionary shared by concurrent sessions in the WebPlayer.
            Wraps a dictionary and handles session overrides of removed, added and replaced entries.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.wrapped">
            <summary>
            The wrapped dictionary containing the default entries shared by all sessions. 
            This dictionary is never modified.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.comparer">
            <summary>
            The equality comparer to use.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.
            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                -or-
                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                -or-
                Type cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.
            </param><param name="value">The object to use as the value of the element to add.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.
            </param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.RemoveSessionOverrides">
            <summary>
            Removes the overrides for the current session.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.GetDeltaForModification">
            <summary>
            Gets the delta in for the caller to modify. If there is no current delta, a new one is created.
            </summary>
            <returns>The delta.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.TryGetDeltaForInspection(Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary{`0,`1}.Delta@)">
            <summary>
            Tries to get the delta for the caller to inspect.
            </summary>
            <param name="delta">The delta, or null.</param>
            <returns>true is a delta is found, otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta">
            <summary>
            Hold the changes made by the session to the shared dictionary.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.added">
            <summary>
            Entries that have been added or overwritten in the session.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.removed">
            <summary>
            Entries in the wrapped map that has been removed in the session.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.comparer">
            <summary>
            The equality comparer.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta"/> class.
            </summary>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.Count">
            <summary>
            Gets the count of entries in the delta, that is, the count of added minus the count of removed elements.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.AddAdded(`0,`1)">
            <summary>
            Adds an added dictionary entry to the delta.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.AddRemoved(`0)">
            <summary>
            Adds the specified key to the set of removed keys. Returns true if the key was added.
            </summary>
            <param name="key">The key to add.</param>
            <returns>True if the key was added, that is, the key was not already in the set.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.GetAddedEnumerator">
            <summary>
            Gets the enumerator for the added elements.
            </summary>
            <returns>Get added elements enumerator.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.IsRemovedOrOverwritten(`0)">
            <summary>
            Determines if the entry with the specified key is removed or overwritten in the session.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>True if the entry is removed or overwritten.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.RemoveAdded(`0)">
            <summary>
            Removes an added dictionary entry from the delta.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>True if the entry was removed from the delta.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.SetAdded(`0,`1)">
            <summary>
            Sets the value for an added entry in the delta
            </summary>
            <param name="key">The key of the entry</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.TryGetAdded(`0,`1@)">
            <summary>
            Tries to get an added entry from the delta.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns>True if the entry was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDictionary`2.Delta.GetOrCreateAddedDictionary">
            <summary>
            Gets or creates the added dictionary if it doesn't exists.
            </summary>
            <returns>The added dictionary.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState">
            <summary>
            This class is used to represent the state in an attached document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.eventTriggers">
            <summary>
            The triggers for internal and external events that are set up on the node 
            that is associated with this node state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.internalEventManager">
            <summary>
            The internal event manager of the attached document node that corresponds to this instance.
            This field may only be read and modified on the application thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.AttachedDocumentNodeState,System.Collections.Generic.IList{Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBaseCrossReference},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState"/> class.
            </summary>
            <param name="attachedDocumentNodeState">The attached node state to initialize the new instance from.</param>
            <param name="crossReferencesThatReferenceMe">The nodes that references the associated node.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.EventTriggers">
            <summary>
            Gets the event triggers, or null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.HasEventTriggers">
            <summary>
            Gets a value indicating whether this instance has any event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.InternalEventManager">
            <summary>
            Gets the internal event manager.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.NodeType">
            <summary>
            Gets the type of the node associated to this instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.Children">
            <summary>
            Gets or sets an array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.CreateAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Attached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild})">
            <summary>
            Applies the specified action to all children of the associated node.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.AddChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Adds a child.
            </summary>
            <param name="child">The child to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.RemoveChild(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild)">
            <summary>
            Removes a child.
            </summary>
            <param name="child">The child to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.GetInternalEventManager">
            <summary>
            Gets the internal event manager.
            </summary>
            <returns>The internal event manager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.GetDocumentNodeChildCount">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.TearDownEventHandlers">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.ValidateNoEventTriggers(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Validates that there are no event triggers on the specified node.
            </summary>
            <param name="documentNode">The document node that should not have any triggers.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.AttachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.DetachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
            <returns>The cross reference list.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a shared frozen undoable property.
            </summary>
            <typeparam name="T">The type of the value of the undpable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.FrozenUndoablePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="previousState">The previous state to initialize this instance from.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.MasterDocumentValue">
            <summary>
            Gets the value in the master document, ignoring session overrides.
            </summary>
            <value>
            The value in the master document.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.MasterDocumentMutablePropertyTriggerManager">
            <summary>
            Gets the MutablePropertyTriggerManager in the master document, ignoring session overrides.
            </summary>
            <value>
            The MutablePropertyTriggerManager in the master document.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.CreateFrozenNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates the state of the frozen node.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The frozen node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedFrozenUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1">
            <summary>Represents a shared list that may have a list of shared values.
            </summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.sharedValues">
            <summary>
            The shared singleton value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.#ctor(System.Collections.Generic.IList{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1"/> class.
            </summary>
            <param name="values">The elements in the shared list. Can be null.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException">When accessing.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.
            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type T cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
            <exception cref="T:System.NotImplementedException">When accessing.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.
            </param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.
            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
            <exception cref="T:System.NotImplementedException">When accessing.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.GetDeltaForModification">
            <summary>
            Gets the delta in for the caller to modify. If there is no current delta, a new one is created.
            </summary>
            <returns>The delta.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.TryGetDeltaForInspection(Spotfire.Dxp.Framework.DocumentModel.State.SharedList{`0}.Delta@)">
            <summary>
            Tries to get the delta for the caller to inspect.
            </summary>
            <param name="delta">The delta, or null.</param>
            <returns>true is a delta is found, otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Delta">
            <summary>
            Hold the changes made by the session to the shared singleton list.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Delta.sessionElements">
            <summary>
            The session element changes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Delta.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Delta"/> class.
            </summary>
            <param name="sharedElements">The shared elements; may be null.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedList`1.Delta.List">
            <summary>
            Gets the list
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState">
            <summary>
            Represents the node state of a shared runtime attached document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.children">
            <summary>
            An array of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.crossReferencesThatReferenceMe">
            <summary>
            Cross reference that reference this node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.eventTriggers">
            <summary>
            The triggers for internal and external events that are set up on the node 
            that is associated with this node state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeState,System.Collections.Generic.IList{Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBaseCrossReference},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState"/> class.
            </summary>
            <param name="runtimeAttachedDocumentNodeState">The previous runtime attached document node state.</param>
            <param name="crossReferencesThatReferenceMe">The cross reference list.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.MasterDocumentCrossReferencesThatReferenceMe">
            <summary>
            Gets the CrossReferencesThatReferenceMe in the master document, ignoring session overrides.
            </summary>
            <value>
            The CrossReferencesThatReferenceMe in the master document.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.EventTriggers">
            <summary>
            Gets the event triggers, or null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.HasEventTriggers">
            <summary>
            Gets a value indicating whether this instance has any event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.NodeType">
            <summary>
            Gets the type of the node associated to this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.CreateRuntimeAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild})">
            <summary>
            Applies the specified action to all children of the associated node.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.ValidateNoEventTriggers(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Validates that there are no event triggers on the specified node.
            </summary>
            <param name="documentNode">The document node that should not have any triggers.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.ClearCrossReferenceList">
            <summary>
            Clear the cross reference list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeState.GetCrossReferenceList(System.Boolean)">
            <summary>
            Gets the cross reference list.
            </summary>
            <param name="create">True if the list will be modified by the caller. 
            It should be created if it does not exist.</param>
            <returns>The cross reference list.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeSubtreeRootState">
            <summary>
            Represents the shared runtime attached document node subtree root state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeSubtreeRootState.owners">
            <summary>
            The list of owners for this node state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeSubtreeRootState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedDocumentNodeSubtreeRootState,System.Collections.Generic.IList{Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBaseCrossReference},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeSubtreeRootState"/> class.
            </summary>
            <param name="runtimeAttachedDocumentNodeSubtreeRootState">The previous runtime attached document node subtree root state.</param>
            <param name="crossReferencesThatReferenceMe">The cross reference list.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeSubtreeRootState.Owner">
            <summary>
            Gets the node owner.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeSubtreeRootState.OwnerCount">
            <summary>Gets the number of owners for the runtime attached subtree.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeSubtreeRootState.AddOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Adds the specified owner.
            </summary>
            <param name="owner">The owner to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeSubtreeRootState.CreateRuntimeAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedDocumentNodeSubtreeRootState.RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Removes the specified owner.
            </summary>
            <param name="owner">The owner to remove.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState">
            <summary>
            Represents the shared runtime attached node state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.owner">
            <summary>
            The owner of this node state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedNodeState,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState"/> class.
            </summary>
            <param name="runtimeAttachedNodeState">The previous runtime attached node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.AsSharedRuntimeAttachedNodeState">
            <summary>
            Gets this instance casted to SharedRuntimeAttachedNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.InternalNodeState">
            <summary>
            Gets the internal node state.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.MasterDocumentOwner">
            <summary>
            Gets the master document owner.
            </summary>
            <value>
            The master document owner.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.Owner">
            <summary>
            Gets the node owner.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.AddOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Adds the specified owner.
            </summary>
            <param name="owner">The owner to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.CreateRuntimeAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState.RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Removes the specified owner.
            </summary>
            <param name="owner">The owner to remove.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the shared runtime attached undoable cross reference property node state.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1.value">
            <summary>
            The target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableCrossReferencePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1"/> class.
            </summary>
            <param name="runtimeAttachedUndoableCrossReferencePropertyNodeState">The previous runtime attached undoable cross reference property node state</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the mutable property trigger manager.
            </summary>
            <exception cref="T:System.InvalidOperationException">When trying to set the value.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>
            Gets or sets the snapshot multiplexor of the target node.
            </summary>
            <exception cref="T:System.InvalidOperationException">When trying to set the value.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <exception cref="T:System.InvalidOperationException">When trying to set the value.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableCrossReferencePropertyNodeState`1.CreateRuntimeAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableNodeState">
            <summary>
            Represent the shared runtime attached undoable node state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableNodeState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableNodeState,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableNodeState"/> class.
            </summary>
            <param name="runtimeAttachedUndoableNodeState">the previous runtime attached node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableNodeState.NodeType">
            <summary>
            Gets the type of the node associated to this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableNodeState.CreateRuntimeAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableNodeState.LimitGenerationUsedByRuntimeProperty">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1">
            <summary>
            Represents the shared runtime attached undoable property node state.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.keyedCollectionListener">
            <summary>
            The keyed collection entry that reacts to changes of the associated undoable 
            property, or null if the owning node is not in a keyed collection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoablePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="runtimeAttachedUndoablePropertyNodeState">The previous runtime attached undoable property node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.KeyedCollectionListener">
            <summary>
            Sets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.CreateRuntimeAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the shared runtime attached undoable zombie cross reference property node state.
            </summary>
            <typeparam name="TNode">The type of the value in the cross reference property</typeparam>
            <typeparam name="TZombie">The type of the zombie.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.snapshotZombie">
            <summary>
            The Zombie object of the associated zombie cross reference, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.RuntimeAttachedUndoableZombieCrossReferencePropertyNodeState{`0,`1},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2"/> class.
            </summary>
            <param name="runtimeAttachedUndoableZombieCrossReferencePropertyNodeState">The previous runtime attached undoable zombie cross reference property node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedUndoableZombieCrossReferencePropertyNodeState`2.CreateRuntimeAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to RuntimeAttached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The RuntimeAttached node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1">
            <summary>Represents a shared list that may have a singleton shared value.
            </summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.sharedValue">
            <summary>
            The shared singleton value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1"/> class.
            </summary>
            <param name="singletonValue">The singleton element in the shared list. This value can be null if the shared list was empty.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException">When accessing.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.
            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type T cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
            <exception cref="T:System.NotImplementedException">When accessing.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.
            </param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.
            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
            <exception cref="T:System.NotImplementedException">When accessing.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.GetDeltaForModification">
            <summary>
            Gets the delta in for the caller to modify. If there is no current delta, a new one is created.
            </summary>
            <returns>The delta.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.TryGetDeltaForInspection(Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList{`0}.Delta@)">
            <summary>
            Tries to get the delta for the caller to inspect.
            </summary>
            <param name="delta">The delta, or null.</param>
            <returns>true is a delta is found, otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Delta">
            <summary>
            Hold the changes made by the session to the shared singleton list.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Delta.sessionElements">
            <summary>
            The session element changes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Delta.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Delta"/> class.
            </summary>
            <param name="sharedElement">The shared element; may be null.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSingletonList`1.Delta.List">
            <summary>
            Gets the list
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState">
            <summary>
            This class is used to represent the state in an attached node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.owner">
            <summary>
            The owner of the shared node associated with this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.AttachedNodeState,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState"/> class.
            </summary>
            <param name="attachedNodeState">The attached node state to initialize the new instance from.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.AsSharedNodeState">
            <summary>
            Gets this instance casted to SharedNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.InternalNodeState">
            <summary>
            Gets the internal node state.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.Owner">
            <summary>
            Gets the node owner.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.MasterDocumentOwner">
            <summary>
            Gets the owner field.
            </summary>
            <value>
            The owner field.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.AddOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Adds the specified owner.
            </summary>
            <param name="owner">The owner to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.CreateAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Attached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Removes the specified owner.
            </summary>
            <param name="owner">The owner to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedNodeState.RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState">
            <summary>
            This class is used to represent the state in a snapshot document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState.children">
            <summary>
            A list of children of the document node that is associated to this state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SnapshotDocumentNodeState,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState"/> class.
            </summary>
            <param name="snapshotNodeState">The previous snapshot node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState.MasterDocumentChildren">
            <summary>
            Gets the children in the master document.
            </summary>
            <value>
            The children in the master document.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState.NodeType">
            <summary>
            Gets the type of the node associated to this instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState.Children">
            <summary>
            Gets or sets the children.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState.UnshareSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild})">
            <summary>
            Applies the specified action to all children of the associated node.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState.AddNullValueToChildren(Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState">
            <summary>
            This class is used to represent the state in a snapshot node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.generation">
            <summary>
            The generation in which the snapshot was created.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.owner">
            <summary>
            The shared owner.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState"/> class.
            </summary>
            <param name="snapshotNodeState">The previous snapshot node state.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.InternalNodeState">
            <summary>
            Gets the internal node state.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.AsSharedSnapshotNodeState">
            <summary>
            Gets this instance casted to SharedSnapshotNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.IsSnapshot">
            <summary>
            Gets a value indicating whether this is a snapshot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.Owner">
            <summary>
            Gets the node owner.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.SnapshotInfo">
            <summary>
            Gets the snapshot information.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#Generation">
            <summary>Gets the generation of the snapshot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.Generation">
            <summary>Gets the generation for this snapshot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.MasterDocumentOwner">
            <summary>
            Gets the owner in the master document, ignoring session overrides.
            </summary>
            <value>
            The owner in the master document.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.IsCurrent">
            <summary>
            Gets a value indicating whether this node is the current snapshot of the corresponding live node..
            </summary>
            <value>
            <c>true</c> if this instance is current; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.UnshareSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Unshares the state of the snapshot node.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The unshared state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.AddOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Adds the specified owner. 
            </summary>
            <param name="owner">The owner to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#AddOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Adds the specified owner.
            </summary>
            <param name="owner">The owner to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#GetOwner(System.Int32)">
            <summary>
            Gets the owner for the current thread generation.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <returns>The owner for the specified current thread generation.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#ReleaseAsCurrentSnapshot(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.Spotfire#Dxp#Framework#DocumentModel#State#ISnapshotInfo#IsSnapshotOfLive">
            <summary>True if this node is the snapshot of the live node. That is, the current snapshot.
            </summary>
            <returns>True if this node is the snapshot of the live node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.CreateSnapshotOwnerCollection">
            <summary>
            Creates a snapshot owner collection, based on the state of the node, withouit looking in the session overrides.
            </summary>
            <returns>The created snapshot owner collection.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.IsSnapshotOfLive">
            <summary>True if this node is the snapshot of the live node. That is, the current snapshot.
            </summary>
            <returns>True if this node is the snapshot of the live node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.GetOwner(System.Int32)">
            <summary>
            Gets the owner for the specified current thread generation.
            </summary>
            <param name="currentThreadGeneration">The current thread generation</param>
            <returns>The owner for the specified thread generation.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.ReleaseAsCurrentSnapshot(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Marks the snapshot node as not being the current snapshot.
            </summary>
            <param name="thisNode">The node that this is associated with.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState.DisposeSnapshotNode(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Called on a snapshot node when it is disposed.
            </summary>
            <param name="thisNode">The node that this is teh node state for.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferencePropertyNodeState`1">
            <summary>
            Represents the state of a Snapshot undoable cross reference property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable cross reference property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferencePropertyNodeState`1.snapshotMultiplexorOfTargetNode">
            <summary>The snapshot MUX of the target node. Used by nodes in state Snapshot and RuntimeAttached.
            If the live node had a non-null value, this field will be non-null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferencePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableCrossReferencePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferencePropertyNodeState`1"/> class.
            </summary>
            <param name="snapshotNodeState">The previous snapshot node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableCrossReferencePropertyNodeState`1.UnshareSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableNodeState">
            <summary>
            This class is used to represent the state in an snapshot undoable node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableNodeState.validitySpan">
            <summary>
            The validity span object of a snapshot undoable node.
            This field is assigned when the snapshot node is created and is thereafter never changed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableNodeState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableNodeState,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableNodeState"/> class.
            </summary>
            <param name="snapshotUndoableNodeState">The previous snapshot undoable node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableNodeState.NodeType">
            <summary>
            Gets the type of the node associated to this instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableNodeState.ValiditySpan">
            <summary>
            Gets or sets the validity span object of the undoable node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableNodeState.LimitGenerationUsedByRuntimeProperty">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableNodeState.UnshareSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a Snapshot undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="snapshotNodeState">The previous snapshot undoable property node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoablePropertyNodeState`1.UnshareSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableZombieCrossReferencePropertyNodeState`2">
            <summary>
            Represents the state of a Snapshot zombie cross reference undoable property.
            </summary>
            <typeparam name="TNode">The type of the target node.</typeparam>
            <typeparam name="TZombie">The type of the zombie representing the target node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableZombieCrossReferencePropertyNodeState`2.snapshotZombie">
            <summary>
            The Zombie object of the associated zombie cross reference, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableZombieCrossReferencePropertyNodeState`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableZombieCrossReferencePropertyNodeState{`0,`1},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableZombieCrossReferencePropertyNodeState`2"/> class.
            </summary>
            <param name="snapshotNodeState">The previous snapshot undoable zombie cross reference property node state.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Gets or sets the snapshot zombie. May only be called on snapshot nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Gets or sets the zombie holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoableZombieCrossReferencePropertyNodeState`2.UnshareSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState">
            <summary>
            This class is used to represent the state in an attached undoable node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.validitySpan">
            <summary>
            The validity span object of an attached undoable node.
            This field is assigned when the node is attached or if the corresponding undoable node 
            is modified. This happens on the application thread while holding the snapshot lock.
            The validity span is read on the application thread when a property is read. 
            It may also be read by any thread which takes a snapshot. That requires that the thread
            holds the snapshot lock.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoableNodeState,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState"/> class.
            </summary>
            <param name="attachedUndoableNodeState">The attached node state to initialize the new instance from.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.AsSharedUndoableNodeState">
            <summary>
            Gets this instance casted to SharedUndoableNodeState.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.Changed">
            <summary>
            Gets or sets a value indicating whether the undoable node is changed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.NodeType">
            <summary>
            Gets the type of the node associated to this instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.MasterDocumentValiditySpan">
            <summary>
            Gets the master document validity span.
            </summary>
            <value>
            The master document validity span.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.ValiditySpan">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.RestoreValiditySpan(Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.CreateAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Attached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoableNodeState.LimitGenerationUsedByRuntimeProperty">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a Shared undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.mutablePropertyTriggerManager">
            <summary>
            The trigger manager for mutable property triggers set up on the associated node, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.AttachedUndoablePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="attachedUndoablePropertyNodeState">The state to initialize this instance from.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.MasterDocumentMutablePropertyTriggerManager">
            <summary>
            Gets the master document mutable property trigger manager.
            </summary>
            <value>
            The master document mutable property trigger manager.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.MasterDocumentValue">
            <summary>
            Gets the master document value.
            </summary>
            <value>
            The master document value.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.CreateAttachedNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Used for state transition to Attached.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The Attached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.CreateDetachedNodeState">
            <summary>
            Used for state transition to Detached.
            </summary>
            <returns>The Detached node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SharedUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState">
            <summary>
            This class is used to represent the state in a snapshot node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState.Generation">
            <summary>Get generation for this snapshot.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState.GetSingletonOwner">
            <summary>
            Gets the only owner of this node. Only called when creating a shared snapshot state.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState.IsCurrent">
            <summary>true iff this node is the current snapshot of the corresponding live node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState.ReleaseAsCurrentSnapshot(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Marks the snapshot node as not being the current snapshot. Returns true
            if the snapshot node shall be disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState.DisposeSnapshotNode(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Called on a snapshot node when it is disposed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotNodeState.CreateSharedSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Create a shared snapshot node state from the current node state.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The node as shared snapshot node state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotDocumentNodeState">
            <summary>
            This class is used to represent the state in a snapshot document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotDocumentNodeState.children">
            <summary>
            A list of children of the document node that is associated to this state.
            
            Elements are added to the list when the document node is deserialized in the deserialization constructor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotDocumentNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotDocumentNodeState.AddNullValueToChildren(Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableNodeState">
            <summary>
            This class is used to represent the state in an snapshot undoable node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableNodeState.validitySpan">
            <summary>
            The validity span object of a snapshot undoable node.
            
            This field is assigned when the snapshot node is created and is thereafter never changed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableNodeState.AsSnapshotUndoableNodeState">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableNodeState.CreateDisposedNodeState">
            <summary>
            Used for state transition to Disposed.
            </summary>
            <returns>The Disposed node state.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoableNodeState.ValiditySpan">
            <summary>
            The validity span object of the undoable node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ISnapshotInfo.ReleaseAsCurrentSnapshot(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Marks the snapshot node as not being the current snapshot. Returns true
            if the snapshot node shall be disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ISnapshotInfo.RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner,Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Removes the specified owner and returns true if the snapshot node shall be disposed.
            </summary>
            <param name="owner">The owner to remove.</param>
            <param name="thisNode">The node that this state is for.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ISnapshotInfo.AddOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Adds the specified owner.
            </summary>
            <param name="owner">The owner to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ISnapshotInfo.GetOwner(System.Int32)">
            <summary>
            Gets the owner for the current thread generation.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <returns>The owner for the specified current thread generation.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.ISnapshotInfo.Generation">
            <summary>Gets the generation of the snapshot.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.ISnapshotInfo.IsSnapshotOfLive">
            <summary>True if this node is the snapshot of the live node. That is, the current snapshot.
            </summary>
            <returns>True if this node is the snapshot of the live node.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1">
            <summary>
            Represents the state of a Snapshot undoable property.
            </summary>
            <typeparam name="T">The type of the value  of the undoable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1.value">
            <summary>
            The value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="generation">The generation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotUndoablePropertyNodeState{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1"/> class.
            </summary>
            <param name="sharedSnapshotUndoablePropertyNodeState">State of the shared snapshot undoable property node.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1.CreateSharedSnapshotNodeState(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Transition to shared snapshot node state.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The shared snapshot node state.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.State.SnapshotUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ThreadSafeEventManager">
            <summary>
            A manager for thread safe events. This manager may be used to set up events when executing on a worker thread. The manager may also be disposed
            on a worker thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ThreadSafeEventManager.eventConnections">
            <summary>
            The event connections.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ThreadSafeEventManager.disposed">
            <summary>
            A flag indicating whether the manager has been disposed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ThreadSafeEventManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ThreadSafeEventManager"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ThreadSafeEventManager.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ThreadSafeEventManager.AddThreadSafeEventHandler(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>Adds a thread safe event handler which is called when any of the triggers fire.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers.</param>
            <remarks>The eventHandler will be invoked on the Application thread every time the triggers fire, even if
            runtime properties have not been read on the Application thread.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyMultiplexor">
            <summary>
            A class for manipulating a multiplexor of values for undoable cross reference view properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyMultiplexor.ReactToDetachOfReferencedNode``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{``0},Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Reacts to detach of a referenced node.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The values.</param>
            <param name="property">The property.</param>
            <param name="documentNode">The document node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyMultiplexor.AddBackwardsPointers``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{``0})">
            <summary>
            Adds the backwards pointers.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyMultiplexor.RemoveBackwardsPointers``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{``0})">
            <summary>
            Removes the backwards pointers.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The values.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyMultiplexor.CreateSnapshotValueInfoMultiplexor``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}})">
            <summary>
            Creates a snapshot value info multiplexor from the specified value info multiplexor.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueInfoMultiplexor">The value multiplexor.</param>
            <returns>The created multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyMultiplexor.SetValue``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{``0},``0,Spotfire.Dxp.Framework.Commands.DocumentViewKey,System.Boolean@)">
            <summary>
            Returns a new value multiplexor where the given value has been set for the given document view key.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="rootChanged">Will be set to true if the value for the root <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey"/> is changed.</param>
            <returns>
            An updated value multiplexor.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyMultiplexor.CreateRemoveAction``1(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{``0})">
            <summary>
            Creates an action that should be applied when a value info is removed from the multiplexor.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="property">The property.</param>
            <returns>
            The created action.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyMultiplexor.CreateAddAction``1(Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBaseCrossReference)">
            <summary>
            Creates an action that should be applied when a value is added to the multiplexor.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="property">The property.</param>
            <returns>The created action.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1">
            <summary>Manages a view property that owns its value and 
            where assignments to the property will be 
            recorded as undoable commands. 
            </summary>
            <remarks>
            The UndoableViewProperty class can be used 
            for basic values like strings and ints etc as well as any immutable object.
            Instances of classes deriving from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> may not be held by an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1"/>.
            <para>
            The content type for the property must be serializable. If this is not the case
            an <see cref="T:System.InvalidOperationException"/> will be thrown when
            an instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1"/> is created.
            </para>
            </remarks>
            <typeparam name="T">The type of the managed property.</typeparam>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.UndoableViewPropertyNodeState">
            <summary>
            Gets the node state casted to a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableViewPropertyNodeState`1"/>.
            </summary>
            <value>
            The node state.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.RestoreValiditySpan(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.GetChangedCore(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.ClearChangedFlagCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.CreateNodeState(Spotfire.Dxp.Framework.DocumentModel.InternalNodeState)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.CreateSnapshotNodeState(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.GetPropertyStateCore(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetPropertyStateCore(System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.GetValueMultiplexor">
            <summary>
            Gets the value multiplexor.
            </summary>
            <returns>The value multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.ExecuteSetCommand(`0,`0,Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Executes the set command.
            </summary>
            <param name="value">The value.</param>
            <param name="oldValue">The old value.</param>
            <param name="documentView">The document view.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand">
            <summary>
            The command class for undoable cross reference view properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.documentViewKeyId">
            <summary>
            The document view key id.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.oldValue">
            <summary>
            The old value of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.property">
            <summary>
            The target property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.#ctor(Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{`0},`0,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="oldValue">The old value.</param>
            <param name="documentViewKeyId">The document view key id.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.Execute">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.GetChangedProperty">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.Reexecute(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.Unexecute(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty`1.SetCommand.ChangeTargetValueDuringUndoRedo(`0)">
            <summary>
            Changes the target value during undo redo.
            </summary>
            <param name="valueToChangeTo">The value to change to.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyMultiplexor">
            <summary>
            A class for manipulating a multiplexor of values for undoable view properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyMultiplexor.SetValue``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.DocumentModel.UndoableViewProperty{``0},``0,Spotfire.Dxp.Framework.Commands.DocumentViewKey,System.Boolean@)">
            <summary>
            Returns a new value multiplexor where the given value has been set for the given document view key.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="rootChanged">Will be set to true if the value for the root <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey"/> is changed.</param>
            <returns>
            An updated value multiplexor.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyMultiplexor.DummyAction``1(``0)">
            <summary>
            A Dummy action that does nothing.
            </summary>
            <typeparam name="TEntry">The type of the entry.</typeparam>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyMultiplexor.CreateSnapshotValueInfoMultiplexor``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}})">
            <summary>
            Cretaes a snapshot value info multiplexor from the specified value info multiplexor.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueInfoMultiplexor">The value multiplexor.</param>
            <returns>The created multiplexor.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1">
            <summary>
            An entry in the web player state of an undoable view property.
            </summary>
            <typeparam name="T">The type of the values in the property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1.documentViewKeyId">
            <summary>
                The document view key identifier.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1.value">
            <summary>
                The value
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1.#ctor(System.Int32,`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1" /> class.
            </summary>
            <param name="documentViewKeyId">The document view key identifier.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1" /> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1.DocumentViewKeyId">
            <summary>
                Gets the document view key identifier.
            </summary>
            <value>
                The document view key identifier.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1.Value">
            <summary>
                Gets the value.
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableViewPropertyStateEntry`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler">
            <summary>
            Represents an internal event handler that should be set up when a new document view is added.
            </summary>
            TODO [jgustavs, 2015-06-17]: Should this class implement ISharedComponent?
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler.documentNode">
            <summary>
            The document node associated with the event hanlder.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler.internalEventHandler">
            <summary>
            The internal event handler.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler.triggers">
            <summary>
            The triggers associated with the event handler.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler.eventExecutionMode">
            <summary>
            The event execution mode for event handler.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.InternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[],Spotfire.Dxp.Framework.DocumentModel.InternalEventExecutionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler"/> class.
            </summary>
            <param name="documentNode">The document node.</param>
            <param name="internalEventHandler">The internal event handler.</param>
            <param name="triggers">The triggers.</param>
            <param name="eventExecutionMode">The event execution mode.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler.DocumentNode">
            <summary>
            Gets the document node associated with event handler.
            </summary>
            <value>
            The document node.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler.InternalEventHandler">
            <summary>
            Gets the internal event handler.
            </summary>
            <value>
            The internal event handler.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler.Triggers">
            <summary>
            Gets the triggers associated with the event handler..
            </summary>
            <value>
            The triggers.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler.EventExecutionMode">
            <summary>
            Gets the event execution mode.
            </summary>
            <value>
            The event execution mode.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandlerConnectionsMultiplexor">
            <summary>
            A class for methods on a view handler connections multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandlerConnectionsMultiplexor.DetachEventHandlers(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.Trigger[]}}})">
            <summary>
            Detaches the event handlers.
            </summary>
            <param name="viewEventHandlerConnectionsMultiplexor">The view event handler connections multiplexor.</param>
            <exception cref="T:System.InvalidOperationException">event handler connections has not been detached for all views</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandlerConnectionsMultiplexor.AttachEventHandlers(System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.Trigger[]}}})">
            <summary>
            Attaches the event handlers.
            </summary>
            <param name="viewEventHandlers">The view event handlers.</param>
            <param name="viewEventHandlerConnectionsMultiplexor">The view event handler connections multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandlerConnectionsMultiplexor.AttachDocumentView(System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.ViewEventHandler},Spotfire.Dxp.Framework.DocumentModel.DocumentView,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.Trigger[]}}})">
            <summary>
            Attaches the document view.
            </summary>
            <param name="viewEventHandlers">The view event handlers.</param>
            <param name="documentView">The document view.</param>
            <param name="viewEventHandlerConnectionsMultiplexor">The view event handler connections multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventHandlerConnectionsMultiplexor.DetachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.Trigger[]}}})">
            <summary>
            Detaches the document view.
            </summary>
            <param name="documentView">The document view.</param>
            <param name="viewEventHandlerConnectionsMultiplexor">The view event handler connections multiplexor.</param>
            <exception cref="T:System.InvalidOperationException">missing event handler connections for view when detaching view</exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay">
            <summary>
            Represents a view event relay. This is a kind of event relay that may depend on view propertis.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.dependencyDeclarer">
            <summary>
            The dependency declarer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.owner">
            <summary>
            The owning document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.propertyName">
            <summary>
            The property name associated with the event relay.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.trigger">
            <summary>
            The trigger
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.#ctor(Spotfire.Dxp.Framework.DocumentModel.SharedViewEventRelay,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay"/> class.
            </summary>
            <param name="sharedEventRelay">The shared event relay.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="dependencyDeclarer">The dependency declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.#ctor(Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay"/> class.
            </summary>
            <param name="eventRelay">The event relay.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Trigger">
            <summary>
            Gets or sets the trigger.
            </summary>
            <value>
            The trigger.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.AttachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Attaches the document view.
            </summary>
            <param name="documentView">The document view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.DetachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Detaches the document view.
            </summary>
            <param name="documentView">The document view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#Activate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ActivateForConfigureForRuntimeAttach">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidated(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidatedDuringConfigureForRuntimeAttach">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ReleaseValueManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.Spotfire#Dxp#Framework#DocumentModel#Triggers#IThreadSafeInvalidationTarget#OnInvalidationTriggerFired(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason,Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Unshares this instance.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The unshared instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.SetUpTriggers">
            <summary>
            Sets up triggers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewEventRelay.TearDownTriggers">
            <summary>
            Tears down triggers.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyFilteredUnfoldManagerMultiplexor">
            <summary>
            A filtered unfold manager multiplexor for view properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyFilteredUnfoldManagerMultiplexor.AddInvalidation``1(System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{``0}},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.DocumentView,Spotfire.Dxp.Framework.DocumentModel.IMutableProperty{``0},Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``0})">
            <summary>
            Adds the invalidation.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="filteredUnfoldManagers">The filtered unfold managers.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
            <param name="documentView">The document view.</param>
            <param name="mutableProperty">The mutable property.</param>
            <param name="target">The target.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyFilteredUnfoldManagerMultiplexor.RemoveInvalidation``1(System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{``0}},System.Boolean,Spotfire.Dxp.Framework.DocumentModel.DocumentView,Spotfire.Dxp.Framework.DocumentModel.IMutableProperty{``0},Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``0})">
            <summary>
            Removes the invalidation.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="filteredUnfoldManagers">The filtered unfold managers.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
            <param name="documentView">The document view.</param>
            <param name="mutableProperty">The mutable property.</param>
            <param name="target">The target.</param>
            <param name="declarer">The declarer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyFilteredUnfoldManagerMultiplexor.FoldMutablePropertyTriggers``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.Commands.DocumentViewKey,System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{``0}},System.Boolean)">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="values">The values.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="filteredUnfoldManagers">The filtered unfold managers.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyFilteredUnfoldManagerMultiplexor.FoldMutablePropertyTriggers``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{``0}})">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="values">The values.</param>
            <param name="filteredUnfoldManagers">The filtered unfold managers.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyFilteredUnfoldManagerMultiplexor.FoldMutablePropertyTriggers``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},System.Int32,Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{``0})">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="values">The values.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="filteredUnfoldManager">The filtered unfold manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyFilteredUnfoldManagerMultiplexor.UnfoldMutablePropertyTriggers``1(``0,Spotfire.Dxp.Framework.Commands.DocumentViewKey,System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{``0}},System.Boolean)">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="value">The value.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="filteredUnfoldManagers">The filtered unfold managers.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyFilteredUnfoldManagerMultiplexor.UnfoldMutablePropertyTriggers``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},System.Int32,Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{``0})">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="values">The values.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="filteredUnfoldManager">The filtered unfold manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyFilteredUnfoldManagerMultiplexor.UnfoldMutablePropertyTriggers``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.FilteredUnfoldManager{``0}})">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="values">The values.</param>
            <param name="filteredUnfoldManagers">The filtered unfold managers.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter">
            <summary>
            Represents a filter that blocks invalidations that does not originate from a specific document view.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.documentViewId">
            <summary>
            The id for the document view that filter should let pass. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.occurenceCount">
            <summary>
            The occurence count.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.target">
            <summary>
            The invalidation target
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.#ctor(System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter"/> class.
            </summary>
            <param name="documentViewId">The document view identifier.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.#ctor(Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter"/> class.
            </summary>
            <param name="triggerFilter">The trigger filter.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.OccurenceCount">
            <summary>
            Gets or sets the occurence count.
            </summary>
            <value>
            The occurence count.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.DecreaseOccurenceCount">
            <summary>
            Decreases the occurence count.
            </summary>
            <returns><c>true</c>, if the counter got to 0.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.IncreaseOccurenceCount">
            <summary>
            Increases the occurence count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.OnInvalidationTriggerFired(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason,Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Unshare this instance.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The unshared instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue">
            <summary>
            Represents a null value of a nullable property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue.validitySpan">
            <summary>
            The validity span.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue.propertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue.#ctor(Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan,Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue"/> class.
            </summary>
            <param name="validitySpan">The validity span.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue.ValiditySpan">
            <summary>
            Gets or sets the validity span.
            </summary>
            <value>
            The validity span.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue.AddToChildren(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild[],Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild[]@)">
            <summary>
            Adds the null value to the specified children.
            </summary>
            <param name="children">The children.</param>
            <param name="newChildren">The new children.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedViewPropertyInvalidationFilter">
            <summary>
            Represents a shared filter that blocks invalidations that does not originate from a specific document view.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedViewPropertyInvalidationFilter.#ctor(Spotfire.Dxp.Framework.DocumentModel.ViewPropertyInvalidationFilter,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedViewPropertyInvalidationFilter"/> class.
            </summary>
            <param name="triggerFilter">The trigger filter.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedViewPropertyInvalidationFilter.OccurenceCount">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedViewPropertyInvalidationFilter.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorArray">
            <summary>
            A class for manipulating arrays of snapshot nodes used in <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorArray"/>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorArray.GetNode(Spotfire.Dxp.Framework.DocumentModel.Node[],System.Int32)">
            <summary>
            Gets the snapshot node for the given current generation.
            </summary>
            <param name="snapshots">The snapshots to search.</param>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <returns>
            The snapshot node.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorArray.AddNode(Spotfire.Dxp.Framework.DocumentModel.Node[],Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Adds a snapshot node to the snapshots.
            </summary>
            <param name="snapshots">The snapshots.</param>
            <param name="node">The snapshot node to add.</param>
            <returns>The snapshot with the node added.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorArray.Remove(Spotfire.Dxp.Framework.DocumentModel.Node[],Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Removes the specified node from the snapshot array.
            </summary>
            <param name="snapshotArray">The snapshot array.</param>
            <param name="node">The node to remove.</param>
            <returns>The snapshot array when the node has been removed</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorArray.IsEmpty(Spotfire.Dxp.Framework.DocumentModel.Node[])">
            <summary>
            Determines whether the specified snapshots array is empty.
            </summary>
            <param name="snapshots">The snapshots.</param>
            <returns><c>true</c>, if the snapshot array is empty.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorArray.GetCurrentSnapshot(Spotfire.Dxp.Framework.DocumentModel.Node[])">
            <summary>
            Gets the current snapshot, if there is one.
            </summary>
            <param name="snapshots">The snapshots.</param>
            <returns>The current snapshot, if there is one, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorArray.AddNullValueToSnapshots(Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue,Spotfire.Dxp.Framework.DocumentModel.Node[])">
            <summary>
            Adds the specified nullValue to the specified snapshots.
            </summary>
            <param name="nullValue">The null value.</param>
            <param name="snapshots">The snapshots.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorArray.UpdateValiditySpanInSnapshots(Spotfire.Dxp.Framework.DocumentModel.Node[],System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Updates the validity span for the specified <paramref name="documentViewKey" /> in snapshots created
            in the specified <paramref name="snapshotGeneration" /> or later.
            </summary>
            <param name="snapshots">The snapshots to consider to update.</param>
            <param name="snapshotGeneration">The snapshot generation.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection">
            <summary>
            A collection of snapshots for a snapshotmuliplexor. This is stored in the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides"/> for sessions towards a shared document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.snapshots">
            <summary>An array of of snapshot nodes ordered so that younger snapshots (larger generation numbers)
            are placed after older snapshots (smaller generation numbers).
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.#ctor(Spotfire.Dxp.Framework.DocumentModel.Node[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection"/> class.
            </summary>
            <param name="snapshots">The snapshots.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.CreateOverride(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor)">
            <summary>
            Creates a snapshot multiplexor collection from the specified snapshot multiplexor.
            </summary>
            <param name="snapshotMultiplexor">The snapshot multiplexor.</param>
            <returns>The created snapshot multiplexor collection.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.AddNode(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Adds a snapshot node.
            </summary>
            <param name="node">The snapshot node to add..</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.Remove(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Removes the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.GetNode(System.Int32)">
            <summary>
            Gets the snapshot node for the given current generation.
            </summary>
            <param name="currentThreadGeneration">The current thread generation.</param>
            <returns>
            The snapshot node.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.GetCurrentSnapshot">
            <summary>
            Gets the current snapshot, if there is one.
            </summary>
            <returns>The current snapshot, if there is one, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns><c>true</c>, if it is empty</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.AddNullValueToSnapshots(Spotfire.Dxp.Framework.DocumentModel.NullableUndoablePropertyNullValue)">
            <summary>
            Adds the specified nullValue to the snapshots in this instance.
            </summary>
            <param name="nullValue">The null value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexorCollection.UpdateValiditySpanInSnapshots(System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Updates the validity span for the specified <paramref name="documentViewKey" /> in snapshots created
            in the specified <paramref name="snapshotGeneration" /> or later.
            </summary>
            <param name="snapshotGeneration">The snapshot generation.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1">
            <summary>
            Represents a shared master document.
            </summary>
            <typeparam name="T">The type of the root node.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1.masterGenerationNumber">
            <summary>
            The master generation number.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1.masterSnapshotDocument">
            <summary>
            The master snapshot document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1.masterLiveDocument">
            <summary>
            The master live document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument,Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterLiveDocument,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1"/> class.
            </summary>
            <param name="masterSnapshotDocument">The master snapshot document.</param>
            <param name="masterLiveDocument">The master live document.</param>
            <param name="masterGenerationNumber">The master generation number.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1.Create(`0,Spotfire.Dxp.Framework.Commands.CommandHistory)">
            <summary>
            Creates a master document.
            </summary>
            <param name="document">The document.</param>
            <param name="commandHistory">The command history.</param>
            <returns>The created master document.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocument`1.CreateCommandHistoryForSession(Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread,System.IServiceProvider,Spotfire.Dxp.Framework.Commands.DocumentViewManager)">
            <summary>
            Creates the command history for session that use the shared master document.
            </summary>
            <param name="applicationThread">The application thread.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="documentViewManager">The document view manager.</param>
            <returns>
            The created command history
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer">
            <summary>
            A class that manages the dispose of the resources help by a master document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer.commandHistory">
            <summary>
            The command history.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer.referenceCount">
            <summary>
            The reference count.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer.rootNode">
            <summary>
            The shared live root node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer.snapshotDocument">
            <summary>
            The shared snapshot document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer.#ctor(Spotfire.Dxp.Framework.Commands.CommandHistory,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer"/> class.
            </summary>
            <param name="commandHistory">The command history.</param>
            <param name="rootNode">The root node.</param>
            <param name="snapshotDocument">The snapshot document.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer.SnapshotDocument">
            <summary>
            Gets the snapshot document.
            </summary>
            <value>
            The snapshot document.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer.IncreaseReferenceCount">
            <summary>
            Increases the reference count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer.DecreaseReferenceCount">
            <summary>
            Decreases the reference count.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterLiveDocument">
            <summary>
            Represents teh master live document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterLiveDocument.referenceCount">
            <summary>
            The reference count
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterLiveDocument.masterDocumentDisposer">
            <summary>
            The master document disposer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterLiveDocument.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterLiveDocument.#ctor(Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterLiveDocument"/> class.
            </summary>
            <param name="masterDocumentDisposer">The master document disposer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterLiveDocument.IncreaseReferenceCount">
            <summary>
            Increases the reference count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterLiveDocument.DecreaseReferenceCount">
            <summary>
            Decreases the reference count.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument">
            <summary>
            Represents the master snapshot document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument.referenceCount">
            <summary>
            The reference count
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument.masterDocumentDisposer">
            <summary>
            The master document disposer
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument.#ctor(Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterDocumentDisposer)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument"/> class.
            </summary>
            <param name="masterDocumentDisposer">The master document disposer.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument.SnapshotDocument">
            <summary>
            Gets the snapshot document.
            </summary>
            <value>
            The snapshot document.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument.IncreaseReferenceCount">
            <summary>
            Increases the reference count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.MasterSnapshotDocument.DecreaseReferenceCount">
            <summary>
            Decreases the reference count.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState">
            <summary>
            Represents the state of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.commandHistory">
            <summary>
            A reference to the command history.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.ownedRuntimePropertyValues">
            <summary>
            A collection of runtime property values that are owned by this generation.
            This field and the collection is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.referenceCount">
            <summary>The number of snapshots that refer to this SnapshotDocument.
            This counter is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.#ctor(Spotfire.Dxp.Framework.Commands.CommandHistory,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState" /> class.
            </summary>
            <param name="commandHistory">The command history.</param>
            <param name="ownedRuntimePropertyValues">The owned runtime property values.</param>
            <param name="referenceCount">The reference count.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.CommandHistory">
            <summary>
            Gets the command history.
            </summary>
            <value>
            The command history.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.IncreaseReferenceCount">
            <summary>
            Increases the owner reference counter. This method is called when a new snapshot is created which
            is considered as an owner of the snapshot document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.DecreaseReferenceCount(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection@)">
            <summary>
            Decreases the reference count.
            </summary>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <returns><c>true</c>, if the reference count reaches 0.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.TakeOwnership(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueBase)">
            <summary>
            Take the ownership of <paramref name="runtimePropertyValue"/>. 
            This method may only be called if the runtime property value has been published and has a closed validity span. 
            Moreover all higher snapshot document in the validity span of the runtime property value must have
            been disposed.
            If this generation is disposed then this instance refuses to take the ownership.
            </summary>
            <param name="firstGeneration">The first generation.</param>
            <param name="runtimePropertyValue">The runtime property value.</param>
            <returns>True, if this instance is not disposed and accepts the ownership.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentState.TakeOwnership(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection)">
            <summary>
            Take the ownership of the runtime property values in <paramref name="runtimePropertyValues"/>.
            This method may only be called if the runtime property values have been published and has a closed validity span. 
            Moreover all higher snapshot documents in the validity span of the runtime property value must have
            been disposed.
            If this generation is disposed then this instance refuses to take the ownership.
            </summary>
            <param name="runtimePropertyValues">The runtime property values.</param>
            <returns>True, if this instance is not disposed and accepts the ownership.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SharedValiditySpan">
            <summary>
            Represents an interval of generations when an undoable node or runtime property value is valid.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SharedValiditySpan.#ctor(Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SharedValiditySpan"/> class.
            </summary>
            <param name="validitySpan">The non-shared validity span to initialize the new instance from.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SharedValiditySpan.ThreadSafeLastGeneration">
            <summary>
            Gets the last generation for the calling session in its SessionOverrides.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SharedValiditySpan.Close(System.Int32)">
            <summary>
            Close the validty span by setting the last generation to
            <paramref name="currentGenerationNumber" /> minus one.
            </summary>
            <param name="currentGenerationNumber">The generation number of the ongoing transaction.</param>
            <returns>The first generation of the transient transaction hole that inlcudes the validity span or -1 if the there is no such transient transaction hole.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SharedValiditySpan.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument">
            <summary>
            This class is used to represent a snapshot document. 
            
            An instance of this class is created whenever the first snapshot of a particular generation is taken.
            
            The instance serves as the node owner of the top most document node in the snapshot node tree. 
            That is, it deals with services requests and manages the live time of the snapshot node tree.
            
            This instance also serves as an owner of published runtime property values with closed validity spans.
            
            The instance manages its own life time through a reference counter. When the counter reaches zero the instance is disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.generation">
            <summary>
            The generation number of the snapshot document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.rootSnapshotNode">
            <summary>
            The root node of the snapshot sub tree.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.current">
            <summary>
            Current snapshot document. Set by snapshot read operations.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.GetCommandHistory">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.Generation">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.Spotfire#Dxp#Framework#DocumentModel#IDocumentNodeOwner#Owner">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.Current">
            <summary>
            Gets the current snapshot document. Set by snapshot read operations.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.IncreaseReferenceCount">
            <summary>
            Increases the owner reference counter. This method is called when a new snapshot is created which
            is considered as an owner of the snapshot document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.DecreaseReferenceCount">
            <summary>
            Decreases the owner reference counter. 
            
            This method is called when a snapshot is disposed.
            
            It is also called by the snapshot document manger when a transaction starts because then the cached snapshot 
            of the live document is no longer needed.
            
            When the counter reaches zero then this instance disposes itself. It the performs the following actions.
            
            It removes itself form the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager"/>.
            
            It removes itself as an owner of the root node in the snapshot tree. 
            This propagates down the sub tree and disposes the snapshot nodes that are no longer part
            of an undisposed snapshot sub tree.
            
            It will ask the snapshot document manager to assign a new owner of the runtime property values that it owns 
            if that is possible. 
            If it is not possible to assign a new owner to a runtime property value it will dispose it.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.TakeOwnership(System.Int32,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueBase)">
            <summary>
            Take the ownership of <paramref name="runtimePropertyValue"/>. 
            
            This method may only be called if the runtime property value has been published and has a closed validity span. 
            Moreover all higher snapshot document in the validity span of the runtime property value must have
            been disposed.
            
            If this generation is disposed then this instance refuses to take the ownership.
            </summary>
            <param name="firstGeneration"></param>
            <param name="runtimePropertyValue"></param>
            <returns>True, if this instance is not disposed and accepts the ownership.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument.TakeOwnership(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection)">
            <summary>
            Take the ownership of the runtime property values in <paramref name="runtimePropertyValues"/>.
            
            This method may only be called if the runtime property values have been published and has a closed validity span. 
            Moreover all higher snapshot documents in the validity span of the runtime property value must have
            been disposed.
            
            If this generation is disposed then this instance refuses to take the ownership.
            </summary>
            <param name="runtimePropertyValues"></param>
            <returns>True, if this instance is not disposed and accepts the ownership.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager">
            <summary>
            This class is used to manage the different snapshot documents. 
            
            It also keeps track of the current snapshot document and the current generation number.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.currentGenerationNumber">
            <summary> The current generation number of the live document. Each toplevel transaction/undo or redo steps
            this value as the first action it takes. 
            
            Thus during an ongoing transaction it is the generation number that a snapshot taken after the transaction has
            been completed will be associated to.
            
            If there is no ongoing transaction then it is the generation number that a snapshot taken at that point will get.
            
            The field is initially set to <see cref="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.FirstGenerationNumber"/>.
            
            This field may only be modified on the application thread while holding the snapshot lock. It may be read
            on the application thread at any point and it may be read on any other thread if holding the snapshot lock. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.snapshotDocuments">
            <summary>
            The list of snapshot document which exists. 
            
            The list is ordered with respect to the generation number that is associated to each snapshot document.
            
            Entries are added only at the end of this list when a snapshot document is created. 
            
            A snapshot document is created when a snapshot is taken unless there is a current snapshot document.
            
            The contents of the list is protected by the lock on this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.currentSnapshotDocument">
            <summary> The current snapshot document.
            
            May be null if there is no snapshot document for the live document. That happens
            if no snapshot has been taken since the document was modifed last time.
            
            This field may only be read and modified while holding the snapshot lock.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.masterSnapshotDocument">
            <summary>
            The master snapshot document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.disposed">
            <summary>
            Keeps track of whether this instance has been disposed or not.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.globalServiceRegistry">
            <summary>
            The global service registry.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.userServiceRegistry">
            <summary>
            The user service registry.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.analysisServiceRegistry">
            <summary>
            The analysis service registry.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.FirstGenerationNumber">
            <summary>
            The first generation number.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.IndefiniteGenerationNumber">
            <summary>
            Used to denote an indefinite generation number, also known as omega.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.CurrentGenerationNumber">
            <summary> The current generation number of the live document. Each toplevel transaction/undo or redo steps
            this value as the first action it takes. 
            
            Thus during an ongoing transaction it is the generation number that a snapshot taken after the transaction has
            been completed will be associated to.
            
            If there is no ongoing transaction then it is the generation number that a snapshot taken at that point will get.
            
            The property is initially set to <see cref="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.FirstGenerationNumber"/>.
            
            This property may only be read and modified on the application thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.CreateSnapshotDocument(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.Commands.CommandHistory)">
            <summary>
            Creates a snapshot document or returns the current one if there is one.
            </summary>
            <param name="node"></param>
            <param name="commandHistory"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.StepGeneration">
            <summary> 
            Steps the live generation number counter.
            
            This method may only be called on the application thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.Remove(Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument)">
            <summary>
            Removes a snapshot document generation from the list of snapshot documents.
            </summary>
            <param name="snapshotDocument"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.WaitUntilOnlyOneSnapshotGeneration">
            <summary>
            Waits until there is only one snapshot generation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.HasOnlyOneSnaphotGeneration">
            <summary>
            Checks if there is only one snapshot generation.
            </summary>
            <returns>True if there is only one snapshot generation; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.FindHighestSnapshotDocumentInGenerationSpan(System.Int32,System.Int32)">
            <summary>
            Search the list of snapshot documents for the snapshot document with the highest generation number which is
            in the generation interval given by <paramref name="firstGeneration"/> and <paramref name="lastGeneration"/>.
            </summary>
            <param name="firstGeneration"></param>
            <param name="lastGeneration"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.AssignOwner(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValueBase,System.Int32,System.Int32)">
            <summary>
            Assigns a snapshot document as the owner of a published runtime property value with a closed validity span. 
            If no possible owner is found then the runtime property value is disposed.
            </summary>
            <param name="runtimePropertyValue"></param>
            <param name="firstGeneration"></param>
            <param name="lastGeneration"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.AssignOwner(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.RuntimePropertyValueCollection,System.Int32)">
            <summary>
            Assign an owner to the runtime property values in <paramref name="runtimePropertyValues"/>.
            
            The runtime property values that cannot be assigned a new owner shall be disposed.
            </summary>
            <param name="runtimePropertyValues"></param>
            <param name="generationOfPreviousOwner"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocumentManager.Dispose">
            <summary>
            Disposes the manager.
            
            This method should be called when the document is closed.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan">
            <summary>
            Represents an interval of generations when an undoable node or runtime property value is valid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.firstGeneration">
            <summary>
            This is the first generation when the undoable node is valid.
            
            It is set when the validity span is created and is readonly thereafter.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.lastGeneration">
            <summary>
            This is the last generation when the undoable node is valid.
            
            This is originally the indefinite generation. When the undoable node is modified
            then it is set to the current generation number minus one.
            
            This field is protected by the lock on this instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.ThreadSafeLastGeneration">
            <summary>
            Gets the last generation field while holding a lock on this.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.LastGeneration">
            <summary>
            Gets the last generation field. NB: No lock is held while!
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.FirstGeneration">
            <summary>
            Gets the first generation.
            </summary>
            <value>
            The first generation.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.TryGetFirstGenerationOfNestedValiditySpanHole(Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.Close">
            <summary>
            Closes the validity span.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.Close(System.Int32)">
            <summary>
            Closes the validty span by setting the last generation to 
            <paramref name="currentGenerationNumber"/> minus one.
            </summary>
            <param name="currentGenerationNumber">The generation number of the ongoing transaction.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.LimitGenerationsUsedByRuntimeProperty">
            <summary>
            Limit the limitation targets in the thread context.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.TTValiditySpan">
            <summary>
            Represents an interval of generations when an undoable node or runtime property value is valid.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyMultiplexor">
            <summary>
            A class for manipulating a multiplexor of values for snapshots of view properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyMultiplexor.GetValueInfo``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="documentView">The document view.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyMultiplexor.UpdateValiditySpanInSnapshots``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Updates the validity span for the specified <paramref name="documentViewKey" />.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
            <returns>
            A new updated value multiplexor.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyMultiplexor.Create``1(Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{``0})">
            <summary>
            Builds the multiplexor from a single value info.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="valueInfo">The value information.</param>
            <returns>
            The multiplexor.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1">
            <summary>
            The value info for a view property in a snapshot.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1.value">
            <summary>
            The snapshot multiplexor of the node that the proerty references.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1.validitySpan">
            <summary>
            The validity span.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1.CreateFromValueInfo(Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{`0})">
            <summary>
            Creates an instance of this class from the provided value information.
            </summary>
            <param name="valueInfo">The value information.</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1.GetValue">
            <summary>
            Gets the value, limiting the current validity span.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1.RawGetValue">
            <summary>
            Gets the raw value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1">
            <summary>Manages a view property that does not own its value. Assignments to the property will be 
            recorded as undoable commands. 
            </summary>
            <remarks>
            The value of an UndoableCrossReferenceProperty must be a class deriving from 
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> or <c>null</c>. An UndoableCrossReferenceViewProperty does not
            own its value, it only points to a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> that is owned 
            somewhere else in the document. Thus the value of an UndoableCrossReferenceViewProperty 
            is not part sub tree in which the UndoableCrossReferenceProperty lives.
            <para>
            When the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> pointed to by an UndoableCrossReferenceViewProperty is detached,
            the value of the UndoableCrossReferenceViewProperty  is set to <c>null</c> by the document model 
            framework. This action is undoable and generates an event.
            </para>
            </remarks>
            <typeparam name="T">The type of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> pointed to by this UndoableCrossReferenceViewProperty.</typeparam>
            [jgustavs, 2015-06-02]: DocumentView API candidate.
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IUndoableCrossReferenceViewProperty#Target">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IUndoableCrossReferenceViewProperty#Targets">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.UndoableCrossReferenceViewPropertyNodeState">
            <summary>
            Gets the node state casted to a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.IUndoableCrossReferenceViewPropertyNodeState`1"/>.
            </summary>
            <value>
            The node state.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.ActivateAndUnfoldMutablePropertyTriggers">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.FoldAndInactivateMutablePropertyTriggers">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.ValidateThatTriggerManagerIsEmpty">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IMutableProperty{T}#AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IMutableProperty{T}#AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IMutableProperty{T}#GetMutablePropertyTriggerHost">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IMutableProperty{T}#GetPropertyName">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IMutableProperty{T}#GetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IMutableProperty{T}#RawGetValue">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IMutableProperty{T}#RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IMutableProperty{T}#RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.ReactToDetachOfReferencedNode(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IUndoableNodeBaseCrossReference#AddBackwardsPointer">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IUndoableNodeBaseCrossReference#RemoveBackwardsPointer">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IUndoableCrossReferenceViewProperty#GetSnapshotValueInfoMultiplexor">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.Spotfire#Dxp#Framework#DocumentModel#IUndoableCrossReferenceViewProperty#SetSnapshotValueInfoMultiplexor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.SnapshotViewPropertyValueInfo{Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor}})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.GetChangedCore(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.ClearChangedFlagCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.CreateNodeState(Spotfire.Dxp.Framework.DocumentModel.InternalNodeState)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.CreateSnapshotMultiplexor">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.CreateSnapshotNodeState(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.GetPropertyStateCore(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetPropertyStateCore(System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.GetValueMultiplexor">
            <summary>
            Gets the value multiplexor.
            </summary>
            <returns>The value multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.ExecuteSetCommand(`0,`0,Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Executes the set command.
            </summary>
            <param name="value">The value.</param>
            <param name="oldValue">The old value.</param>
            <param name="documentView">The document view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.FoldMutablePropertyTriggersAndMarkAsInactive">
            <summary>
            Folds the mutable property triggers and mark as inactive.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand">
            <summary>
            The command class for undoable cross reference view properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.documentViewKeyId">
            <summary>
            The document view key id.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.oldValue">
            <summary>
            The old value of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.property">
            <summary>
            The target property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.#ctor(Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty{`0},`0,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="oldValue">The old value.</param>
            <param name="documentViewKeyId">The document view key id.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.Name">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.Execute">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.GetChangedProperty">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.Reexecute(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.Unexecute(Spotfire.Dxp.Framework.Commands.RestoreContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.SetCommand.ChangeTargetValueDuringUndoRedo(Spotfire.Dxp.Framework.Commands.RestoreContext,`0)">
            <summary>
            Changes the target value during undo redo.
            </summary>
            <param name="restoreContext">The restore context.</param>
            <param name="valueToChangeTo">The value to change to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1.RestoreValiditySpan(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName">
            <summary>
            A property name for a property that can be styled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.instances">
            <summary>
            The instances of property name. Indexed by their id.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.nextId">
            <summary>
            The next identifier.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.id">
            <summary>
            The id of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.inherited">
            <summary>
            Indicates if the value is inherited.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.unit">
            <summary>
            The Html Css unit, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="inherited">if set to <c>true</c> the value is inherited.</param>
            <param name="unit">The unit, or null.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.DefaultValueAsObject">
            <summary>
            Gets the default value as an object.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.Inherited">
            <summary>
            Gets a value indicating whether the value of this property is inherited.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.GetInstance(System.Int32)">
            <summary>
            Gets the instance with the specified id.
            </summary>
            <param name="id">The identifier.</param>
            <returns>A property name instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.AppendHtmlStyle(System.Action{System.String,System.String},Spotfire.Dxp.Framework.Styles.StyleSheet,Spotfire.Dxp.Framework.Styles.IStyledElement)">
            <summary>
            Appends an HTML style declaration for this property on the specified styled element.
            </summary>
            <param name="appendDeclaration">A method that appends a declaration to a declaration block.</param>
            <param name="styleSheet">The style sheet.</param>
            <param name="styledElement">The styled element.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.AppendHtmlStyle(System.Action{System.String,System.String},Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment)">
            <summary>
            Appends an HTML style declaration for this property as specified by the styledProperties, if any.
            If the styledProperties does not specify a value for this property, nothing is appended.
            </summary>
            <param name="appendDeclaration">A method that appends a declaration to a declaration block.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.AppendHtmlStyleDefaultValue(System.Action{System.String,System.String})">
            <summary>
            Appends an HTML style declaration for this propertys default value.
            </summary>
            <param name="appendDeclaration">A method that appends a declaration to a declaration block.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.GetValueAsObject(Spotfire.Dxp.Framework.Styles.StyleSheet,Spotfire.Dxp.Framework.Styles.IStyledElement)">
            <summary>
            Gets the value of the associated property on the specified styled element given the specified style sheet.
            </summary>
            <param name="styleSheet">The style sheet.</param>
            <param name="styledElement">The styled element.</param>
            <returns>A value derived from the style sheet or the default value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.GetValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <returns>The type of the value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.TryGetValueAsObject(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this property for the specified StyledProperties (a set of stylesheet rules).
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
            True if a value was found.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName.AppendHtmlStyle(System.Action{System.String,System.String},System.Object)">
            <summary>
            Appends an HTML style declaration for this property with the specified value.
            </summary>
            <param name="appendDeclaration">A method that appends a declaration to a declaration block.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1">
            <summary>
            A property name for a property that can be styled.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.defaultValue">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.#ctor(System.String,`0,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <param name="inherited">if set to <c>true</c> the value is inherited.</param>
            <param name="unit">The unit, or null.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.DefaultValueAsObject">
            <summary>
            Gets the default value as an object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.GetCachedValue(Spotfire.Dxp.Framework.Styles.StyleSheet,Spotfire.Dxp.Framework.Styles.IStyledElement,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the value of this property on the specified styled element given the specified style sheet.
            </summary>
            <param name="styleSheet">The style sheet.</param>
            <param name="styledElement">The styled element.</param>
            <param name="propertyCache">The property cache.</param>
            <returns>
            A value derived from the style sheet or the default value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.GetValue(Spotfire.Dxp.Framework.Styles.StyleSheet,Spotfire.Dxp.Framework.Styles.IStyledElement)">
            <summary>
            Gets the value of this property on the specified styled element given the specified style sheet.
            </summary>
            <param name="styleSheet">The style sheet.</param>
            <param name="styledElement">The styled element.</param>
            <returns>A value derived from the style sheet or the default value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.GetValueAsObject(Spotfire.Dxp.Framework.Styles.StyleSheet,Spotfire.Dxp.Framework.Styles.IStyledElement)">
            <summary>
            Gets the value of the associated property on the specified styled element given the specified style sheet.
            </summary>
            <param name="styleSheet">The style sheet.</param>
            <param name="styledElement">The styled element.</param>
            <returns>A value derived from the style sheet or the default value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.GetValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <returns>
            The type of the value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.TryGetValueAsObject(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this property for the specified StyledProperties (a set of stylesheet rules).
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
            True if a value was found.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName`1.TryGetValue(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,`0@)">
            <summary>
            Tries to get the value of this property for the specified StyledProperties (a set of stylesheet rules).
            </summary>
            <param name="environment">The environment.</param>
            <param name="result">The result.</param>
            <returns>
            True if a value was found.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBase">
            <summary>
            A marker interface for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBase.ClearChangedFlag">
            <summary>
            Clears the changed flag used by the DocumentState mechanism to determine if a value has been change.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBase.GetChanged(System.Boolean)">
            <summary>
            Gets the changed flag. This flag is used by the DocumentState mechanism to determine if a value has been change.
            </summary>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns><c>true</c>, if the property has changed.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase">
            <summary>
            Base class for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNode"/> and <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewProperty`1"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase.GetChangedCore(System.Boolean)">
            <summary>
            Gets the changed flag.
            </summary>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns><c>true</c>, if the property has changed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase.GetRemovedDocumentNodesCore(System.Object)">
            <summary>
            Returns a list of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> objects which are removed if the <paramref name="state"/> 
            object is applied through <see cref="M:Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBase.SetPropertyState(System.Object,System.Boolean)"/>.
            </summary>
            <param name="state">The new state.</param>
            <returns>A list of removed <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> objects. May return <c>null</c> if 
            no <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> will be removed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase.SetPropertyStateCore(System.Object,System.Boolean)">
            <summary>
            Sets the internal representation of the property. The default implementation does nothing.
            </summary>
            <param name="state">The internal representation of the property, previously retrieved by call to <see cref="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase.GetPropertyStateCore(System.Boolean)" />.</param>
            <param name="allViews">if set to <c>true</c> then all views should be included in the state.</param>
            <remarks>
            This code does much the same as the DeserializeProperty overloads in DocumentNode.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase.GetPropertyStateCore(System.Boolean)">
            <summary>
            Gets an internal representation of the property. The default implementation returns <c>null</c>.
            </summary>
            <returns>An internal representation of the property.</returns>
            <remarks>
            This code does much the same as the SerializeProperty overloads in DocumentNode.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor">
            <summary>
            A class for manipulating a multiplexor of values for view properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.CreateValueInfoMultiplexor``1(``0)">
            <summary>
            Creates a value info multiplexor from the specified value.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value.</param>
            <returns>The created multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.CreateValueInfoMultiplexor``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,``0})">
            <summary>
            Creates a value info multiplexor from the specified value multiplexor.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="values">The values.</param>
            <returns>The created multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.CreateValueInfoMultiplexor``1(Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0})">
            <summary>
            Creates a value info multiplexor from the specified value info.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueInfo">The value information.</param>
            <returns>
            The multiplexor.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.CreateValueMultiplexor``1(``0)">
            <summary>
            Creates a value multiplexor from the specified value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>The created multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.CreateValueMultiplexor``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}})">
            <summary>
            Creates a value multiplexor from the specified value info multiplexor.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="valueInfoMultiplexor">The value information multiplexor.</param>
            <returns>The created multiplexor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.GetEntry``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,``0},Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Gets the entry for a given document view.
            </summary>
            <typeparam name="TEntry">The type of the entries in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="documentView">The document view.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.GetEntry``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,``0},Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Gets the entry for a given document view key.
            </summary>
            <typeparam name="TEntry">The type of the entries in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="documentViewKey">The document view key.</param>
            <returns>
            The entry.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.RestoreValiditySpan``1(Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan,Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}})">
            <summary>
            Restores the validity span.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
            <param name="valueInfoMultiplexor">The value information multiplexor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.GetValueInfo``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Gets the value info for a given document view.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="documentView">The document view.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.GetSingleViewValueInfo``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}})">
            <summary>
            Gets the value info for the single view that exists when sharing a document.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <returns>
            The value info
            </returns>
            <exception cref="T:System.InvalidOperationException">Attempt to share a view property which has values for multiple document view keys.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.HasChanged``1(System.Boolean,Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},System.Boolean)">
            <summary>
            Determines whether the value of the property has changed for the current document view.
            This is used for document state (web player state).
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <param name="valueMultiplexor">The values.</param>
            <param name="rootChanged">if set to <c>true</c> then the value for the root <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey" /> has changed.</param>
            <returns>
              <c>true</c>, if the value has changed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.HasSharedChanged``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Determines whether the value of the property has changed for the specified <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey"/>.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The values.</param>
            <param name="documentViewKey">The document view key.</param>
            <returns><c>true</c>, if the value has changed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.HasSharedChangedForAnyView``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}})">
            <summary>
            Determines whether the value of the property has changed for any view.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <returns><c>true</c>, if the value has changed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.SetValue``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.DocumentModel.IViewProperty,System.Action{Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},System.Action{``0},``0,Spotfire.Dxp.Framework.Commands.DocumentViewKey,System.Boolean@)">
            <summary>
            Returns a new value multiplexor where the given value has been set for the given document view key.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="property">The property.</param>
            <param name="removeAction">The remove action.</param>
            <param name="addAction">The add action.</param>
            <param name="value">The value.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="rootChanged">Will be set to true if the value for the root <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey"/> is changed.</param>
            <returns>
            An updated value multiplexor.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.SetValue``1(System.Collections.Generic.Dictionary{System.Int32,``0},System.Action{``0},System.Action{``0},System.Func{``0,``0},System.Func{``0,``0},System.Func{System.Int32,``0},Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Sets the given value for the given document view key by updating the given value multiplexor.
            </summary>
            <typeparam name="TEntry">The type of the entry.</typeparam>
            <param name="valueMultiplexor">The values multiplexor to update.</param>
            <param name="removeAction">The remove action.</param>
            <param name="removeRedundantOverrideAction">The remove redundant override action.</param>
            <param name="updateAction">The update action.</param>
            <param name="updateActionWhenParentKeyExists">The update validty span in snapshots action.</param>
            <param name="updateActionWhenNoEntryExist">The update action when no entry exist.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.HasChanged``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},Spotfire.Dxp.Framework.Commands.DocumentViewKey,System.Boolean)">
            <summary>
            Determines whether the value of the property has changed for the specified <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey"/>.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The values.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="rootChanged">if set to <c>true</c> then the value for the root <see cref="T:Spotfire.Dxp.Framework.Commands.DocumentViewKey"/> has changed.</param>
            <returns><c>true</c>, if the value has changed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.HasChangedInAnyView``1(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo{``0}},System.Boolean)">
            <summary>
            Determines whether the specified value multiplexor has changed, in any view.
            </summary>
            <typeparam name="T">The type of the values in the multiplexor.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="rootChanged">if set to <c>true</c> [root changed].</param>
            <returns><c>true</c>, if the value has changed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.CreateUpdateAction``1(Spotfire.Dxp.Framework.DocumentModel.IViewProperty,Spotfire.Dxp.Framework.Commands.DocumentViewKey,``0)">
            <summary>
            Creates an action that updates validity span in snapshots given the value info for the closest ancestor of the updated document vioew key which has an assigned value.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="property">The property.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="newValue">The new value.</param>
            <returns>
            The created action.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.IsViewKeyRedundant``1(System.Collections.Generic.Dictionary{System.Int32,``0},Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Determines whether the specified view key is redundant if a new value is a added for a specified view key.
            </summary>
            <typeparam name="TEntry">The type of the multiplexor entries.</typeparam>
            <param name="values">The values.</param>
            <param name="viewKey">The view key to check for redundancy.</param>
            <param name="viewKeyToAdd">The view key to add.</param>
            <returns><c>true</c>, if the view key is redundant.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyMultiplexor.RemoveOverridesForDocumentViewKeyChildren``1(System.Collections.Generic.Dictionary{System.Int32,``0},System.Action{``0},System.Action{``0},Spotfire.Dxp.Framework.Commands.DocumentViewKey)">
            <summary>
            Removes the overrides for document view keys that are children to the specified view key from the specified value multiplexor.
            The specified action is applied When an entry is removed.
            </summary>
            <typeparam name="TEntry">The type of the entry.</typeparam>
            <param name="valueMultiplexor">The value multiplexor.</param>
            <param name="removeAction">The remove action.</param>
            <param name="removeRedundantOverrideAction">The remove redundant override action.</param>
            <param name="documentViewKey">The document view key.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1">
            <summary>
            An entry in the web player state of an undoable cross reference view property.
            </summary>
            <typeparam name="T">The type of the values in the property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1.documentViewKeyId">
            <summary>
                The document view key identifier.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1.value">
            <summary>
                The value
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1.#ctor(System.Int32,`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1" /> class.
            </summary>
            <param name="documentViewKeyId">The document view key identifier.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1" /> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1.DocumentViewKeyId">
            <summary>
                Gets the document view key identifier.
            </summary>
            <value>
                The document view key identifier.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1.Value">
            <summary>
                Gets the value.
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceViewPropertyStateEntry`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor">
            <summary>
            An unfold manager multiplexor for view properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor.AddEvent``2(Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection{``1},Spotfire.Dxp.Framework.DocumentModel.DocumentView,System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1}},System.Boolean,``0,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``1},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Adds the event.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TNode">The type of the node.</typeparam>
            <param name="documentViewValueCollection">The document view value collection.</param>
            <param name="documentView">The document view.</param>
            <param name="unfoldManagers">The unfold managers.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor.RemoveEvent``2(Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection{``1},Spotfire.Dxp.Framework.DocumentModel.DocumentView,System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1}},System.Boolean,``0,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``1},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Removes the event.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TNode">The type of the node.</typeparam>
            <param name="documentViewValueCollection">The document view value collection.</param>
            <param name="documentView">The document view.</param>
            <param name="unfoldManagers">The unfold managers.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor.UnfoldMutablePropertyTriggers``2(Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection{``1},System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1}},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TNode">The type of the node.</typeparam>
            <param name="documentViewValueCollection">The document view value collection.</param>
            <param name="unfoldManagers">The unfold managers.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor.UnfoldMutablePropertyTriggers``2(Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection{``1},System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TNode">The type of the node.</typeparam>
            <param name="documentViewValueCollection">The document view value collection.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor.FoldMutablePropertyTriggers``2(Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection{``1},System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1}},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TNode">The type of the node.</typeparam>
            <param name="documentViewValueCollection">The document view value collection.</param>
            <param name="unfoldManagers">The unfold managers.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor.FoldMutablePropertyTriggers``2(Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection{``1},System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TNode">The type of the node.</typeparam>
            <param name="documentViewValueCollection">The document view value collection.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="unfoldManager">The unfold manager.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor.FoldMutablePropertyTriggers``2(System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1}},System.Int32,Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Folds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="unfoldManagerMultiplexor">The unfold manager multiplexor.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor.UnfoldMutablePropertyTriggers``2(System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1}},System.Int32,``1,Spotfire.Dxp.Framework.DocumentModel.TriggerAction{``0})">
            <summary>
            Unfolds the mutable property triggers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="T">The type of the node.</typeparam>
            <param name="unfoldManagerMultiplexor">The unfold manager multiplexor.</param>
            <param name="documentViewId">The document view identifier.</param>
            <param name="value">The value.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyUnfoldManagerMultiplexor.GetSingleInitialViewUnfoldManager``2(System.Collections.Generic.Dictionary{System.Int32,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1}})">
            <summary>
            Gets the unfold manager for the single view that exists when sharing a document.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TNode">The type of the node.</typeparam>
            <param name="unfoldManagerMultiplexor">The unfold manager multiplexor.</param>
            <returns>The unfold  manager</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1">
            <summary>
            The info for a value of a view property.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1.validitySpan">
            <summary>
            The validity span
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1.ValiditySpan">
            <summary>
            Gets or sets the validity span.
            </summary>
            <value>
            The validity span.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1.GetValue">
            <summary>
            Gets the value, limiting the current validity span.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1.RawGetValue">
            <summary>
            Gets the raw value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ViewPropertyValueInfo`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle">
            <summary>
            A handle to an aggregated transaction.
            </summary>
            
            <remarks>
            Aggregated transactions provides the functionality to aggregate transactions which needs
            to be separate transactions while first executed but which should be unexecuted
            as one transaction at undo and redo.
            
            It also provides rollback of the transaction. This can be used to implement cancel
            on modal dialogs.
            
            If the handle is not committed before being disposed, it will rollback the transaction.
            </remarks>
            <seealso cref="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.BeginAggregatedTransaction"/>
            <seealso cref="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.Commit"/>
            <seealso cref="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.Rollback"/>
            
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.handleImpl">
            <summary>
            The implementation class
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.#ctor(Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl)">
            <summary>
            Creates an aggregated transaction handle.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.IncludeTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Starts a transaction which is included in the aggregated transaction.
            When the transaction is completed the accumulated events will be raised
            so that the UI can update.
            
            At undo/redo the transaction will be a part of the aggregated transaction.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.OldCommit">
            <summary>
            Use Commit() instead.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.OldRollback">
            <summary>
            Use Rollback() instead.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.Commit">
            <summary>
            Commits the aggregated transaction. If this is the outermost aggregated
            transaction, an entry on the undo stack is created.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the aggregated transaction is 
            not open.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.Rollback">
            <summary>
            Rollbacks the aggregated transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the aggregated transaction is 
            not open.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.Dispose">
            <summary>
            Disposes the transaction handle. This will rollback the transaction if it 
            has not previously been committed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.HandleImpl">
            <summary>
            Gets the internal implementation handle.
            </summary>
            <value>The implementation handle.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandle.SuppressExternalEvents">
            <summary>
            Suppress all external events within this aggregated transaction. The intended purpose is to create snapshots from a state of the document that is not supposed to be included in the undo stack, such as creating recommendations.
            Use with care!
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl">
            <summary>
            Implementation class for aggregated transaction handles. The facade class makes sure Commit/Rollback
            are only called once.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.commandHistory">
            <summary>
            The associated command history.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.displayName">
            <summary>
            The display name of the transaction.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.postponedChanges">
            <summary>
            Postponed property changes during a silent transaction
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.postponedChangedQueue">
            <summary>
            Postponed property changes queue during a silent transaction
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.postponedHighlightChanges">
            <summary>
            Postponed highlight property changes during a silent transaction
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.postponedHighlightQueue">
            <summary>
            Postponed highlight property changes queue during a silent transaction
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.#ctor(Spotfire.Dxp.Framework.Commands.CommandHistory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl"/> class.
            </summary>
            <param name="commandHistory">The command history.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.CommandHistory">
            <summary>
            Gets the command history.
            </summary>
            <value>The command history.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.IncludeTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Starts a transaction which is included in the aggregated transaction.
            When the transaction is completed the accumulated events will be raised
            so that the UI can update.
            
            At undo/redo the transaction will be a part of the aggregated transaction.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.Commit">
            <summary>
            Commits the aggregated transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.Rollback">
            <summary>
            Rolls back the aggregated transaction.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.SuppressExternalEvents">
            <summary>
            Mark the transaction as silent, i.e. do not raise external events on commit.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.PostponeChanges(Spotfire.Dxp.Framework.Commands.PropertyChangedQueue,Spotfire.Dxp.Framework.Commands.PropertyChangedQueue)">
            <summary>
            Postpone changes 
            </summary>
            <param name="propertyChangedQueue">Postponed property changes</param>
            <param name="highlightPropertyChangedQueue">Postponed highlight property changes</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.PostponedChanges">
            <summary>
            Gets the postponed property changes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.AggregatedTransactionHandleImpl.PostponedHighlightChanges">
            <summary>
            Gets the postponed highlight property changes.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AvlNode">
            <summary>
            This is a base class for nodes that is part of a collection structure.
            These nodes are special in that they can be moved / change owner while attached. They
            can also become the owner of a node that is already attached. This is needed in order
            to move nodes.
            
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AvlNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AvlNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AvlNode.GetAvlNodeHeightSessionOverride(System.Int32)">
            <summary>
            Gets the height of this AVL node, consulting the SessionOverrides if applicable.
            </summary>
            <param name="defaultValue">The value to return if there is no session override
            or if this is not a shared node.</param>
            <returns>The height</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AvlNode.SetAvlNodeHeightSessionOverride(System.Int32)">
            <summary>
            Sets the session override of the height of this AVL node, if applicable.
            </summary>
            <param name="height">The height to set.</param>
            <returns>True if the height was set, false if this node is not shared.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AvlNodes.DictionaryEntryListNode`2">
            <summary>
            A list node used in AVL search trees containing key objects of type TKey.
            All objects with the same hashcode collide at the same tree node in the AVL 
            search tree. Such objects are stored in a linked list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AvlNodes.DictionaryEntryListNode`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AvlNodes.DictionaryEntryListNode`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AvlNodes.DictionaryTreeNode`2">
            <summary>
            A tree node in a AVL search tree containing key objects of type TKey. The hash codes
            of the key objects in the tree are used as the search key in the AVL tree.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AvlNodes.DictionaryTreeNode`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AvlNodes.DictionaryTreeNode`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedLazyValueHolderWrapper`1">
            <summary>
            This class is the shared verion of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1"/>
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedLazyValueHolderWrapper`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedLazyValueHolderWrapper`1"/> class.
            </summary>
            <param name="lazyValueHolder">The last value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedLazyValueHolderWrapper`1.LazyValueHolder">
            <summary>
            Gets the last value holder.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1">
            <summary>
            This class is a wrapper around the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1.LazyValueHolder"/>. It is used manage the use of session overrides.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1.lazyValueHolder">
            <summary>
            The <see cref="P:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1.LazyValueHolder"/> that holds the state of the lazy value property. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1"/> class.
            </summary>
            <param name="lazyValueHolder">The last value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1.LazyValueHolder">
            <summary>
            Gets the last value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolderWrapper`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.CompositeTrigger">
            <summary>
            A trigger which fires when any of the included triggers fire.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CompositeTrigger.#ctor(Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Creates a new instance of the <see cref="T:CompositeTrigger"/> class.
            </summary>
            <param name="triggers">The triggers that shall be composed. When one of these triggers fires, 
            the composite trigger fires.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CompositeTrigger.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CompositeTrigger.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CompositeTrigger.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CompositeTrigger.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CompositeTrigger.ApplyToNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.CloneInstantiator">
            <summary>
            Delegate that is used to call deserialization constructors in an efficient way.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
            <returns>The object created by the deserialization constructor.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.CloneInstantiatorCache">
            <summary>
            A cache for storing clone instantiators. This is used to create delegates that can be used to efficiently 
            deserialize objects.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DesignPatternViolationProperty`1">
            <summary>Represents a value in a document node implementation that 
            violates proper document model design patterns.
            This class is needed for sharing nodes.
            </summary>
            <typeparam name="T">The type of the value stored in this property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DesignPatternViolationProperty`1.value">
            <summary>
            The value of this property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DesignPatternViolationProperty`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DesignPatternViolationProperty`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DesignPatternViolationProperty`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DesignPatternViolationProperty`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DesignPatternViolationProperty`1.GetValue(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Gets the value of the property.
            </summary>
            <param name="node">The owning document node of this property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DesignPatternViolationProperty`1.SetValue(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,`0)">
            <summary>
            Sets the value of the property.
            </summary>
            <param name="node">The owning document node of this property.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger">
            <summary>
            Static document model event debug logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.lockObject">
            <summary>
            The lock object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.stream">
            <summary>
            The file stream.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.writer">
            <summary>
            The stream writer.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.LogCustomMessage(System.String)">
            <summary>
            Logs a custom message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.EventRelayInvalidated(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.InternalEventHandlerCreated(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,System.Delegate)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.InvalidatingInvariantKeeper(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,System.Delegate,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.InvariantKeeperCreated(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,System.Delegate)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.NewDocumentNode(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StartingEvaluatingRuntimeProperty(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.FinishedEvaluatingRuntimeProperty(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.RuntimePropertyInvalidated(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StartLogging(System.String)">
            <summary>
            Starts the logging.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StartRunningInternalEventHandler(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,System.Delegate,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StartRunningInvariantKeeper(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,System.Delegate)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StopLogging">
            <summary>
            Stops the logging.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StopRunningInternalEventHandler(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,System.Delegate,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StopRunningInvariantKeeper(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,System.Delegate)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.FireExternalEventHandler(System.Delegate,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.FireExternalThreadSafeEventHandler(System.Delegate,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.AssignableRuntimePropertyNewValue(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StartStreamingPropertySubscription(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StopStreamingPropertySubscription(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.StreamingPropertyInvalidated(Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.LogImpl(System.String,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,System.Delegate,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentModelEventDebugLogger.LogImpl(System.String,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.IDocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs the impl.
            </summary>
            <param name="operation">The operation.</param>
            <param name="affectedObject">The affected object.</param>
            <param name="affectedProperty">The affected property.</param>
            <param name="reasonObject">The reason object.</param>
            <param name="reasonProperty">The reason property.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2">
            <summary>Abstract base class for dictionary-like document nodes.
            It contains standard <see cref="T:System.Collections.Generic.IList`1"/> methods to modify the collection.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.PropertyNames">
            <summary>
            Contains property name constants for the public properties of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.PropertyNames.Items">
            <summary>
            The name of the property Items.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns> <c>true</c> if the value was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentNodeDictionary{TKey,TValue}"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2">
            <summary>
            Provides the abstract base class for a collection whose keys are embedded in the values. 
            </summary>
            <typeparam name="TKey">The type of key held by the nodes in the collection.</typeparam>
            <typeparam name="TNode">The type of the nodes in the collection.</typeparam>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.PropertyNames">
            <summary>
            Contains property name constants for the public properties of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.PropertyNames.Items">
            <summary>
            The name of the property Items.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.GetCountCore">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.Contains(`1)">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> contains the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if this instance contains the specified node; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.ContainsCore(`1)">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> contains the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if this instance contains the specified node; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.IndexOf(`1)">
            <summary>
            Gets the index of the specified node, or <c>-1</c> if the node is not 
            contained in this instance.
            </summary>
            <param name="node">The node.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.IndexOfCore(`1)">
            <summary>
            Gets the index of the specified node, or <c>-1</c> if the node is not 
            contained in this instance.
            </summary>
            <param name="node">The node.</param>
            <returns>The index.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.Item(System.Int32)">
            <summary>
            Gets the <c>TNode</c> at the specified index.
            </summary>
            <value>The node.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.GetIndexedCore(System.Int32)">
            <summary>
            Gets the <c>TNode</c> at the specified index.
            </summary>
            <value>The node.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.ContainsKey(`0)">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> contains a node with
            the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if this instance contains a node with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.ContainsKeyCore(`0)">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> contains a node with
            the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if this instance contains a node with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.GetEnumeratorCore">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.ToArray">
            <summary>Copies the nodes of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>
            to a new array.
            </summary>
            <returns>An array containing the nodes of this collection.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.ToArrayCore">
            <summary>Copies the nodes of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>
            to a new array.
            </summary>
            <returns>An array containing the nodes of this collection.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.PropertyNames">
            <summary>
            Contains property name constants for the public properties of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.PropertyNames.Items">
            <summary>
            The name of the property Items.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.GetKeyPropertyNameCore">
            <summary>Override this method to return the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> for the key property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.GetZombieComputerCore">
            <summary>Override this method to return the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> for the key property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Contains(`1)">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> contains the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if this instance contains the specified node; otherwise, <c>false</c>.
            </returns>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.IndexOf(`1)">
            <summary>
            Gets the index of the specified node, or <c>-1</c> if the node is not 
            contained in this instance.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Item(System.Int32)">
            <summary>
            Gets or sets the <c>TNode</c> at the specified index.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.ContainsKey(`0)">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> contains a node with
            the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if this instance contains a node with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.TryGetValue(`0,`1@)">
            <summary>
            Gets the node with the specified <paramref name="key"/>. If such a node exists in 
            this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>, the <paramref name="node"/>
            parameter will be assigned to that node.
            </summary>
            <param name="key">The key.</param>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if this instance contains a node with the specified key and the <paramref name="node"/>
                parameter has been assigned ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the nodes in this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> to the specified
            <paramref name="array"/>, starting at the <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The index in the specified <paramref name="array"/> 
            where the first node shall be entered.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Item(`0)">
            <summary>
            Gets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>The element with the specified key. 
            If an element with the specified key is not found, an exception is thrown.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.ToArray">
            <summary>Copies the nodes of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>
            to a new array.
            </summary>
            <returns>An array containing the nodes of this collection.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Add(`1)">
            <summary>
            Adds the specified node to this collection.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Clear">
            <summary>
            Remove all elements from this collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Remove(`1)">
            <summary>
            Removes the specified node from this collection.
            </summary>
            <param name="node">The node to remove.</param>
            <returns><c>true</c> if the node occurred in the list; otherwise <c>false</c>.</returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Insert(System.Int32,`1)">
            <summary>
            Inserts the specified node at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.RemoveAt(System.Int32)">
            <summary>
            Removes the node at the specified index.
            </summary>
            <param name="index">The index of the node to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the nodes of the specified collection to the end of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>.
            </summary>
            <param name="collection">
            The collection whose nodes should be added to the end of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>. The collection itself cannot be null, 
            but it can contain nodes that are null, if type TNode is a reference type.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts the nodes of the specified collection at the specified index of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="collection">The collection whose nodes should be added to the end of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>. The collection itself cannot be null,
            but it can contain nodes that are null, if type TNode is a reference type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes <paramref name="count"/> nodes from this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>, starting at 
            the specified <paramref name="index"/>
            </summary>
            <param name="index">The index.</param>
            <param name="count">The number of nodes to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.ReplaceAll(System.Collections.Generic.IEnumerable{`1})">
            <summary>Replaces the contents of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> with the nodes in the
            specified collection.
            </summary>
            <param name="collection">The collection of nodes that shall replace the nodes in 
            this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.RemoveAll(System.Predicate{`1})">
            <summary>
            Removes the all the nodes that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The match.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Find(System.Predicate{`1})">
            <summary>
            Searches for a node that matches the conditions defined 
            by the specified predicate, and returns the first matching node. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the node to search for.</param>
            <returns></returns>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Exists(System.Predicate{`1})">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> contains a node that matches the 
            conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the nodes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.FindAll(System.Predicate{`1})">
            <summary>
            Retrieves the all the nodes that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the nodes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Sort">
            <summary>
            Sorts the nodes in the this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> using the default comparer. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Sort(System.Comparison{`1})">
            <summary>
            Sorts the nodes in the this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> using the specified System.Comparison.
            </summary>
            <param name="comparison">The comparison to use when comparing nodes.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Sort(System.Collections.Generic.IComparer{`1})">
            <summary>
            Sorts the nodes in the this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> using the specified comparer.
            </summary>
            <param name="comparer">The comparer implementation to use when comparing nodes, or a null reference 
            to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`1})">
            <summary>
            Sorts the nodes in a range of nodes in this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedCollectionBase`2"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer implementation to use when comparing nodes, 
            or a null reference to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Move(System.Int32,System.Int32)">
            <summary>Move the item at <paramref name="fromIndex"/> to <paramref name="toIndex"/> where both
            indexes are prior to any insertion and removal operations.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <remarks>
            <para>
            The <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.Move(System.Int32,System.Int32)"/> method will move the item at position 
            <paramref name="fromIndex"/> in the collection to position 
            <paramref name="toIndex"/>, where <paramref name="toIndex"/>
            is the index  in the original collection where the moved item will be inserted; Move(0, 2)
            with input { A, B, C } will result in { B, C, A } after the move operation. Move(0, 0)
            will leave the collection unchanged. Move(0, 1) will result in { B, A, C }. Move(2, 0) will result in { C, A, B }.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            fromIndex or toIndex is outside the range of valid indexes, that is, 0 : Count-1.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeKeyedZombieCollectionBase`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1">
            <summary>Abstract base class for list-like document nodes.
            It does not expose any public methods to modify the collection,
            it is up to derived classes to do so.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.PropertyNames">
            <summary>
            Contains property name constants for the public properties of 
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.PropertyNames.Items">
            <summary>
            The name of the property Items.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.#ctor">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Count">
            <summary>
            Gets the number of elements contained in this instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero or index is equal to or greater than 
            <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Count"/>.
            </exception>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Contains(`0)">
            <summary>
            Determines whether the specified value is in this collection.
            </summary>
            <param name="value">The object to locate in this collection.
            The value can be <c>null</c>.</param>
            <returns><c>true</c> if value is found in this collection; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for this collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.IndexOf(`0)">
            <summary>
            Searches for the specified value and returns the zero-based index 
            of the first occurrence within this collection.
            </summary>
            <param name="value">The object to locate. The value can be <c>null</c>.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/> within this 
            collection, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.ToArray">
            <summary>Copies the elements of the collection to a new array.
            </summary>
            <returns>An array containing the elements.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalSet(System.Int32,`0)">
            <summary>Sets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The new item.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalCopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements to the array starting at the specified arrayIndex.
            </summary>
            <param name="array">The array to populate.</param>
            <param name="arrayIndex">Index to place the first element.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalAdd(`0)">
            <summary>
            Adds an item to this collection.
            </summary>
            <param name="item">
            The item to add.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalClear">
            <summary>
            Removes all items from this collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalRemove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this collection.
            </summary>
            <param name="item">The object to remove.</param>
            <returns>
            <c>true</c> if item was successfully removed from this collection;
            otherwise, <c>false</c>. 
            This method also returns false if item is not found.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalRemoveAll(System.Predicate{`0})">
            <summary>Remove all items that match the predicate.
            </summary>
            <param name="match">The predicate</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalItems">
            <summary>
            Gets the items currently in the underlying list. 
            USE WITH CAUTION: The OnAccessingItems override is NOT called and any invariants are thus not upheld.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalInsert(System.Int32,`0)">
            <summary>
            Inserts an element into this collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert. The value can be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or it is equal to or greater 
            than <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Count"/>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalRemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or it is equal to or greater 
            than <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Count"/>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalInsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            InsertRange.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalRemoveRange(System.Int32,System.Int32)">
            <summary>
            RemoveRange.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>Replaces the contents of the list with the elements in the
            specified collection.
            </summary>
            <param name="collection">The collection. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalMove(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="fromIndex">
            The zero-based index specifying the location of the item to be moved.
            </param>
            <param name="toIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            One of the indexes is less than zero or is greater than or equal to 
            the number of items in the collection.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalSort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the collection using the specified <see cref="T:System.Comparison`1"/> delegate.
            </summary>
            <param name="comparison">The comparison delegate to use when comparing elements.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined 
            by the specified predicate, and returns the first occurrence within the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.InternalGetArray">
            <summary>
            Copies the elements of the collection to a new array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.OnAccessingItems">
            <summary>
            Called before the items in this list are accessed with one of the public API methods.
            Override this method to inject code, that for instance uphold invariants, before 
            the items are accessed.
            NOTE: This method is not called when one of the protected API methods are called.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1">
            <summary>Base class for set-like document nodes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.PropertyNames">
            <summary>
            Contains property name constants for the public properties of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.PropertyNames.Items">
            <summary>
            The name of the property Items.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value>The number of elements.</value>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value><c>true</c> if it is read-only; otherwise <c>false</c>.</value>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSnapshotMultiplexor">
            <summary>
            Represents a document node in the document across several generations. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSnapshotMultiplexor.runtimeInvalidationTriggers">
            <summary>
            Thread safe triggers set up by runtime properties and event relays.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSnapshotMultiplexor.#ctor(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSnapshotMultiplexor"/> class.
            </summary>
            <param name="liveNode">The live node.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSnapshotMultiplexor.RuntimeInvalidationTriggers">
            <summary>
            Gets or sets thread safe triggers set up by runtime properties and event relays.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSnapshotMultiplexor.Share(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeSnapshotMultiplexor.UnShare(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LastValueHolder`1">
            <summary>
            This class holds the last value of the stateful runtime property which is used to compute the next value. The value is protected
            by the lock of this instance so that the runtime can be computeed in at at most one generation at a time. This will sequentialize the computations.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LastValueHolder`1.computing">
            <summary>
            A flag indicating whether there is a computation going on in any generation. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LastValueHolder`1.lastValue">
            <summary>
            The last value that was computed by the stateful runtime property, regardless of in which generation it was computed. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolder`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LastValueHolder`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolder`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.LastValueHolder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LastValueHolder`1"/> class by copying the content of <paramref name="other"/>.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolder`1.ComputeNextValue(Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty{`0})">
            <summary>
            Computes the next value of the specified stateful runtime property.
            </summary>
            <param name="statefulRuntimeProperty">The stateful runtime property.</param>
            <returns>The computed next value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolder`1.GetValue">
            <summary>
            Gets the value. This is used to be able to persist the state of the stateful runtime property.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1">
            <summary>
            This class is a wrapper around the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.LastValueHolder"/>. It is used manage the use of session overrides.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.lastValueHolder">
            <summary>
            The <see cref="P:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.LastValueHolder"/> that holds the state of the state ful runtime property. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.LastValueHolder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1"/> class.
            </summary>
            <param name="lastValueHolder">The last value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.LastValueHolder">
            <summary>
            Gets the last value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.GetValue">
            <summary>
            Gets the value. This is used for persistance of the stateful runtime property.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.RemoveSessionOverrides">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1">
            <summary>
            A class that holds a lazily computed value which can be used in an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/>. The value
            will be computed by the thread that first acesses it in the generation that the thread is using. It can then be read by other threads in other generations.
            However, those threads will get the value that was computed by the first thread even if the result would have been different if it had been recomputed.
            In this way, it is very different from a run time property.
            </summary>
            <typeparam name="T">The type of the lazily computed value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1.lazyValueHolderWrapper">
            <summary>
            This is a reference to an object which wraps the object that holds the lazy value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1.Value">
            <summary>
            Gets the value. The value will be computed if this is the first time the value is accessed. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1.ComputeValue">
            <summary>
            Compute the value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1.ShareNode(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1.ComputeValueCore">
            <summary>
            Override this method to compute the lazily computed value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1">
            <summary>
            A class that holds the value of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1"/>. The purpose of this class is to guard the lazy computation with a lock and store the result. 
            The lock and the value cannot be stored in the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyValue`1"/> because the same instance is not used in live and snapshots.
            </summary>
            <typeparam name="T">The type of the lazily computed value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1.computed">
            <summary>
            A flag which is set if the lazy value has been computed. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1.computing">
            <summary>
            A flag which is set if the computation of the lazy value is ongoing 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1.value">
            <summary>
            The laze value, if it has been computed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1"/> class.
            </summary>
            <param name="other">The other holder.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1.Deserialize(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Deserializes the specified info.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1.GetValue(Spotfire.Dxp.Framework.DocumentModel.LazyValue{`0})">
            <summary>
            Gets the lazily computed value and computes if it has not been computed previously.
            </summary>
            <param name="lazyValue">The lazy value document node.</param>
            <returns>The lazily computed value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1.Serialize(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Serializes the specified info.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.LazyValueHolder`1.TryGetValue(`0@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="value">The value.</param>
            <returns>True if the valeu was computed, otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring">
            <summary>
            Helper class for measuring the time for evaluating runtime properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.LockStringBuilders">
            <summary>
            The lock for the string builders.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.StringBuilders">
            <summary>
            The current string builders.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.filePath">
            <summary>
            The current file path.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.isWriting">
            <summary>
            A long representing whether we are monitoring performance, conceptually <c>true</c> or <c>false</c>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.StartLogging(System.String)">
            <summary>
            Starts the logging.
            </summary>
            <param name="fileName">The file path.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.StopLogging">
            <summary>
            Stops the logging.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.CreateRuntimePropertyStopwatchContext(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Creates the runtime property stopwatch context. Note: performance is _not_ affected in OFFICIAL since then null is returned.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>A disposable, <c>null</c> in official builds.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.GetStringBuilderOnCurrentThread(System.Text.StringBuilder)">
            <summary>
            Gets the string builder for current thread.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <returns>The string builder for current thread.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext">
            <summary>
            The runtime property stopwatch context. Used to keep track of runtime property performance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.Format">
            <summary>
            The table format (nr of columns).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.initializationTicksForRuntimePropertyCallstack">
            <summary>
            The initialization ticks for each runtime property in the runtime property callstack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.runtimePropertyCallStack">
            <summary>
            The runtime property callstack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.stringBuilderOnCurrentThread">
            <summary>
            The stringbuilder on current thread. Appended to as "this" is disposed, to get good measurements of evaluation ticks.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.callStack">
            <summary>
            The callstack.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.evaluationStart">
            <summary>
            The timepoint the evaluation started.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.owner">
            <summary>
            The owner.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.propertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.threadName">
            <summary>
            The thread name.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.ColumnNames">
            <summary>
            Gets the column names.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.ColumnTypes">
            <summary>
            Gets the column types.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.GetCallStack">
            <summary>
            Gets the call stack as a string.
            </summary>
            <returns>The call stack string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.GetInitializationTicks">
            <summary>
            Gets the initialization ticks.
            </summary>
            <returns>The initialization ticks.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PerformanceRuntimePropertyMonitoring.RuntimePropertyStopwatchContext.GetRuntimePropertyCallstack">
            <summary>
            Gets the runtime property callstack.
            </summary>
            <returns>The runtime property callstack.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedLastValueHolderWrapper`1">
            <summary>
            This class is the shared verion of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.LastValueHolderWrapper`1"/>
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedLastValueHolderWrapper`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.LastValueHolder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedLastValueHolderWrapper`1"/> class.
            </summary>
            <param name="lastValueHolder">The last value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedLastValueHolderWrapper`1.LastValueHolder">
            <summary>
            Gets the last value holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedLastValueHolderWrapper`1.GetValue">
            <summary>
            Gets the value. This for persistance of the stateful runtime property.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1">
            <summary>
            This class represents a kind of runtime property which has persisted state. The state is also passed to the computation when a new value of the property is computed. 
            The state that is passed to the computation does not necessarily comes from the rpevious generation. It can come from a later generation or from a state that has been undone.
            This makes a really strange form of property.
            <para/>
             The property has been designed to enable that color schemes can be computed on a worker thread. However, at the same time we want the resulting color assignment to be persisted.
            <para/>
            To create a stateful runtime property you should inherit from this class and override <see cref="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.ComputeNextValue(`0)"/>  and <see cref="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.CreateTrigger"/>. 
            This calls inherits from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> so an instance of the resulting class can be put in an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/>.
            </summary>
            <typeparam name="T">The type of the value containd in the stateful runtime property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.value">
            <summary>
            A runtime property that is used to implement the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1"/>. It holds the value of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.lastValueHolderWrapper">
            <summary>
            This is a reference to an object which wraps the object that holds the state that will be passed into future computations of the runtime propertry.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.Value">
            <summary>
            Gets the value of the stateful runtime property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.Wrapper">
            <summary>
            Gets the last value holder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.TryGetValidValue(`0@)">
            <summary>
            Tries to get the value of the staeful runtime property, without evaluating it.
            </summary>
            <param name="evaluatedValue">The value;</param>
            <returns><c>true</c> if the value was evaluated; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.ComputeNextValue(`0)">
            <summary>
            Overide this method to computes the next value of the stateful runtime property.
            </summary>
            <param name="oldValue">The old value.</param>
            <returns>The next value of the runtime property</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.CreateTrigger">
            <summary>
            Override this method to creates the trigger.
            </summary>
            <returns>The trigger</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.ShareNode(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.InitRuntimeProperties(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty{`0}@)">
            <summary>
            Inits the runtime properties.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.PropertyNames">
            <summary>
            The property names.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.PropertyNames.Value">
            <summary>
            The name of the property ValueHolder.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.StaticDelegates`1">
            <summary>
            This class is use to workaround a bug in SP1 of the .Net framework. It does no allow static fields in generic classes that are serialized. Thus
            we introduced this class which is not serialized.
            </summary>
            <typeparam name="TValue">The type of values in the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1"/></typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.StaticDelegates`1.Compute">
            <summary>
            The computer used in the runtime property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.StaticDelegates`1.Trigger">
            <summary>
            The trigger declarer used in the runtime property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.StaticDelegates`1.Compute_(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            The computer used in the runtime property.
            </summary>
            <param name="node">The node.</param>
            <returns>The computed value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StatefulRuntimeProperty`1.StaticDelegates`1.Trigger_(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            The trigger declarer used in the runtime property.
            </summary>
            <param name="node">The node.</param>
            <returns>The trigger.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.NotUpToDateCallback">
            <summary>
            The not up to date callback.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeState">
            <summary>
            This interface shall be implemented on <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> objects wanting to customize the document state behaviour.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeState.IncludePropertyInState(Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase)">
            <summary>
            Override to determine if a property should be included in the state.
            </summary>
            <param name="property">The property.</param>
            <returns><c>true</c> if the property should be included in the state; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeState.OnPropertyStateChanged(Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase},System.Object)">
            <summary>
            Override to handle special conditions after a change has been applied to an undoable node.
            </summary>
            <param name="properties">The collection of changed properties </param>
            <param name="additionalData">Additional data.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeState.GetAdditionalStateData">
            <summary>
            Override to save additional state data for document nodes with modifies properties.
            This data is then passed to the document node by <see cref="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeState.OnPropertyStateChanged(Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase},System.Object)"/>.
            </summary>
            <returns>An object containing new state data.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.CachedTypeProperty`1">
            <summary>
            Holds a cache of immutable, calculcated results only depending on the <see cref="T:System.Type"/> object.
            </summary>
            <typeparam name="T">The resulting type of the calculation</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CachedTypeProperty`1.results">
            <summary>
            The dictionary holding the cached result
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CachedTypeProperty`1.calculator">
            <summary>
            The calculator calculating the results.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CachedTypeProperty`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.CachedTypeProperty{`0}.Calculator)">
            <summary>
            Initializes a new instance of the CachedTypeProperty class with a given <see cref="T:Spotfire.Dxp.Framework.DocumentModel.CachedTypeProperty`1.Calculator"/> used to calculated the results.
            </summary>
            <param name="calculator">The calculator calculating the results.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.CachedTypeProperty`1.Calculator">
            <summary>
            The delegate used to calculate the results.
            </summary>
            <param name="type">The type for which to calculate the results.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CachedTypeProperty`1.Get(System.Type)">
            <summary>
            Calculates a result for the given <paramref name="type"/> object.
            Returns a cached result if the results has already been calculated.
            </summary>
            <param name="type">The type for which to calculate the results.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ExcludeSubtreeFromStateAttribute">
            <summary>
            Use this attribute to mark <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> classes which should be excluded from state saving.
            </summary>
            <remarks>
            Document tree ancestors of excluded classes will also be excluded.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExcludeSubtreeFromStateAttribute.cache">
            <summary>
            The cached type property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExcludeSubtreeFromStateAttribute.SetForType(System.Type)">
            <summary>
            Returns if the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ExcludeSubtreeFromStateAttribute"/> is set for the <paramref name="t"/> type.
            </summary>
            <param name="t">The type to examine.</param>
            <returns><c>true</c> if the attribute is set, <c>false otherwise.</c></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StateAwareSerializationAttribute">
            <summary>
            Use this attribute to mark <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> classes whose serialization methods specifically do not store cross references to non-persisted nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.StateAwareSerializationAttribute.cache">
            <summary>
            The cached type property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.StateAwareSerializationAttribute.SetForType(System.Type)">
            <summary>
            Returns if the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StateAwareSerializationAttribute"/> is set for the <paramref name="t"/> type.
            </summary>
            <param name="t">The type to examine.</param>
            <returns><c>true</c> if the attribute is set, <c>false otherwise.</c></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.NotPersistedAttributeHelper">
            <summary>
            Helper class to speed up usage of <see cref="T:Spotfire.Dxp.Framework.Persistence.NotPersistedAttribute"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.NotPersistedAttributeHelper.cache">
            <summary>
            The cached type property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NotPersistedAttributeHelper.SetForType(System.Type)">
            <summary>
            Returns if the <see cref="T:Spotfire.Dxp.Framework.Persistence.NotPersistedAttribute"/> is set for the <paramref name="t"/> type.
            </summary>
            <param name="t">The type to examine.</param>
            <returns><c>true</c> if the attribute is set, <c>false otherwise.</c></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState">
            <summary>
            This class holds one or more modifications to be applied to an analysis.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.ZipIdentifier">
            <summary>
            The identifier used for naming the serialized xml document in the zip archive.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.EmbeddedIdentifier">
            <summary>
            The prefix used for naming embedded resources in the zip archive.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.DocumentNodeStateIdentifier">
            <summary>
            The undoable property dummy name used for storing pure document node state objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.version">
            <summary>
            The version of the containing assembly.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.packedData">
            <summary>
            The packed zip data holding the serialized information.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsSubtreePersisted(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Determines if the subtree from the root to <paramref name="node"/> is persisted.
            </summary>
            <param name="node">The node to examine.</param>
            <returns>Returns <c>true</c> if the subtree is persisted; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.GetCrossReferences(Spotfire.Dxp.Framework.DocumentModel.Node,System.Boolean)">
            <summary>
            Returns a list of cross references referenced from the specified <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Node" />.
            </summary>
            <param name="node">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Node" /> for which cross references should be calculated.</param>
            <param name="allViews">if set to <c>true</c> then we should include the cross refernces for all views.</param>
            <returns>
            A List of document nodes.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.IncludeInState(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Determines if a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> and its children should be included in the document state.
            </summary>
            <param name="node">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/></param>
            <returns><c>true</c> if the sub tree should be included; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.InitializeDocument(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Initializes the document spanned by <paramref name="root"/> by setting the nodes changed status to false.
            </summary>
            <param name="root">The root <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Node"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.#ctor">
            <summary>
            Prevents a default instance of the DocumentState class from being created.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsDocumentNodeNewDelegate">
            <summary>
            Determines if document nodes are new or not.
            </summary>
            <param name="documentNode">The document node to examine.</param>
            <returns><c>true</c> if the document node is new, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsUndoableNodeChangedDelegate">
            <summary>
            Determines if undoable nodes have changed or not.
            </summary>
            <param name="undoableNodeBase">The undoable node to examine.</param>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns>
              <c>true</c> if the document node is new, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsDocumentNodeNew(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Default implementation of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsDocumentNodeNewDelegate"/>, calling <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.New"/>.
            </summary>
            <param name="documentNode">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.</param>
            <returns><c>true</c> if the <paramref name="documentNode"/> is new, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsUndoableNodeChanged(Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBase,System.Boolean)">
            <summary>
            Default implementation of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsUndoableNodeChangedDelegate"/>, calling <see cref="M:Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBase.GetChanged(System.Boolean)"/>.
            </summary>
            <param name="undoableNodeBase">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase"/>.</param>
            <param name="allViews">if set to <c>true</c> then we should consider all views.</param>
            <returns><c>true</c> if the <paramref name="undoableNodeBase"/> is changed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.CreateFromDocument(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Boolean)">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState"></see> by storing changed properties.
            </summary>
            <param name="root">The document root.</param>
            <param name="allViews">if set to <c>true</c> then include all views.</param>
            <returns>
            A new <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState" /> object.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.CreateFromDocumentInternal(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsDocumentNodeNewDelegate,Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsUndoableNodeChangedDelegate,System.Boolean)">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState"></see> by storing changed properties.
            </summary>
            <param name="root">The document root.</param>
            <param name="isDocumentNodeNew">Delegate which returns <c>true</c> if a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode" /> is new.</param>
            <param name="isUndoableNodeChanged">Delegate which returns <c>true</c> if an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase" /> is changed.</param>
            <param name="allViews">if set to <c>true</c> then include all views.</param>
            <returns>
            A new <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState" /> object.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.CreateInverse(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Boolean)">
            <summary>
            Creates an inverse of the current document state. Applying the current changes and
            then the inverse will lead to the initial state of the document.
            </summary>
            <param name="root">The document root.</param>
            <param name="allViews">if set to <c>true</c> then include all views.</param>
            <returns>
            The inverse.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.FindModifiedNodesInTree(Spotfire.Dxp.Framework.DocumentModel.Node,System.Collections.Generic.List{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange,Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Guid}},Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange,Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsDocumentNodeNewDelegate,Spotfire.Dxp.Framework.DocumentModel.DocumentState.IsUndoableNodeChangedDelegate,System.Boolean)">
            <summary>
            Finds modifies nodes in the sub-tree spanned by <paramref name="node" />.
            </summary>
            <param name="node">The starting <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Node" />.</param>
            <param name="changes">The list of root changes found.</param>
            <param name="persistedSubset">The collection of changes <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Node" /> objects and their corresponding <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange" /> owners.</param>
            <param name="idDependencies">The external document node id dependencies of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange" /> object.</param>
            <param name="parentChangeOwner">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange" />owning the parent <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Node" />. May be <c>null</c>.</param>
            <param name="isDocumentNodeNew">Delegate which returns <c>true</c> if a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode" /> is new.</param>
            <param name="isUndoableNodeChanged">Delegate which returns <c>true</c> if an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase" /> is changed.</param>
            <param name="allViews">if set to <c>true</c> then include all views.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.FindDependencies(Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange[],System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange,Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange}},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange,Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Guid}},System.Boolean)">
            <summary>
            Finds and records dependencies of the <paramref name="changes" />, given the nodes and owners in <paramref name="persistedSubset" />.
            </summary>
            <param name="changes">The input changes.</param>
            <param name="persistedSubset">The input persisted subset.</param>
            <param name="changeDependencies">The dependencies between different <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange" /> objects.</param>
            <param name="idDependencies">The external document node id dependencies of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange" /> object.</param>
            <param name="allViews">if set to <c>true</c> then include all views.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Build(Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange[],System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange,Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Guid}},System.IServiceProvider,System.Boolean)">
            <summary>
            Builds and stores changes internally.
            </summary>
            <param name="changes">The changes previously found.</param>
            <param name="persistedSubset">The nodes previously found.</param>
            <param name="idDependencies">The external document node id dependencies of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange" /> object.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="allViews">if set to <c>true</c> then include all views.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.OnPropertyStateChanged(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase},System.Object)">
            <summary>
            Calls OnPropertyStateChanged if the <paramref name="dn"/> object implements the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeState"/> interface.
            </summary>
            <param name="dn">The document node.</param>
            <param name="properties">The set of changed properties.</param>
            <param name="additionalData">The document node state object.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.FindDestinationNodes(Spotfire.Dxp.Framework.DocumentModel.Node,System.Collections.Generic.Dictionary{System.Guid,Spotfire.Dxp.Framework.DocumentModel.DocumentNode},System.Collections.Generic.Dictionary{Spotfire.Dxp.Internal.Utilities.Collections.Pair{System.Guid,System.String},Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase})">
            <summary>
            Find destinations nodes for which to apply state.
            </summary>
            <param name="node">The starting point of the search.</param>
            <param name="documentNodes">Contains the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> IDs and objects.</param>
            <param name="destinationProperties">Contains the undoable properties.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.UnpackSerializer(System.Byte[])">
            <summary>
            Unpacks a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer"/> from an array of bytes.
            </summary>
            <param name="packedData">The array of bytes.</param>
            <returns>A <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PackSerializer(Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer)">
            <summary>
            Packs the <paramref name="serializer"/> into a byte array.
            </summary>
            <param name="serializer">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer"/>.</param>
            <returns>A packed byte array.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.BroadcastPropertyStateChanged(Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase},System.Collections.Generic.Dictionary{System.Guid,System.Object})">
            <summary>
            Calls <see cref="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeState.OnPropertyStateChanged(Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase},System.Object)"/> for all properties in the sub-tree spanned 
            from the owner of <paramref name="roots"/>.
            The nodes are visited depth-first.
            </summary>
            <param name="roots">The root properties / nodes.</param>
            <param name="additional">The additional data for the document nodes.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.ApplyChanges(Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange[],System.Collections.Generic.Dictionary{Spotfire.Dxp.Internal.Utilities.Collections.Pair{System.Guid,System.String},Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase},System.Collections.Generic.Dictionary{System.Guid,Spotfire.Dxp.Framework.DocumentModel.DocumentNode},System.Boolean)">
            <summary>
            Applies the <paramref name="changes" /> to the <paramref name="destinationProperties" />.
            </summary>
            <param name="changes">The array of changes</param>
            <param name="destinationProperties">The destination properties.</param>
            <param name="documentNodes">The document node dictionary.</param>
            <param name="allViews">if set to <c>true</c> then include all views.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PropertyStateVisitor">
            <summary>
            The visitor visiting each property state.
            </summary>
            <param name="documentNode">The document node of the property. This is normally the parent of <paramref name="destination"/>.</param>
            <param name="destination">The destination node for which to set the property.</param>
            <param name="state">The contents of the change.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.VisitEachChangedPropertyState(Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange[],System.Collections.Generic.Dictionary{Spotfire.Dxp.Internal.Utilities.Collections.Pair{System.Guid,System.String},Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase},System.Collections.Generic.Dictionary{System.Guid,Spotfire.Dxp.Framework.DocumentModel.DocumentNode},Spotfire.Dxp.Framework.DocumentModel.DocumentState.PropertyStateVisitor)">
            <summary>
            Lets <paramref name="visitor"/> visit each changed property state
            </summary>
            <param name="changes">The list of changes.</param>
            <param name="destinationProperties">The undoable node dictionary.</param>
            <param name="documentNodes">The document node dictionary.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.ChangeCollector">
            <summary>
            This is a helper class used for collecting and broadcasting changes.
            </summary>
            <remarks>
            There is no order defined when broadcasting the changes. This should be changed, so that children are visited
            before their parents.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.ChangeCollector.additionalState">
            <summary>
            The dictionary holding pure document state objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.ChangeCollector.changedProperties">
            <summary>
            The dictionary holding all changed undoable nodes and their parent nodes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.ChangeCollector.Collect(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase,System.Object)">
            <summary>
            Collects and remembers a change.
            </summary>
            <param name="documentNode">The document node of the change.</param>
            <param name="destination">The undoable property of the change. If <c>null</c>, the change is a pure document node change.</param>
            <param name="state">The state data of the change.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.ChangeCollector.BroadcastChanges">
            <summary>
            Broadcasts the collected changes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.ApplyTo(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Boolean)">
            <summary>
            Applies the state to the document.
            </summary>
            <param name="root">The root <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode" />.</param>
            <param name="allViews">if set to <c>true</c> then include all views.</param>
            <exception cref="T:Spotfire.Dxp.Framework.DocumentModel.ApplyStateException"></exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.UnpackAndVisitChangedState(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.DocumentState.PropertyStateVisitor)">
            <summary>
            Unpacks the current state and visits <paramref name="visitor"/> for each changed property.
            </summary>
            <param name="root">The document root.</param>
            <param name="visitor">The change visitor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Create(System.IO.Stream)">
            <summary>
            Create a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState"/> object from <paramref name="src"/>.
            </summary>
            <param name="src">The source <see cref="T:System.IO.Stream"/>.</param>
            <returns>A new DocumentState object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Save(System.IO.Stream)">
            <summary>
            Saves the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState"/> object to <paramref name="dst"/>.
            </summary>
            <param name="dst">The destination <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Empty">
            <summary>
            Gets a value indicating whether the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState"/> is empty (contains no changes).
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange">
            <summary>
            This class holds one separate document state change.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.documentNodeId">
            <summary>
            The document node id of the originating node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.propertyName">
            <summary>
            The property name of the change.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.propertyState">
            <summary>
            The state (contents) of the change.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Object)">
            <summary>
            Initializes a new instance of the PersistedChange class with a document node state.
            This instance stores explicit changes for the given document node, as returned by 
            <see cref="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeState.GetAdditionalStateData"/>.
            </summary>
            <param name="documentNode">The originating document node.</param>
            <param name="state">The contents of the change.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase,System.Boolean)">
            <summary>
            Initializes a new instance of the PersistedChange class with an undoable node state.
            </summary>
            <param name="documentNode">The originating document node. This is always the parent of the <paramref name="undoableNodeBase" />.</param>
            <param name="undoableNodeBase">The undoable node holding the change.</param>
            <param name="allViews">if set to <c>true</c> then include all views.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.DocumentNodeId">
            <summary>
            Gets the document node id of the change parent node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.PropertyState">
            <summary>
            Gets the change contents.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.PropertyName">
            <summary>
            Gets the property name of the changed property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.IsDocumentNodeState">
            <summary>
            Gets a value indicating whether the instance holds a document node state or not.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PersistedChange class through deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer">
            <summary>
            Facilitates serialization and fault tolerant de-serialization of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.FragmentKeyStr">
            <summary>
            The serialization key used for storing an array of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.ChangeDataKeyStr">
            <summary>
            The serialization key used for storing an array of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.EmbeddedResourcesKeyStr">
            <summary>
            The serialization key used for an array storing embedded resources.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.fragment">
            <summary>
            The serialized fragment of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.changeData">
            <summary>
            The araay of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> objects to be serialized.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.ReplaceDocumentNodesWithIds(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo})">
            <summary>
            Replaces <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> objects in <paramref name="holes"/> with their IDs.
            </summary>
            <param name="holes">The holes.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.BuildItemList(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange,Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange}},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange,Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Guid}},System.Runtime.Serialization.ObjectIDGenerator)">
            <summary>
            Builds a list of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> objects from the <paramref name="changes"/>,
            <paramref name="changeDependencies"/>, <paramref name="idDependencies"/> and <paramref name="idGen"/>.
            </summary>
            <param name="changes">The input changes.</param>
            <param name="changeDependencies">The internal dependencies among <paramref name="changes"/>.</param>
            <param name="idDependencies">The dependencies between <paramref name="changes"/> and external document node ids.</param>
            <param name="idGen">Maps between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> objects and ids.</param>
            <returns>A list of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> objects.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.RemoveItem(System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item,Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item}},Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item)">
            <summary>
            Removes all occurrences of <paramref name="item"/> in <paramref name="items"/>.
            </summary>
            <param name="items">The items from which to remove <paramref name="item"/>.</param>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.AddDirectDependencies(System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item,Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item}},System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item})">
            <summary>
            Adds direct dependencies among <paramref name="items"/> to <paramref name="globalDependencies"/>.
            </summary>
            <param name="globalDependencies">The resulting collection of dependencies.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.AddIndirectDependencies(System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item,Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item}},Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item})">
            <summary>
            Adds (flattens) indirect dependencies among <paramref name="dependencies"/> and updates <paramref name="unavailable"/>.
            </summary>
            <param name="dependencies">The dependencies.</param>
            <param name="unavailable">The set of unavailable items.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.ExtractBestChange(System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item,Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item}},System.Collections.Generic.IList{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange},System.Collections.Generic.IList{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item})">
            <summary>
            Extracts the best <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> from <paramref name="dependencies"/>, 
            using <paramref name="persistedChanges"/> and <paramref name="items"/> as mappers.
            </summary>
            <param name="dependencies">The dependencies among <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> objects.</param>
            <param name="persistedChanges">The list of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> objects.</param>
            <param name="items">The list of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> objects.</param>
            <returns>The best <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/>, with the lowest number of dependencies on other <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> objects.</returns>
            <remarks>Circular dependencies are not handled - they are ignored.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.FindUnavailableItems(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item},System.Collections.Generic.Dictionary{System.Guid,Spotfire.Dxp.Framework.DocumentModel.DocumentNode})">
            <summary>
            Finds unavailable <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> objects with unresolved dependencies.
            </summary>
            <param name="items">The input collection of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> objects to examine.</param>
            <param name="documentNodes">The available <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> objects.</param>
            <returns>A set of unavailable <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> objects.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange[],System.Collections.Generic.ICollection{Spotfire.Dxp.Framework.DocumentModel.Node},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange,Spotfire.Dxp.Internal.Utilities.Collections.Set{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange}},System.Collections.Generic.Dictionary{Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange,Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Guid}},System.IServiceProvider)">
            <summary>
            Initializes a new instance of the Serializer class.
            </summary>
            <param name="changes">The input changes.</param>
            <param name="subset">The subset of nodes to be persisted.</param>
            <param name="changeDependencies">The internal dependencies among <paramref name="changes"/>.</param>
            <param name="idDependencies">The dependencies between <paramref name="changes"/> and external document node ids.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Instantiate(System.Collections.Generic.Dictionary{System.Guid,Spotfire.Dxp.Framework.DocumentModel.DocumentNode})">
            <summary>
            Instantiates the stored array of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> objects in the context of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> objects
            in <paramref name="documentNodes"/>.
            </summary>
            <param name="documentNodes">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> objects of the destination.</param>
            <returns>An array of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> objects.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.EmbeddedResources">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> objects held by this instance.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item">
            <summary>
            Defines the internal and external dependencies among the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item.serializedObjectId">
            <summary>
            The serialized object if of the accompanying <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item.documentNodeIds">
            <summary>
            Holds the document node this object depends on.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item.dependees">
            <summary>
            Holds the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> object this object depends on.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item.SerializedObjectId">
            <summary>
            Gets or sets the serialized object id of the corresponding <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.PersistedChange"/> object.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item.DocumentNodeIds">
            <summary>
            Gets or sets the DocumentNodeIds this object depends on.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item.Dependees">
            <summary>
            Gets or sets the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.Item"/> object this object depends on.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Serializer class through deserialization.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Serializer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentState.Version">
            <summary>
            Gets the version of the containing assembly.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.EventListenerToString`1">
            <summary>
            Delegate that converts an event listener to a string.
            </summary>
            <typeparam name="T">The type of the event listener.</typeparam>
            <param name="eventListener">The event listener.</param>
            <returns>A string describing the event listener.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.EventHandlerNotTornDownErrorMessageGenerator`1">
            <summary>
            Utility class for generating error messages for event handlers.
            </summary>
            <typeparam name="T">The type of the event handler.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventHandlerNotTornDownErrorMessageGenerator`1.CreateMessage(System.Collections.Generic.IEnumerable{`0},Spotfire.Dxp.Framework.DocumentModel.EventListenerToString{`0})">
            <summary>
            Create the message.
            </summary>
            <param name="eventListeners">The bag of event listeners.</param>
            <param name="eventListenerToString">The delegate that decribes the event handlers.</param>
            <returns>The string.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.EventRelay">
            <summary>
            A class for event relays.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ReleaseValueManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidated(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.MultipleEventRelay">
            <summary>
            A class for event relays.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MultipleEventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ReleaseValueManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MultipleEventRelay.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidated(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.EventRouter">
            <summary>
            Performs routing of events to properties on target nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.EventRouter.dependencyDeclarer">
            <summary>
            A method that can compute the trigger for the events that this instance shall route.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.EventRouter.owner">
            <summary>
            The DocumentNode that declared this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.EventRouter.routeMethod">
            <summary>
            A method that can compute the property and target node to route an event to.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.EventRouter.trigger">
            <summary>
            The trigger computed by the dependencyDeclarer, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.StatelessEventRouter,Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.EventRouter"/> class.
            </summary>
            <param name="owner">The node that declares the new instance.</param>
            <param name="routeMethod">A method that can compute the property and target node to route an event to.</param>
            <param name="dependencyDeclarer"> A method that can compute the trigger for the events that this instance shall route.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.#ctor(Spotfire.Dxp.Framework.DocumentModel.EventRouter,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.EventRouter"/> class.
            Used to transition to Shared.
            </summary>
            <param name="other">The other instance to initialize from.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#PropertyName">
            <summary>Gets the property name. This implementation has no 
            property name and always returns null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Trigger">
            <summary>
            Gets or sets the trigger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#Activate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ActivateForConfigureForRuntimeAttach">
            <summary>
            Activates the property in a runtime attach scenario.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidated(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidatedDuringConfigureForRuntimeAttach">
            <summary>
            This method is called when an ancestor is detached or invalidated during configuration for runtime attach.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ReleaseValueManager">
            <summary>
            This is a hack to avoid memory leaks when the undo stack resides in memory.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.Spotfire#Dxp#Framework#DocumentModel#Triggers#IThreadSafeInvalidationTarget#OnInvalidationTriggerFired(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason,Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.SetUpTriggers">
            <summary>
            Sets up triggers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventRouter.TearDownTriggers">
            <summary>
            Tears down triggers.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.EventTriggers">
            <summary>
            Collection class that contains the internal and external event handler connections.
            Instances of this class is stored in the document node state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.internalEventTriggers">
            <summary>
            The internal event triggers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.externalEventTriggers">
            <summary>
            The external event triggers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.#ctor(Spotfire.Dxp.Framework.DocumentModel.SharedEventTriggers,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.EventTriggers"/> class.
            </summary>
            <param name="sharedEventTriggers">The shared event triggers.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.EventTriggers"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.#ctor(Spotfire.Dxp.Framework.DocumentModel.EventTriggers,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.EventTriggers"/> class.
            </summary>
            <param name="eventTriggers">The event triggers.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.InternalEventTriggers">
            <summary>
            Gets the internal event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.NoOfInternalEventTriggers">
            <summary>
            Gets the number of internal event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.IsEmpty">
            <summary>
            Gets a value indicating whether the collection is empty or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.ExternalEventTriggers">
            <summary>
            Gets the external event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.NoOfExternalEventTriggers">
            <summary>
            Gets the number of external event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.HasExternalEventTriggers">
            <summary>
            Gets a value indicating whether there are any external event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.HasInternalEventTriggers">
            <summary>
            Gets a value indicating whether there are any internal event triggers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.FireInternalEventPropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.PropertyName,System.Action{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection})">
            <summary>
            Fire property triggers for internal event handlers.
            </summary>
            <param name="propertyName">The changed property name.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.FireExternalEventPropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.PropertyName,System.Action{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection})">
            <summary>
            Fire external event property triggers.
            </summary>
            <param name="propertyName">The changed property name.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.FireInternalEventSubTreePropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,System.Action{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection})">
            <summary>
            Fire sub tree triggers for internal event handlers.
            </summary>
            <param name="changedNode">The changed node.</param>
            <param name="propertyName">The property names.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.FireExternalEventSubTreePropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,System.Action{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection})">
            <summary>
            Fire sub tree triggers for external event handlers.
            </summary>
            <param name="changedNode">The changed node.</param>
            <param name="propertyName">The property names.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.ValidateNoEventTriggers(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Validate that there a no event triggers. This is checked when the node is disposed.
            </summary>
            <param name="node">The document node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.EventTriggers.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler">
            <summary>
            The type of external event handlers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection.documentView">
            <summary>
            The document view.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeEventHandlerConnection.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeEventHandlerConnection.pendingNotUptoDateCallback">
            <summary>True if a NotUptoDateCallback has been added to the CommandHistory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeEventHandlerConnection.disposed">
            <summary>Dispose has been called.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeEventHandlerConnection.documentView">
            <summary>
            The current document view when the event hander was added. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeEventHandlerConnection.executeInCurrentView">
            <summary>
            Flag indicating whether the event handler should be executed in the current view,
            i.e. the view that causes the trigger to fire rather than the current view when the event handler was added.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeEventHandlerConnection.#ctor(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="executeInCurrentView">if set to <c>true</c> the event handler will be executed in current view.</param>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeStreamingEventHandlerConnection.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeStreamingEventHandlerConnection.pendingNotUptoDateCallback">
            <summary>True if a NotUptoDateCallback has been added to the CommandHistory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeStreamingEventHandlerConnection.disposed">
            <summary>Dispose has been called.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeStreamingEventHandlerConnection.documentView">
            <summary>
            The current document view when the event hander was added. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalThreadSafeStreamingEventHandlerConnection.#ctor(Spotfire.Dxp.Framework.DocumentModel.ExternalStreamingEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>Creates a new instance.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager">
            <summary>
            A manager for external event handlers.
            </summary>
            <remarks>
            Create an instance of this class to listen to external events from the document. 
            Dispose the instance when external events from the document are no longer of interest.
            <para>
            When one or more of the document nodes that are listened to with an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager"/>
            are removed from the document, the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager"/> instance must be disposed. This is 
            required by the document model framework in order to avoid memory leaks.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExternalEventManager"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:ExternalEventManager"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.CreateDisabled">
            <summary>
            Creates an ExternalEventManager that is disabled and ignores all attempts to add event handlers.
            </summary>
            <returns>A disabled ExternalEventManager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.AddEventHandler(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Adds an event handler which is called when any of the triggers fire.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.AddEventHandlerWithoutView(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Adds an event handler that executes without a document view. 
            This method should be used with care. It can be used where the event handler is not connected to a specific main form.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.AddThreadSafeEventHandlerExecutingInCurrentView(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Adds the thread safe event handler that only is executed in the view that caused the trigger to fire.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.AddThreadSafeEventHandlerExecutingWithoutView(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Adds the thread safe event handler that only is executed in the view that caused the trigger to fire.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.AddThreadSafeEventHandler(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>Adds a thread safe event handler which is called when any of the triggers fire.
            </summary>
            <param name="node">A document node.</param>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers.</param>
            <remarks>The eventHandler will be invoked on the Application thread every time the triggers fire, even if
            runtime properties have not been read on the Application thread.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.AddThreadSafeEventHandler(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>Adds a thread safe event handler which is called when any of the triggers fire.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers.</param>
            <remarks>The eventHandler will be invoked on the Application thread every time the triggers fire, even if
            runtime properties have not been read on the Application thread.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.AddThreadSafeEventHandler(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandler,System.Boolean,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Adds a thread safe event handler which is called when any of the triggers fire.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="executeInCurrentView">if set to <c>true</c> the event handler will only be executed in the view that caused the trigger to fire.</param>
            <param name="triggers">The triggers.</param>
            <remarks>
            The eventHandler will be invoked on the Application thread every time the triggers fire, even if
            runtime properties have not been read on the Application thread.
            </remarks>
        </member>
        <member name="E:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.Disposed">
            <summary>
            Implements <see cref="T:System.ComponentModel.IComponent"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager.System#ComponentModel#IComponent#Site">
            <summary>
            Implements <see cref="T:System.ComponentModel.IComponent"/>.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan">
            <summary>
            Keeps track of the validity span and invalid property read callbacks during a snapshot read.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.ThreadContext.ILimitationTarget" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.firstGeneration">
            <summary>
            The first generation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.lastGeneration">
            <summary>
            The last generation
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.allPropertiesWereValidInLiveIgnoringStreamingWhenReadByComputingThread">
            <summary>
            <c>true</c> if all properties were valid in live ignoring streaming when they were read by the computing thread.
            <para>
            However, if a concurrent assignments affects a property while the computing thread is executing but after the property has been read then this field will not be affected.
            </para>
            <para>
            If the computing thread is reading a runtime property that has not been evaluated then the property will be affected by properties that are read
            by the evaluation of the runtime property. If the runtime property is currently evaluated by another thread then this value will be affected by the properties
            that are read by that other thread.
            Also, if a concurrent assignment affects a runtime property that is being evaluated then this property will be affected.
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.invalidPropertyReadCallback">
            <summary>
            The invalid property read callback.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.isInvokingPropertyReadCallBack">
            <summary>
            <c>true</c>, if the property read call back is currently invoked.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.snapshotReadHasCompleted">
            <summary>
            <c>true</c>, if the snapshot read has completed
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.callBackException">
            <summary>
            Contains an exception thropwn by the callback if the call back is invoked on another thread then the snapshot read.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.#ctor(System.Action{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan"/> class.
            </summary>
            <param name="invalidPropertyReadCallback">The invalid property read callback.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.PropagateValiditySpanClosedDueToModificationInLive(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.LimitValiditySpanDueToEvaluation(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.OnSnapshotReadCompleted">
            <summary>
            Called when the snapshot read has completed.
            </summary>
            <returns>A span with the validity of the comptutation in the snapshot read</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.GenerationSpan.InvokeCallBack(System.Action{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Invokes the call back.
            </summary>
            <param name="callBack">The call back.</param>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
            <param name="isOwningThread">if set to <c>true</c> [is owning thread].</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild">
            <summary>
            A marker interface for objects that may be children of document nodes.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IHoldsReferenceCountedObject">
            <summary>
            An interface for runtime property values that holds reference counted objects.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IHoldsReferenceCountedObject.Clone">
            <summary>
            Clone the reference counted object. 
            </summary>
            <remarks>This method is expected to increase the reference count on the reference counted object.</remarks>
            <returns>A clone of the object.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ImmutableObject`1">
            <summary>Constitutes an immutable shield for any <see cref="T:System.ICloneable"/> type.
            Typically used for <see cref="T:System.Drawing.Font"/> fields.
            Note: The immutability is achieved through cloning and may affect performance,
            consider making the type immutable by other means.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.ImmutableAttribute"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ImmutableObject`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ImmutableObject`1"/> class.
            </summary>
            <param name="baseInstance">The instance to base this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ImmutableObject`1"/> upon.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="baseInstance"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ImmutableObject`1.CreateInstance">
            <summary>Creates a new instance of type {T}, based on this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ImmutableObject`1"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ImmutableObject`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ImmutableObject`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2">
            <summary>
            Provides the abstract base class for a collection whose keys are embedded in the values. 
            </summary>
            <typeparam name="TKey">The type of key held by the nodes in the collection.</typeparam>
            <typeparam name="TNode">The type of the nodes in the collection.</typeparam>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.PropertyNames">
            <summary>
            Contains property name constants for the public properties of <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.PropertyNames.Items">
            <summary>
            The name of the property Items.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InternalDocumentNodeKeyedCollectionBase&lt;TKey, TNode&gt;"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.GetKeyPropertyNameCore">
            <summary>Override this method to return the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> for the key property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Contains(`1)">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/> contains the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if this instance contains the specified node; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.IndexOf(`1)">
            <summary>
            Gets the index of the specified node, or <c>-1</c> if the node is not 
            contained in this instance.
            </summary>
            <param name="node">The node.</param>
            <returns>The index.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Item(System.Int32)">
            <summary>
            Gets the <c>TNode</c> at the specified index.
            </summary>
            <value>The node.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.ContainsKey(`0)">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/> contains a node with
            the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if this instance contains a node with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the node with the specified <paramref name="key"/>. If such a node exists in 
            this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/>, the <paramref name="node"/>
            parameter will be assigned to that node.
            </summary>
            <param name="key">The key.</param>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if this instance contains a node with the specified key and the <paramref name="node"/>
                parameter has been assigned ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the nodes in this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/> to the specified
            <paramref name="array"/>, starting at the <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The index in the specified <paramref name="array"/> 
            where the first node shall be entered.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Item(`0)">
            <summary>
            Gets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>The element with the specified key. 
            If an element with the specified key is not found, an exception is thrown.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.ToArray">
            <summary>Copies the nodes of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/>
            to a new array.
            </summary>
            <returns>An array containing the nodes of this collection.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Add(`1)">
            <summary>
            Adds the specified node to this collection.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Clear">
            <summary>
            Remove all elements from this collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Remove(`1)">
            <summary>
            Removes the specified node from this collection.
            </summary>
            <param name="node">The node to remove.</param>
            <returns><c>true</c> if the node occurred in the list; otherwise <c>false</c>.</returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Insert(System.Int32,`1)">
            <summary>
            Inserts the specified node at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.RemoveAt(System.Int32)">
            <summary>
            Removes the node at the specified index.
            </summary>
            <param name="index">The index of the node to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the nodes of the specified collection to the end of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/>.
            </summary>
            <param name="collection">
            The collection whose nodes should be added to the end of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>. The collection itself cannot be null, 
            but it can contain nodes that are null, if type TNode is a reference type.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts the nodes of the specified collection at the specified index of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/>.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="collection">The collection whose nodes should be added to the end of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>. The collection itself cannot be null,
            but it can contain nodes that are null, if type TNode is a reference type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes <paramref name="count"/> nodes from this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/>, starting at 
            the specified <paramref name="index"/>
            </summary>
            <param name="index">The index.</param>
            <param name="count">The number of nodes to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.ReplaceAll(System.Collections.Generic.IEnumerable{`1})">
            <summary>Replaces the contents of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/> with the nodes in the
            specified collection.
            </summary>
            <param name="collection">The collection of nodes that shall replace the nodes in 
            this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.RemoveAll(System.Predicate{`1})">
            <summary>
            Removes the all the nodes that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The match.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Find(System.Predicate{`1})">
            <summary>
            Searches for a node that matches the conditions defined 
            by the specified predicate, and returns the first matching node. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the node to search for.</param>
            <returns></returns>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Exists(System.Predicate{`1})">
            <summary>
            Determines whether this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/> contains a node that matches the 
            conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the nodes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.FindAll(System.Predicate{`1})">
            <summary>
            Retrieves the all the nodes that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the nodes to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Sort">
            <summary>
            Sorts the nodes in the this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/> using the default comparer. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Sort(System.Comparison{`1})">
            <summary>
            Sorts the nodes in the this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/> using the specified System.Comparison.
            </summary>
            <param name="comparison">The comparison to use when comparing nodes.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Sort(System.Collections.Generic.IComparer{`1})">
            <summary>
            Sorts the nodes in the this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/> using the specified comparer.
            </summary>
            <param name="comparer">The comparer implementation to use when comparing nodes, or a null reference 
            to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`1})">
            <summary>
            Sorts the nodes in a range of nodes in this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer implementation to use when comparing nodes, 
            or a null reference to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Move(System.Int32,System.Int32)">
            <summary>Move the item at <paramref name="fromIndex"/> to <paramref name="toIndex"/> where both
            indexes are prior to any insertion and removal operations.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <remarks>
            <para>
            The <see cref="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.Move(System.Int32,System.Int32)"/> method will move the item at position 
            <paramref name="fromIndex"/> in the collection to position 
            <paramref name="toIndex"/>, where <paramref name="toIndex"/>
            is the index  in the original collection where the moved item will be inserted; Move(0, 2)
            with input { A, B, C } will result in { B, C, A } after the move operation. Move(0, 0)
            will leave the collection unchanged. Move(0, 1) will result in { B, A, C }. Move(2, 0) will result in { C, A, B }.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            fromIndex or toIndex is outside the range of valid indexes, that is, 0 : Count-1.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalDocumentNodeKeyedCollectionBase`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.KeyValuePairEqualityComparer`2">
            <summary>
            Comparer class to be used in dictionaries that uses KeyValuePair as key.
            It prevents the default reflection based comparer from kicking in, degrading performance.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.KeyValuePairEqualityComparer`2.Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.KeyValuePairEqualityComparer`2.Equals(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.KeyValuePairEqualityComparer`2.GetHashCode(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj to get the hash code for.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.MutablePropertySnapshotMultiplexor`1">
            <summary>
            A specialized version of the SnapshotMultiplexor for mutable nodes that holds the unfold manager for 
            mutable property triggers set up by runtime properties.
            </summary>
            <typeparam name="TNode">The type of the node held by the associated mutable property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.MutablePropertySnapshotMultiplexor`1.areMutablePropertyTriggersActive">
            <summary>
            Protected by lock on threadSafeTriggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.MutablePropertySnapshotMultiplexor`1.AreMutablePropertyTriggersActive">
            <summary>
            Gets or sets a value indicating if mutable property triggers are active.
            Protected by lock on threadSafeTriggers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutablePropertySnapshotMultiplexor`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutablePropertySnapshotMultiplexor`1.FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutablePropertySnapshotMultiplexor`1.RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutablePropertySnapshotMultiplexor`1.Share(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutablePropertySnapshotMultiplexor`1.UnShare(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTriggerManager`1.InternalTriggers">
            <summary>
            Gets or sets the internal triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTriggerManager`1.ExternalTriggers">
            <summary>
            Gets or sets the external triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTriggerManager`1.IsActive">
            <summary>
            Gets or sets a value indicating whether the trigger manager is active.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTriggerManager`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides">
            <summary>
            Holds override values for internal data structures in the document model framework, representing changes made to 
            a document in state Shared. Used for sessions against the master document in the Web Player.
            An object of this class is associated with the thread settings and accessible from the thread context.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.current">
            <summary>
            The overrides of the session associated with the current thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.avlCountMapping">
            <summary>
            Contains overrides for the count of undoable collection nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.avlNodeHeightMapping">
            <summary>
            Contains overrides for the height of avl nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.avlNodeKeyMapping">
            <summary>
            Contains overrides for the keys of avl nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.avlNodeLeftChildMapping">
            <summary>
            Contains overrides for the left child of avl nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.avlNodeOtherChildMapping">
            <summary>
            Contains overrides for the other child of avl nodes. Typically list childs in dictionaries.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.avlNodeRightChildMapping">
            <summary>
            Contains overrides for the right child of avl nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.avlNodeValueMapping">
            <summary>
            Contains overrides for the value of avl nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.avlRoot2Mapping">
            <summary>
            Contains overrides for the second avl root of undoable collection nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.avlRootMapping">
            <summary>
            Contains overrides for the avl root of undoable collection nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.secondaryOwner">
            <summary>
            Contains overrides for secondary owners of avl nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.crossReferencesThatReferenceMeMapping">
            <summary>
            The mapping from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NodeState"/> to list of cross references that reference the node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.designPatternViolationValueMapping">
            <summary>
            The mapping between an instance and value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.dictionaryDeltaMapping">
            <summary>
            The mapping between a dictionary and its delta mapping.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.dictionaryDeltaMappingLck">
            <summary>
            Lock for the dictionary delta.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.eventTriggersMapping">
            <summary>
            The mapping between a node state and its event triggers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.externalEventTriggersMapping">
            <summary>
            The mapping between an Event Triggers and its external triggers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.externalUnfoldManagerMapping">
            <summary>
            The mapping between a trigger manager and its external unfold manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.hasValueBeenReadInLiveMapping">
            <summary>
            The mapping between a rtp and whether it has been read in live.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.internalEventTriggersMapping">
            <summary>
            The mapping between Event Triggers and its internal triggers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.internalUnfoldManagerMapping">
            <summary>
            The mapping between a trigger manager and its internal unfold manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.listDeltaMapping">
            <summary>
            The mapping between a list and its delta mapping. Used for SharedSingletonList.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.listDeltaMappingLck">
            <summary>
            The lock for the list delta mapping.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.liveNodeMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor"/> and the live node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.snapshotMultiplexorCollectionMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor"/> and the collection of snapshots.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.undoableCrossReferenceViewPropertyValueMultiplexorMapping">
            <summary>
            The mapping between node state objects for undoable cross reference view properties to the value multiplexors. 
            </summary>
            [jgustavs, 2015-05-24]: This is a concurrent dictionry, but I am not sure if that is needed. The correspoonding structure for ordinary
            cross references is not a concurrent dictionary but I supsect that is flawed.
            I think that the structure needs to be accessed on a worker thread when we set up mutable property triggers.
            But maybe we use the value in the snapshot in that case? I suppose we could use the value in 
            the snapshot if the validity span says that it is valid in live. If the value is not valid then the 
            trigger on the property itself will not be needed because the runtime property computation would read 
            the snapshot which will close the validity span. The trigger on the property in the refferred node should
            be set up on the node that is pointed to by the snapshot.
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.undoableViewPropertyValueMultiplexorMapping">
            <summary>
            The mapping between node state objects for undoable view properties to the value multiplexors. 
            </summary>
            [jgustavs, 2015-05-24]: This is a concurrent dictionry, but I am not sure if that is needed. The correspoonding structure for ordinary
            cross references is not a concurrent dictionary but I supsect that is flawed.
            I think that the structure needs to be accessed on a worker thread when we set up mutable property triggers.
            But maybe we use the value in the snapshot in that case? I suppose we could use the value in 
            the snapshot if the validity span says that it is valid in live. If the value is not valid then the 
            trigger on the property itself will not be needed because the runtime property computation would read 
            the snapshot which will close the validity span. The trigger on the property in the refferred node should
            be set up on the node that is pointed to by the snapshot.
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.undoableCrossReferenceViewPropertySnapshotValueMultiplexorMapping">
            <summary>
            The mapping between snapshot node state objects for undoable cross reference view properties to the snapshot value multiplexors. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.undoableViewPropertySnapshotValueMultiplexorMapping">
            <summary>
            The mapping between snapshot node state objects for undoable view properties to the snapshot value multiplexors. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.viewEventHandlerConnectionsMultiplexorMapping">
            <summary>
            The mapping between internal event managers and the view event handler connections multiplexors.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.internalUnfoldManagersMapping">
            <summary>
            The internal unfold managers mapping.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.externalUnfoldManagersMapping">
            <summary>
            The external unfold managers mapping.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.areMutablePropertyTriggersActiveMapping">
            <summary>
            The are mutable property triggers active mapping
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.filteredUnfoldManagersMapping">
            <summary>
            The filtered unfold managers mapping.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.invalidationFiltersMapping">
            <summary>
            The invalidation filters mapping.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.runtimePropertyMultiplexorOverrideMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyMultiplexor"/> and the state of the runtime property multiplexor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.streamSubscriptionManagerHolderMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.IStreamSubscriptionManagerHolder"/> and <see cref="T:Spotfire.Dxp.Framework.DocumentModel.IStreamSubscriptionManagerHolder"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.snapshotOwnerCollectionMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotNodeState"/> and the owners on the corresponding snapshot node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.snapshotDocumentNodeStateChildrenMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.SharedSnapshotDocumentNodeState"/> and the children of the corresponding snapshot document node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.snapshotDocumentStateMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.SnapshotDocument"/> and the state of the snapshot document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.runtimePropertyValueOverrideMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.IRuntimePropertyValue"/> and the state of the runtime property value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.mutablePropertyTriggerActiveMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor"/> and mutable property triggers active..
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.nodeStateMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Node"/> and <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NodeState"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.nodeStructureOverrides">
            <summary>
            The mapping between a node and a arbitrary field.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.childrenMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NodeState"/> and its children.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ownerMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NodeState"/> and <see cref="T:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ownerMappingForSharedRuntimeAttachedNodesLck">
            <summary>
            The lock for the ownerMappingForSharedRuntimeAttachedNodes field.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ownerMappingForSharedRuntimeAttachedNodes">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NodeState"/> and <see cref="T:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner"/>. Used for Shared RuntimeAttached nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.propertyTriggersMapping">
            <summary>
            The mapping between Triggers and its property trigger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.snapshotMultiplexorMapping">
            <summary>
            The mapping between nodes and their snapshot multiplexors.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.subTreePropertyTriggersMapping">
            <summary>
            The mapping between Triggers and its sub tree property triggers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.threadSafeTriggersMapping">
            <summary>
            Mapping between snapshot multiplexor and the trigger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.triggerManagerMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NodeState"/> and TriggerManager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.unfoldDictionaryMapping">
            <summary>
            The mapping between an UnfoldManager and its unfold dictionary.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.unfoldEntryOccurenceCountMapping">
            <summary>
            The mapping between an unfold entry and the occurence count.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.triggerFilterOccurenceCountMapping">
            <summary>
            The trigger filter occurence count mapping
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.unfoldEntryTriggerMapping">
            <summary>
            The mapping between an unfold entry and a trigger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.unfoldManagerMapping">
            <summary>
            The mapping for an unfold manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.validitySpanLastGenerationMapping">
            <summary>
            The mapping between shared <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan"/>s and their last generation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.assignableRuntimePropertyValueOverrideMapping">
            <summary>
            The mapping between shared <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ISharedAssignableRuntimePropertyValue"/>s and their run time property value override.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.validitySpanMapping">
            <summary>
            The mapping between <see cref="T:Spotfire.Dxp.Framework.DocumentModel.State.NodeState"/> and <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.valueMapping">
            <summary>
            The mapping between an instance and value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.valueMapping2">
            <summary>
            The mapping between an instance and value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.assignableRuntimePropertyValueMapping">
            <summary>
            The mapping between assignable runtime property value managers and their runtime property values.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.assignableRuntimePropertyUserModificationManagerMapping">
            <summary>
            The mapping between assignable runtime property value managers and their user modification manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.valueMappingThreadSafe">
            <summary>
            The mapping between an instance and value. All operations on this object are made while holding a lock on it.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.zombieHolderMapping">
            <summary>
            The mapping between a node state and a zombie holder.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.commandHistory">
            <summary>
            The command history. Assigned through
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.transactionContextInformation">
            <summary>
            The state manipulated and accessed via the TransactionContext. Kept here to associate the state with the
            session rather than the thread. This makes the state accesible from both the UI thread and the ProgressOperationThread.
            (Fixes bug TS-25754)
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.isSessionForSharedDocument">
            <summary>
            A flag that is set when this is the overrides for a session on a shared document. This is used for error for detection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.immutablePreferences">
            <summary>
            The immutable preferences.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.CurrentOverrides">
            <summary>
            Gets or sets the overrides of the session associated with the current thread.
            Only called by ApplicationThread.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.CommandHistory">
            <summary>
            Gets the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.CommandHistory"/> assigned to the current session.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.DocumentViewManager">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Framework.Commands.IDocumentViewManager"/> assigned to the current session.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ImmutablePreferences">
            <summary>
            Gets the immutable preferences.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TransactionContextState">
            <summary>
            Gets or sets the state manipulated and accessed via the TransactionContext. Kept here to associate the state with the
            session rather than the thread. This makes the state accesible from both the UI thread and the ProgressOperationThread.
            (Fixes bug TS-25754)
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RuntimePropertyMultiplexorOverrideMapping">
            <summary>
            Gets the runtime property multiplexor collection mapping.
            </summary>
            <value>
            The runtime property multiplexor collection mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.StreamSubscriptionManagerHolderMapping">
            <summary>
            Gets the stream subscription manager holder mapping.
            </summary>
            <value>
            The stream subscription manager holder mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SnapshotMultiplexorCollectionMapping">
            <summary>
            Gets the snapshot multiplexor collection mapping.
            </summary>
            <value>
            The snapshot multiplexor collection mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TriggerFilterOccurenceCountMapping">
            <summary>
            Gets the trigger filter occurence count mapping.
            </summary>
            <value>
            The trigger filter occurence count mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.UndoableCrossReferenceViewPropertyValueMultiplexorMapping">
            <summary>
            Gets the mapping between node state objects for undoable cross reference view properties to the value multiplexors. 
            </summary>
            <value>
            The view property multiplexor mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.UndoableViewPropertyValueMultiplexorMapping">
            <summary>
            Gets the mapping between node state objects for undoable view properties to the value multiplexors. 
            </summary>
            <value>
            The view property multiplexor mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.UndoableCrossReferenceViewPropertySnapshotValueMultiplexorMapping">
            <summary>
            Gets the mapping between snapshot node state objects for view properties to the snapshot value multiplexors. 
            </summary>
            <value>
            The view property snapshot multiplexor mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.UndoableViewPropertySnapshotValueMultiplexorMapping">
            <summary>
            Gets the mapping between snapshot node state objects for view properties to the snapshot value multiplexors. 
            </summary>
            <value>
            The view property snapshot multiplexor mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ViewEventHandlerConnectionsMultiplexorMapping">
            <summary>
            Gets the mapping beteen internal event managers and the view event handler connections.
            </summary>
            <value>
            The view event handler connections collection mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.InternalUnfoldManagersMapping">
            <summary>
            Gets the internal unfold managers mapping.
            </summary>
            <value>
            The internal unfold managers mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ExternalUnfoldManagersMapping">
            <summary>
            Gets the external unfold managers mapping.
            </summary>
            <value>
            The external unfold managers mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.AreMutablePropertyTriggersActiveMapping">
            <summary>
            Gets the are mutable property triggers active mapping.
            </summary>
            <value>
            The are mutable property triggers active mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.FilteredUnfoldManagersMapping">
            <summary>
            Gets the filtered unfold managers mapping.
            </summary>
            <value>
            The filtered unfold managers mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.InvalidationFiltersMapping">
            <summary>
            Gets the invalidation filters mapping.
            </summary>
            <value>
            The invalidation filters mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SnapshotOwnerCollectionMapping">
            <summary>
            Gets the snapshot owner collection mapping.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SnapshotDocumentNodeStateChildrenMapping">
            <summary>
            Gets the snapshot document node state children mapping.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ValiditySpanLastGenerationMapping">
            <summary>
            Gets the validity span last generation mapping.
            </summary>
            <value>
            The validity span last generation mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.AssignableRuntimePropertyValueOverrideMapping">
            <summary>
            Gets the assignable runtime property values last generation mapping.
            </summary>
            <value>
            The assignable runtime property values last generation mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SnapshotDocumentStateMapping">
            <summary>
            Gets the snapshot document state mapping.
            </summary>
            <value>
            The snapshot document state mapping.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RuntimePropertyValueOverrideMapping">
            <summary>
            Gets the runtime property value state mapping.
            </summary>
            <value>
            The runtime property value state mapping.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.AssignCommandHistoryToSession(Spotfire.Dxp.Framework.Commands.CommandHistory)">
            <summary>
            Assigns the specified command history to the current session.
            </summary>
            <param name="value">The command history to assign.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ClearCommandHistory">
            <summary>
            Clears the reference to the command history.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveCrossReferencesThatReferenceMe(Spotfire.Dxp.Framework.DocumentModel.State.NodeState)">
            <summary>
            Removes the crossReferencesThatReferenceMe override for the specified node.
            </summary>
            <param name="nodeState">The node state.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveDesignPatternViolationValue(System.Object)">
            <summary>
            Removes a value for a specified design pattern violation property.
            </summary>
            <param name="key">The instance to remove the value for.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveDictionaryDeltaThreadSafe(System.Object)">
            <summary>
            Removes a delta for the specified shared dictionary.
            </summary>
            <param name="sharedDictionary">The shared dictionary.</param>
            <returns>True if the delta was found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveListDeltaThreadSafe(System.Object)">
            <summary>
            Removes a delta for the specified shared list.
            </summary>
            <param name="sharedList">The shared list.</param>
            <returns>True if the delta was found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveOwner(Spotfire.Dxp.Framework.DocumentModel.State.NodeState)">
            <summary>
            Removes the owner override for the specified node.
            </summary>
            <param name="nodeState">The node that has an override.</param>
            <returns>true if an override was removed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveChildrenOverrides(Spotfire.Dxp.Framework.DocumentModel.State.NodeState)">
            <summary>
            Removes the children override for the specified node.
            </summary>
            <param name="nodeState">The node that has an override.</param>
            <returns>true if an override was removed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveOwnerForSharedRuntimeAttached(Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState)">
            <summary>
            Removes the owner override for the specified node.
            </summary>
            <param name="nodeState">The node that has an override.</param>
            <returns>true if an override was removed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveUnfoldEntryOccurenceCount(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry)">
            <summary>
            Remove the occurence count for an unfold entry.
            </summary>
            <param name="sharedUnfoldEntry">The unfold entry.</param>
            <returns>True if the occurence count was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveUnfoldEntryTrigger(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry)">
            <summary>
            Remove the trigger for an unfold entry.
            </summary>
            <param name="sharedUnfoldEntry">The unfold entry.</param>
            <returns>True if the trigger was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveValue(System.Object)">
            <summary>
            Removes a value for a specified node.
            </summary>
            <param name="key">The instance to remove the value for.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveValue2(System.Object)">
            <summary>
            Removes a value for a specified node.
            </summary>
            <param name="key">The instance to remove the value for.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveValueThreadSafe(System.Object)">
            <summary>
            Removes a value for a specified node. Use when value can be accessed by multiple threads.
            </summary>
            <param name="key">The instance to remove the value for.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveZombieHolder(Spotfire.Dxp.Framework.DocumentModel.State.NodeState)">
            <summary>
            Remove a zombie old for the specified node state.
            </summary>
            <param name="nodeState">The node state.</param>
            <returns>True if the zombie hold was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlCount(Spotfire.Dxp.Framework.DocumentModel.UndoableCollectionNode,System.Int32)">
            <summary>
            Sets the overridden count of the specified collection node.
            </summary>
            <param name="undoableCollectionNode">The collection node.</param>
            <param name="count">The count to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlNodeHeight(Spotfire.Dxp.Framework.DocumentModel.AvlNode,System.Int32)">
            <summary>
            Sets the overridden height of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="height">The height to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlNodeKey(Spotfire.Dxp.Framework.DocumentModel.AvlNode,System.Object)">
            <summary>
            Sets the overridden key of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="key">The key to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlNodeLeftChild(Spotfire.Dxp.Framework.DocumentModel.AvlNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode)">
            <summary>
            Sets the overridden left child of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="leftChild">The left child to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlNodeOtherChild(Spotfire.Dxp.Framework.DocumentModel.AvlNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode)">
            <summary>
            Sets the overridden other child of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="otherChild">The other child to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlNodeRightChild(Spotfire.Dxp.Framework.DocumentModel.AvlNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode)">
            <summary>
            Sets the overridden right child of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="rightChild">The right child to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlNodeValue(Spotfire.Dxp.Framework.DocumentModel.AvlNode,System.Object)">
            <summary>
            Sets the overridden value of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlRoot(Spotfire.Dxp.Framework.DocumentModel.UndoableCollectionNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode)">
            <summary>
            Sets the overridden avl root of the specified collection node.
            </summary>
            <param name="undoableCollectionNode">The collection node.</param>
            <param name="avlRoot">The avl root to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlRoot2(Spotfire.Dxp.Framework.DocumentModel.UndoableCollectionNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode)">
            <summary>
            Sets the overridden second avl root of the specified collection node.
            </summary>
            <param name="undoableCollectionNode">The collection node.</param>
            <param name="avlRoot2">The second avl root to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAvlSecondaryOwner(Spotfire.Dxp.Framework.DocumentModel.AvlNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode)">
            <summary>
            Sets the overriden secondary owner of the specified collection node.
            </summary>
            <param name="avlNode">The collection node.</param>
            <param name="owner">The second avl root to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetCrossReferencesThatReferenceMe(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,System.Collections.Generic.IList{Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBaseCrossReference})">
            <summary>
            Sets the crossReferencesThatReferenceMe override for the specified node.
            </summary>
            <param name="nodeState">The node state.</param>
            <param name="crossReferences">The crossReferencesThatReferenceMe override.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetDesignPatternViolationValue``1(System.Object,``0)">
            <summary>
            Sets the value of the specified design pattern violation property.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The instance to set value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetDictionaryDeltaThreadSafe``1(System.Object,``0)">
            <summary>
            Sets the dictionary delta for the specified shared dictionary.
            </summary>
            <typeparam name="T">The type of the delta</typeparam>
            <param name="sharedDictionary">The shared dictionary to set the delta for.</param>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetListDeltaThreadSafe``1(System.Object,``0)">
            <summary>
            Sets the list delta for the specified shared list.
            </summary>
            <typeparam name="T">The type of the delta</typeparam>
            <param name="sharedList">The shared list to set the delta for.</param>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetLiveNode(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Sets the live node the specified snapshot multiplexor.
            </summary>
            <param name="multiplexor">The snapshot multiplexor to set the live node for.</param>
            <param name="liveNode">The live node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetNodeStructureOverride``1(Spotfire.Dxp.Framework.DocumentModel.Node,``0)">
            <summary>
            Sets a node structure value override for the specified node.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="node">The node to set the node structure override for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetOwner(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Sets the owner of the specified node state.
            </summary>
            <param name="nodeState">The node state to set owner for.</param>
            <param name="owner">The owner to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetChildren(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild[])">
            <summary>
            Sets the children of the specified node state.
            </summary>
            <param name="nodeState">The node state to set children for.</param>
            <param name="children">The children to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetOwnerForSharedRuntimeAttached(Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState,Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Sets the owner of the specified node state.
            </summary>
            <param name="nodeState">The node state to set owner for.</param>
            <param name="owner">The owner to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetUnfoldEntryOccurenceCount(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry,System.Int32)">
            <summary>
            Sets the occurence count for an unfold entry.
            </summary>
            <param name="sharedUnfoldEntry">The shared unfold entry.</param>
            <param name="occurenceCount">The occurence count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetUnfoldEntryTrigger(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Sets the unfold entry trigger.
            </summary>
            <param name="sharedUnfoldEntry">The shared unfold entry.</param>
            <param name="trigger">The trigger to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetValiditySpan(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Sets the validity span for the specified node state.
            </summary>
            <param name="nodeState">The node state to set validity span for.</param>
            <param name="validitySpan">The validity span to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveValiditySpanEntry(Spotfire.Dxp.Framework.DocumentModel.State.NodeState)">
            <summary>
            Romeves the validity span entry for the specified node state.
            </summary>
            <param name="nodeState">The node state to set validity span for.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetValue``1(System.Object,``0)">
            <summary>
            Sets the value of the specified node state.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The instance to set value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetValue2``1(System.Object,``0)">
            <summary>
            Sets the value of the specified node state.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The instance to set value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetRuntimePropertyValue``1(Spotfire.Dxp.Framework.DocumentModel.SharedAssignableRuntimePropertyValueManager{``0},Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue{``0})">
            <summary>
            Sets the runtime property value for a given assignable runtime property value manager.
            </summary>
            <typeparam name="T">The type of the value in the value manager.</typeparam>
            <param name="valueManager">The value manager.</param>
            <param name="valueWithValiditySpan">The value with validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetValueThreadSafe``1(System.Object,``0)">
            <summary>
            Sets the value of the specified node state. Use when value can be accessed by multiple threads.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The instance to set value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetZombieHolder``2(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.ZombieHolder{``0,``1})">
            <summary>
            Sets the zombie holder for the specified node state.
            </summary>
            <typeparam name="TNode">The type of node.</typeparam>
            <typeparam name="TZombie">The type of zombie.</typeparam>
            <param name="nodeState">The node state.</param>
            <param name="value">The zombie holder.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAvlCount(Spotfire.Dxp.Framework.DocumentModel.UndoableCollectionNode,System.Int32@)">
            <summary>
            Tries to get the count of the collection node.
            </summary>
            <param name="undoableCollectionNode">The collection node.</param>
            <param name="count">The sessions count of the collection node, if found.</param>
            <returns><c>True</c> if the count is overridden for the collection node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAvlNodeHeight(Spotfire.Dxp.Framework.DocumentModel.AvlNode,System.Int32@)">
            <summary>
            Tries to get the height of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="height">The sessions height of the avl node, if found.</param>
            <returns><c>True</c> if the height is overridden for the avl node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAvlNodeKey(Spotfire.Dxp.Framework.DocumentModel.AvlNode,System.Object@)">
            <summary>
            Tries to get the key of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="key">The sessions key of the avl node, if found.</param>
            <returns><c>True</c> if the key is overridden for the avl node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAvlNodeLeftChild(Spotfire.Dxp.Framework.DocumentModel.AvlNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode@)">
            <summary>
            Tries to get the left child of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="leftChild">The sessions left child of the avl node, if found.</param>
            <returns><c>True</c> if the left child is overridden for the avl node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAvlNodeOtherChild(Spotfire.Dxp.Framework.DocumentModel.AvlNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode@)">
            <summary>
            Tries to get the other child of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="otherChild">The sessions other child of the avl node, if found.</param>
            <returns><c>True</c> if the other child is overridden for the avl node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAvlNodeRightChild(Spotfire.Dxp.Framework.DocumentModel.AvlNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode@)">
            <summary>
            Tries to get the right child of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="rightChild">The sessions right child of the avl node, if found.</param>
            <returns><c>True</c> if the right child is overridden for the avl node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAvlNodeValue(Spotfire.Dxp.Framework.DocumentModel.AvlNode,System.Object@)">
            <summary>
            Tries to get the value of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="value">The sessions value of the avl node, if found.</param>
            <returns><c>True</c> if the value is overridden for the avl node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAvlRoot(Spotfire.Dxp.Framework.DocumentModel.UndoableCollectionNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode@)">
            <summary>
            Tries to get the avl root of the collection node.
            </summary>
            <param name="undoableCollectionNode">The collection node.</param>
            <param name="avlRoot">The sessions avl root of the collection node, if found.</param>
            <returns><c>True</c> if the avl root is overridden for the collection node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAvlRoot2(Spotfire.Dxp.Framework.DocumentModel.UndoableCollectionNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode@)">
            <summary>
            Tries to get the second avl root of the collection node.
            </summary>
            <param name="undoableCollectionNode">The collection node.</param>
            <param name="avlRoot2">The sessions second avl root of the collection node, if found.</param>
            <returns><c>True</c> if the second avl root is overridden for the collection node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetSecondaryOwner(Spotfire.Dxp.Framework.DocumentModel.AvlNode,Spotfire.Dxp.Framework.DocumentModel.AvlNode@)">
            <summary>
            Tries to get the secondary owner of the specified avl node.
            </summary>
            <param name="avlNode">The avl node.</param>
            <param name="owner">The secondary owner of the avl node, if found.</param>
            <returns><c>True</c> if the value is overridden for the avl node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetCrossReferencesThatReferenceMe(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,System.Collections.Generic.IList{Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBaseCrossReference}@)">
            <summary>
            Tries to get the crossReferencesThatReferenceMe of the specified node.
            </summary>
            <param name="nodeState">The node state.</param>
            <param name="crossReferences">The sessions crossReferencesThatReferenceMe of the node, if found.</param>
            <returns><c>True</c> if the crossReferencesThatReferenceMe is overridden for the node; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetDesignPatternViolationValue``1(System.Object,``0@)">
            <summary>
            Tries to get the value for the specified design pattern violation property.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The instance to get value for.</param>
            <param name="value">The value, if found.</param>
            <returns><c>True</c> if a value was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetDictionaryDeltaThreadSafe``1(System.Object,``0@)">
            <summary>
            Tries to get the dictionary delta for the specified shared dictionary.
            </summary>
            <typeparam name="T">The type of the delta.</typeparam>
            <param name="sharedDictionary">The shared dictionary.</param>
            <param name="delta">The dictionary delta, or null if not found.</param>
            <returns>True if the dictionary delta was found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetListDeltaThreadSafe``1(System.Object,``0@)">
            <summary>
            Tries to get the list delta for the specified shared list.
            </summary>
            <typeparam name="T">The type of the delta.</typeparam>
            <param name="sharedList">The shared list.</param>
            <param name="delta">The list delta, or null if not found.</param>
            <returns>True if the list delta was found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetLiveNode(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.Node@)">
            <summary>
            Tries to get the live node for the specified snapshot multiplexor.
            </summary>
            <param name="multiplexor">The snapshot multiplexor to get the live node for.</param>
            <param name="liveNode">The live node; or null if not found.</param>
            <returns>True if found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetNodeStructureOverride``1(Spotfire.Dxp.Framework.DocumentModel.Node,``0@)">
            <summary>
            Tries to get the node structure override for the specified node.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="node">The node to get the node structure override.</param>
            <param name="value">The node structure override; or default(T) if not found.</param>
            <returns>True if found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetOwner(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner@)">
            <summary>
            Tries to get the owner of the specified node state.
            </summary>
            <param name="nodeState">The node state to get owner for.</param>
            <param name="owner">The owner, if found.</param>
            <returns><c>True</c> if an owner was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetChildren(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeChild[]@)">
            <summary>
            Tries to get the children of the specified node state.
            </summary>
            <param name="nodeState">The node state to get children for.</param>
            <param name="children">The children, if found.</param>
            <returns><c>True</c> if a children override was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetOwnerForSharedRuntimeAttached(Spotfire.Dxp.Framework.DocumentModel.State.SharedRuntimeAttachedNodeState,Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner@)">
            <summary>
            Tries to get the owner of the specified node state.
            </summary>
            <param name="nodeState">The node state to get owner for.</param>
            <param name="owner">The owner, if found.</param>
            <returns><c>True</c> if an owner was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetUnfoldEntryOccurenceCount(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry,System.Int32@)">
            <summary>
            Tries to get the occurence count for an unfold entry.
            </summary>
            <param name="sharedUnfoldEntry">The unfold entry.</param>
            <param name="occurenceCount">The occurence count.</param>
            <returns>True if the occurence count was found; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetUnfoldEntryTrigger(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry,Spotfire.Dxp.Framework.DocumentModel.Trigger@)">
            <summary>
            Tries to get the trigger for an unfold entry.
            </summary>
            <param name="sharedUnfoldEntry">The unfold entry.</param>
            <param name="trigger">The trigger.</param>
            <returns>True if the trigger was found; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetValiditySpan(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan@)">
            <summary>
            Tries to get the validity span for the specified node state.
            </summary>
            <param name="nodeState">The node state to get validity span for.</param>
            <param name="validitySpan">The validity span, if found.</param>
            <returns><c>True</c> if a validity span was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetValue``1(System.Object,``0@)">
            <summary>
            Tries to get the value for the specified node state.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The instance to get value for.</param>
            <param name="value">The value, if found.</param>
            <returns><c>True</c> if a value was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetValue2``1(System.Object,``0@)">
            <summary>
            Tries to get the value for the specified node state.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The instance to get value for.</param>
            <param name="value">The value, if found.</param>
            <returns><c>True</c> if a value was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetRuntimePropertyValue``1(Spotfire.Dxp.Framework.DocumentModel.ISharedAssignableRuntimePropertyValueManager,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.AssignableRuntimePropertyValue{``0}@)">
            <summary>
            Tries to a get the runtime property value for an assignable runtime property value manager.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="valueManager">The value manager.</param>
            <param name="valueWithValiditySpan">The value with validity span.</param>
            <returns><c>true</c>, if the value is found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.GetOrCreateAssignableRuntimePropertyUserModificationManager(Spotfire.Dxp.Framework.DocumentModel.ISharedAssignableRuntimePropertyValueManager)">
            <summary>
            Gets the assignable runtime property user modification manager for the specified value manager or creates one if it does not exist.
            </summary>
            <param name="valueManager">The value manager.</param>
            <returns>The user modification manager.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetValueThreadSafe``1(System.Object,``0@)">
            <summary>
            Tries to get the value for the specified node state. Use when value can be accessed by multiple threads.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The instance to get value for.</param>
            <param name="value">The value, if found.</param>
            <returns><c>True</c> if a value was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetZombieHolder``2(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.ZombieHolder{``0,``1}@)">
            <summary>
            Tries to get the zombie holder for the specified node state.
            </summary>
            <typeparam name="TNode">The type of node.</typeparam>
            <typeparam name="TZombie">The type of zombie.</typeparam>
            <param name="nodeState">The node state.</param>
            <param name="value">The value, or null.</param>
            <returns><c>True</c> if found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveEventTriggers(Spotfire.Dxp.Framework.DocumentModel.State.NodeState)">
            <summary>
            Remove event triggers for the specified node state.
            </summary>
            <param name="nodeState">The node state.</param>
            <returns>True if the event triggers was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveExternalEventTriggers(Spotfire.Dxp.Framework.DocumentModel.EventTriggers)">
            <summary>
            Remove external event triggers from the specified event triggers.
            </summary>
            <param name="eventTriggers">The event trigger to remove the external event triggers for.</param>
            <returns>True if the external event triggers was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveExternalUnfoldManager(System.Object)">
            <summary>
            Remove the external unfold manager.
            </summary>
            <param name="manager">The manager key.</param>
            <returns>True if the external unfold manager was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveHasValueBeenReadInLive``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager{``0})">
            <summary>
            Remove the has been read in live value.
            </summary>
            <typeparam name="T">The type of the value manager.</typeparam>
            <param name="valueManager">The value manager.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveInternalEventTriggers(Spotfire.Dxp.Framework.DocumentModel.EventTriggers)">
            <summary>
            Remove internal event triggers for event triggers.
            </summary>
            <param name="eventTriggers">The event triggers.</param>
            <returns>True if the triggers was foudn and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveInternalUnfoldManagerThreadSafe(System.Object)">
            <summary>
            Remove the internal unfold manager for a manager.
            </summary>
            <param name="manager">The manager.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveNodeState(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Removes the node state override for the specified node.
            </summary>
            <param name="node">The node that has an override.</param>
            <returns>true if an override was removed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemovePropertyTriggers(System.Object)">
            <summary>
            Removes property triggers from a host.
            </summary>
            <param name="triggerHost">The trigger host.</param>
            <returns>True if the property triggers was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveSnapshotMultiplexor(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Removes the snapshot multiplexor override for the specified node.
            </summary>
            <param name="node">The node that has an override.</param>
            <returns>true if an override was removed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveSubTreePropertyTriggers(System.Object)">
            <summary>
            Remove sub tree property triggers from a trigger host.
            </summary>
            <param name="triggerHost">The trigger host.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveThreadSafeTriggers(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor)">
            <summary>
            Remove thread safe triggers from a snapshot multiplexor.
            </summary>
            <param name="snapshotMultiplexor">The snapshot multiplexor.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveTriggerManager(Spotfire.Dxp.Framework.DocumentModel.State.NodeState)">
            <summary>
            Removes the trigger manager for a node state.
            </summary>
            <param name="nodeState">The node state.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveUnfoldDictionary(System.Object)">
            <summary>
            Removes the unfold dictionary for a unfold manager.
            </summary>
            <param name="unfoldManager">The unfold manager.</param>
            <returns>True if the value was found and removed; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.RemoveUnfoldManagerThreadSafe(System.Object)">
            <summary>
            Removes the unfold manager for the value manager.
            </summary>
            <param name="valueManager">The value manager.</param>
            <returns>True if the value was found; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetAreMutablePropertyTriggersActiveThreadSafe(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,System.Boolean)">
            <summary>
            Sets the mutable property triggers active flag for the specified snapshot multiplexor.
            </summary>
            <param name="snapshotMultiplexor">The snapshot multiplexor to set mutable property triggers active flag for.</param>
            <param name="value">The mutable property triggers active flag to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetEventTriggers(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.EventTriggers)">
            <summary>
            Sets the event triggers for the specified node state.
            </summary>
            <param name="nodeState">The node state to set the event triggers for.</param>
            <param name="eventTriggers">The event triggers to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetExternalEventTriggers(Spotfire.Dxp.Framework.DocumentModel.EventTriggers,Spotfire.Dxp.Framework.DocumentModel.Triggers{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection})">
            <summary>
            Set the external event triggers for the specified event triggers
            </summary>
            <param name="eventTriggers">The event triggers to set the external event triggers for.</param>
            <param name="externalEventTriggers">The external event triggers to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetExternalUnfoldManager``1(Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTriggerManager{``0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,``0})">
            <summary>
            Sets the external unfold manager for a trigger manager.
            </summary>
            <typeparam name="T">The type of the trigger manager.</typeparam>
            <param name="triggerManager">The trigger manager to set the external unfold manager for.</param>
            <param name="value">The external unfold manager to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetExternalUnfoldManager``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager{``0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,``0})">
            <summary>
            Set the unfold manager for a value manager.
            </summary>
            <typeparam name="T">The type of the value manager.</typeparam>
            <param name="valueManager">The value manager.</param>
            <param name="value">The unfold manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetHasValueBeenReadInLive``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager{``0},System.Boolean)">
            <summary>
            Set the has been read in live property for a value manager.
            </summary>
            <typeparam name="T">The type of the value manager.</typeparam>
            <param name="valueManager">The value manager.</param>
            <param name="value">The has been read in live value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetInternalEventTriggers(Spotfire.Dxp.Framework.DocumentModel.EventTriggers,Spotfire.Dxp.Framework.DocumentModel.Triggers{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection})">
            <summary>
            Set the internal event triggers for the specified event triggers.
            </summary>
            <param name="eventTriggers">The event trigger to set the internal event triggers for.</param>
            <param name="internalEventTriggers">The internal event triggers to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetInternalUnfoldManagerThreadSafe``1(System.Object,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,``0})">
            <summary>
            Set the internal unfold manager for the specified trigger manager.
            </summary>
            <typeparam name="T">The type of the trigger manager.</typeparam>
            <param name="key">The trigger manager to set the internal unfold manager for</param>
            <param name="value">The internal unfold manager to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetNodeState(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.State.NodeState)">
            <summary>
            Sets the node state for the specified node.
            </summary>
            <param name="node">The node to set node state for.</param>
            <param name="value">The node state to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetPropertyTriggers``1(Spotfire.Dxp.Framework.DocumentModel.Triggers{``0},System.Collections.Generic.IDictionary{Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Internal.Utilities.Collections.IBag{``0}})">
            <summary>
            Sets the property triggers for the specified triggers.
            </summary>
            <typeparam name="T">The type of the triggers.</typeparam>
            <param name="triggers">The triggers to set the property triggers for</param>
            <param name="propertyTriggers">The property triggers to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetSnapshotMultiplexor(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor)">
            <summary>
            Sets the snapshot multiplexor for the specified node.
            </summary>
            <param name="node">The node to set snapshot multiplexor for.</param>
            <param name="value">The snapshot multiplexor to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetSubTreePropertyTriggers``1(Spotfire.Dxp.Framework.DocumentModel.Triggers{``0},System.Collections.Generic.IDictionary{System.Collections.Generic.KeyValuePair{System.Type,Spotfire.Dxp.Framework.DocumentModel.PropertyName},Spotfire.Dxp.Internal.Utilities.Collections.IBag{``0}})">
            <summary>
            Sets the sub tree property triggers for the specified triggers.
            </summary>
            <typeparam name="T">The type of triggers</typeparam>
            <param name="triggers">The triggers to set the sub tree property triggers.</param>
            <param name="subTreePropertyTriggers">The sub tree property triggers to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetThreadSafeTriggers(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.Triggers{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget})">
            <summary>
            Sets the thread safe triggers for a snapshot multiplexor.
            </summary>
            <param name="snapshotMultiplexor">The snapshot multiplexor.</param>
            <param name="value">The thread safe triggers.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetTriggerManager``1(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,``0)">
            <summary>
            Sets the trigger manager for the specified node state.
            </summary>
            <typeparam name="T">The type of the trigger manager.</typeparam>
            <param name="nodeState">The node state to set the trigger manager for.</param>
            <param name="value">The trigger manager to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetUnfoldDictionary``2(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1},System.Collections.Generic.IDictionary{Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldKey{``0,``1},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry})">
            <summary>
            Sets the unfold dictionary for the specified unfold manager.
            </summary>
            <typeparam name="TTarget">The type of the unfold manager target.</typeparam>
            <typeparam name="TNode">the type of the unfold manager node.</typeparam>
            <param name="unfoldManager">The unfold manager to set the unfold dictionary for.</param>
            <param name="value">The unfold dictionary to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetUnfoldManagerThreadSafe``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager{``0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,``0})">
            <summary>
            Sets the unfold manager for a value manager.
            </summary>
            <typeparam name="T">The type of the value manager.</typeparam>
            <param name="valueManager">The value manager.</param>
            <param name="value">The unfold manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetAreMutablePropertyTriggersActiveThreadSafe(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,System.Boolean@)">
            <summary>
            Tries to get the mutable property triggers active flag for the specified snapshot multiplexor.
            </summary>
            <param name="snapshotMultiplexor">The node state to get value for.</param>
            <param name="value">The active flag, if found.</param>
            <returns><c>True</c> if a active flag was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetEventTriggers(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,Spotfire.Dxp.Framework.DocumentModel.EventTriggers@)">
            <summary>
            Tries to get the event triggers for the specified node state.
            </summary>
            <param name="nodeState">The node state to get the event triggers for.</param>
            <param name="eventTriggers">The event trigger; null if not found.</param>
            <returns>True if event triggers where found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetExternalEventTriggers(Spotfire.Dxp.Framework.DocumentModel.EventTriggers,Spotfire.Dxp.Framework.DocumentModel.Triggers{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection}@)">
            <summary>
            Tries to get the external event triggers for the specified event triggers.
            </summary>
            <param name="eventTriggers">The event trigger to get the external event triggers for.</param>
            <param name="externalEventTriggers">The external event triggers; null if not found.</param>
            <returns>True if the external event triggers where found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetExternalUnfoldManager``1(Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTriggerManager{``0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,``0}@)">
            <summary>
            Tries to get the external unfold manager for the specified trigger manager.
            </summary>
            <typeparam name="T">The type of the trigger manager.</typeparam>
            <param name="triggerManager">The trigger manager to get the external unfold manager for.</param>
            <param name="unfoldManager">The external unfold manager; null if not found.</param>
            <returns>True if the external unfold manager where found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetExternalUnfoldManager``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager{``0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,``0}@)">
            <summary>
            Tries to get the external unfold manager for the specified value manager.
            </summary>
            <typeparam name="T">The type of the value manager.</typeparam>
            <param name="valueManager">The value manager.</param>
            <param name="overridingValue">The external unfold manager.</param>
            <returns>True if the external unfold manager where found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetHasValueBeenReadInLive``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager{``0},System.Boolean@)">
            <summary>
            Try to get the has been read in live value for a value manager.
            </summary>
            <typeparam name="T">The type of the value manager.</typeparam>
            <param name="valueManager">The value manager.</param>
            <param name="overridingValue">The has been read in live value.</param>
            <returns>True if the value was found; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetInternalEventTriggers(Spotfire.Dxp.Framework.DocumentModel.EventTriggers,Spotfire.Dxp.Framework.DocumentModel.Triggers{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection}@)">
            <summary>
            Tries to get the internal event triggers for the specified event triggers.
            </summary>
            <param name="eventTriggers">The event triggers to get the internal event triggers for.</param>
            <param name="internalEventTriggers">The internal event triggers; null if not found.</param>
            <returns>True if the internal event triggers where found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetInternalUnfoldManagerThreadSafe``1(System.Object,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,``0}@)">
            <summary>
            Tries to get the internal unfold manager for the specified trigger manager.
            </summary>
            <typeparam name="T">The type of the trigger manager.</typeparam>
            <param name="key">The trigger manager to get the internal unfold manager for.</param>
            <param name="unfoldManager">The internal unfold manager; null if not found.</param>
            <returns>True if the internal unfold manager where found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetNodeState(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.State.NodeState@)">
            <summary>
            Tries to get the value for the specified node state.
            </summary>
            <param name="node">The node state to get value for.</param>
            <param name="value">The value, if found.</param>
            <returns><c>True</c> if a value was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetPropertyTriggers``1(Spotfire.Dxp.Framework.DocumentModel.Triggers{``0},System.Collections.Generic.IDictionary{Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Internal.Utilities.Collections.IBag{``0}}@)">
            <summary>
            Tries to get the property triggers for the specified triggers.
            </summary>
            <typeparam name="T">The type of triggers.</typeparam>
            <param name="triggers">The triggers to get the property triggers for.</param>
            <param name="propertyTriggers">The property triggers; null if not found.</param>
            <returns>True if the property triggers where found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetSnapshotMultiplexor(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor@)">
            <summary>
            Tries to get the snapshot multiplexor for the specified node .
            </summary>
            <param name="node">The node to get value for.</param>
            <param name="value">The snapshot multiplexor, if found.</param>
            <returns><c>True</c> if a snapshot multiplexor was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetSnapshotMultiplexorUnsafe(Spotfire.Dxp.Framework.DocumentModel.Node,Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor@)">
            <summary>
            Tries to get the snapshot multiplexor for the specified node .
            </summary>
            <param name="node">The node to get value for.</param>
            <param name="value">The snapshot multiplexor, if found.</param>
            <returns><c>True</c> if a snapshot multiplexor was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetSubTreePropertyTriggers``1(Spotfire.Dxp.Framework.DocumentModel.Triggers{``0},System.Collections.Generic.IDictionary{System.Collections.Generic.KeyValuePair{System.Type,Spotfire.Dxp.Framework.DocumentModel.PropertyName},Spotfire.Dxp.Internal.Utilities.Collections.IBag{``0}}@)">
            <summary>
            Tries to get the sub tree property triggers for the specified triggers.
            </summary>
            <typeparam name="T">The type of triggers.</typeparam>
            <param name="triggers">The triggers to get the sub tree property triggers for.</param>
            <param name="subTreePropertyTriggers">The sub tree property triggers; null if not found.</param>
            <returns>True if the sub tree property triggers where found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetThreadSafeTriggers(Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor,Spotfire.Dxp.Framework.DocumentModel.Triggers{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget}@)">
            <summary>
            Tries to get the thread safe triggers from a snapshot multiplexor.
            </summary>
            <param name="snapshotMultiplexor">The snapshot multiplexor.</param>
            <param name="overridingValue">The thread safe triggers.</param>
            <returns>True if the value was found; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetTriggerManager``1(Spotfire.Dxp.Framework.DocumentModel.State.NodeState,``0@)">
            <summary>
            Tries to get the trigger manager for the specified node state.
            </summary>
            <typeparam name="T">The type of the trigger manager.</typeparam>
            <param name="nodeState">The node state to get the trigger manager for.</param>
            <param name="triggerManager">The trigger manager; default(T) if not found.</param>
            <returns><c>True</c> if a trigger manager was found; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetUnfoldDictionary``2(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{``0,``1},System.Collections.Generic.IDictionary{Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldKey{``0,``1},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry}@)">
            <summary>
            Tries to get the unfold dictionary for the specified unfold manager.
            </summary>
            <typeparam name="TTarget">The type of the unfold manager target.</typeparam>
            <typeparam name="TNode">The type of the unfold manager node.</typeparam>
            <param name="unfoldManager">The unfold manager to get the unfold dictionary for.</param>
            <param name="unfoldDictionary">The unfold dictionary; null if not found.</param>
            <returns>True if the unfold dictionary was found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.TryGetUnfoldManagerThreadSafe``1(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.ValueManager{``0},Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,``0}@)">
            <summary>
            Tries the get unfold manager for a value manager.
            </summary>
            <typeparam name="T">The type of the value manager.</typeparam>
            <param name="valueManager">The value manager.</param>
            <param name="overridingValue">The unfold manager.</param>
            <returns>True if the value was found; false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ValidateSnapshotOverridesHaveBeenRemoved">
            <summary>
            Validates that the overrides that may be needed by a snapshot have been removed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.EnableOverridesForSessionOnSharedDocument">
            <summary>
            Enables overrides for session on shared document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ThrowOverridesHasNotBeenRemoved(System.Type)">
            <summary>
            Throws an exception used when overrides has not been removed.
            </summary>
            <param name="typ">The typ.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ValidateUseOfNonThreadSafeStructure">
            <summary>
            Validates that an operation is performed on the application thread. All structured that are 
            manipulated on background threads must be thread safe.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.ValidateIsSessionForSharedDocument">
            <summary>
            Validates that the session is for a session on a shared document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SessionOverrides.SetImmutablePreferences(Spotfire.Dxp.Framework.Preferences.IImmutablePreferences)">
            <summary>
            Sets the immutable preferences.
            </summary>
            <param name="preferences">The immutable preferences.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1">
            <summary>
            A bag shared by concurrent sessions in the WebPlayer.
            Wraps a dictionary and handles session overrides of removed, added and replaced entries.
            </summary>
            <typeparam name="T">The type of elements in the bag.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.wrapped">
            <summary>
            The bag wrapped by this SharedBag.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.#ctor(Spotfire.Dxp.Internal.Utilities.Collections.IBag{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1"/> class.
            </summary>
            <param name="bag">The bag to wrap.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.Count">
            <summary>
            Gets a value indicating how many items the bag contains.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.Add(`0)">
            <summary>
            Adds an item to the bag.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements in the bag to the specified array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from Bag. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.GetMultiplicity(`0)">
            <summary>
            Gets a value indicating how many times the specified item occurs of the bag.
            </summary>
            <param name="item">The item to check multiplicity for.</param>
            <returns>How many times the item occurs.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.Remove(`0)">
            <summary>
            Removes one occurence of the specified item from the bag.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>true if the item occured in the bag, otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedBag`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedEventRouter">
            <summary>
            The version of EventRouter used in a shared nodes scenario (i.e., the WebPlayer).
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedEventRouter.#ctor(Spotfire.Dxp.Framework.DocumentModel.EventRouter,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedEventRouter"/> class.
            Used to transition to Shared.
            </summary>
            <param name="other">The other instance to initialize from.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedEventRouter.Trigger">
            <summary>
            Gets or sets the trigger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedEventRouter.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedEventTriggers">
            <summary>
            The shared version of the EventTriggers class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedEventTriggers.#ctor(Spotfire.Dxp.Framework.DocumentModel.EventTriggers,Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedEventTriggers"/> class.
            </summary>
            <param name="eventTriggers">The event triggers.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedEventTriggers.ExternalEventTriggers">
            <summary>
            Gets the external event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedEventTriggers.InternalEventTriggers">
            <summary>
            Gets the internal event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedEventTriggers.HasExternalEventTriggers">
            <summary>
            Gets a value indicating whether there are any external event triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedEventTriggers.HasInternalEventTriggers">
            <summary>
            Gets a value indicating whether there are any internal event triggers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedEventTriggers.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedMutablePropertyTriggerManager`1">
            <summary>
            The shared version of the MutablePropertyTriggerManager class.
            </summary>
            <typeparam name="T">The type of trigger manager.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedMutablePropertyTriggerManager`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTriggerManager{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedMutablePropertyTriggerManager`1"/> class.
            </summary>
            <param name="triggerManager">The trigger manager.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedMutablePropertyTriggerManager`1.InternalTriggers">
            <summary>
            Gets or sets the internal triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedMutablePropertyTriggerManager`1.ExternalTriggers">
            <summary>
            Gets or sets the external triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedMutablePropertyTriggerManager`1.IsActive">
            <summary>
            Gets or sets a value indicating whether the trigger manager is active.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedMutablePropertyTriggerManager`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SharedTriggers`1">
            <summary>
            The shared version of the Triggers class.
            </summary>
            <typeparam name="T">The type of triggers.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedTriggers`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.Triggers{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SharedTriggers`1"/> class.
            </summary>
            <param name="triggers">The triggers.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedTriggers`1.HasPropertyTriggers">
            <summary>
            Gets a value indicating whether any property triggers exists.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedTriggers`1.HasSubTreePropertyTriggers">
            <summary>
            Gets a value indicating whether any sub tree property triggers exists.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedTriggers`1.PropertyTriggers">
            <summary>
            Gets the property triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SharedTriggers`1.SubTreePropertyTriggers">
            <summary>
            Gets the sub tree property triggers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SharedTriggers`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SinglePropertyTrigger">
            <summary>
            A trigger which fires when a property has changed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SinglePropertyTrigger.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Creates a new instance of the <see cref="T:PropertyTrigger"/> class.
            </summary>
            <param name="node">The node that has properties that shall cause this trigger to fire.</param>
            <param name="propertyName">The PropertyNames of the property of the specified <paramref name="node"/>
            that the trigger shall monitor for changes. When the property changes the trigger fires.
            </param> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SinglePropertyTrigger.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SinglePropertyTrigger.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SinglePropertyTrigger.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SinglePropertyTrigger.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SinglePropertyTrigger.ApplyToNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SingleSubTreeTrigger">
            <summary>
            A trigger which fires when a property in a node subtree has changed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SingleSubTreeTrigger.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Type,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Creates a new instance of the <see cref="T:SubTreeTrigger"/> class.
            </summary>
            <param name="node">The root of the sub tree that has properties that shall cause this trigger to fire.</param>
            <param name="nodeType">The type of the nodes in the specified sub tree that has properties that shall 
            cause this trigger to fire.</param>
            <param name="propertyName">The PropertyName of the property on nodes of the specified <paramref name="nodeType"/>
            that the trigger shall monitor for changes. When one of these properties are changed the trigger fires.
            </param> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SingleSubTreeTrigger.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SingleSubTreeTrigger.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SingleSubTreeTrigger.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SingleSubTreeTrigger.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SingleSubTreeTrigger.ApplyToNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor">
            <summary>
            Represents a node in the document across several generations. 
            All attached nodes in the document have one SnapshotMultiplexor instance. 
            All snapshot nodes have references to the SnapshotMultiplexor of the corresponding attached node.
            
            Node handles and snapshots of cross reference properties have a SnapshotMultiplexor for the target node to find 
            the correct node instance given a transaction on the document in a specific generation.
            
            
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.liveNodeHashCode">
            <summary>
            The hashcode of the live node. 
            
            This is used to be able to return the same hash code for a snapshot node and its corresponding live node.
            
            This is assigned when the snapshot multiplexor is created and is thereafter never changed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.liveNode">
            <summary> The live document node that creates this SnapshotMultiplexor.
            Used in RuntimeAttached nodes to find the correct owner or target of a CrossReference.
            This value is null when the live node has detached.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.isShared">
            <summary>
            True if this is a snapshot multiplxor for a shared node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.snapshots">
            <summary>An array of of snapshot nodes ordered so that younger snapshots (larger generation numbers)
            are placed after older snapshots (smaller generation numbers).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.LiveNodeHashCode">
            <summary>
            The hashcode of the live node. 
            
            The hashcode remains the same even if the live node has been disposed and is no longer available.
            
            This is used to be able to return the same hash code for a snapshot node and its corresponding live node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.LiveNode">
            <summary>
            Gets or sets the live node, or null if it has detached.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.DetachFromLiveNode">
            <summary>
            Called when the live node detaches. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.Add(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Adds a snapshot node to the multiplexor
            </summary>
            <param name="node">The snapshot node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.Remove(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Removes a snapshot node from the multiplexor.
            </summary>
            <param name="node">The snapshot node</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.GetNode">
            <summary>
            Gets the appropriate node depending on whether this is a transaction opn the live document or a transaction on a snapshot.
            </summary>
            <returns>The appropriate node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.DropSnapshot">
            <summary>
            Drops the current snapshot of this node, if it has one.
            </summary>
            <returns><c>true</c> if the node had a snapshot.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.RuntimeInvalidationTriggers">
            <summary>
            Thread safe triggers set up by runtime properties and event relays.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates unshared equivalent of this instance.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.SharedSetLiveNode(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Sets the live node of a shared snapshot mux.
            </summary>
            <param name="value">The live node to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.SharedGetLiveNode">
            <summary>
            Gets the live node of a shared snapshot mux. 
            </summary>
            <returns>The live node. Can be null.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.IsShared">
            <summary>
            True if this is a snapshot multiplxor for a shared node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.Share(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Set the snapshot multiplexor in a shared state and creates shared sub components.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.UnShare(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Set the snapshot multiplexor in a shared state and creates shared sub components.
            </summary>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.AddNullValueToSnapshots(Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Adds a document node child to all snapshots that holds a validity span for nullable property that is being assigned in live.
            The validity span is used to limit reads on snapshots taken while the nullable property was null.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotMultiplexor.UpdateValiditySpanInSnapshots(System.Int32,Spotfire.Dxp.Framework.Commands.DocumentViewKey,Spotfire.Dxp.Framework.DocumentModel.Snapshots.ValiditySpan)">
            <summary>
            Updates the validity span for the specified <paramref name="documentViewKey" /> in snapshots created
            in the specified <paramref name="snapshotGeneration" /> or later.
            </summary>
            <param name="snapshotGeneration">The snapshot generation.</param>
            <param name="documentViewKey">The document view key.</param>
            <param name="validitySpan">The validity span.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SubtreePruner">
            <summary>
            A SerializationSurrogate and SurrogateSelector that will prune 
            all DocumentNode object not contained in a specified set and all 
            DocumentNodeReferenceBase objects not contained in a specified set.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.SubtreePruner.subTreeNodes">
            <summary>
            The nodes in the subtree.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SubtreePruner.#ctor(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SubtreePruner"/> class.
            </summary>
            <param name="subtree">The sub tree nodes. All DocumentNode 
            objects not in the tree spanned from this node will be pruned.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SubtreePruner.#ctor(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.SubtreePruner"/> class.
            </summary>
            <param name="nodeSet">The set of nodes that determine what shall be pruned. All DocumentNode 
            objects not in this set will be pruned.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SubtreePruner.ShallPrune(System.Object)">
            <summary>
            Gets a value indicating whether the specified object shall be pruned or not.
            </summary>
            <param name="obj">The object to check.</param>
            <returns><c>True</c>if the object shall be pruned; otherwise <c>False</c>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ThreadContext.ILimitationTarget">
            <summary>
            An interface that should be implemented by classes whose instances needs to limit their validity span
            when a property is read by a thread.
            
            The thread context contains a stack of limitation target. When a property is read the validity span of
            the topmost limitation target is limited by calling the Limit method.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ThreadContext.ILimitationTarget.LimitValiditySpanDueToEvaluation(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Limit the current validity span.
            </summary>
            <param name="limitationSource">The limitation source.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="firstGeneration">The limit on the first generation.</param>
            <param name="lastGeneration">The limit on the last generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> then the read property is valid in live ignoring streaming.</param>
            <param name="isOwningThread">if set to <c>true</c> [is owning thread].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ThreadContext.ILimitationTarget.PropagateValiditySpanClosedDueToModificationInLive(System.Int32,System.Boolean)">
            <summary>
            Propagates the validity span due to modification in live.
            </summary>
            <param name="currentGeneration">The current generation.</param>
            <param name="isStreaming">if set to <c>true</c> [is streaming].</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InternalEventHandler">
            <summary>
            The type of an internal event handler.
            </summary>
            <param name="changedNode">The node that has changed.</param>
            <param name="propertyName">The name of property that has changed.</param>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection.documentViewId">
            <summary>
            The id of the document view which is associated with the connection or -1, if teh event handler is not associated with a document view.
            </summary>
            TODO [jgustavs, 2015-06-17]: We can get rid of this field if we split this class in two concrete classes which inherits a common base class.
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection.eventExecutionMode">
            <summary>
            The event execution mode
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection.LogStopRunningEventHandler(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs that the event handler has finnished.
            </summary>
            <param name="eventSource">The event source.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection.LogStartRunningEventHandler(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Logs that the event handler has started running.
            </summary>
            <param name="eventSource">The event source.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager">
            <summary>
            A manager for internal event handlers.
            </summary>
            <remarks>
            Internal events may only be listened to by document nodes. Instances of
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager"/> cannot be created through the API.
            Classes deriving from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> shall override
            <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeclareInternalEventHandlers(Spotfire.Dxp.Framework.DocumentModel.InternalEventManager)"/>in order to
            listen to internal events.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.viewEventHandlers">
            <summary>
            The view event handlers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.isShared">
            <summary>
            A flag which keeps track of whether the instance is in shared mode or not.
            </summary>
            TODO [jgustavs, 2015-05-24]: We cannot inherit from InternalEventManager because it is a sealed public class, so we use this flag
            instead of the usual pattern. We could presumably spit this class and only use the InternalEventManager class for
            the purpose of the public API. When all events have been declared we could simply create instance of the other class.
            I think that would make the structure of the code much nicer too and we would be able to get rid of the isReadOnly field.
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.viewEventHandlerConnectionsMultiplexor">
            <summary>
            The view event handler connections multiplexor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Boolean)">
            <summary>
            Initializes a new instance of the ExternalEventManager class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.AddEventHandler(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Adds an event handler which is called when any of the specified triggers fire.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers that specify when the event handler shall be called.</param>
            <remarks>
            This method is the same as calling <see cref="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.AddEventHandler(Spotfire.Dxp.Framework.DocumentModel.InternalEventExecutionMode,Spotfire.Dxp.Framework.DocumentModel.InternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])"/>
            and passing <see cref="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventExecutionMode.ExecuteInCurrentView"/> as the execution mode.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.AddEventHandler(Spotfire.Dxp.Framework.DocumentModel.InternalEventExecutionMode,Spotfire.Dxp.Framework.DocumentModel.InternalEventHandler,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Adds an event handler which is called when any of the specified triggers fire.
            </summary>
            <param name="executionMode">The execution mode, which controls how the event handler is executed for different views of the document.</param>
            <param name="eventHandler">The event handler.</param>
            <param name="triggers">The triggers that specify when the event handler shall be called.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.AddInvariantKeeper(Spotfire.Dxp.Framework.DocumentModel.Executor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
             <summary>
             Adds an invariant keeper associated with the specified property name.
             When one of the triggers fire, the invariant keeper will executed when the
             ongoing transaction completes, or when the <c>EnsureInvariantHolds()</c>
             method on <c>DocumentNode</c> is called, whichever comes first.
             </summary>
             <remarks>
             This method provides a way to implement lazy configuration of sub trees in the document.
             In essence, the document model framework manages a "dirty flag" that is set when one of the
             <paramref name="triggers"/> fire and then cleared when the <paramref name="invariantKeeper"/>
             has been run.
             <para>
             The purpose of the <paramref name="invariantKeeper"/> is that it shall keep some invariant of
             the document upheld. The framework guarantees that the invariant is upheld between transactions
             by calling the <paramref name="invariantKeeper"/> when the transaction commits. If the transaction
             rolls back, the <paramref name="invariantKeeper"/> is not called.
             </para>
             <para>
             When a sub tree is attached to the document, all <paramref name="invariantKeeper"/>s declared in
             the sub tree are called to ensure that the invariant is initially upheld. Note that the order in
             which these <paramref name="invariantKeeper"/>s are called is undefined.
             </para>
             <para>
             The <paramref name="invariantKeeper"/> is only called if the <c>DocumentNode</c> that declared it in
             its <c>DeclareInternalEventHandlers</c> override is still attached.
             </para>
             </remarks>
            
             <param name="invariantKeeper">
             A method that is called to keep some invariant of the document upheld.
             </param>
             <param name="propertyName">
             A <c>PropertName</c> that can be used to indentity the invariant. This
             <c>PropertyName</c> can be passed to <c>DocumentNode.EnsureInvariantHolds()</c> in order to explicitly
             make sure that the invariant holds in the middle of a transaction.
             </param>
             <param name="triggers">
             The <c>Trigger</c>s that specify when the invariant is violated.
             </param>
             <seealso cref="M:DocumentNode.EnsureInvariantHolds"/>
             <seealso cref="M:DocumentNode.DeclareInternalEventHandlers"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.AddInvariantKeeperInitiallyNonDirty(Spotfire.Dxp.Framework.DocumentModel.Executor,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
             <summary>
             Adds an invariant keeper associated with the specified property name.
             When one of the triggers fire, the invariant keeper will executed when the
             ongoing transaction completes, or when the <c>EnsureInvariantHolds()</c>
             method on <c>DocumentNode</c> is called, whichever comes first.
             </summary>
             <remarks>
             This method provides a way to implement lazy configuration of sub trees in the document.
             In essence, the document model framework manages a "dirty flag" that is set when one of the
             <paramref name="triggers"/> fire and then cleared when the <paramref name="invariantKeeper"/>
             has been run.
             <para>
             The purpose of the <paramref name="invariantKeeper"/> is that it shall keep some invariant of
             the document upheld. The framework guarantees that the invariant is upheld between transactions
             by calling the <paramref name="invariantKeeper"/> when the transaction commits. If the transaction
             rolls back, the <paramref name="invariantKeeper"/> is not called.
             </para>
             <para>
             The <paramref name="invariantKeeper"/> is only called if the <c>DocumentNode</c> that declared it in
             its <c>DeclareInternalEventHandlers</c> override is still attached.
             </para>
             </remarks>
            
             <param name="invariantKeeper">
             A method that is called to keep some invariant of the document upheld.
             </param>
             <param name="propertyName">
             A <c>PropertName</c> that can be used to indentity the invariant. This
             <c>PropertyName</c> can be passed to <c>DocumentNode.EnsureInvariantHolds()</c> in order to explicitly
             make sure that the invariant holds in the middle of a transaction.
             </param>
             <param name="triggers">
             The <c>Trigger</c>s that specify when the invariant is violated.
             </param>
             <seealso cref="M:DocumentNode.EnsureInvariantHolds"/>
             <seealso cref="M:DocumentNode.DeclareInternalEventHandlers"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.InvariantKeeperConnection.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.InvariantKeeperConnection.documentNode">
            <summary>
            The document node that declares the invariant keeper.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.InvariantKeeperConnection.invariantKeeper">
            <summary>
            The method that makes the invariant hold.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.InvariantKeeperConnection.isDirty">
            <summary>
            True if the invariant is viiolated, that is, the invariantKeeper must be called.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.InvariantKeeperConnection.isCallbackAdded">
            <summary>
            True if a TransactionCompletingCallback has been added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.InvariantKeeperConnection.isUnderExecution">
            <summary>
            True if the invariant keeper is being executed. Used to detect cyclic dependencies.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.InvariantKeeperConnection.IsDirty">
            <summary>
            True if the invariant is violated, that is, the invariantKeeper must be called.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.InvariantKeeperConnection.IsCallbackAdded">
            <summary>
            True if a TransactionCompletingCallback has been added.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.InvariantKeeperConnection.IsUnderExecution">
            <summary>
            True if the invariant keeper is being executed. Used to detect cyclic dependencies.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.AttachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Attaches the document view.
            </summary>
            <param name="documentView">The document view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.InternalEventManager.DetachDocumentView(Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Detaches the document view.
            </summary>
            <param name="documentView">The document view.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState">
            <summary>The status for the node. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.Uninitialized">
            <summary>The node is new and has not been attached yet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.New">
            <summary>The node is new and has not been attached yet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.Configuring">
            <summary>The node is about to be attached and is configuring itself to the context.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.EnqueuedToBeAttached">
            <summary>The node is enqueued to be attached. This is used only in undo/redo.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.EnqueuedToBeFrozen">
            <summary>The node is enqueued to be attached as a frozen node. This is used only in undo/redo.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.Attached">
            <summary>The node is attached. The node is owned by the document and
            has the application at its uppermost ancestor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.RuntimeAttached">
            <summary>The node is a runtime value, attached in a snapshot-like state and 
            owned by a runtime property or another RuntimeAttached node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.Frozen">
            <summary>The node is frozen. The node is owned by an UndoableNodeCopy and
            has the application at its uppermost ancestor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.Reconfiguring">
            <summary>The node has been moved and is about to be attached and is reconfiguring itself to the new context.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.Snapshot">
            <summary>The node is a snapshot of a live node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.Detached">
            <summary>The node is detached. It has previously been attached. The 
            node is owned by a command.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.Disposed">
            <summary>The node has been disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.ConfiguringForRuntimeAttach">
            <summary>The node is about to be runtime attached and is configuring itself to the context.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.Shared">
            <summary>The node is in a shared state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.SharedSnapshot">
            <summary>The node is a snapshot of a live node.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.SharedRuntimeAttached">
            <summary>The node is a runtime value, attached in a snapshot-like state and 
            owned by a runtime property or another SharedRuntimeAttached node.
            This state is assigned to RuntimeAttached nodes that have been evaluated in the 
            master document and then shared between sessions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.InternalNodeState.SharedFrozen">
            <summary>The node is in a shared frozen state.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTrigger`1">
            <summary>
            A trigger that fires when a node referred to by a cross reference is changed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTrigger`1.declarer">
            <summary>The declarer delegate.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTrigger`1.propertyTrigger">
            <summary>Used to trigger on change of the mutable property itself. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTrigger`1.ApplyToNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName">
            <summary>
            Represents the identity of a property on a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.PropertyNames"/>
            <seealso cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.PropertyNames.CreatePropertyName(System.String)"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.PropertyName.name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyName.InternalCreatePropertyName(System.String)">
            <summary>Creates a new instance.
            </summary>
            <param name="name">The name of the underlying property that is represented by this class. 
            To guarantee that serialzation always works it is crucial that this name 
            is the same as the name of the underlying property.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyName.InternalCreateRuntimeConstantPropertyName">
            <summary>Creates a new instance. Used only by runtime constants.
            </summary>
            <returns>New instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName"/> class.
            </summary>
            <param name="name">The name of the underlying property that is represented by this class. 
            To guarantee that serialzation always works it is crucial that this name 
            is the same as the name of the underlying property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyName.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyName" /> class.
            </summary>
            <param name="name">The name of the underlying property that is represented by this class.
            To guarantee that serialzation always works it is crucial that this name
            is the same as the name of the underlying property.</param>
            <param name="validatePrefix">True if prefix should be validated for the use of
            internal prefixes; false otherwise.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.PropertyTrigger">
            <summary>
            A trigger which fires when a property has changed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyTrigger.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName[])">
            <summary>
            Creates a new instance of the <see cref="T:PropertyTrigger"/> class.
            </summary>
            <param name="node">The node that has properties that shall cause this trigger to fire.</param>
            <param name="propertyNames">The PropertyNames of the properties of the specified <paramref name="node"/>
            that the trigger shall monitor for changes. When one of these properties are changed the trigger fires.
            </param> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyTrigger.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyTrigger.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyTrigger.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyTrigger.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyTrigger.ApplyToNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer`1">
            <summary>
            Delegate that shall compute a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/>. Used by <see cref="T:Spotfire.Dxp.Framework.DocumentModel.MutablePropertyTrigger`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">A node that can be inspected and used to build the Trigger.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RollbackException">
            <summary>
            This exception is thrown if the document model framework fails to rollback the state of the document
            after an exception was thrown during a transaction. 
            </summary>
            <remarks>
            This exception is fatal and it is likely that the document model has reached an inconsistent state.
            Do not catch this exception and continue execution.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SubTreeTrigger">
            <summary>
            A trigger which fires when a property in a node subtree has changed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SubTreeTrigger.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Type,Spotfire.Dxp.Framework.DocumentModel.PropertyName[])">
            <summary>
            Creates a new instance of the <see cref="T:SubTreeTrigger"/> class.
            </summary>
            <param name="node">The root of the sub tree that has properties that shall cause this trigger to fire.</param>
            <param name="nodeType">The type of the nodes in the specified sub tree that has properties that shall 
            cause this trigger to fire.</param>
            <param name="propertyNames">The PropertyNames of the properties on nodes of the specified <paramref name="nodeType"/>
            that the trigger shall monitor for changes. When one of these properties are changed the trigger fires.
            </param> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SubTreeTrigger.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SubTreeTrigger.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SubTreeTrigger.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SubTreeTrigger.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SubTreeTrigger.ApplyToNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo.GetCurrentInfoIfTransactionIsOpen">
            <summary>
            Gets the current ThreadTransactionInfo or null if no ThreadTransactionInfo is open.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo.Generation">
            <summary>
            Gets the generation of the snapshot in which a read transaction is being 
            performed by this thread.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo.OperatesOnLive">
            <summary>
            Gets a value indicating if the ongoing transaction operates on the live document.
            </summary>
            <value><c>true</c> if the ongoing transaction operates on the live document; otherwise, <c>false</c>, 
            which means it operates on a snapshot.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo.EvaluateWithLimitationTarget(Spotfire.Dxp.Framework.DocumentModel.ThreadContext.ILimitationTarget,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Invokes the specified executor in a new context for determining the
            valid generation span used to compute a runtime property in a snapshot.
            </summary>
            <param name="limitationTarget">The generation dependant.</param>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo.LimitGenerationsUsedByRuntimeProperty(Spotfire.Dxp.Framework.DocumentModel.ILimitationSource,Spotfire.Dxp.Framework.Commands.ThreadSafeTransientTransactionContext,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Limits the generation used by the currently evaluating runtime
            properties, if any.
            </summary>
            <param name="limitationSource">The limitation source.</param>
            <param name="threadSafeTransientTransactionContext">The thread safe transient transaction context.</param>
            <param name="firstGeneration">The first generation.</param>
            <param name="lastGeneration">The last generation.</param>
            <param name="firstGenerationIgnoringStreaming">The first generation ignoring streaming.</param>
            <param name="isLastGenerationLimitedByStreaming">if set to <c>true</c> [is last generation limited by streaming].</param>
            <param name="isValidInLiveIgnoringStreaming">if set to <c>true</c> then the read property is valid in live ignoring streaming.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo.IsEvaluatingRuntimeProperty">
            <summary>Returns true if the thread is evaluating a runtime property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo.IsEvaluatingRuntimeOrFacadeProperty">
            <summary>Returns true if the thread is evaluating a runtime or facade property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo.CancelOnNotValidInLive">
            <summary>
            Gets a value indicating whether to cancel the transaction when a value that is not valid in live is read.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ThreadTransactionInfo.SetCancelOnNotValidInLive(System.Boolean)">
            <summary>
            Sets a value indicating whether to cancel the transaction when a value that is not valid in live is read.
            </summary>
            <param name="cancelOnNotValidInLive">A value indicating whether to cancel the transaction when a value that is not valid in live is read.</param>
            <returns>
            An instance that when disposed restores the previous value.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.TransactionContext">
            <summary>Holds information about a transaction while a transaction is executing, unexecuting or reexecuting.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.TransactionContext.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TransactionContext.TryGetInfo``1(System.Object,System.String,``0@)">
            <summary>Try to get information associated with the specified node and key.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TransactionContext.SetInfo``1(System.Object,System.String,``0)">
            <summary>Sets information associated with the specified node and key.
            </summary>
            <remarks>If there already exists information for the specified node and key
            that information will be overwritten.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TransactionContext.GetReferringNodes(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>Get a set of all the nodes that reference the target node.
            </summary>
            <remarks>The targetNode needs to be in state Attached.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TransactionContext.Create">
            <summary>
            Initialize the transaction context.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TransactionContext.Clear">
            <summary>
            Clears the transaction context.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Trigger">
            <summary>
            The abstract base class for triggers. 
            </summary>
            
            <remarks>
            Triggers are used to define when
            a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/> shall be invalidated and when internal and 
            external events are raised.
            </remarks>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.ExternalEventManager"/>
            <seealso cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.DeclareInternalEventHandlers(Spotfire.Dxp.Framework.DocumentModel.InternalEventManager)"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Trigger.NeverTrigger">
            <summary>A trigger that never fires.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Trigger.StatelessNeverTrigger">
            <summary>
            A statelessdependencydeclarer that returns the NeverTrigger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.CreatePropertyTrigger(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName[])">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/> that fires when one of the specified properties on 
            the specified <paramref name="node"/> are changed.
            </summary>
            <param name="node">The node that has properties that shall cause this trigger to fire.</param>
            <param name="propertyNames">The PropertyNames of the properties of the specified <paramref name="node"/>
            that the trigger shall monitor for changes. When one of these properties are changed the trigger fires.
            </param> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.CreateSubTreeTrigger(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Type,Spotfire.Dxp.Framework.DocumentModel.PropertyName[])">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/> that fires when certain changes in a sub-tree are made.
            </summary>
            <param name="node">The root of the sub tree that has properties that shall cause this trigger to fire.</param>
            <param name="nodeType">The type of the nodes in the specified sub tree that has properties that shall 
            cause this trigger to fire.</param>
            <param name="propertyNames">The PropertyNames of the properties on nodes of the specified <paramref name="nodeType"/>
            that the trigger shall monitor for changes. When one of these properties are changed the trigger fires.
            </param> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.CreateCompositeTrigger(Spotfire.Dxp.Framework.DocumentModel.Trigger[])">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/> that fires when any of the specified <paramref name="triggers"/> fire.
            </summary>
            <param name="triggers">The triggers that shall be composed. When one of these triggers fires, 
            the returned composite trigger fires.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.CreateMutablePropertyTrigger``1(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{``0})">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/> that fires and dynamically re-computes a nested <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/>
            when the contents of an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/> or
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/> changes.
            </summary>
            
            <param name="node">The node containing the mutable property.</param>
            <param name="propertyName">
              PropertyName of the mutable property. This must be an 
              UndoableProperty or an UndoableCrossReferenceProperty owned by the specified <paramref name="node"/>.
            </param>
            <param name="declarer">
              The delegate used to declare triggers on the node owned by or pointed to by the
              specified <paramref name="node"/> and <paramref name="propertyName"/>. 
              The MutablePropertyTrigger fires when one of the
              trigger returned by this delegate fires or when the property specified <paramref name="node"/> and
              <paramref name="propertyName"/> is changed.
              This delegate is re-evaluated each time such a change occurs.
            
              <para><b>NOTE 1:</b> The declarer delegate shall not modify the document.
              </para>
              
              <para><b>NOTE 2:</b> The declarer delegate shall not have any free variables. It must build 
              its trigger by only refering to its argument node. Failure to follow this pattern may 
              result in memory leaks.
              </para>
            </param>
            <returns>The trigger.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.CreateMutablePropertyTrigger``1(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.PropertyName[])">
            <summary>
            Creates a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/> that fires and dynamically re-computes a nested <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/>
            when the contents of an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/> or
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/> changes.
            </summary>
            <typeparam name="T">The type of the referenced node.</typeparam>
            <param name="node">
            The node containing the mutable property.</param>
            <param name="propertyName">
              PropertyName of the mutable property. This must be an 
              UndoableProperty or an UndoableCrossReferenceProperty owned by the specified <paramref name="node"/>.
            </param>
            <param name="triggeringPropertyNames">
              The PropertyNames of the properties in the node referenced by the
              specified <paramref name="node"/> and <paramref name="propertyName"/> that shall fire the 
              MutablePropertyTrigger.
              </param>
            <remarks>
              This method is a convenience method for:
            <code>
                CreateMutablePropertyTrigger&lt;T&gt;(node, propertyName,
                   delegate(T referencedNode)
                   {
                       return Trigger.CreatePropertyTrigger(referencedNode, triggeringPropertyNames);
                   });
            </code>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Trigger"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.AddInternal(Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <summary>
            Adds an internal event handler connection.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="internalEventHandlerConnection">The internal event handler connection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <summary>
            Removes an internal event handler connection.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="internalEventHandlerConnection">The internal event handler connection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.AddExternal(Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <summary>
            Adds an external event handler connection.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="externalEventHandlerConnection">The external event handler connection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <summary>
            Removes an external event hanlder connection.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="externalEventHandlerConnection">The external event handler connection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.AddInvalidation(Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget)">
            <summary>
            Adds an invalidation target.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="invalidationTarget">The invalidation target.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.RemoveInvalidation(Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget)">
            <summary>
            Removes an invalidation target.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="invalidationTarget">The invalidation target.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <summary>
            Add the trigger for an external event.
            </summary>
            <param name="externalEventHandlerConnection"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection)">
            <summary>
            Remove the trigger for an external event.
            </summary>
            <param name="externalEventHandlerConnection"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <summary>
            Add the trigger for an internal event.
            </summary>
            <param name="internalEventHandlerConnection">The internal event handler connection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection)">
            <summary>
            Remove the trigger for an internal event.
            </summary>
            <param name="internalEventHandlerConnection">The internal event handler connection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Trigger.ApplyToNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <summary>
            Shall apply the specified action to all nodes in this trigger.
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers`1">
            <summary>
            Class which contains property triggers and sub-tree triggers. Stored in either the EventTriggers
            class or in the SnapshotMultiplexor.
            </summary>
            <typeparam name="T">The type of the connection.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.propertyTriggers">
            <summary>
            Dictionary from property name to a bag of the connections of invalidation targets.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.subTreePropertyTriggers">
            <summary>
            The sub-tree property triggers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Triggers`1"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.SharedTriggers{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Triggers`1"/> class.
            </summary>
            <param name="sharedTriggers">The shared triggers.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.Triggers{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Triggers`1"/> class.
            </summary>
            <param name="triggers">The triggers</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.IsEmpty">
            <summary>
            Gets a value indicating whether this collection is empty or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.HasPropertyTriggers">
            <summary>
            Gets a value indicating whether this node has property triggers or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.NoOfTriggers">
            <summary>
            Gets the number of triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.HasSubTreePropertyTriggers">
            <summary>
            Gets a value indicating whether this node has sub-tree property triggers or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.PropertyTriggers">
            <summary>
            Gets the property triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.SubTreePropertyTriggers">
            <summary>
            Gets the sub-tree property triggers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.SubTreePropertyTriggersIsEmpty">
            <summary>
            Gets a value indicating whether the subtree property triggers is empty or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.PropertyTriggersIsEmpty">
            <summary>
            Gets a value indicating whether the property triggers is empty or not.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.AddPropertyTrigger(`0,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Add a new connection to the given property name.
            </summary>
            <param name="dependant">The dependent.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.RemovePropertyTrigger(`0,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Remove a dependent for the given property name.
            </summary>
            <param name="dependant">The dependent.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.AddSubTreePropertyTrigger(`0,System.Type,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Add a dependency to a property named 
            <paramref name="propertyName"/> in any node of type <paramref name="nodeType"/> or a subtype thereof.
            </summary>
            <param name="dependant">The object that depends on the node and property.</param>
            <param name="nodeType">The type of the node to depend on.</param>
            <param name="propertyName">If "*", matches any property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.RemoveSubTreePropertyTrigger(`0,System.Type,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Remove a dependency to a property named
            <paramref name="propertyName"/> in any node of type <paramref name="nodeType"/> or a subtype thereof.
            </summary>
            <param name="dependant">The object that depends on the node and property.</param>
            <param name="nodeType">The type of the node to depend on.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.FirePropertyTriggers(Spotfire.Dxp.Framework.DocumentModel.PropertyName,System.Action{`0})">
            <summary>
            Fire the property triggers.
            </summary>
            <param name="propertyName">The changed property name.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.FireSubTreeAndCategoryTriggers(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName,System.Action{`0})">
            <summary>
            Fire the sub-tree triggers.
            </summary>
            <param name="changedNode">The changed node.</param>
            <param name="propertyName">The property name.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.ValidateNoEventTriggers(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.EventListenerToString{`0})">
            <summary>
            Validate that there are no event triggers.
            </summary>
            <param name="node">The document node.</param>
            <param name="eventListenerToString">Utility method to convert an event listener to a string for error messages.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers`1.CreateBag(Spotfire.Dxp.Internal.Utilities.Collections.IBag{`0},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Lazily create a standard bag from a shared bag.
            </summary>
            <param name="bag">The shared bag.</param>
            <param name="sharedComponentFactory">The shared component factory.</param>
            <returns>The standard bag, will eventually be filled with the contents from the shared bag.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.DeclarersToUnfold`2">
            <summary>
            This class encapsulates a set of trigger that should be unfolded.
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.DeclarersToUnfold`2.Unfold(Spotfire.Dxp.Framework.DocumentModel.TriggerAction{`0},`1)">
            <summary>
            Unfold the declarers. The method returns an instance that wraps the trigggers that should be inserted into
            the unfold entries.
            </summary>
            <param name="triggerAction"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.IMutablePropertyTriggerHost`1">
            <summary>
            An interface for classes whose instances implements the mutable property that a mutable property trigger operates on.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.IMutablePropertyTriggerHost`1.AddInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Add the declarer for a mutable property trigger that is used for an internal event.
            </summary>
            <param name="target"></param>
            <param name="declarer"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.IMutablePropertyTriggerHost`1.RemoveInternal(Spotfire.Dxp.Framework.DocumentModel.InternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Remove the declarer for a mutable property trigger is used for an internal event.
            </summary>
            <param name="target"></param>
            <param name="declarer"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.IMutablePropertyTriggerHost`1.AddExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Add the declarer for a mutable property trigger that is used for an external event.
            </summary>
            <param name="target"></param>
            <param name="declarer"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.IMutablePropertyTriggerHost`1.RemoveExternal(Spotfire.Dxp.Framework.DocumentModel.ExternalEventHandlerConnection,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Remove the declarer for a mutable property trigger is used for an external event.
            </summary>
            <param name="target"></param>
            <param name="declarer"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.IMutablePropertyTriggerHost`1.AddInvalidation(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Add the declarer for a mutable property trigger that is used for invalidation events.
            </summary>
            <param name="target"></param>
            <param name="declarer"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.IMutablePropertyTriggerHost`1.RemoveInvalidation(Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`0})">
            <summary>
            Remove the declarer for a mutable property trigger that is used for invalidation events.
            </summary>
            <param name="target"></param>
            <param name="declarer"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget">
            <summary>
            An interface for instance which is the target of a trigger that is set up with an invalidation target 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.IThreadSafeInvalidationTarget.OnInvalidationTriggerFired(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason,Spotfire.Dxp.Framework.Commands.ChangedProperty)">
            <summary>
            This method is called when a trigger fires an invalidation event.
            </summary>
            <param name="invalidationLevel">The invalidation level.</param>
            <param name="invalidationReason">Describes why the target is invalidated.</param>
            <param name="changedProperty">The changed property.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.ITriggerTarget">
            <summary>
            An marker interface that shall be implemented by classes whose instances may be the target when a trigger
            fires.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.SharedUnfoldManager`2">
            <summary>
            The shared version of the unfold manager class.
            </summary>
            <typeparam name="TTarget">The type of the unfold manager target.</typeparam>
            <typeparam name="TNode">the type of the unfold manager node.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.SharedUnfoldManager`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager{`0,`1},Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.SharedUnfoldManager`2"/> class.
            </summary>
            <param name="unfoldManager">The unfold manager to create a shared unfold manager of.</param>
            <param name="sharedComponentFactory">The shared component factory</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.SharedUnfoldManager`2.UnfoldDictionary">
            <summary>
            Gets or sets the unfold dictionary.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.SharedUnfoldManager`2.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToInsert`1">
            <summary>
            An instance of this class represents a set of triggers which has been set up and should be inserted
            into the unfold manager.
            </summary>
            <typeparam name="TTarget"></typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToInsert`1.Insert">
            <summary>
            Insert the triggers into the unfold manager. If the corresponding declarer for
            the trigger has been removed from the unfold manager then the triggers cannot be inserted.
            These triggers are returned from the method and it is the responsibility of the caller
            to tear them down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToInsert`1.TearDown(Spotfire.Dxp.Framework.DocumentModel.TriggerAction{`0})">
            <summary>
            Tears down the triggers in this instance. This method is called if if the declarer shall no
            longer be unfolded. In that case the triggers should be torn down instead. That can happen if
            the runtime property that hosts the declarers is invalidated on a concurrent thread while unfolding
            the declarers.
            </summary>
            <param name="triggerAction"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToTearDown`1">
            <summary>
            An instance of this class represents triggers that has been set up when unfolding a declarer but which should 
            now be torn.
            </summary>
            <typeparam name="TTarget"></typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToTearDown`1.TearDown(Spotfire.Dxp.Framework.DocumentModel.TriggerAction{`0})">
            <summary>
            Tear down the triggers.
            </summary>
            <param name="triggerAction"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.TriggersToTearDown`1.ValidateIsEmpty">
            <summary>
            Validates that there is no triggers in this instance.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldedTrigger`1">
            <summary>
            Transient object used during unfolding of triggers.
            </summary>
            <typeparam name="TTarget">The target of the trigger.</typeparam>
            <remarks>JSN: This was previously a Triple; changed to make it more clear.</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldedTrigger`1.trigger">
            <summary>
            The trigger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldedTrigger`1.unfoldEntry">
            <summary>
            The unfold entry.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldedTrigger`1.target">
            <summary>
            The target.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldedTrigger`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldedTrigger`1"/> class.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="unfoldEntry">The unfold entry.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldedTrigger`1.Trigger">
            <summary>
            Gets the trigger.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldedTrigger`1.UnfoldEntry">
            <summary>
            Gets the unfold entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldedTrigger`1.Target">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldKey`2">
            <summary>
            This class represents a key in the dictionary kept in the unfold manager. 
            It is a pair of a declarer and the trigger target.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldKey`2.target">
            <summary>
            The target that shall be called when the trigger that is the result of unfolding the declarer
            fires.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldKey`2.declarer">
            <summary>
            The declarer delegate. This is the delegate that is passed into the mutable property trigger.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldKey`2.Target">
            <summary>
            The target that shall be called when the trigger that is the result of unfolding the declarer
            fires.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldKey`2.Declarer">
            <summary>
            The declarer delegate. This is the delegate that is passed into the mutable property trigger.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry">
            <summary>
            Represent a value entry in the unfold manager. The entry holds the trigger that was the result of
            unfolding a declarer from a mutable property trigger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry.trigger">
            <summary>
            This is a trigger which was generated when the corresponding declarer unfolded.
            
            It is stored in the entry so that the trigger can be torn down when the declarer is folded.
            
            This field is always null if the occurence count is zero.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry.occurenceCount">
            <summary>
            A counter for how many times the declarer that is associated to this entry occurs in the unfold manager.
            
            This counter has two roles. 
            
            Firstly, it decides when an entry shall be removed from the unfold manager.
            
            Secondly, it controls whether a trigger can be inserted into the unfold entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry.Trigger">
            <summary>
            This is a trigger which was generated when the corresponding declarer unfolded.
            
            It is stored in the entry so that the trigger can be torn down when the declarer is folded.
            
            This field is always null if the occurence count is zero.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry.OccurenceCount">
            <summary>
            A counter for how many times the declarer that is associated to this entry occurs in the unfold manager.
            
            This counter has two roles. 
            
            Firstly, it decides when an entry shall be removed from the unfold manager.
            
            Secondly, it controls whether a trigger can be inserted into the unfold entry.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry.IncreaseOccurenceCount">
            <summary>
            Increases the occurence count. This method shall be called when a declarer for this entry is
            added to the unfold mamanger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry.DecreaseOccurenceCount(Spotfire.Dxp.Framework.DocumentModel.Trigger@)">
            <summary>
            Decreases the occurence count. If the counter reaches zero then the trigger, if any, is return
            and cleared.
            </summary>
            <param name="trigger"></param>
            <returns>True if the counter reached zero. </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry.SetTrigger(Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>
            Tries to insert the trigger in the unfold entry so that the trigger is later torn down when
            the corresponding declarer is folded.
            
            It will fail to insert the trigger if the entry no longer is in the unfold manager.
            In that case the caller of this function shall see to that the trigger is torn down.
            </summary>
            <param name="trigger"></param>
            <returns>True, if succeeded.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldEntry.FetchAndClearTrigger">
            <summary>
            Fetches and clear the trigger in the entry, if any.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.SharedUnfoldEntry">
            <summary>
            Represents an UnfoldEntry shared by multiple concurrent sessions in the WebPlayer.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2">
            <summary>
            This class is used to manage the unfolding of the declarers that are associated to mutable property triggers.
            
            It is stored in the properties that the mutable property trigger operates on. That is, in undoable properties,
            undoable cross references and the value manager in runtime properties.
            
            When a mutable property trigger is set up then the target of the trigger
            and the declarer delegate in the mutable property trigger is added to this manager.
            
            Whenever the value of the property that hosts this manager is changed the declarer has to be rexecuted and the
            resulting trigger set up. These triggers should then be torn down if the value changes again and the declarers should
            be executed again.
            
            This process is especialy subtle for invalidation triggers which can be set up and torn down conncurently with
            modifications on the application thread. The design of this class is strongly influenced by that use case.
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.unfoldDictionary">
            <summary>
            A dictionary mapping pairs of declarers and trigger targets to entries managing the triggers
            that are the result of unfolding.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.AddForDocumentView(Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection{`1},Spotfire.Dxp.Framework.DocumentModel.DocumentView,System.Boolean,`0,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`1},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{`0})">
            <summary>
            Adds a declarer and target for a given document view.
            </summary>
            <param name="documentViewValueCollection">The document view value collection.</param>
            <param name="documentView">The document view.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.RemoveForDocumentView(Spotfire.Dxp.Framework.DocumentModel.IDocumentViewValueCollection{`1},Spotfire.Dxp.Framework.DocumentModel.DocumentView,System.Boolean,`0,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`1},Spotfire.Dxp.Framework.DocumentModel.TriggerAction{`0})">
            <summary>
            Removes a declarer and target for a given document view.
            </summary>
            <param name="documentViewValueCollection">The document view value collection.</param>
            <param name="documentView">The document view.</param>
            <param name="areMutablePropertyTriggersActive">if set to <c>true</c> [are mutable property triggers active].</param>
            <param name="dependant">The dependant.</param>
            <param name="declarer">The declarer.</param>
            <param name="triggerAction">The trigger action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.Add(`0,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`1})">
            <summary>
            Adds a declarer and target. Returns an unfold entry if the declarer and target was not in the
            manager before.
            
            The unfold entry can be used to unfold the declarer.
            </summary>
            <param name="target">The target.</param>
            <param name="declarer">The declarer.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.Remove(`0,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`1})">
            <summary>
            Remove a declarer and target. Returns a trigger if it was the last occurence of declarer and target was removed
            and there is a trigger that is the result of unfolding the declarer. That trigger should be torn down by
            the caller of this method.
            </summary>
            <param name="target">The target.</param>
            <param name="declarer">The declarer.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.RemoveFolded(`0,Spotfire.Dxp.Framework.DocumentModel.ReferenceTriggerDeclarer{`1})">
            <summary>
            Remove a declarer that should be folded. 
            </summary>
            <param name="target"></param>
            <param name="declarer"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.FetchAndClearTriggers">
            <summary>
            Fetch and clear the triggers of the declarers. This method is used when all declarers in the
            manager should be folded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.GetDeclarersToUnfold">
            <summary>
            Get the declarers in the manager. This is used when all declarers in the unfold manager should be unfolded.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.IsEmpty">
            <summary>
            Return true if the manager is empty.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.UnfoldDictionary">
            <summary>
            A dictionary mapping pairs of declarers and trigger targets to entries managing the triggers
            that are the result of unfolding.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#ToShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component to its shared equivalent.
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving shared equivalents of nested components.</param>
            <returns>The shared equivalent of this component.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#FromShared(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.FromSharedCore(Spotfire.Dxp.Framework.DocumentModel.State.SharedComponentFactory)">
            <summary>
            Creates or adapts a component from a shared back to the original unshared variant
            </summary>
            <param name="sharedComponentFactory">The factory to use for retrieving unshared equivalents of nested components.</param>
            <returns>The unshared equivivalent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Triggers.UnfoldManager`2.Spotfire#Dxp#Framework#DocumentModel#State#ISharedComponent#RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this component.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection`3.zombieComputer">
            <summary>
            This field is always null in snapshots since it is only used when the collection is modified,
            and it can in the live document. This field cannot be marked as readonly since it must be assigned
            during deserilization from undo.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection`3.zombies">
            <summary>
            This field is always null in snapshots since it is only used when the collection is modified,
            and it can in the live document. Only access through the private property.
            </summary>                
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection`3.Zombies">
            <summary>
            This field is always null in snapshots since it is only used when the collection is modified,
            and it can in the live document. Only access through the private property.
            </summary>                
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection`3.SetZombieComputer(Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection{`0,`1,`2}.ZombieComputer)">
            <summary>
            Called during deserialization from undo.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection`3.ZombieComputer">
            <summary>
            Executed when an element is removed from the collection. The TZombie is stored and can be 
            accessed from all UndoableZombieCrossReferenceProperty that referenced the element. 
            It is not used to match new elements to zombies. Only the keyPropertyName is used for that.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedZombieCollection`3.PerformPostDeserializationInitialization(Spotfire.Dxp.Framework.DocumentModel.PersistedZombieCollection{`1})">
            <summary>
            Initializes this instance after it has been deserialized from persistence.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState`2.ZombieHolder">
            <summary>
            Used in live document.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReferencePropertyNodeState`2.SnapshotZombie">
            <summary>
            Used in snapshot.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReference.AddZombieBackwardsPointer">
            <summary>
            Called during attach to add the pointer from the zombie holder referenced by this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReference.RemoveZombieBackwardsPointer">
            <summary>
            Called during detach to remove the pointer from the zombie holder referenced by this node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoableZombieCrossReference.ZombieHolder">
            <summary>
            Used to manipulate the zombie holder when cloning cross references.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableZombieCrossReferenceProperty`2.PerformPostDeserializationInitialization(Spotfire.Dxp.Framework.DocumentModel.PersistedZombieCrossReference{`0})">
            <summary>
            Initializes this zombie cross reference after it has been deserialized from persistence.
            </summary>
            <param name="persistedZombieCrossReference"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableZombieCrossReferenceProperty`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableZombieCrossReferenceProperty`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableZombieCrossReferenceProperty`2.SetZombieCommand">
            <summary>
            The command that sets the target cross reference to point to a zombie.
            When this command is executed the zombie in the target is null.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AmbientPropertyName">
            <summary>An instance of this class identifies an ambient property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AmbientPropertyName.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.AmbientPropertyNames">
            <summary>Base class for ambient property names definitions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.AmbientPropertyNames.CreateAmbientPropertyName(System.String)">
            <summary>Creates an identifier for an ambient property.
            </summary>
            <param name="name">The name of the ambient property.</param>
            <returns>An <see cref="T:AmbientPropertyName"/>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifiers">
            <summary>Base class for <see cref="T:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier"/> definitions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifiers.#ctor">
            <summary>Dummy constructor to prevent API extensions from inheriting.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier">
            <summary>An instance of this class identifies a document node type.
            The identifier is valid between TIBCO Spotfire versions, whereas the actual <see cref="T:System.Type"/>
            of the node might change.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="displayName">The displayName.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.Name">
            <summary>Gets the name.
            Typically on the form "MyCompany.MyComponent".
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.DisplayName">
            <summary>Gets the human readable name.
            Typically on the form "My Component".
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.Description">
            <summary>Gets the description.
            Typically on the form "The 'My Component' is a [description of MyComponent]. It is a part of the 'My Components' add-in that can be downloaded from http://www.mycomponents.com.".
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"></see> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare.</param>
            <returns><c>true</c> if the <paramref name="obj"/> is a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier"/>, and the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.Name"/> properties are equal.</returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.op_Equality(Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier,Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier)">
            <summary>Equality operator.
            </summary>
            <param name="id1">The first type identifier.</param>
            <param name="id2">The second type identifier.</param>
            <returns><c>true</c> if the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.Name"/> properties are equal.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.op_Inequality(Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier,Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier)">
            <summary>Inequal operator.
            </summary>
            <param name="id1">The first type identifier.</param>
            <param name="id2">The second type identifier.</param>
            <returns><c>false</c> if the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier.Name"/> properties are equal.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNode.AttachToUndoableNode(Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase)">
            <summary>
            Attach this document node to the <paramref name="undoableNodeBaseToAttachTo"/>.
            
            If the <paramref name="undoableNodeBaseToAttachTo"/> is attached to the document
            then this node will be configured and attached to the document.
            
            The method will generate a command if necessary.
            </summary>
            <param name="undoableNodeBaseToAttachTo"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNode.DetachFromUndoableNode(Spotfire.Dxp.Framework.DocumentModel.UndoableNodeBase)">
            <summary>
            Detach this document node from the <paramref name="undoableNodeBaseToDetachFrom"/>
            
            The method will generate a command if necessary.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNode.ForEachNonFrozenDocumentNodeInSubTree(System.Action{Spotfire.Dxp.Framework.DocumentModel.DocumentNode})">
            <summary>Applies the specified action to all nodes in the sub tree spanned
            from this node, including this node.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNode.ForEachNonFrozenIDocumentNodeInSubTree(System.Action{Spotfire.Dxp.Framework.DocumentModel.IDocumentNode})">
            <summary>Applies the specified action to all nodes in the sub tree spanned
            from this node, including this node.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNode.GetUndoableProperty``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Returns the UndoableProperty owned by this node that has the
            specified propertyName, or <c>null</c> if no such property is found.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNode.GetMutablePropertyTriggerHost``1(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Returns the IMutableProperty (an UndoableProperty or an UndoableCrossReferenceProperty) 
            owned by this node that has the specified propertyName, or <c>null</c> if no such property is found.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNode.Clone(System.Boolean,Spotfire.Dxp.Framework.DocumentModel.CloneTransformations)">
            <summary>
            Creates and returns a clone of the tree rooted at this node. The clone tree will be 
            in the state New.
            Only document nodes are cloned by this operation, meaning that the clone and the original tree
            will share objects refered to by undoable properties etc. 
            Cross references inside the tree will be properly cloned so that each cloned cross reference points to 
            the corresponding cloned node. Cross references outside the tree are kept and will thus be shared between 
            the clone and the original.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNode.PropagateResolveCompatibility(Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection,System.IServiceProvider)">
            <summary>
            Propagates the ResolveCompatibility call through the tree.
            This call is initiated by the <seealso cref="T:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNode.EnqueuedToBeAttachedFromUndo">
            <summary>
            Marks all nodes inte the tree spanned from this node with state EnqueuedToBeAttached or EnqueuedToBeFrozen.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.NodeHandle">
            <summary>
            Represents a handle to a node.
            </summary>
            <remarks>
            This class can be used to create a handle to a node. The  node
            itself can be retrieved from the handle if it is still attached. 
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.NodeHandle.Node">
            <summary>
            Gets the node that is referred to by the handle. Returns <c>null</c> if the 
            node has been detached.
            </summary>
            <value>The node.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NodeHandle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.NodeHandle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeHandle">
            <summary>
            A handle to a document node.
            </summary>
            <remarks>
            This class can be used to create a handle to a document node. The document node
            itself can be retrieved from the handle if it is still attached. 
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeHandle.Node">
            <summary>
            Gets the document node that is referred to by the handle. Returns <c>null</c> if the document
            node has been detached.
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeHandle`1">
            <summary>
            A typed handle to a document node of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            This class can be used to create a handle to a document node. The document node
            itself can be retrieved from the handle if it is still attached. 
            </remarks>
            <typeparam name="T">The type of the document node to which this handle refers.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeHandle`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentNodeHandle{T}"/> class.
            </summary>
            <param name="documentNode">The document node. Can be <c>null</c>.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeHandle`1.Node">
            <summary>
            Gets the document node that is referred to by the handle. Returns <c>null</c> if the document
            node has been detached.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeHandle`1.LiveNode">
            <summary>
            Gets the live document node that is referred to by the handle. Returns <c>null</c> if the live document
            node has been disposed.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeHandle`1.AttachedLiveNode">
            <summary>
            Gets the live document node that is referred to by the handle. Returns <c>null</c> if the live document
            node has been disposed or detached.
            </summary>
            <remarks>Will throw if not on application thread.</remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Executor">
            <summary>
            The type of delegates passed to the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ITransactions"/> methods.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper">
            <summary>
            Helper class for fail-earlies in the document model.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.MicrosoftPublicKeyToken3">
            <summary>
            Microsoft.Scripting, 
            Microsoft.Scripting.Core,
            IronPython.Modules,
            IronPython,
            Microsoft.Scripting.ExtensionAttribute
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.MicrosoftPublicKeyToken4">
            <summary>
            Microsoft.Deployment.Compression,
            Microsoft.Deployment.Compression.Cab
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.trustedAssemblies">
            <summary>
            The set of assemblies that are trusted and should not be dynamically inspected when 
            DXP runs. This set includes the Microsoft and Spotfire.Dxp assemblies.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.inspectionLock">
            <summary>
            Lock used to synch caches and protect updates of data structures.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.approvedDocumentNodeTypes">
            <summary>
            A Set of document node types that have passed the design pattern violation inspection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.approvedImmutableTypes">
            <summary>
            A Set of document node types that have passed the design pattern violation inspection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.IsStaticTrustedAssembly(System.Reflection.Assembly)">
            <summary>
            Determines if the assembly is among the hard coded
            trusted assemblies.
            </summary>
            <param name="assembly">The assembly to determine if it is trusted.</param>
            <returns>True if the assembly is trusted; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.IsSpotfireAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether [is spotfire assembly] [the specified assembly].
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            	<c>true</c> if [is spotfire assembly] [the specified assembly]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.SortStringArray(System.String[])">
            <summary>
            Sorts the given string array,
            </summary>
            <param name="input">The input.</param>
            <returns>The output.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.ValidateDocumentNodeConformsToDesignPattern(System.Type)">
            <summary>
            This is the main entry point to the document node pattern validation. It is called 
            by the DocumentNode() constructor.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.ValueAccessContext">
            <summary>
            Describes how a value of a type being checked for immutability can be accessed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.ValueAccessContext.DirectAccessToValue">
            <summary>
            The value can be accessed directly.
            For instance reference types or fields in a class.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.ValueAccessContext.ValueIsCopiedOnAccess">
            <summary>
            A copy of the value is created when the value is accessed.
            For instance value types in Undoable* structured and RuntimeProperties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.InspectTypeImmutability(Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Type},Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Type},System.Type,System.Collections.Generic.List{System.String},System.Type@,Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.ValueAccessContext)">
            <summary>
            Returns true if the specified type is immutable.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FailEarlyHelper.ValidateModificationAllowed(Spotfire.Dxp.Framework.DocumentModel.InternalNodeState)">
            <summary>
            Validates that the node may be modified. It is not allowed to manipulate
            a node that is in the Detached or Transient state, since such nodes have no 
            CommandHistory and changing the a property can thus not be undoable.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ImmutableAttribute">
            <summary>
            Types marked with this attribute are considered immutable by the fail-early check that requires 
            that all values used in the document are immutable.
            <b>IMPORTANT NOTE:</b> Do not mark a type with an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ImmutableAttribute"/> if the state of an 
            instance of the type can be manipulated after the instance has been constructed. Failure to follow this
            guideline may lead to undo/redo bugs and crashes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ImmutableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ImmutableAttribute"/> class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.FacadeAttribute">
            <summary>
            Types marked with this attribute are considered facades by the fail-early check. A facade is allowed 
            as a readonly field of a document node but not as values of Undoable* properties and runtime properties.
            <b>IMPORTANT NOTE:</b> Do not mark a type with an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.FacadeAttribute"/> if the state of an 
            instance of the type can be manipulated after the instance has been constructed. Failure to follow this
            guideline may lead to undo/redo bugs and crashes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.FacadeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.FacadeAttribute"/> class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1">
            <summary>
            This is a property that can only be read from the UI and is does not support undo redo, it is used for highlight
            and the refreshing flag.
            </summary>
            <remarks>JSN: This class has some funky semantics regarding on where and when one can read or write
            the property value so watch out! See todos in code below.</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.value">
            <summary>
            The value of the highlight property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.id">
            <summary>
            The id of this undoable node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the HighlightProperty class.
            </summary>
            <param name="propertyName">The property name to use for the highlight property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>The value of the property.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node},System.Boolean)">
            <summary>
            Override this method and apply <paramref name="action"/>
            to all children not managed by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>
            class.
            </summary>
            <param name="action">The action.</param>
            <param name="includeFrozen">if set to <c>true</c> [include frozen].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.UnsafeGetValue">
            <summary>
            Get the value for the highlight property in an unsafe way.
            </summary>
            <returns>The value of the property.</returns>
            <remarks>This method is unsafe, do not use.</remarks>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.SetPropertyStateCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.GetPropertyStateCore">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.HighlightPropertyValueWrapper">
            <summary>
            Wrapper for highlight property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.HighlightPropertyValueWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.HighlightPropertyValueWrapper"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.HighlightProperty`1.HighlightPropertyValueWrapper.Value">
            <summary>Gets or sets the property value.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IDocumentManager.DocumentOrigin">
            <summary>Returns metadata about the document origin.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IDocumentManager.DocumentSaveLocation">
            <summary>Returns metadata about the document save location.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1">
            <summary>Manages an opened document. 
            This class owns and maintains metadata that is not part of the document
            but is valid while the document is open, such as file name.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.readableDataSectionKeys">
            <summary>The key into the shared data cache for the embedded data owned by this instance, or null 
            if this instance does not own the embedded data associated with the document.
            If this instance owns the embedded data, it will be removed from the shared data cache when this 
            instance is disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.readWriteDataSectionKey">
            <summary>
            The key into the shared data pool for linked data owned by this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.parameterManager">
            <summary>The parameter manager contains the parameters that were provided when the document
            was opened. It is initially empty and will remain so if no parameters were used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.dxpFileMetadata">
            <summary>
            The analysis file metadata for the DXP file from which the document was loaded, or null if
            the document was not loaded from a DXP file.
            When the file is saved, this field is updated with the metadata for the saved file.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.masterDocument">
            <summary>
            The master document, of <c>null</c> if this document is not a session towards a shared document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.CreateForCrashDump(`0,System.IServiceProvider,Spotfire.Dxp.Framework.DocumentModel.DocumentLocation,Spotfire.Dxp.Framework.ApplicationModel.ParameterManager,System.Boolean,Spotfire.Dxp.Framework.Commands.PersistedUndoRedoManager,Spotfire.Dxp.Internal.Utilities.ZipReader,Spotfire.Dxp.Framework.Commands.DocumentViewManager)">
            <summary>
            Initializes a new instance of an DocumentManager.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.DxpFileMetadata">
            <summary>
            The analysis file metadata for the DXP file from which the document was loaded, or null if
            the document was not loaded from a DXP file.
            When the file is saved, this field is updated with the metadata for the saved file.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.CommandHistory">
            <summary>
            Gets the command history.
            </summary>
            <value>The command history.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.CurrentFileName">
            <summary>
            Gets or sets the name of the file currently used for saving the open 
            document.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.TitleChanged">
            <summary>
            Invoked when the document title has changed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.Title">
            <summary>
            Gets or sets the current title of the document.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.Document">
            <summary>
            Gets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.IsDirty">
            <summary>Gets the flag that indicates if something in the 
            Document has changed such that it needs to be saved.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.SetNotDirty">
            <summary>
            Marks the document as not dirty. See <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.IsDirty"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.SetDirty">
            <summary>
            Marks this document as dirty. See <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.IsDirty"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.Save(System.String,Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings)">
            <summary>Saves the document to the file given by 
            <paramref name="fileName"/> and sets the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.CurrentFileName"/>.
            The <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.Title"/> is set to the file name without path.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="settings">The settings to use.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.AttachDocument(System.Boolean)">
            <summary>Configures and Attaches the document but does not start the UndoRedoManager.
            </summary>
            <param name="shallConfigure">True if the document should be configured
            and attached, otherwise it will only be attached.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.StartUndoRedoManager">
            <summary>
            Starts the UndoRedoManager. All subsequent transactions made on the document will become undoable.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.GetTypeName(System.Type)">
            <summary>
             Helper method to create a readable type name from a generic type.
            </summary>
            <param name="type">The type</param>
            <returns>Name of the supplied type</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.System#IServiceProvider#GetService(System.Type)">
            <summary>Provides the CommandHistory as a service to the document.
            </summary>
            <param name="serviceType">The type of service requested.</param>
            <returns>An instance of the service requested, or <c>null</c> if
            the service was not found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.DisposeDocument">
            <summary>
            Disposes the document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.Dispose">
            <summary>
            Disposes the open document and the command history.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.AddView(Spotfire.Dxp.Framework.DocumentModel.DocumentView,Spotfire.Dxp.Framework.ApplicationModel.AnalysisView)">
            <summary>
            Adds a view by spawning the specified parent view and associates it to the specified analysis view.
            </summary>
            <param name="parentView">The parent view.</param>
            <param name="analysisView">The analysis view.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.AttachUnattachedDocumentViews">
            <summary>
            Attaches the unattached document views.
            </summary>
            <returns>A list of the views that were attached.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentManager`1.ApplyDocumentViewsState(Spotfire.Dxp.Framework.Commands.DocumentViewStateCollection)">
            <summary>
            Applies the document view state.
            </summary>
            <param name="documentViewStateCollection">The document view state collection.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.CloneTransformations">
            <summary>
            Contains functions that, if not null, are used to transform a cloned document node sub tree while it is being cloned.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.CloneTransformations.TypeTransform">
            <summary>
            Gets or sets the type transform. This function can be used to clone nodes to nodes of another type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.CloneTransformations.CrossReferenceTargetTransform">
            <summary>
            Gets or sets the cross reference target transform. This function can be used to transform which node 
            outside the cloned sub tree that is pointed to by cross references. 
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.CloneDict">
            <summary>
            Defines a helper class used when cloning nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CloneDict.transformations">
            <summary>
            The clone transformations, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CloneDict.originalToCloneMap">
            <summary>
            Holds the dictionary of old and new nodes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CloneDict.unknownOriginalToCloneMap">
            <summary>
            Holds the dictionary of old and new unknown objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CloneDict.clonables">
            <summary>
            Holds the list of explicitly clonable object which may need to be updated.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CloneDict.nodesBeingCloned">
            <summary>
            A set of the nodes that are currenlty being cloned. This is used to detect cycles in the graph which involves types that have not been deployed. 
            In those cases we will not be able to detect cross references properly.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.CloneDict.allNodesInSubtreeBeingCloned">
            <summary>
            All the nodes in the sub tree that is being cloned.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CloneDict.#ctor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.CloneTransformations)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.CloneDict" /> class.
            </summary>
            <param name="rootOfSubtreeToClone">The root of the subtree to clone.</param>
            <param name="transformations">The clone transformations, or null.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CloneDict.IsPartOfSubtreeBeingCloned(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Determines whether the specified node is part of the subtree being cloned.
            </summary>
            <param name="node">The node.</param>
            <returns>
              <c>true</c> if the specified node is part of subtree being cloned; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.CloneDict.OriginalToCloneMap">
            <summary>
            Gets the dictionary of old and new nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.CloneDict.UnknownOriginalToCloneMap">
            <summary>
            Gets the dictionary of old and new nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.CloneDict.Clonables">
            <summary>
            Gets the list of explicitly clonable objects.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.CloneDict.Transformations">
            <summary>
            Gets the clone transformations, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CloneDict.PushNodeToClone(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Pushes the node to clone.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CloneDict.PopNodeToClone(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Pops the node to clone.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.CloneDict.IsBeingCloned(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Determines whether the node is currently being cloned.
            </summary>
            <param name="node">The node.</param>
            <returns>
              <c>true</c> if the object is currently being cloned.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INode.DropSnapshots">
            <summary>
            Drops the snapshot of this node and recurses up the owner structure dropping snapshots.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INode.DropSnapshotOfThisNode">
            <summary>
            Drops the snapshot of this node. Does not recurse up the owner structure.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.INode.InternalNodeState">
            <summary>
            Gets or sets the internal node state field.
            </summary>
            <value>The internal node state field.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.INode.IsSharedNode">
            <summary>
            Gets a value indicating if this node is Shared, discarding any SessionOverrides of the nodes state.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.INode.IsSharedLiveNode">
            <summary>
            Gets a value indicating if this node is Shared and part of the live (mutable) document, discarding any SessionOverrides of the nodes state.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Node">
            <summary>
            Base class for all nodes in the document. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Node.nodeState">
            <summary>
            An object which represents the state the node is in. 
            
            The object also contains other state which is state specific.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Node.snapshotMultiplexor">
            <summary>
            The Snapshot MUX. Exists in Attached and Snapshot states (and perhaps some more, like RuntimeAttached)
            The ZombieHolder node does not have a Snapshot MUX.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Node.NodeStateCanBeOverridden">
            <summary>
            Gets a value indication if the NodeState property can be overridden by the SessionOverrides.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Node.IsFrozen">
            <summary>
            Gets a value indicating whether the node is considered frozen or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Node.InternalNodeState">
            <summary>
            Gets the internal state of this node.
            </summary>
            <value>The internal state of this node.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.MarkSubtreeAsEnqueuedToBeFrozen(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Marks all nodes inte the tree spanned from node with state EnqueuedToBeAttached or EnqueuedToBeFrozen.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.MarkSubtreeAsEnqueuedToBeAttachedOrFrozen(Spotfire.Dxp.Framework.DocumentModel.Node)">
            <summary>
            Marks all nodes inte the tree spanned from node with state EnqueuedToBeAttached or EnqueuedToBeFrozen.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ConfigureSubTree">
            <summary>
            Configure the subtree. Performs a depth-first traversal of the subtree,
            calling OnConfigure on each node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ReconfigureSubTree">
            <summary>
            Reconfigure the subtree. Performs a depth-first traversal of the subtree,
            calling OnReconfigure on each node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ConfigureSubTreeForRuntimeAttach">
            <summary>
            Configure the subtree. Performs a depth-first traversal of the subtree,
            calling OnConfigure on each node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Node.Spotfire#Dxp#Framework#DocumentModel#INode#IsSharedNode">
            <summary>
            Gets a value indicating if this node is Shared, discarding any SessionOverrides of the nodes state.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Node.Spotfire#Dxp#Framework#DocumentModel#INode#IsSharedLiveNode">
            <summary>
            Gets a value indicating if this node is Shared and part of the live (mutable) document, discarding any SessionOverrides of the nodes state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.Spotfire#Dxp#Framework#DocumentModel#INode#Dispose">
            <summary>
            Marks this node as Disposed. The SnapshotMultiplexor is released.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.RemoveSessionOverrides">
            <summary>
            Removes the session overrides for this node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node},System.Boolean)">
            <summary>
            Override this method and apply <paramref name="action"/>
            to all children not managed by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>
            class.
            </summary>
            <param name="action">The action.</param>
            <param name="includeFrozen">if set to <c>true</c> [include frozen].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ForEachNodeInSubTree(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <summary>Applies the specified action to all nodes in the sub tree spanned
            from this node, including this node.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ForEachNodeInSubTree``1(System.Action{``0})">
            <summary>
            Applies the specified action to all nodes of the specified type in the sub tree spanned
            from this node, including this node.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ForEachNodeInSubTreeBottomUp(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <summary>Applies the specified action to all nodes in the sub tree spanned
            from this node, including this node. The action is applied bottom up, that is to 
            the children of a node before to the node itself.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ForEachNonFrozenNodeInSubTree(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node})">
            <summary>Applies the specified action to all nodes in the sub tree spanned
            from this node, including this node.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ForEachNonFrozenNodeInSubTree``1(System.Action{``0})">
            <summary>Applies the specified action to all nodes of the specified type in the sub tree spanned
            from this node, including this node.
            </summary>
            <param name="action">The action to apply.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Implements <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.GetService(System.Type)">
            <summary>Override this method to provide services accessible
            from this node and its descendants.
            If you can not provide the requested service, you should call
            <c>base.GetService</c> which relays the request to the owner 
            or to the <c>AnalysisApplication</c> if no owner is set.
            </summary>
            <param name="serviceType">The type of the service to obtain.</param>
            <returns>The service of type <paramref name="serviceType"/>
            or <c>null</c> if no such service is available.</returns>
            <seealso cref="T:Spotfire.Dxp.Application.AnalysisApplication"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.CloneSerializationInfo(System.Runtime.Serialization.SerializationInfo,System.Type,Spotfire.Dxp.Framework.DocumentModel.CloneDict,Spotfire.Dxp.Framework.Persistence.PersistenceContextState,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.StreamingContext,System.Boolean)">
            <summary>
            Clones serialization info.
            </summary>
            <param name="originalInfo">The original info.</param>
            <param name="thisType">The type of the owning object.</param>
            <param name="dict">The dictionary of clone mappings.</param>
            <param name="targetState">The target persistence context state.</param>
            <param name="sContext">The serialization context.</param>
            <param name="dContext">The deserialzation context.</param>
            <param name="occursInStandIn">Indicates wether this call is made during cloning of a stand in.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.GetSnapshotMultiplexorUnsafe">
            <summary>
            Tries to get the snapshot multiplexor in an unsafe way.
            </summary>
            <returns>The snapshot multiplexor or null.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.CreateSnapshot(System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method creates a snapshot node for this attached node or uses the current snapshot node if there is one.
            </summary>
            <param name="sContext"></param>
            <param name="dContext"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.Spotfire#Dxp#Framework#DocumentModel#INode#RemoveSnapshotOwner(Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner)">
            <summary>
            Removes the specified owner.
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.Equals(System.Object)">
            <summary>
            Overridden and sealed to ensure that referential equality is used on document nodes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.GetHashCode">
            <summary>
            Overridden and sealed to ensure that the hashcode associated with referential equality 
            is used on document nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ReadTransaction``1(Spotfire.Dxp.Framework.DocumentModel.Node.ValueReader{``0})">
            <summary>
            Executes a read transaction.
            </summary>
            <param name="valueReader">The value reader.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.ExecuteCommand(Spotfire.Dxp.Framework.Commands.UndoableCommandBase)">
            <summary>Performs the specified <paramref name="command"/> by invoking 
            DoCommand on the current CommandHistory, or by executing the command 
            directly if no CommandHistory is currently available.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Node.CommandHistory">
            <summary>Gets the current command history.
            May return <c>null</c>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.OnFiringInvalidationTriggersInSubTree_OBSOLETE_DO_NOT_USE(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationLevel,Spotfire.Dxp.Framework.DocumentModel.RuntimeProperties.InvalidationReason,Spotfire.Dxp.Framework.Commands.ChangedProperty,System.Boolean)">
            <summary>
            Called during property invalidation propagation. This method can be overridden
            to listen to events from a root node of a sub tree and inject property invalidation for other property names.
            This override is a replacement for OnSubtreeChangedInternal_OBSOLETE_DO_NOT_USE and should be able to server the same purpose without generation steps on the undo stack
            which is harmful for streaming data.
            </summary>
            <param name="invalidationLevel"></param>
            <param name="invalidationReason"></param>
            <param name="changedProperty">The changed property.</param>
            <param name="isUndoableProperty">if set to <c>true</c> then the changed property is an undoable and not an event relay or a runtime property.</param>
            <returns>A value which determines if the override shoudl be called for ancestors of this node</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.GetAmbientProperty``1(Spotfire.Dxp.Framework.DocumentModel.AmbientPropertyName)">
            <summary>
            Gets the ambient property.
            </summary>
            <param name="ambientPropertyName">The name.</param>
            <returns>An ambient property handle; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Node.TryGetGeneration(Spotfire.Dxp.Framework.DocumentModel.Node,System.Int32@)">
            <summary>
            Tries to determine the generation of the specified node. If no snapshot exists for the node
            this method will always return false.
            </summary>
            <param name="node">The node to get generation for.</param>
            <param name="generation">The generation of the node.</param>
            <returns><c>True</c> if generation could be determined; otherwise <c>False</c>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IPropertyMonitor`1">
            <summary>This interface is used to allow monitoring of a property value.
            </summary>
            <typeparam name="T">The property type.</typeparam>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IPropertyMonitor`1.PropertyTrigger">
            <summary>Gets a trigger that fires when the property value changes.
            </summary>
            <value>The property trigger.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IPropertyMonitor`1.PropertyValue">
            <summary>Gets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.PropertyMonitor">
            <summary>A factory class for creating property monitors.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyMonitor.CreatePropertyMonitor``1(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>Creates a property monitor from a document node and a property name.
            </summary>
            <param name="node">The document node.</param>
            <param name="propertyName">The property name.</param>
            <returns>A property monitor.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.PropertyMonitor.CreatePropertyMonitor``1(Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.DocumentModel.PropertyComputer{``0})">
            <summary>Creates a property monitor from a trigger and a property computer delegate.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="propertyComputer">The property computer delegate.</param>
            <returns>A property monitor.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.PropertyMonitor.Monitor`1">
            <summary>General implementation of the IPropertyMonitor interface.
            </summary>
            <typeparam name="T">The property type.</typeparam>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.PropertyMonitor.Monitor2`1">
            <summary>General implementation of the IPropertyMonitor interface.
            </summary>
            <typeparam name="T">The property type.</typeparam>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1">
            <summary>Abstract base class for list-like document nodes containing 
            cross references to other document nodes.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.PropertyNames">
            <summary>
            The property names for <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1"/>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.PropertyNames.Items">
            <summary>
            The name of the property Items.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DocumentNodeCrossReferenceList&lt;T&gt;"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.ToArray">
            <summary>Copies the elements of the list to a new array.
            </summary>
            <returns>An array containing copies of the elements of the List.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the 
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            InsertRange.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            RemoveRange.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>Replaces the contents of the list with the elements in the
            specified collection.
            </summary>
            <param name="collection">The collection. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The match.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList`1"/> wrapper for the current
            collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IList`1"/> that acts as a read-only
                wrapper around the current <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1"/>
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined 
            by the specified predicate, and returns the first occurrence within the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the List contains elements that match the 
            conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Sort">
            <summary>
            Sorts the elements in the entire List using the default comparer. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire List using the specified System.Comparison.
            </summary>
            <param name="comparison">The comparison to use when comparing elements.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire List using the specified comparer.
            </summary>
            <param name="comparer">The comparer implementation to use when comparing elements, or a null reference 
            to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in List using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer implementation to use when comparing elements, 
            or a null reference to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Move(System.Int32,System.Int32)">
            <summary>Move the item at <paramref name="fromIndex"/> to <paramref name="toIndex"/> where both
            indexes are prior to any insertion and removal operations.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <remarks>
            <para>
            The <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.Move(System.Int32,System.Int32)"/> method will move the item at position 
            <paramref name="fromIndex"/> in the collection to position 
            <paramref name="toIndex"/>, where <paramref name="toIndex"/>
            is the index  in the original collection where the moved item will be inserted; Move(0, 2)
            with input { A, B, C } will result in { B, C, A } after the move operation. Move(0, 0)
            will leave the collection unchanged. Move(0, 1) will result in { B, A, C }. Move(2, 0) will result in { C, A, B }.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            fromIndex or toIndex is outside the range of valid indexes, that is, 0 : Count-1.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCrossReferenceList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ClosingEventArgs`1">
            <summary>
            Event arguments used for events that signal that the document is about to be closed.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ClosingEventArgs`1.CloseAction">
            <summary>
            The delegate type used for close actions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ClosingEventArgs`1.AddCloseAction(Spotfire.Dxp.Framework.DocumentModel.ClosingEventArgs{`0}.CloseAction)">
            <summary>
            Adds a delegate for actions to take when closing the Document. This
            shall typically dispose external event handlers.
            </summary>
            <param name="closeAction">A delegate that shall be called before 
            the document is closed. If the close is canceled, this delegate
            will not be called.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ClosingEventArgs`1.Cancel">
            <summary>
            Signals that the closing of the document shall be canceled.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1">
            <summary>Abstract base class for list-like document nodes.
            It contains standard <see cref="T:System.Collections.Generic.IList`1"/> methods to modify the collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.#ctor">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero or index is equal to or greater than 
            <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Count"/>.
            </exception>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.Add(`0)">
            <summary>
            Adds an item to this collection.
            </summary>
            <param name="item">
            The item to add.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into this collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert. The value can be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or it is equal to or greater 
            than <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Count"/>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.Clear">
            <summary>
            Removes all items from this collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this collection.
            </summary>
            <param name="item">The object to remove.</param>
            <returns>
            <c>true</c> if item was successfully removed from this collection;
            otherwise, <c>false</c>. 
            This method also returns false if item is not found.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or it is equal to or greater 
            than <see cref="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase`1.Count"/>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds the elements of the specified collection to the 
            end of this collection.
            </summary>
            <param name="collection">The collection whose elements should 
            be added to the end of this collection.
            The collection itself cannot be <c>null</c>, but it can contain elements
            that are <c>null</c>, if type T is a reference type.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Inserts the elements of the specified collection at the
            specified index in this collection.
            </summary>
            <param name="index">The index where the first element shall be inserted.</param>
            <param name="collection">The collection whose elements should 
            be inserted in this collection.
            The collection itself cannot be <c>null</c>, but it can contain elements
            that are <c>null</c>, if type T is a reference type.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of <paramref name="count"/> elements starting at the 
            specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the first element to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>Replaces the contents of the list with the elements in the
            specified collection.
            </summary>
            <param name="collection">The collection. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="fromIndex">
            The zero-based index specifying the location of the item to be moved.
            </param>
            <param name="toIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            One of the indexes is less than zero or is greater than or equal to 
            the number of items in the collection.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the collection using the specified <see cref="T:System.Comparison`1"/> delegate.
            </summary>
            <param name="comparison">The comparison delegate to use when comparing elements.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1">
            <summary>
            This class represents a snapshot of the document which has been taken through a document node
            of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.openReadTransactionCount">
            <summary>
            A counter which keeps track of the number of open read transactions. This used
            to detect if the snapshot is disposed while a transaction is open.
            
            This counter is protected by the lock on this object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.snapshotNode">
            <summary>
            The entry node into the snapshot.
            
            This field is protected by the lock on this object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.snapshotDocument">
            <summary>
            The snapshot document.
            
            This field is protected by the lock on this object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.snapshotDocumentViewManager">
            <summary>
            The snapshot document view manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.documentView">
            <summary>
            The document view that was the currnet document view when the snapshot was created. This is set as the cuurent document view when the snapshot is read.
            It may be null if no document view was active when the snapshot was created.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.Create(`0)">
            <summary>
            Creates a snapshot of the node.
            </summary>
            <param name="node">The node to create snapshot for.</param>
            <returns>A snapshot, or null.</returns>
            <remarks>
            To create a snapshot of a live node, this method should be invoked on the application
            thread. A snapshot of a live node can also be created on a background thread, but the call to 
            this method will return null if the live node has been detached/disposed.
            This method can also create a snapshot of a snapshot node. For this to work, this method
            needs to be called when there is a current snapshot.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.Create(`0,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Creates a snapshot of the node.
            </summary>
            <param name="node">The node to create snapshot for.</param>
            <param name="snapshotSuccededCallback">A method that is called while this thread still holds the transation lock,
            if taking the snapshot succeeded.</param>
            <returns>A snapshot, or null.</returns>
            <remarks>
            To create a snapshot of a live node, this method should be invoked on the application
            thread. A snapshot of a live node can also be created on a background thread, but the call to 
            this method will return null if the live node has been detached/disposed.
            This method can also create a snapshot of a snapshot node. For this to work, this method
            needs to be called when there is a current snapshot.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.CreateFromSnapshotNode(`0)">
            <summary>
            Creates a snapshot of the specified snapshot node.
            </summary>
            <param name="snapshotNode">The node to create snapshot for. Must be in state Snapshot (or SharedSnapshot).</param>
            <returns>A snapshot.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.Read(System.Action{`0})">
            <summary>Performs a read transaction on this snapshot.
            </summary>
            <param name="action">The action.</param>
            <returns><c>true</c> if the read values were still valid in the live document when the read transaction ended.</returns>
            <remarks>If this method returns false, the read values might not have raised any events, thus this is the only
            indication that the calculated value is not valid in the live document.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.Read(System.Action{`0},System.Action{System.Boolean})">
            <summary>
            Performs a read transaction on this snapshot.
            </summary>
            <param name="action">The action.</param>
            <param name="invalidPropertyReadCallback">A callback that will be invoked, if any of the properties that are read cy <paramref name="action"/> is no longer valid in the live document.</param>
            <remarks>
            The callback will be passed a boolean that specifies whether a streaming update or a user update caused the value to be invalid.
            The callback will be passed <c>true</c> if it is due to streaming and <c>false</c> otherwise. 
            The callback will be invoked as soon as an invalid property is read.
            If the callback is invoked with the value <c>false</c> then it will not be invoked again.
            If the callback is invoked with the value <c>true</c> then it will not be invoked again with <c>true</c> but it may be invoked with <c>false</c>.
            <para>
            Note that, if an assignments on the application thread affects a property after the property has been read then the callback will not be invoked.
            That includes both the case when <paramref name="action"/> is still executing  and the case when a property is assigned after <paramref name="action"/> has completed execution.
            Thus to draw any conclusion about the validity of the result this needs to be combined with an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.ExternalStreamingEventHandler"/> unless this executes on the 
            application thread so that no concurrent assignments can take place.
            </para>
            <para>
            If <paramref name="action"/> reads a runtime property that has not been evaluated then the callback will be invoked if the evaluation of the runtime property
            reads an invalid property.
            If the runtime property is currently evaluated by another thread then the callback will be invoked if that other thread reads an invalid property.
            Also, if a concurrent assignment affects a runtime property that is being evaluated then this property will be affected.
            </para>
            <para>
            The callback should not make any assumption about the thread it is invoked on. It may be invoked on the computing thread, on the application thread or on a thread
            that evaluates a runtime property that this thread waits for.
            However, the callback can assume that it is not simultaneusly invoked on two different threads. It can also assume that it will not be invoked after this method has returned.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.Clone">
            <summary>
            Creates a clone of this instance.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.Dispose">
            <summary>
            Dispose the snapshot.
            
            It is crucial that a snapshot is disposed when it is not used anymore. 
            Not doing so will lead to serious memory leaks.
            
            It is not allowed to dispose a snapshot if there is an open read transaction.
            </summary>
            <remarks>The proper ApplicationThreadSettings must be applied before the snapshot is disposed.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.Snapshot`1.Generation">
            <summary>
            The generation of the snapshot.
            
            Used for debugging
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.SnapshotProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotProperty.Dispose">
            <summary>This will stop the work package. If it is currently
            recomputing, the computation will continue but the result will be discarded.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.SnapshotProperty.EnableNotifications">
            <summary>
            Call to re-renable notifications before the result has been calculated.
            If the calculated result is invalid we will be notified again.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCollectionNode">
            <summary>
            Base class for all undoable collections.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCollectionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCollectionNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1">
            <summary>
            A list of T where all operations on the list are undoable.
            When the list is modified, it will raise a PropertyChanged event from its 
            owner, using the Name property of the list as argument to the event.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.avlCount">
            <summary>
            Shall only be get and set using AvlCount.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.avlRoot">
            <summary>
            Shall only be get and set using AvlRoot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlCount">
            <summary>
            The number of elements in the collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlRemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of UndoableCrossReferenceList.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Add(`0)">
            <inheritdoc/>
            Add an element to a list. The list has to be New or Attached.
            <exception cref="T:System.InvalidOperationException">
            If either the list is not New or Attached.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Clear">
            <inheritdoc/>
            Remove all elements from the list.
            No event is raised if the list was already empty.
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.ToArray">
            <summary>Copies the elements of the list to a new array.
            </summary>
            <returns>An array containing copies of the elements of the List.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the 
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of the specified collection to the end of the
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be inserted into the
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.
            </param>
            <param name="index">
            The position in the list where the collection
            should be inserted.
            </param>      
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove <paramref name="count"/> elements starting at position 
            <paramref name="index"/>. If <paramref name="count"/> is zero, no
            elements are removed and no event is raised.
            </summary>
            <exception cref="T:System.ArgumentException">
            If range described by arguments are nonsense or at least partly outside range.
            </exception>     
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>Replaces the contents of the list with the elements in the
            specified collection.
            </summary>
            <param name="collection">The collection. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.RemoveAll(System.Predicate{`0})">
            <summary>Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList`1"/> wrapper for the current
            collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IList`1"/> that acts as a read-only
                wrapper around the current <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.ToList">
            <summary>
            Copies the elements of the UndoableCrossReferenceList to a List. 
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> with the element of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.ToCollection">
            <summary>
            Copies the elements of the UndoableCrossReferenceList to a List. 
            </summary>
            <returns>
            A <see cref="T:System.Collections.ObjectModel.Collection`1"/> with the element of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1"/>
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined 
            by the specified predicate, and returns the first occurrence within the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the List contains elements that match the 
            conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Sort">
            <summary>
            Sorts the elements in the entire List using the default comparer. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire List using the specified System.Comparison.
            </summary>
            <param name="comparison">The comparison to use when comparing elements.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire List using the specified comparer.
            </summary>
            <param name="comparer">The comparer implementation to use when comparing elements, or a null reference 
            to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in List using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer implementation to use when comparing elements, 
            or a null reference to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Move(System.Int32,System.Int32)">
            <summary>Move the item at <paramref name="fromIndex"/> to <paramref name="toIndex"/> where both
            indexes are prior to any insertion and removal operations.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <remarks>
            <para>
            The <see cref="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Move(System.Int32,System.Int32)"/> method will move the item at position 
            <paramref name="fromIndex"/> in the collection to position 
            <paramref name="toIndex"/>, where <paramref name="toIndex"/>
            is the index  in the original collection where the moved item will be inserted; Move(0, 2)
            with input { A, B, C } will result in { B, C, A } after the move operation. Move(0, 0)
            will leave the collection unchanged. Move(0, 1) will result in { B, A, C }. Move(2, 0) will result in { C, A, B }.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            fromIndex or toIndex is outside the range of valid indexes, that is, 0 : Count-1.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.IsPermutation(System.Int32[])">
            <summary>
            Checks that an int array contains a permutation of 0 .. n-1, in linear time.
            </summary>
            <param name="indices">The int array to check.</param>
            <returns><c>true</c> if this is a correct permutation, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.Rearrange(System.Int32[])">
            <summary>
            Rearranges entries in the list. Similar to multiple calls to Move.
            </summary>
            <param name="fromIndices"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.PerformPostDeserializationInitialization(`0[])">
            <summary>
            Initializes this instance after it has been deserialized from persistence.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlListEntry.height">
            <summary>
            The height of the tree from this node. 
            Only has a meaningful value in the live document.
            Will always be 0 in snapshot.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlListEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlListEntry.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlListLeaf">
            <summary>
            A Leaf owns its value and iterates it in ForEachChild.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlListLeaf.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlListLeaf.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlListNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.AvlListNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.GetPropertyStateCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceList`1.SetPropertyStateCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeBaseCrossReference">
            <summary>
            This is an interface for all nodes that holds a cross reference to another node.
            This includes view cross references whihc may hold a reference for each document view.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IUndoableNodeCrossReferenceProperty.ExecuteSetCommand(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            This method is called when a zombie cross reference is re-connected.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IMutableProperty`1.RawGetValue">
            <summary>
            Gets the raw value contained in the value field without any validations or read-transactions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IMutableProperty`1.GetValue">
            <summary>
            Gets the value contained in the value field with validations and read-transactions.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState`1.Value">
            <summary>
            Gets or sets the target of this cross reference. Only used in the live document.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoableCrossReferencePropertyNodeState`1.SnapshotMultiplexorOfTargetNode">
            <summary>Gets or sets the snapshot MUX used by snapshot nodes and RuntimeAttached nodes.
            This field is null in live nodes and in snapshot node where the live node had a null value.
            If the live node had a non-null value, this field will be non-null in the snapshot node and in RuntimeAttached nodes.
            </summary>     
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1">
            <summary>Manages a property that does not own its value. Assignments to the property will be 
            recorded as undoable commands. 
            </summary>
            <remarks>
            The value of an UndoableCrossReferenceProperty must be a class deriving from 
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> or <c>null</c>. An UndoableCrossReferenceProperty does not
            own its value, it only points to a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> that is owned 
            somewhere else in the document. Thus the value of an UndoableCrossReferenceProperty 
            is not part sub tree in which the UndoableCrossReferenceProperty lives.
            <para>
            When the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> pointed to by an UndoableCrossReferenceProperty is detached,
            the value of the UndoableCrossReferenceProperty  is set to <c>null</c> by the document model 
            framework. This action is undoable and generates an event.
            </para>
            </remarks>
            <typeparam name="T">The type of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> pointed to by this UndoableCrossReferenceProperty.</typeparam>
            
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Create a new instance of an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/>.
            </summary>
            <param name="initialValue">The initial value of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1"/>.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.PerformPostDeserializationInitialization(`0)">
            <summary>
            Called by sub classes to initialize the value after deserialization from 
            persistence.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.Value">
            <summary>
            Gets or sets the value of the managed node. 
            Assignment of objects with the same value as the current value,
            will be ignored.
            </summary>
            <value>The value of the managed node.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.ExecuteSetCommand(`0,`0)">
            <summary>
            Called when setting the value of the property inside an internal transaction.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.ValidateValueCore(`0)">
            <summary>
            Called by the setter on the Value property to the validate the value.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.SetCommand">
            <summary>
            Command that sets the value of an undoable cross reference.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.ExecuteSetCommand(`0)">
            <summary>
            This method is called when a zombie cross reference is re-connected.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.GetPropertyStateCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableCrossReferenceProperty`1.SetPropertyStateCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2">
            <summary>
            A dictionary where all operations are undoable.
            </summary>
            
            <remarks>
            When the dictionary is modified, it will trigger a PropertyChanged event from its 
            owner, using the PropertyName of the dictionary as the source.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.AvlSet(`0,`1)">
            <summary>
            Sets the value for key. Returns the old value for the key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of UndoableOwnedSet.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.PerformPostDeserializationInitialization(System.Collections.Generic.KeyValuePair{`0,`1}[])">
            <summary>
            Initializes this instance after it has been deserialized from persistence.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with the specified key, returning <c>true</c> upon success.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with 
            the specified key, if the key is found; otherwise, the default value for the type 
            of the value parameter. This parameter is can be passed uninitialized.</param>
            <returns><c>true</c> if this instance contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value>The number of elements.</value>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <c>TValue</c> with the specified key.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value><c>true</c> if it is read-only; otherwise <c>false</c>.</value>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.ReplaceAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>Replaces the contents of this instance with the elements in the
            specified <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection. 
            The collection itself cannot be <c>null</c> or contain any elements whose keys are <c>null</c>.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.GetPropertyStateCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.SetPropertyStateCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableDictionary`2.GetRemovedDocumentNodesCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IKeyedCollectionEntry`1.IsKeyProperty(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Determines if this entry gets its key from the specified undoable property.
            </summary>
            <param name="undoableProperty">The candidate key provider.</param>
            <returns>true if this entry gets its key from the specified undoable property.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2">
            <summary>
            An undoable collection of document nodes that behaves like a hybrid between a list and a dictionary.
            </summary>
            <remarks>
            An UndoableKeyedCollection is a list of document nodes that can be efficiently accessed both using the 
            index in the list (just like an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>) and a key. Each node in an UndoableKeyedCollection
            must have an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/> with value of type <typeparamref name="TKey"/>. The value of 
            that property can be used to efficiently access the nodes.
            </remarks>
            <typeparam name="TKey">The type of key held by the nodes in the collection.</typeparam>
            <typeparam name="TNode">The type of the nodes in the collection.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.keyPropertyName">
            <summary>
            The property name of the property on the nodes in this collection.
            The nodes in this collection can be indexed on the nodes value of this property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.avlCount">
            <summary>
            Shall only be get and set using AvlCount.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.avlListRoot">
            <summary>
            Shall only be get and set using AvlListRoot.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.avlDictionaryRoot">
            <summary>
            Shall only be get and set using AvlDictionaryRoot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.AvlCount">
            <summary>
            The number of elements in the collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.#ctor(Spotfire.Dxp.Framework.DocumentModel.PropertyName,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:UndoableKeyedCollection&lt;TKey, TNode&gt;"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="keyPropertyName">Name of the key property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.PerformPostDeserializationInitialization(`1[])">
            <summary>
            Initializes this instance after it has been deserialized from persistence.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.SetKeyPropertyName(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Sets the key property name of this UndoableKeyedCollection.
            This is used at undo deserialization.
            </summary>
            <param name="keyPropertyName">Name of the key property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.AvlInsert(System.Int32,`1)">
            <summary>
            Inserts the specified node at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.AvlInsert(System.Int32,Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection{`0,`1}.KeyedCollectionEntry)">
            <summary>
            Inserts the specified entry at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.AvlRemoveAt(System.Int32,Spotfire.Dxp.Framework.DocumentModel.UndoableNode)">
            <summary>
            Removes the node at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.AvlToList">
            <summary>
            Creates a List with the elements of this structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Add(`1)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Contains(`1)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value>The number of elements.</value>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.System#Collections#Generic#ICollection{TNode}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Remove(`1)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.IndexOf(`1)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Insert(System.Int32,`1)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:TNode"/> at the specified index.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the element associated with the specified key, returning <c>true</c> upon success.
            </summary>
            <param name="key">The key of the element to get.</param>
            <param name="value">When this method returns, contains the element associated with 
            the specified key, if the key is found; otherwise, the default element for the type 
            of the value parameter. This parameter is can be passed uninitialized.</param>
            <returns><c>true</c> if this instance contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Remove(`0)">
            <summary>
            Removes the element with the specified key, returning <c>true</c> if this instance contained 
            an element with the specified key prior to the removal.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><c>true</c> if this instance contained an element that has just been removed; otherwise <c>false</c>.
            If this instance did not contain an element with the specified key, <c>false is returned.</c></returns>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Item(`0)">
            <summary>
            Gets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>The element with the specified key. 
            If an element with the specified key is not found, an exception is thrown.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.ToArray">
            <summary>Copies the elements of this collection to a new array.
            </summary>
            <returns>An array containing the elements of this collection.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the elements of the specified collection to the end of this instance.
            </summary>
            <param name="collection">
            The collection whose elements should be added.
            The collection itself cannot be null or contain any elements that are null.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Inserts the elements of the specified <paramref name="collection"/> at
            the specified <paramref name="index"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be inserted.
            The collection itself cannot be null or contain any elements that are null.
            </param>
            <param name="index">
            The position in the where the elements in the collection
            should be inserted.
            </param>      
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove <paramref name="count"/> elements starting at position 
            <paramref name="index"/>. If <paramref name="count"/> is zero, no
            elements are removed and no event is raised.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the range described by the arguments is at least partly outside range.
            </exception>     
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.ReplaceAll(System.Collections.Generic.IEnumerable{`1})">
            <summary>Replaces the contents of this instance with the elements in the
            specified <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection. 
            The collection itself cannot be <c>null</c> or contain any elements that are <c>null</c>.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.RemoveAll(System.Predicate{`1})">
            <summary>Removes all elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList`1"/> containing the elements in this collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IList`1"/> containing the elements in this collection.
            </returns>
            <remarks>
            Changed made to this collection are not reflected by the returned list.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.ToList">
            <summary>
            Copies the elements of the UndoableKeyedCollection to a List. 
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> with the element of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/>
            </returns>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.ToCollection">
            <summary>
            Copies the elements of the UndoableKeyedCollection to a Collection
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1"/> with the elements of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2"/></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Find(System.Predicate{`1})">
            <summary>
            Searches for an element that matches the conditions defined 
            by the specified predicate, and returns the first occurrence within the collection. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the search.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Exists(System.Predicate{`1})">
            <summary>
            Determines whether the List contains elements that match the 
            conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns><c>true</c> if there is a match; otherwise <c>false</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Sort">
            <summary>
            Sorts the elements in this collection using the default comparer. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Sort(System.Comparison{`1})">
            <summary>
            Sorts the elements in this collection using the specified System.Comparison.
            </summary>
            <param name="comparison">The comparison to use when comparing elements.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Sort(System.Collections.Generic.IComparer{`1})">
            <summary>
            Sorts the elements in this collection using the specified comparer.
            </summary>
            <param name="comparer">The comparer implementation to use when comparing elements, or a null reference 
            to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`1})">
            <summary>
            Sorts the elements in a range of collection using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer implementation to use when comparing elements, 
            or a null reference to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Move(System.Int32,System.Int32)">
            <summary>Move the item at <paramref name="fromIndex"/> to <paramref name="toIndex"/> where both
            indexes are prior to any insertion and removal operations.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <remarks>
            <para>
            The <see cref="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.Move(System.Int32,System.Int32)"/> method will move the item at position 
            <paramref name="fromIndex"/> in the collection to position 
            <paramref name="toIndex"/>, where <paramref name="toIndex"/>
            is the index  in the original collection where the moved item will be inserted; Move(0, 2)
            with input { A, B, C } will result in { B, C, A } after the move operation. Move(0, 0)
            will leave the collection unchanged. Move(0, 1) will result in { B, A, C }. Move(2, 0) will result in { C, A, B }.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            fromIndex or toIndex is outside the range of valid indexes, that is, 0 : Count-1.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.FindAll(System.Predicate{`1})">
            <summary>
            Retrieves the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>A collection of the matching elements.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionEntry.undoableProperty">
            <summary> The UndoableProperty that holds the key value in the node. Is null in snapshots.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionEntry.dictionaryOwner">
            <summary> Used to invalidate the snapshots of the Avl dicionary. Is null in snapshots.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionEntry.Remove(Spotfire.Dxp.Framework.DocumentModel.UndoableNode)">
            <summary>Detaches this entry from the undoable property and marks it as InternalNodeState.Detached.
            Sets the owner of the entys node to the specified owner.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionEntry.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionListEntry.height">
            <summary>
            The height of the tree from this node. 
            Only has a meaningful value in the live document.
            Will always be 0 in snapshot.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionListEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionListEntry.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionListLeaf">
            <summary>
            A Leaf owns its value and iterates it in ForEachChild.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionListLeaf.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionListLeaf.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionListNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.KeyedCollectionListNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.DictionaryTreeNode">
            <summary>
            A tree node in a AVL search tree containing key objects of type TKey. The hash codes
            of the key objects in the tree are used as the search key in the AVL tree.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.DictionaryTreeNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.DictionaryTreeNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.DictionaryEntryListNode">
            <summary>
            A list node used in AVL search trees containing key objects of type TKey.
            All objects with the same hashcode collide at the same tree node in the AVL 
            search tree. Such objects are stored in a linked list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.DictionaryEntryListNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.DictionaryEntryListNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.GetPropertyStateCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.SetPropertyStateCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableKeyedCollection`2.GetRemovedDocumentNodesCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1">
            <summary>
            A list of T where all operations on the list are undoable.
            </summary>
            
            <remarks>
            When the list is modified, it will raise a PropertyChanged event from its 
            owner, using the Name property of the list as argument to the event.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.avlCount">
            <summary>
            Shall only be get and set using AvlCount.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.avlRoot">
            <summary>
            Shall only be get and set using AvlRoot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.AvlCount">
            <summary>
            The number of elements in the collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.AvlInsert(System.Int32,`0)">
            <summary>
            Inserts the specified element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.AvlRemoveAt(System.Int32,Spotfire.Dxp.Framework.DocumentModel.UndoableNode)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.AvlToList">
            <summary>
            Creates a List with the elements of this structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of UndoableList.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.PerformPostDeserializationInitialization(`0[])">
            <summary>
            Initializes this instance after it has been deserialized from persistence.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value>The number of elements.</value>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <c>T</c> at the specified index.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.ToArray">
            <summary>Copies the elements of the list to a new array.
            </summary>
            <returns>An array containing the elements of the List.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of this
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the 
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of the specified collection at the 
            specified <paramref name="index"/> in this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be inserted into the
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.
            </param>
            <param name="index">
            The position in the list where the collection
            should be inserted.
            </param>      
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove <paramref name="count"/> elements starting at position 
            <paramref name="index"/>. If <paramref name="count"/> is zero, no
            elements are removed and no event is raised.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the range described by the arguments is at least partly outside the range of this list.
            </exception>     
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>Replaces the contents of this list with the elements in the
            specified collection.
            </summary>
            <param name="collection">The collection. The collection itself cannot be null, 
            but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.RemoveAll(System.Predicate{`0})">
            <summary>Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList`1"/> collection containing the 
            elements of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IList`1"/> that containing the 
            elements of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.ToList">
            <summary>
            Copies the elements of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> to a List. 
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> with the element of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.ToCollection">
            <summary>
            Returns a new Collection containing the elements of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1"/> with the element of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined 
            by the specified predicate, and returns the first occurrence within the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the search.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the List contains elements that match the 
            conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns><c>true</c> if the element exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Sort">
            <summary>
            Sorts the elements in this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> using the default comparer. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> using the specified System.Comparison.
            </summary>
            <param name="comparison">The comparison to use when comparing elements.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">The comparer implementation to use when comparing elements, or a null reference 
            to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer implementation to use when comparing elements, 
            or a null reference to use the default comparer Comparer.Default.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="fromIndex">
            The zero-based index specifying the location of the item to be moved.
            </param>
            <param name="toIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            One of the indexes is less than zero or is greater than or equal to 
            the number of items in the collection.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>A collection with the matches.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.GetPropertyStateCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.SetPropertyStateCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableList`1.GetRemovedDocumentNodesCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.UndoableListAvlBase`1.height">
            <summary>
            The height of the tree from this node. 
            Only has a meaningful value in the live document.
            Will always be 0 in snapshot.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableListAvlBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableListAvlBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableListAvlLeaf`1">
            <summary>
            A Leaf owns its value and iterates it in ForEachChild.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableListAvlLeaf`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableListAvlLeaf`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableListAvlNode`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableListAvlNode`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.INodeContext">
            <summary>
            An interface which declares methods for accessing the context of a node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INodeContext.IsDescendantOf(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>Determines whether this instance is a descendant of the specified node.
            Note: A node is not considered a descendant of itself.
            </summary>
            <param name="node">The potential ancestor node.</param>
            <returns>
            	<c>true</c> if this instance is a descendant of the
            specified node; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INodeContext.GetService``1">
            <summary>Gets the service object of the specified type.
            </summary>
            <typeparam name="T">The type of the service object to get.</typeparam>
            <returns>An object of type <typeparamref name="T"/>, or <c>null</c> 
            if no service of type <typeparamref name="T"/> was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INodeContext.GetAncestor``1">
            <summary>
            Returns the closest ancestor node of type <typeparamref name="T"/>, 
            or <c>null</c> if no such ancestor is found.
            </summary>
            <typeparam name="T">The type of the node.</typeparam>
            <returns>The closest ancestor node.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ITransactions">
            <summary>
            Declares methods for executing transactions on the document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.BeginAggregatedTransaction">
            <summary>
            Begins an aggregated transaction.
            </summary>
            <returns>An aggregated transaction handle.</returns>
            <remarks>
            Aggregated transactions provides the functionality to aggregate transactions which needs
            to be separate transactions while first executed but which should be unexecuted
            as one transaction at undo and redo.
            <para>
            It also provides rollback of the transaction. This can be used to implement cancel
            on modal dialogs.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.ExecuteInvisibleTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Starts an invisible transaction on the document model by executing
            <paramref name="executor"/>. 
            </summary>
            <param name="executor">The delegate to execute.</param>
            <remarks>
            This method starts an invisible transaction on the document model by executing
            <paramref name="executor"/>. 
            If there is already an ongoing transaction then the transaction is included in the current
            transaction.
            <para>
            All modifications of the document that are performed as a result of the operations 
            performed by <paramref name="executor"/> will be recorded in
            the transaction so that the transaction can be unexecuted if the user
            requests an undo.
            </para>
            <para>
            The transaction is invisible in the sense 
            that the user will not see the transaction as an entry on the undo stack. 
            If the user makes an undo then the transaction will be silently unexecuted
            together with the enclosing visible transaction.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.ExecuteStickyTransaction(System.Guid,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Starts a sticky transaction on the document model by executing
            <paramref name="executor"/>. 
            </summary>
            <param name="guid">The id which identifies the transactions which should stick together.</param>
            <param name="executor">The delegate to execute.</param>
            <remarks>
            This method starts a sticky transaction on the document model by executing
            <paramref name="executor"/>. 
            If there is already an ongoing transaction then the transaction is included in the current
            transaction.
            <para>
            All modifications of the document that are performed as a result of the operations 
            performed by <paramref name="executor"/> will be recorded in
            the transaction so that the transaction can be unexecuted if the user
            requests an undo.
            </para>
            <para>
            Sticky transactions should be used to impement undo of for example sliders. When you move 
            a slider such as the range slider in the filter panel it makes a modification of the document
            and this modification should immediately be reflected in the user interface. However there
            should only be one entry on the undo stack so that the entire drag of the slider can be undone
            by pressing undo once.
            </para>
            <para>
            To implement this behaviour the slider should generate a <see cref="T:System.Guid"/> and use it as a parameter to
            one sticky transactions for each modification.
            </para>
            <para>
            The transactions are sticky in the sense that consecutive sticky transactions with the same <see cref="T:System.Guid"/>
            will yield a common entry on the undo stack.
            If any other transaction is executed it will create
            an independent entry which will break up the sequence of sticky transactions.
            </para>
            <para>
            A sequence of sticky transactions is similiar to an aggregated transaction in 
            the sense that both will yield only one entry on the undo stack. 
            However it is more robust to use sticky transactions if it is difficult to decide when
            an aggregated transaction should be committed.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ITransactions.ExecuteTransaction(Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Starts a transaction on the document model by executing
            <paramref name="executor"/>. 
            </summary>
            <param name="executor">The delegate to execute.</param>
            <remarks>
            This method starts a transaction on the document model by executing
            <paramref name="executor"/>. If there is already
            an ongoing transaction then the transaction is included in the current
            transaction.
            <para>
            All modifications of the document that are performed as a result of the operations 
            performed by <paramref name="executor"/> will be recorded in
            the transaction so that the transaction can be unexecuted if the user
            requests an undo.
            </para>
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCopy`1">
            <summary>Represents a copy of a Document Node of type T.
            Instances of this class are created by <see cref="m:DocumentNode.CopySubtree"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCopy`1.Instantiate(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Creates and returns a new instance of the T node (sub tree)
            that was copied to obtain this DocumentNodeCopy
            </summary>
            <param name="target">The target.</param>
            <returns>A new instance of T.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNodeCopy`1.Instantiate(Spotfire.Dxp.Framework.Persistence.PersistenceManager)">
            <summary>
            Creates and returns a new instance of the T node (sub tree)
            that was copied to obtain this DocumentNodeCopy
            </summary>
            <param name="persistenceManager">The persistence manager.</param>
            <returns>A new instance of T.</returns>
            <remarks>The new sub tree
            will be Detached and not have any outwards references but may have
            references between nodes included in the sub tree.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.PropertyComputer`1">
            <summary>
            A delegate that computes the values of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/>.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StatelessPropertyComputer`1">
            <summary>
            A delegate that computes the value of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/> given the document node that owns the runtime property.
            </summary>
            <remarks>
            The delegate shall be declared as a static field that references a static method.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DependencyDeclarer">
            <summary>
            A delegate that declares the dependencies of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/>.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer">
            <summary>
            A delegate that declares the dependencies of an <see cref="T:Spotfire.Dxp.Framework.DocumentModel.EventRelay"/> and <see cref="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1"/> given the document node that
            owns the runtime property or event relay.
            </summary>
            <remarks>
            The delegate shall be declared as a static field that references a static method.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.StatelessEventRouter">
            <summary>
            A method that can compute the trigger for the events that this instance shall route. Used by the EventRouter construct.
            </summary>
            <param name="node">The node that declared the event router.</param>
            <param name="changedNode">The node that has been changed and an event is being raised for.</param>
            <param name="changedProperty">The property that has been changed and an event is being raised for.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INotPersistedProperty.Activate(System.Int32)">
            <summary>
            Activates the property.
            </summary>
            <param name="firstGeneration">The first generation in which this property shall be valid.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INotPersistedProperty.ActivateForConfigureForRuntimeAttach">
            <summary>
            Activates the property in a runtime attach scenario.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INotPersistedProperty.ReleaseValueManager">
            <summary>
            This is a hack to avoid memory leaks when the undo stack resides in memory.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INotPersistedProperty.OnAncestorDetachedOrInvalidated(System.Boolean)">
            <summary>
            This method is called when an ancestor is detached or invalidated.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.INotPersistedProperty.OnAncestorDetachedOrInvalidatedDuringConfigureForRuntimeAttach">
            <summary>
            This method is called when an ancestor is detached or invalidated during configuration for runtime attach.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.INotPersistedProperty.PropertyName">
            <summary>Gets the property name.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IDisposableRuntimePropertyValue">
            <summary>
            Runtime property values that need a callback when they are no longer used by the 
            document or one of its snapshots shall implement this interface.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDisposableRuntimePropertyValue.Dispose">
            <summary>
            Called when this runtime property value is no longer used by the document or one of its snapshots.
            The calling thread can be a background worker thread, the UI thread or the progress thread.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.DisposableRuntimePropertyValueWrapper`1">
            <summary>This class is used to wrap disposable types that are used 
            in a runtime property. This class will see to it that the <see cref="M:System.IDisposable.Dispose"/> method
            is called on the runtime property value when it is no longer used.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.DisposableRuntimePropertyValueWrapper`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DisposableRuntimePropertyValueWrapper`1"/> class.
            </summary>
            <param name="value">The wrapped value. Can be <c>null</c>.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.DisposableRuntimePropertyValueWrapper`1.Value">
            <summary>Gets the wrapped value.
            </summary>
            <value>The wrapped value. Can be <c>null</c>.</value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeConstant`1">
            <summary>Holds a constant value that is lazily computed when first
            accessed. If the value implements IDisposable, it is disposed when the 
            owning <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> is detached.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeConstant`1.Value">
            <summary>Gets the value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IRuntimeProperty.ShareMultiplexorFrom(Spotfire.Dxp.Framework.DocumentModel.IRuntimeProperty)">
            <summary>
            Used on a snapshot runtime property to make it share the 
            multiplexor created by the corresponding runtime property in 
            the live document.
            </summary>
            <param name="runtimeProperty"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1">
            <summary>
            Holds a value that is lazily computed when accessed.
            </summary>
            <remarks>
            A RuntimeProperty should be used to compute values that functionally derived from 
            the persistent state of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>. When the value of a RuntimeProperty
            first is accessed, the value is computed by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StatelessPropertyComputer`1"/> delegate 
            specified when the RuntimeProperty was created. The value is then cached so that subsequent 
            accesses just return the already computed value. The cached value is kept until the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/>
            computed by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer"/> delegate fires.
            <para>
            A RuntimeProperty can be thought of as internally having two states, <b>Invalid</b> and <b>Valid</b>:
            <list type="description">
            <item>
            <term>Invalid</term>
            <description>
            This is the initial state. The RuntimeProperty has no value. 
            The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.PropertyComputer`1"/> will be invoked to compute the value when 
            the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1.Value"/> property is accessed and this will set the RuntimeProperty 
            in state Valid. 
            The RuntimeProperty does not generate any event when a property that it depends  
            upon, as defined by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer"/>, is changed.
            </description>
            </item>
            <item>
            <term>Valid</term>
            <description>
            The RuntimeProperty has a cached value which is returned when the <see cref="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1.Value"/> property is accessed.
            When a property that the RuntimeProperty depends upon, as defined by the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.StatelessDependencyDeclarer"/>, 
            is changed, an event is generated, the value is dropped and the RuntimeProperty is set in state Invalid.
            </description>
            </item>
            </list>
            </para>
            <para>
            To use RuntimeProperties in a class deriving from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>, follow this pattern:
            <list type="bullet">
            <item>
            Declare a <c>private readonly RuntimeProperty&lt;TValue&gt;</c> field for each RuntimeProperty, where <c>TValue</c> is the 
            type of the value in the RuntimeProperty. Note that this must be an immutable value.
            </item>
            <item>
            Declare a method <c>private void InitRuntimeProperties(out RuntimeProperty&lt;TValue&gt; myRtp, ...)</c> that has one 
            <c>out</c> parameter for each RuntimeProperty. This method shall call 
            DocumentNode.CreateRuntimeProperty to create a RuntimeProperty object and assign the <c>out</c>
            parameters.
            </item>
            <item>
            Call the <c>InitRuntimeProperties</c> at the end of each constructor, including the deserialization constructor.
            </item>
            </list>
            </para>
            </remarks>
            <typeparam name="T">The Type of the values held by the runtime property. This must be an immutable type.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#ReleaseValueManager">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidated(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1.Spotfire#Dxp#Framework#DocumentModel#INotPersistedProperty#OnAncestorDetachedOrInvalidatedDuringConfigureForRuntimeAttach">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1.IsEvaluated">
            <summary>
            Gets a value indicating whether the runtime property has been evaluated or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1.IsEvaluatedAndValidInLive">
            <summary>
            Gets a value indicating whether this instance is evaluated and valid in live.
            </summary>
            <value>
            <c>true</c> if this instance is evaluated and valid in live; otherwise, <c>false</c>.
            </value>
            <remarks>If <c>true</c>, then the property may be <c>false</c> directly after.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty`1.Value">
            <summary>
            Returns the cached value of the property, or computes it if no cached value exists.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner">
            <summary>Binds a Document node to its parent node and enable
            communication beween them.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner.GetCommandHistory">
            <summary>
            Gets the command history.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner.Generation">
            <summary>
            The generation in which a snapshot node was created.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IDocumentNodeOwner.Owner">
            <summary>
            Gets the owner; may return <c>null</c> if there is no owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNode">
            <summary>
            Base class for all undoable nodes in the document. All the Undoable building 
            blocks used to build document nodes inherit from this class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNode.GetPropertyStateCore(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNode.GetPropertyStateCore">
            <summary>
            Gets an internal representation of the property. The default implementation returns <c>null</c>.
            </summary>
            <returns>An internal representation of the property.</returns>
            <remarks>
            This code does much the same as the SerializeProperty overloads in DocumentNode.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNode.SetPropertyStateCore(System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNode.SetPropertyStateCore(System.Object)">
            <summary>
            Sets the internal representation of the property. The default implementation does nothing.
            </summary>
            <param name="state">The internal representation of the property, previously retrieved by call to <see cref="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNode.GetPropertyStateCore"/>.</param>
            <remarks>
            This code does much the same as the DeserializeProperty overloads in DocumentNode.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNode.LimitGenerationUsedByRuntimeProperty">
            <summary>
            This method is called whenever reading from a mutable property with the exception
            of highlight properties which cannot be read by runtime properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1">
            <summary>
            A specialized undoable node that holds a frozen copy of a sub tree. 
            Used by 2.0 bookmarks and by persistent plot view to store filter settings.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:UndoableProperty&lt;T&gt;"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1.Value">
            <summary>
            Gets or sets the value of the property. 
            Assignment of objects with the same value as the current value,
            will be ignored.
            </summary>
            <value>The value of the property.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1.SetValue(`0)">
            <summary>
            Sets the value without any undo mechanism or events.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node},System.Boolean)">
            <inhertdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1.SetCommand">
            <summary>
            Command class for the assignment of the value of an UndoableProperty.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1.GetPropertyStateCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableNodeCopy`1.SetPropertyStateCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState`1.Value">
            <summary>
            Gets or sets the value of the undoable property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState`1.GetKeyedCollectionListener(Spotfire.Dxp.Framework.DocumentModel.UndoableProperty{`0})">
            <summary>
            Gets the keyed collection entry that reacts to changes of the associated undoable 
            property.
            </summary>
            <param name="undoableProperty">The undoable property that is requesting its keyed collection listener.</param>
            <returns>A keyed collection entry or null.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.IUndoablePropertyNodeState`1.MutablePropertyTriggerManager">
            <summary>
            Gets or sets the trigger manager for mutable property triggers set up on the associated node.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1">
            <summary>Manages a property that owns its value and 
            where assignments to the property will be 
            recorded as undoable commands. 
            </summary>
            <remarks>
            The UndoableProperty class can be used 
            for classes deriving from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> and basic values like strings and ints etc.
            A <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> held by an UndoableProperty is owned and thus part of the 
            sub tree in which the UndoableProperty lives.
            <para>
            The content type for the property must be serializable. If this is not the case
            an <see cref="T:System.InvalidOperationException"/> will be thrown when
            an instance of the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/> is created.
            </para>
            </remarks>
            <typeparam name="T">The type of the managed property.</typeparam>
            <seealso cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of the <see cref="T:UndoableProperty&lt;T&gt;"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.Value">
            <summary>
            Gets or sets the value of this <see cref="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1"/>. 
            </summary>
            <value>The value of the property.</value>
            <remarks>
            Assignment of objects with the same value as the current value,
            will be ignored.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.SetValue(`0)">
            <summary>
            Sets the value without any undo mechanism or events.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.GetPropertyStateCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.SetPropertyStateCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.GetRemovedDocumentNodesCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableProperty`1.SetCommand">
            <summary>
            Command class for the assignment of the value of an UndoableProperty.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoablePropertyNode">
            <summary>
            Base class for all undoable properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoablePropertyNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoablePropertyNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1">
            <summary>
            A set of items where all operations are undoable.
            </summary>
            <typeparam name="T">The type of the items in the set. May be a class that derives 
            from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> or any other immutable type such as <c>int</c> or <c>string</c>.
            </typeparam>
            <remarks>
            When the set is modified, its owner will raise an event using the PropertyName that the 
            set was constructed with.
            
            To construct an instance of UndoableSet, use the corresponding CreateProperty() overload in <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.#ctor(Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Initializes a new instance of UndoableOwnedSet.
            </summary>
            <param name="propertyName">Name of the property in the owning node that holds this set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.ForEachChild(System.Action{Spotfire.Dxp.Framework.DocumentModel.Node},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.PerformPostDeserializationInitialization(`0[])">
            <summary>
            Initializes this instance after it has been deserialized from persistence.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.Add(`0)">
            <summary>
            Adds the specified item to this set. If the item already exists, nothing happens.
            </summary>
            <param name="item">The item to add.</param>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.Remove(`0)">
            <summary>
            Removes the specified item from this set, returning <c>true</c> if this set contained the item.
            </summary>
            <param name="item">The oitem to remove.</param>
            <returns>
            <c>true</c> if the item was removed; otherwise, <c>false</c>.
            This method also returns false if the specified item is not found in this set.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.Clear">
            <summary>
            Removes all items from this set.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.Contains(`0)">
            <summary>
            Determines whether this set contains the specified item.
            </summary>
            <param name="item">The item to locate in the set.</param>
            <returns>
            <c>true</c> if item is found in this set; otherwise, false.
            </returns>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.Count">
            <summary>
            Gets the number of items contained in this set.
            </summary>
            <value>The number of items.</value>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items of this set to the specified <see cref="T:System.Array"></see>, starting at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the items
            copied from this set. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this set is read-only.
            </summary>
            <value><c>true</c> if this set is read-only; otherwise <c>false</c>.</value>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the items in this set.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to 
            iterate through the items in this set.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the items in this set.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> that can be used to 
            iterate through the items in this set.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>Replaces the contents of this instance with the elements in the
            specified <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection. 
            The collection itself cannot be <c>null</c> or contain any elements that are <c>null</c>.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.GetPropertyStateCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.SetPropertyStateCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.UndoableSet`1.GetRemovedDocumentNodesCore(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.TreeSetNode`1">
            <summary>
            A tree node in a AVL search tree containing objects of type V. The hash codes
            of the objects in the tree are used as the search key in the AVL tree.
            </summary>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TreeSetNode`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.TreeSetNode`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.DocumentModel.ValueListNode`1">
            <summary>
            A list node used in AVL search trees containing objects of type V.
            All objects with the same hash code collide at the same tree node in the AVL 
            search tree. Such objects are stored in a linked list of values.
            </summary>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ValueListNode`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ValueListNode`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IZombieHolderOwner.AddOwnedZombieHolder(Spotfire.Dxp.Framework.DocumentModel.IZombieHolder)">
            <summary>
            Assumes ownership of the zombie holder and adds it to the collection of zombies
            owned by this node. No commands are involved.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IZombieHolderOwner.RemoveOwnedZombieHolder(Spotfire.Dxp.Framework.DocumentModel.IZombieHolder)">
            <summary>
            Releases ownership of the zombie holder and removes it from the collection of zombies
            owned by this node. No commands are involved.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.IZombieHolder.RemoveFromOwnerIfNotReferenced">
            <summary>
            Removes the zombie holder from its owner if it is no longer referenced to allow 
            garbage collection of the zombie holder. This method generates an undoable command.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ZombieHolder`2.zombie">
            <summary>
            the zombie object held by this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ZombieHolder`2.crossReferencesThatReferenceMe">
            <summary>
            The zombie cross references that referred to the original object and are now in zombie state.
            These references will reconnect when an element matching the zombie in this instance is added to the 
            associated zombie keyed collection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.DocumentModel.ZombieHolder`2.nestedZombies">
            <summary>
            The nested zombies, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.DocumentModel.ZombieHolder`2.RemoveFromOwnerIfNotReferenced">
            <summary>
            If this zombie holder does not any references a command is executed that removes
            this zombie holder from its owner.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Drawing.ColorPalette">
            <summary>
            Color palette.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ColorPalette.ColorDistance(System.Drawing.Color,System.Drawing.Color)">
            <summary>Computes the euclidian distance between two colors in RGB space.
            The result is normalized to the interval [0, 1].
            </summary>
            <param name="c1">First color.</param>
            <param name="c2">Second color.</param>
            <returns>Returns the euclidian distance between the two colors.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ColorPalette.ColorsAreEqual(System.Drawing.Color,System.Drawing.Color)">
            <summary>Checks if the colors are equal regarding ARGB values.
            </summary>
            <param name="color">The first color.</param>
            <param name="color2">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ColorPalette.GetContrastColor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets the contrasting color of the given background color.
            </summary>
            <param name="backgroundColor">The color of the background.</param>
            <param name="lightColor">The light color.</param>
            <param name="darkColor">The dark color.</param>
            <returns>The darkColor if the color is considered dark; othewise the lightColor.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Drawing.ColorPalette.DefaultEmptyColor">
            <summary>Gets the default empty color.
            </summary>
            <value>The default empty color.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Drawing.ColorPalette.NeutralMarkerColor">
            <summary>
            Gets a neutral gray color for lines and markers that should not be colored.
            </summary>
            <value>A neutral gray color.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ColorPalette.SelectColor(System.Collections.Generic.IEnumerable{System.Drawing.Color},System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>Selects a color from the palette, avoiding already used colors.
            </summary>
            <param name="palette">The palette.</param>
            <param name="usedColors">The already used colors. Can be <c>null</c>.</param>
            <returns>Selected color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ColorPalette.SelectColors(System.Collections.Generic.IEnumerable{System.Drawing.Color},System.Collections.Generic.IEnumerable{System.Drawing.Color},System.Int32)">
            <summary>Selects n colors from the palette, avoiding already used colors.
            </summary>
            <param name="palette">The palette.</param>
            <param name="usedColors">The already used colors. Can be <c>null</c>.</param>
            <param name="n">The number of colors to select.</param>
            <returns>Array of selected colors.</returns>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.PaletteColumnCount">
            <summary>
            The number of columns in the palette.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.GreyPaletteColumnIndex">
            <summary>
            The index in the palette of the columns with grey colors.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.PaletteColors">
            <summary>
            An array of 56 colors used in the standard color palette (color pickers).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.MarkingPaletteColors">
            <summary>
            An array of colors used for markings.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.TablePaletteColors">
            <summary>An array of colors used for data tables.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Drawing.ColorPalette.DefaultColor">
            <summary>
            Gets the default color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.DefaultContinousColorRange">
            <summary>
            The default continous color range used by continous color schemes (ContinuousColorRule).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.DefaultColors">
            <summary>
            Default categorical color scheme. 8*6 = 48 colors from the main palette.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.ClassicCategoricalColors">
            <summary>
            The classic categorical color scheme.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Drawing.ColorPalette.UsedBeforeSpotfire10">
            <summary>
            The palettes used before Spotfire 10.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.UsedBeforeSpotfire10.PaletteColors">
            <summary>
            An array of 56 colors used in the standard color palette (color pickers).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ColorPalette.UsedBeforeSpotfire10.DefaultColors">
            <summary>
            Default categorical color scheme. 35 colors from the main palette.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Drawing.DrawUtility">
            <summary>
            Provides drawing utility methods.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat,System.Single)">
            <summary>Draws a text string.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="text">Text string.</param>
            <param name="font">Font.</param>
            <param name="brush">Brush.</param>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="format">String format.</param>
            <param name="angle">Angle.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat,System.Single)">
            <summary>Draws a text string.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="text">Text string.</param>
            <param name="font">Font.</param>
            <param name="brush">Brush.</param>
            <param name="layoutRectangle">Rectangle.</param>
            <param name="format">String format.</param>
            <param name="angle">Angle.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.DrawVerticalString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat,Spotfire.Dxp.Framework.Drawing.DrawUtility.VerticalTextDirection)">
            <summary>Draws vertical text.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="text">Text string.</param>
            <param name="font">Font.</param>
            <param name="brush">Brush.</param>
            <param name="rectangle">Rectangle.</param>
            <param name="format">String format.</param>
            <param name="direction">Direction.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.CreateRoundRectangle(System.Drawing.RectangleF,System.Int32)">
            <summary>Creates a round rectangle region.
            </summary>
            <param name="rect">Rectangle.</param>
            <param name="cornerRadius">Corner radius.</param>
            <returns>A graphics path.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.RenderTextWithSimpleGlow(System.Drawing.Graphics,System.String,System.Drawing.Rectangle,Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo,System.Drawing.Font,System.Drawing.StringFormat)">
            <summary>
            Renders the <paramref name="text"/> with a simple glow effect. Faster than <see cref="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.RenderTextWithGlow(System.Drawing.Graphics,System.String,System.Drawing.Rectangle,Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo,System.Drawing.Font,System.Drawing.StringFormat,System.Boolean)"/>.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="text">The text.</param>
            <param name="bounds">The bounds.</param>
            <param name="textColor">Color of the text.</param>
            <param name="glowColor">Color of the glow.</param>
            <param name="font">The font.</param>
            <param name="stringFormat">The string format.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.RenderTextWithSimpleGlow(System.Drawing.Graphics,System.String,System.Drawing.Rectangle,Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo,System.Drawing.Font,System.Drawing.StringFormat,System.Boolean)">
            <summary>
            Renders the <paramref name="text"/> with a simple glow effect. Faster than <see cref="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.RenderTextWithGlow(System.Drawing.Graphics,System.String,System.Drawing.Rectangle,Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo,System.Drawing.Font,System.Drawing.StringFormat,System.Boolean)"/>.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="text">The text.</param>
            <param name="bounds">The bounds.</param>
            <param name="textColor">Color of the text.</param>
            <param name="glowColor">Color of the glow.</param>
            <param name="font">The font.</param>
            <param name="stringFormat">The string format.</param>
            <param name="hasBackground">Set this to <c>false</c> if you don't know if the text has a background (the area to which you are drawing might be transparent).</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.RenderTextWithGlow(System.Drawing.Graphics,System.String,System.Drawing.Rectangle,Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo,System.Drawing.Font,System.Drawing.StringFormat,System.Boolean)">
            <summary>
            Renders the <paramref name="text"/> with a glow effect.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="text">The text to render.</param>
            <param name="bounds">The text bounds.</param>
            <param name="textColor">Color of the text.</param>
            <param name="glowColor">Color of the glow effect.</param>
            <param name="font">The font.</param>
            <param name="stringFormat">The string format.</param>
            <param name="isRenderingOnDisplay">True if drawing on a display, opposed to exporting/printing</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.CopyGraphicsAttributes(System.Drawing.Graphics,System.Drawing.Graphics)">
            <summary>
            Copies some relevant graphics attributes 
            that may matter when generating text glow effect.
            </summary>
            <param name="source">The source graphics.</param>
            <param name="target">The target graphics.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.RenderGlow(System.Drawing.Graphics,System.String,System.Drawing.Rectangle,Spotfire.Dxp.Framework.Styles.ColorInfo,System.Drawing.Font,System.Drawing.StringFormat)">
            <summary>
            Renders the glow. 
            This is a cumbersome process but it works in all cases, most
            notably on transparent backgrounds, even if the end result is
            not perfect. Steps:
            1. Draw the text on a bitmap with a white brush
            2. Shrink it and expand it back, to get a blurred text
            3. When expanding the colors needs brightening, otherwise the blur loses its effect
            4. The bright blur is finally recolored to the glow color
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="text">The text.</param>
            <param name="bounds">The bounds.</param>
            <param name="glowColor">Color of the glow.</param>
            <param name="font">The font.</param>
            <param name="stringFormat">The string format.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.DrawBitmapBlurred(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            "Blurs" the <paramref name="bitmap"/> and draws it onto the <paramref name="graphics"/>.
            </summary>
            <param name="bitmap">The bitmap to draw.</param>
            <param name="bounds">The location and size of the bitmap on the <paramref name="graphics"/>.</param>
            <param name="graphics">The graphics.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.FillRoundRectangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Color,System.Drawing.RectangleF,System.Int32)">
            <summary>Draws a round rectangle with an outline.
            </summary>
            <param name="g">Graphics.</param>
            <param name="brush">Brush.</param>
            <param name="outlineColor">Outline color.</param>
            <param name="rectangle">Rectangle. Note: This method will not draw on the bottom 
            and left edges of this rectangle.</param>
            <param name="cornerRadius">Corner radius</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.CreateValidRectangle(System.Drawing.Rectangle)">
            <summary>Creates a valid rectangle.
            Ensure rectangle width and height are positive.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>Valid rectangle</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.CreateValidRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates a valid RectangleF.
            A valid rectangle is a rectangle that has a
            positive width and height.
            </summary>
            <param name="x1">x1.</param>
            <param name="x2">x2.</param>
            <param name="y1">y1.</param>
            <param name="y2">y2.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.DrawUtility.CreateUnionRectangle(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>Creates a union of two rectangles.
            </summary>
            <param name="first">The first rectangle.</param>
            <param name="second">The second rectangle.</param>
            <returns>A new rectangle that spans from the outer edges of the two rectangles.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Drawing.ImageUtility">
            <summary>
            Utility class used for drawing overlayed images, etc.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Drawing.ImageUtility.EmptyPngData">
            <summary>
            Raw byte array representing 1x1 transparent PNG image.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.CreateTransparencyAdjustment(System.Single)">
            <summary>Creates an ImageAttributes object to use in DrawImage calls.
            </summary>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.MakeTransparent(System.Drawing.Image,System.Single)">
            <summary>
            Makes the image transparent.
            </summary>
            <param name="image">The image to make transparent.</param>
            <param name="alpha">The alpha value (0-1).</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.OverlayImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Draws <paramref name="imageToOverlay"/> on top of <paramref name="baseImage"/>.
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="imageToOverlay">The overlay image.</param>
            <returns>An image of the base and overlay image combined.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.OverlayImage(System.Drawing.Image,System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Draws <paramref name="imageToOverlay"/> on top of <paramref name="baseImage"/> using <paramref name="transparencyColorKey"/> 
            as the overlay images transparent color.
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="imageToOverlay">The overlay image.</param>
            <param name="transparencyColorKey">Color on the overlay image to draw as transparent. NOTE: Not applicable on icons.</param>
            <returns>An image of the base and overlay image combined.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.OverlayImage(System.Drawing.Image,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Draws <paramref name="imageToOverlay"/> on top of <paramref name="baseImage"/> with an offset from
            the top left corner.
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="imageToOverlay">The overlay image.</param>
            <param name="offsetX">The offset from the left.</param>
            <param name="offsetY">The offset from the top.</param>
            <returns>An image of the base and overlay image combined.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.OverlayImage(System.Drawing.Image,System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws <paramref name="imageToOverlay"/> on top of <paramref name="baseImage"/> with an offset from
            the top left corner.
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="imageToOverlay">The overlay image.</param>
            <param name="offsetX">The offset from the left.</param>
            <param name="offsetY">The offset from the top.</param>
            <param name="transparencyColorKey">Color on the overlay image to draw as transparent. NOTE: Not applicable on icons.</param>
            <returns>An image of the base and overlay image combined.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.OverlayImage(System.Drawing.Image,System.Drawing.Image,System.Drawing.ContentAlignment)">
            <summary>
            Draws <paramref name="imageToOverlay"/> aligned as <paramref name="alignment"/> on top of <paramref name="baseImage"/>.
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="imageToOverlay">The overlay image.</param>
            <param name="alignment">The alignment.</param>
            <returns>An image of the base and overlay image combined.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.OverlayImage(System.Drawing.Image,System.Drawing.Image,System.Drawing.ContentAlignment,System.Int32,System.Int32)">
            <summary>
            Draws <paramref name="imageToOverlay"/> on top of <paramref name="baseImage"/>. The image is aligned as <paramref name="alignment"/> with the given offset.
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="imageToOverlay">The overlay image.</param>
            <param name="alignment">The alignment.</param>
            <param name="offsetX">The offset from the left.</param>
            <param name="offsetY">The offset from the top.</param>
            <returns>An image of the base and overlay image combined.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.OverlayImage(System.Drawing.Image,System.Drawing.Image,System.Drawing.ContentAlignment,System.Drawing.Color)">
            <summary>
            Draws <paramref name="imageToOverlay"/> on top of <paramref name="baseImage"/> using <paramref name="transparencyColorKey"/> as the transparent color.
            The overlay image is aligned as <paramref name="alignment"/>.
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="imageToOverlay">The overlay image.</param>
            <param name="alignment">The alignment.</param>
            <param name="transparencyColorKey">Color on the overlay image to draw as transparent. NOTE: Not applicable on icons.</param>
            <returns>An image of the base and overlay image combined.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.OverlayImage(System.Drawing.Image,System.Drawing.Image,System.Drawing.ContentAlignment,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws <paramref name="imageToOverlay"/> on top of <paramref name="baseImage"/> using <paramref name="transparencyColorKey"/> as the transparent color.
            The overlay image is aligned as <paramref name="alignment"/> with the given offset.        
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="imageToOverlay">The overlay image.</param>
            <param name="alignment">The alignment.</param>
            <param name="offsetX">The offset from the left.</param>
            <param name="offsetY">The offset from the top.</param>
            <param name="transparencyColorKey">Color on the overlay image to draw as transparent. NOTE: Not applicable on icons.</param>
            <returns>An image of the base and overlay image combined.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.OverlayImage(System.Drawing.Image,System.Drawing.Image,System.Drawing.Size,System.Drawing.ContentAlignment,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws <paramref name="imageToOverlay"/> on top of <paramref name="baseImage"/> using <paramref name="transparencyColorKey"/> as the transparent color.
            The overlay image is resized to <paramref name="overlayImageDestinationSize"/> and aligned as <paramref name="alignment"/> with the given offset.                
            </summary>
            <param name="baseImage">The base image.</param>
            <param name="imageToOverlay">The overlay image.</param>
            <param name="overlayImageDestinationSize">The overlay image destination size.</param>
            <param name="alignment">The alignment.</param>
            <param name="offsetX">The offset from the left.</param>
            <param name="offsetY">The offset from the top.</param>
            <param name="transparencyColorKey">Color on the overlay image to draw as transparent. NOTE: Not applicable on icons.</param>
            <returns>An image of the base and overlay image combined.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.SafeCloneImage(System.Drawing.Image)">
            <summary>
            Clones an <see cref="T:System.Drawing.Image"/> in a thread-safe way.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to clone.</param>
            <returns>The cloned <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.DrawImageAtLocation(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Point)">
            <summary>
            Draws the image at location. Image size is taken from width and height properties of the image.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="image">The image.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.UnsafeGetPngBytes(System.Drawing.Image)">
            <summary>
            Gets the bytes of the specified image saved as PNG.
            This method is unsafe in the sense that it requires the image to have been created on the calling thread.
            </summary>
            <param name="image">The image to convert to bytes, or null.</param>
            <returns>An array of bytes encoding the image as PNG, or null if the image is null.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.UnsafeGetPngBytesAsStream(System.Drawing.Image)">
            <summary>
            Gets the bytes of the specified image saved as PNG.
            This method is unsafe in the sense that it requires the image to have been created on the calling thread.
            </summary>
            <param name="image">The image to convert to bytes, or null.</param>
            <returns>An array of bytes encoding the image as PNG, or null if the image is null.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.ToEmbeddedImageUrl(System.Drawing.Image,System.Boolean)">
            <summary>
            Converts the image to an embedded image Url on the form "url(data:image/png;base64, ...)". 
            NOTE: The image must have been created on the calling thread.
            </summary>
            <param name="image">The image. Must have been created on the calling thread.</param>
            <param name="includeUrl">If <c>false</c>, the Url will be on the form "data:image/png;base64, ..." used for image src attribute.</param>
            <returns>An embedded image url.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.ToPngBase64String(System.Drawing.Image)">
            <summary>
            Converts the image to a 'data:image/png;base64' string.
            </summary>
            <param name="image">The image.</param>
            <returns>The base64 string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Drawing.ImageUtility.ToEmbeddedImageUrl(System.Drawing.Image)">
            <summary>
            Converts the image to an embedded image Url on the form "url(data:image/png;base64, ...)". 
            NOTE: The image must have been created on the calling thread.
            </summary>
            <param name="image">The image. Must have been created on the calling thread.</param>
            <returns>An embedded image url.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage">
            <summary>
            A message created during HTML sanitation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.lineIndex">
            <summary>
            The zero based line index in the original HTML.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.indexInLine">
            <summary>
            The line  position in the original HTML.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage" /> class.
            </summary>
            <param name="lineNumber">The 1 based line number.</param>
            <param name="linePosition">The 1 based position in the line.</param>
            <param name="length">The length.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.LineIndex">
            <summary>
            Gets the zero based line index in the original HTML.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.IndexInLine">
            <summary>
            Gets the zero based index in the line.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.InvalidAttribute(HtmlAgilityPack.HtmlAttribute,System.String,System.Object[])">
            <summary>
            Creates an invalid attribute message.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
            <returns>A new HtmlSanitationMessage instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.InvalidElement(HtmlAgilityPack.HtmlNode)">
            <summary>
            Creates an invalids element message.
            </summary>
            <param name="element">The element.</param>
            <returns>A new HtmlSanitationMessage instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.ParseError(HtmlAgilityPack.HtmlParseError)">
            <summary>
            Creates a parse error message.
            </summary>
            <param name="parseError">The parse error.</param>
            <returns>A new HtmlSanitationMessage instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitationMessage.MalformedHtml">
            <summary>
            Creates a html malformed error message.
            </summary>
            <returns>A new HtmlSanitationMessage instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Html.HtmlSanitationResult">
            <summary>
            Represents the result of sanitizing an HTML string.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Html.HtmlSanitationResult.sanitizedHtml">
            <summary>
            The sanitized HTML.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Html.HtmlSanitationResult.messages">
            <summary>
            The messages.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Html.HtmlSanitationMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Html.HtmlSanitationResult"/> class.
            </summary>
            <param name="sanitizedHtml">The sanitized HTML.</param>
            <param name="messages">The messages.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Html.HtmlSanitationResult.SanitizedHtml">
            <summary>
            Gets the sanitized HTML.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Html.HtmlSanitationResult.HasMessages">
            <summary>
            Gets a value indicating whether this instance has messages.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitationResult.GetMessages">
            <summary>
            Gets the messages.
            </summary>
            <returns>An enumeration of the messages.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Html.HtmlSanitizer">
            <summary>
            Utility class for removing potentially harmful construct from a chunk of HTML.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Html.HtmlSanitizer.AllowedElements">
            <summary>
            The white list. All allowed HTML elements and attributes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Html.HtmlSanitizer.IntermediaryElements">
            <summary>
            A list of elements that may be encountered on the leaf or intermediary levels in the AST. These elements 
            shall be removed and replaced by their content, if any.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitizer.SanitizeHtml(System.String)">
            <summary>
            Cleans the specified html source against a whitelist, removing all unallowed elements and attributes.
            </summary>
            <param name="source">The Html source.</param>
            <returns>
            The cleaned html output.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitizer.SinglePassSanitizeHtml(System.String)">
            <summary>
            Runs one pass of cleaning the specified html source against a whitelist, removing all unallowed elements and attributes.
            </summary>
            <param name="source">The Html source.</param>
            <returns>
            The cleaned html output.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitizer.CreateHtmlDocument(System.String)">
            <summary>
            Creates an HTML document form the specified html string.
            </summary>
            <param name="sourceHtml">The source HTML string.</param>
            <returns>An Html document</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitizer.FilterElementsInSubtree(HtmlAgilityPack.HtmlNode,System.Collections.Generic.List{Spotfire.Dxp.Framework.Html.HtmlSanitationMessage})">
            <summary>
            Traverses the specified sub tree and delete elements not in the whitelist.
            </summary>
            <param name="subTreeRootNode">The root node of the sub tree.</param>
            <param name="messages">The list to add messages to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitizer.ValidateAttribute(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Validates the specified attribute.
            </summary>
            <param name="node">The node containing the attribute.</param>
            <param name="attribute">The attribute.</param>
            <returns>
              <c>true</c> if the attribute shall be kept.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitizer.ValidateStyleAttributeValue(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Validates and reformats the value of the specified style attribute.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns><c>true</c> if the attribute shall be kept.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitizer.IsValidCssName(System.String)">
            <summary>
            Determines whether the specified property name is a valid CSS name, in a restricted sense.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the specified name is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitizer.ValidateAttributeValue(System.String,System.String,System.Boolean)">
            <summary>
            Validates the value of the specified attribute.
            </summary>
            <param name="value">The value.</param>
            <param name="additionalAllowedChars">The additional allowed chars.</param>
            <param name="allowRgbCalls">if set to <c>true</c> allow RGB calls.</param>
            <returns>
              <c>true</c> if the attribute shall be kept.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Html.HtmlSanitizer.ValidateImgSrcAttribute(System.String)">
            <summary>
            Validates the specified img element.
            </summary>
            <param name="src">The value of the src attribute.</param>
            <returns>
              <c>true</c> if the attribute is valid.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.IDisposableDataCacheValueType">
            <summary>Interface required to be implemented for values that are to be cached in
            the DataCache and disposed when removed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.IDisposableDataCacheValueType.Dispose">
            <summary>
            Releases unmanaged resources.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDisposableCollection">
            <summary>
            A collection of disposable objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDisposableCollection.storage">
            <summary>
            The storage.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDisposableCollection.#ctor(Spotfire.Dxp.Internal.Utilities.Collections.DisposableCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDisposableCollection" /> class.
            </summary>
            <param name="toDispose">The automatic dispose.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDisposableCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDisposableCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableCollectionAttribute">
            <summary>
            Types marked with this attribute are considered immutable by the fail-early check that requires 
            that all values used in the document are immutable, if all their children are immutable or immutablecollections.
            <b>IMPORTANT NOTE:</b> Do not mark a type with an <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableCollectionAttribute"/> if the state of an 
            instance of the type can be manipulated after the instance has been constructed. Failure to follow this
            guideline may lead to undo/redo bugs and crashes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableCollectionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableCollectionAttribute"/> class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2">
            <summary>An immutable dictionary which can be returned from runtime properties.
            </summary>
            <typeparam name="TKey">The type of the key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of the value of the dictionary.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.dictionary">
            <summary>
            The dictionary.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.#ctor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2"/> class. Internal help constructor for the builder class.
            </summary>
            <param name="builder">The builder instance.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2"/> class.
            </summary>
            <param name="info">The serializable info.</param>
            <param name="context">The serializable context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Keys">
            <summary>
            Gets the keys of the dictionary.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Values">
            <summary>
            Gets the values of the dictionary.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is readonly. It is.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Item(`0)">
            <summary>
            Gets the value for a given key. The set operation is not supported.
            </summary>
            <param name="key">The key to get the value for.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an item. Not supported.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.ContainsKey(`0)">
            <summary>
            Returns a value indicating if the key is present in the dictionary.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>True if it is present, false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Remove(`0)">
            <summary>
            Removes the item with the given key.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value for a key.
            </summary>
            <param name="key">The key to get a value for.</param>
            <param name="value">The value.</param>
            <returns>True if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the dictionary. Not supported.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Clear">
            <summary>
            Clears the dictionary. Not supported.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Gets a value indicating if the item is present in the dictionary.
            </summary>
            <param name="item">The item whose presence in the collection is in question.</param>
            <returns>True if it is present, false otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the dictionary to an array.
            </summary>
            <param name="array">The array to copy values to.</param>
            <param name="arrayIndex">The arrayIndex to start copying to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the item. Not supported.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Throws exception so no return.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator over the items in the dictionary.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator over the items in the dictionary.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2">
            <summary>Represents a builder class for immutabledictionaries.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2"/> class.
            </summary>
            <param name="dictionary">The initial values.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2"/> class.
            </summary>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2"/> class.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.Count">
            <summary>
            Gets the number of elements in the dictionary being built.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.Item(`0)">
            <summary>
            Gets the value for a given key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.Add(`0,`1)">
            <summary>
            Adds an item to the dictionary.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified key value pair.
            </summary>
            <param name="kvp">The key value pair.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Adds items to the dictionary.
            </summary>
            <param name="elements">The elements to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.Build">
            <summary>
            Builds an ImmutableDictionary. Any further calls to this builder will work on a new dictionary.
            </summary>
            <returns>The newly build dictionary.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionaryBuilder`2.ContainsKey(`0)">
            <summary>
            Checks if the dictionary being built contains the given key.
            </summary>
            <param name="key">The key.</param>
            <returns>True, if the key is in the dictionary.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableListBuilder`1.Build">
            <summary>
            Builds an ImmutableList. Any further calls to this builder will work on a new list.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableList`1.Insert(System.Int32,`0)">
            <summary>
            This collection is readonly and calling this method will throw.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableList`1.RemoveAt(System.Int32)">
            <summary>
            This collection is readonly and calling this method will throw.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Returns true if pred is fulfilled for all items.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>True if fulfilled for all items.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableList`1.Item(System.Int32)">
            <summary>
            This collection is readonly and calling the setter will throw.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableList`1.Add(`0)">
            <summary>
            This collection is readonly and calling this method will throw.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableList`1.Clear">
            <summary>
            This collection is readonly and calling this method will throw.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableList`1.Remove(`0)">
            <summary>
            This collection is readonly and calling this method will throw.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2">
            <summary>
            Represents an immutable pair.
            </summary>
            <typeparam name="TFirst">The type of the first element in the pair.</typeparam>
            <typeparam name="TSecond">The type of the second element in the pair.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2.first">
            <summary>
            The first element in the pair.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2.second">
            <summary>
            The second element in the pair.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2"/> class.
            </summary>
            <param name="first">The first element in the pair.</param>
            <param name="second">The second element in the pair.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2.First">
            <summary>
            Gets the first element in the pair.
            </summary>
            <value>The first element in the pair.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2.Second">
            <summary>
            Gets the second element in the pair.
            </summary>
            <value>The second element in the pair.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutablePair`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableSetBuilder`1.Build">
            <summary>
            Builds an immutableset. Any further calls to this builder will work on a new set.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableSet`1">
            <summary>
            Immutable set if T is immutable. This is verified by the designpattern test.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the UsedPreprocessorVariables class.
            This construction is used for deserialization (only).
            </summary>
            <param name="info">The <c>SerializationInfo</c> to retrieve data from.</param>
            <param name="context">the source of this serialization</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ImmutableCollections.ImmutableSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <c>SerializationInfo</c> instance with the data needed to serialize this object.
            </summary>
            <param name="info">the <c>SerializationInfo</c> to populate with data.</param>
            <param name="context">the destination for the serialization.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryMenuItem">
            <summary>
            Represents a server library browser account menu item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryMenuItem.Id">
            <summary>
            Gets the id of the menu item
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryMenuItem.Text">
            <summary>
            Gets the text of the menu item
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryMenuItem.Attribute">
            <summary>
            Gets the attribute of the menu item
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryMenuItem.#ctor(Spotfire.Dxp.WebServices.MenuItemDTO)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryMenuItem"/> class.
            </summary>
            <param name="menuItemDto">The web service menu Item dto.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryMenuItem.Convert(Spotfire.Dxp.WebServices.MenuItemDTO[])">
            <summary>
            Converts a list of web service representation of a menu items
            </summary>
            <param name="menuItems">The menu items to convert</param>
            <returns>A list of converted menu items</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.TcsLibraryManager">
            <summary>
            Fetches information about "quick access" items, e.g TCS home folders and TCS shared folders.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TcsLibraryManager.webServiceCache">
            <summary>
            The web service cache from which the library access control service is retrieved when needed. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TcsLibraryManager.#ctor(Spotfire.Dxp.Services.WebServiceCache,Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.TcsLibraryManager"/> class.
            </summary>
            <param name="webServiceCache">The web service cache.</param>
            <param name="connectivityService">The connectivity service.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TcsLibraryManager.GetAccountItems">
            <summary>
            Gets the account menu items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TcsLibraryManager.GetItems">
            <summary>
            Gets the quick access sidebar categories.
            </summary>
            <returns>A list of side bar categories</returns>
            <remarks>This method is currently only applicable on TCS</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TcsLibraryManager.SharedWithMe(Spotfire.Dxp.Framework.Library.LibraryEntry.Fields)">
            <summary>
            Gets the list of library entries shared with me.
            </summary>
            <param name="fields">The fields to include in the items returned.</param>
            <returns>The list of entries shared with me</returns>
            <remarks>This method is currently only applicable on TCS</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TcsLibraryManager.SharedByMe(Spotfire.Dxp.Framework.Library.LibraryEntry.Fields)">
            <summary>
            Gets the list of library entries shared by me.
            </summary>
            <param name="fields">The fields to include in the items returned.</param>
            <returns>The list of entries shared by me</returns>
            <remarks>This method is currently only applicable on TCS</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TcsLibraryManager.IsSupported">
            <summary>
            Gets a value indicating whether this functionality is supported by the connected Spotfire Server.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory">
            <summary>
            Represents a library quick access sidebar category.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory.Id">
            <summary>
            Gets the id of the category
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory.Name">
            <summary>
            Gets the name of the category
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory.Description">
            <summary>
            Gets the description of the category
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory.Divider">
            <summary>
            Gets a value that indicates weather there should be a divider after the category
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory.Items">
            <summary>
            Gets the list of sidebar items in this category.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory.#ctor(Spotfire.Dxp.WebServices.LibrarySidebarCategory)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory"/> class.
            </summary>
            <param name="category">The web service category.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory.Convert(Spotfire.Dxp.WebServices.LibrarySidebarCategory[])">
            <summary>
            Converts web service representation of a category
            </summary>
            <param name="categories">The categories to convert</param>
            <returns>A list of converted categories</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibrarySidebarCategory.Convert(Spotfire.Dxp.WebServices.LibrarySideBarItem[])">
            <summary>
            Converts web service representation of a side bar item
            </summary>
            <param name="items">The items to convert</param>
            <returns>A list of converted items</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibrarySideBarItem">
            <summary>
            Represents a library quick access sidebar item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySideBarItem.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySideBarItem.Description">
            <summary>
            Gets the description of the item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySideBarItem.External">
            <summary>
            Gets a value that indicates weather the url is external or not. 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySideBarItem.Icon">
            <summary>
            Gets the icon for the item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySideBarItem.Id">
            <summary>
            Gets the id of the item
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySideBarItem.LibraryId">
            <summary>
            Gets the library id for this item, if there is one.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySideBarItem.IsVisibleForAnonymous">
            <summary>
            Gets a valid that indicates weather the item is visible for anonymous or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibrarySideBarItem.Url">
            <summary>
            Gets the url of the item.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibrarySideBarItem.#ctor(Spotfire.Dxp.WebServices.LibrarySideBarItem)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibrarySideBarItem"/> class.
            </summary>
            <param name="item">The web service library sidebar item</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.AccessControlEntry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.AccessControlEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.InternalLibraryItemType">
            <summary>Represents a library item type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Log">
            <summary>The log.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.LabelToKnownType">
            <summary>
            A dictionary that maps item type labels to instances of the KnownType enum. 
            Both used during initialization of the EnumToType dictionary and to look up
            the KnownType of a concrete type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.EnumToType">
            <summary>
            A dictionary that maps known types to actual item type representations loaded from the server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.LockObject">
            <summary>
            Lock for ensuring thread safety during initialization.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.initialized">
            <summary>
            Used to ensure that the item types are only initialized once.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.id">
            <summary>
            The ID of the item type, a GUID which uniquely identifies the item type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.label">
            <summary>
            The label of the item type, e.g. 'dxp'. Together with  the 'label prefix' it 
            uniquely identifies the item type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.displayName">
            <summary>
            A human readable display name.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.isContainer">
            <summary>
            True if the item type represents a 'container' type (e.g. a folder).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.fileSuffix">
            <summary>
            The file suffix of the item type (or null if not applicable).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.mimeType">
            <summary>
            The MIME type of the item type (or null if not applicable).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.knownType">
            <summary>
            The known type representation of the item type.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.#ctor(Spotfire.Dxp.WebServices.ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.InternalLibraryItemType"/> class.
            </summary>
            <param name="itemType">The item type to initialize the new 
            InternalLibraryItemType with values from.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.#ctor(System.Guid,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.InternalLibraryItemType"/> class.
            </summary>
            <param name="id">The id of the item type.</param>
            <param name="label">The label of the item type.</param>
            <param name="labelPrefix">The label prefix of the item type.</param>
            <param name="displayName">The display name of the item type.</param>
            <param name="isContainer">True if the item type represensts a container, 
            false otherwise.</param>
            <param name="fileSuffix">The file suffix of the item type.</param>
            <param name="mimeType">The MIME type of the item type.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType">
            <summary>
            <para>An enum representing a known item type. For all known types except "unknown", there is a 
            one-to-one mapping between the known type and the actual represesentation which is stored on the 
            server. The "unknown" value may be a one-to-many mapping.</para>
            <para>Note! When adding a new type that should be visible in the library explorer, you may have to
            add a new icon, a deletion message and revise the sort order.</para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.Unknown">
            <summary>Item type representing an unknown item type.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.AnalysisDxp">
            <summary>Item type representing a TIBCO Spotfire Analysis document file.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.Folder">
            <summary>Item type representing a folder.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.Column">
            <summary>Item type representing a column element in the information model.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.Filter">
            <summary>Item type representing a filter element in the information model.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.Join">
            <summary>Item type representing a join element in the information model.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.Procedure">
            <summary>Item type representing a procedure element in the information model.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.Query">
            <summary>Item type representing a query element in the information model.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.DataSource">
            <summary>Item type representing a data source element in the information model.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.AnalysisState">
            <summary>Item type representing an analysis state.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.ScheduledUpdatesTask">
            <summary>Item type representing a scheduled updates task.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.DataFunction">
            <summary>Item type representing a data function.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.AnalysisScript">
            <summary>Item type representing an analysis script.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.ColorScheme">
            <summary>Item type representing a color scheme.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.Bookmark">
            <summary>
            The item type representing a bookmark.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.AnalyticItem">
            <summary>
            The item type representing an analytic item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.EmbeddedResource">
            <summary>
            The item type representing an embedded resource.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.ConnectionDataSource">
            <summary>Item type representing a connector data source.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.DataConnection">
            <summary>Item type representing a connector data connection.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.GraphSpecSet">
            <summary>Item type representing a graph spec set for mobile offline.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.SpotfireBinaryDataFormat">
            <summary>
            Item type representing a SBDF file.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType.AutomationServicesJob">
            <summary>Item type representing an automation services job.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Id">
            <summary>
            Gets the ID of this item type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Label">
            <summary>
            Gets the label of this item type. Includes a prefix that separates 
            the item types created by Spotfire Engineering from item types 
            created by third party developers in order to avoid naming collisions. 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.DisplayName">
            <summary>
            Gets the display name of this item type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.IsContainer">
            <summary>
            Gets a value indicating whether the item type is a container 
            (e.g. a folder) or not. 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.FileSuffix">
            <summary>
            Gets the file suffix of this item type, or <c>null</c> if no file 
            suffix has been defined.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.MimeType">
            <summary>
            Gets the MIME type of this item type or <c>null</c> if no MIME type 
            has been defined.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Type">
            <summary>
            Gets the known type of this item type. This value can be used to 
            easily compare item types, e.g. in switch statements. 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Spotfire#Dxp#Framework#IDataCacheValueType#ByteSize">
            <summary>
            Gets the size in bytes of the instance without children.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Spotfire#Dxp#Framework#IDataCacheValueType#Immutable">
            <summary>
            Gets a value indicating whether the instance is immutable or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Spotfire#Dxp#Framework#IDataCacheValueType#SizeWithChildren">
            <summary>
            Gets the size in bytes of the instance including children.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; 
            otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Equals(Spotfire.Dxp.Framework.Library.InternalLibraryItemType)">
            <summary>
            Determines whether the specified InternalLibraryItemType is equal 
            to the current InternalLibraryItemType.
            </summary>
            <param name="t">The InternalLibraryItemType to compare with the 
            current InternalLibraryItemType.</param>
            <returns>true if the specified InternalLibraryItemType is equal to 
            the current InternalLibraryItemType; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current InternalLibraryItemType.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.ToString">
            <summary>
            Returns a string that represents the current 
            InternalLibraryItemType.
            </summary>
            <returns>A string that represents the current InternalLibraryItemType.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Get(Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType)">
            <summary>
            Gets an internal library item type, loaded from the server, 
            that represents the given known type.
            </summary>
            <param name="knownType">A known type.</param>
            <returns>An internal library item type representing the given known type.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.Get(System.String)">
            <summary>
            Gets an internal library item type, loaded from the server, 
            that represents the given label.
            </summary>
            <param name="label">A known type.</param>
            <returns>An internal library item type.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.InitializeGlobalData(Spotfire.Dxp.Framework.Library.InternalLibraryManager)">
            <summary>
            Initialize the global static properties of the items.
            </summary>
            <param name="mgr">A reference to the internal library manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.InitializeLabelToKnownType">
            <summary>
            Initializes the LabelToKnownType dictionary.
            </summary>
            <returns>A fully populated dictionary.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.ServerType">
            <summary>Holds information about a library type to download from the server.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.ServerType.#ctor(System.String,Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType,System.Version,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.ServerType"/> class.</summary>
            <param name="name">The name of the type.</param>
            <param name="knownType">Type of the known.</param>
            <param name="availableFromVersion">The available from version.</param>
            <param name="featureEnabledForType">Is the feature is implemented in server and the type must exist.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.ServerType.Name">
            <summary>Gets the name of the extension.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.ServerType.KnownType">
            <summary>Gets the known type for the extension.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.ServerType.AvailableFromVersion">
            <summary>Gets the server version from witch the extension exists.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryItemType.ServerType.FeatureEnabledForType">
            <summary>Gets a value indicating whether the feature is implemented in server and the type must exist.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryItemCollection">
            <summary>Represents a collection of items.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemCollection.Item(System.Int32)">
            <summary>Gets the library item at the specified index.
            </summary>
            <param name="index">The index in this collection.</param>
            <returns>The library item at the specified index.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemCollection.GetEnumerator">
            <summary>
            Enumerates the items in this collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the items in this collection.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings">
            <summary>Specifies how the metadata of a library item shall be changed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.propertiesToSet">
            <summary>
            The custom proerties that shall be set on a library entry. Can be empty. Never null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.description">
            <summary>
            The description that shall be associated with a library entry. If null, the description is not changed.
            If this field is set, it overrides any description specified by document properties when the document 
            is saved to the library.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.#ctor">
            <summary>
            Creates a default metadata specification instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.Description">
            <summary>
            Gets or sets the description to associate with a library entry. If <c>null</c>, the description is not changed.
            If this property is set, it overrides any description specified by document properties when the document 
            is saved to the library.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.SetKeywords(System.String[])">
            <summary>
            Sets the keywords to associate with a library entry. 
            By default the keywords are not changed.
            The keywords set with this method will override any keywords specified by document properties when the document 
            is saved to the library.
            </summary>
            <remarks>Calling this methods without any arguments will clear the keywords of a library item.</remarks>
            <exception cref="T:System.ArgumentException">If any of the specified keywords are null or empty.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.TryGetKeywords(Spotfire.Dxp.Framework.Library.LibraryItemProperty@)">
            <summary>
            Tries to get the keywords previously set by the SetKeywords method. Returns <c>true</c> and 
            assigns the <paramref name="keywordsProperty"/> parameter if the keywords have previously 
            been set.
            </summary>
            <param name="keywordsProperty">Will be assigned with the previously set keywords or <c>null</c>.</param>
            <returns><c>true</c> if the keywords have previously been set.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.SetProperty(System.String,System.String[])">
            <summary>
            Adds a custom property that shall be set on the library item. The property value will be updated 
            if it is already set on the library item.
            </summary>
            <param name="propertyName">The name of the custom property that should be set.</param>
            <param name="values">The values that shall be associated with the custom property.</param>
            <remarks>
            Custom properties in the Library must have the same form as DataProperties. That is, they
            must have a prefix followed by a dot and then a name. The prefix "Spotfire"
            is reserved and such properties cannot be explicitly set through the API.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.TryGetProperty(System.String,Spotfire.Dxp.Framework.Library.LibraryItemProperty@)">
            <summary>
            Tries to get the custom property previously set by the SetProperty method. Returns <c>true</c> and 
            assigns the <paramref name="property"/> parameter if the keywords have previously 
            been set.
            </summary>
            <param name="propertyName">The name of the custom property to get.</param>
            <param name="property">Will be assigned with the previously set custom property or <c>null</c>.</param>
            <returns><c>true</c> if the custom property has previously been set.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.Update(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>
            Updates the specified library entry with the metadata (properties) in this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings.GetInformationElementProperties">
            <summary>
            Combines the properties into single value properties.
            </summary>
            <returns>The key-value dictionary of properties.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryItemPropertyCollection">
            <summary>Holds a collection of library item properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemPropertyCollection.Keywords">
            <summary>
            Gets the keywords property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemPropertyCollection.Item(System.String)">
            <summary>
            Gets the property with the specified name.
            </summary>
            <param name="name">The name of the property to get.</param>
            <returns>The property with the specified name.</returns>
            <exception cref="T:System.ArgumentException">If no property with the specified name exists.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemPropertyCollection.Count">
            <summary>
            Gets the number of properties in this collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemPropertyCollection.TryGetProperty(System.String,Spotfire.Dxp.Framework.Library.LibraryItemProperty@)">
            <summary>
            Tries to get the property with the specified name.
            </summary>
            <param name="name">The name of the property to get.</param>
            <param name="property">Will be assigned the property with the specified 
            name, or <c>null</c> if no such property exists.</param>
            <returns><c>true</c> if a property with the specified name was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemPropertyCollection.GetEnumerator">
            <summary>
            Enumerates the properties in this collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemPropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the properties in this collection.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption">
            <summary>Describes a metadata kind that shall be retrieved from the library when it is queried.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryManager"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryItem"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption.IncludePath">
            <summary>
            Gets an option specifying that the path of a library item shall be retrieved.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption.IncludeProperties">
            <summary>
            Gets an option specifying that the properties of a library item shall be retrieved.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption.IncludeAllMetadata">
            <summary>
            Gets an option specifying that all metadata of a library item shall be retrieved.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryItemSignature">
            <summary>
            Identifies an item in the library. Provides access to the subset of the 
            metadata associated with the item that can be used to find the item in the 
            library.
            </summary>
            <remarks>
            Instances of this class are immutable and serializable, making it possible to use them as
            values in the document.
            </remarks>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryManager"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemSignature.Id">
            <summary>
            Gets the id of this item. This value shall be used in search and other operations
            to refer to this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemSignature.Title">
            <summary>
            Gets the title of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemSignature.Description">
            <summary>
            Gets the description of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemSignature.ItemType">
            <summary>Returns the type of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemSignature.Path">
            <summary>
            Gets the path of this item, or <c>null</c> if the path was not retrieved 
            from the library when this item signature was created.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryManager"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemSignature.ParentId">
            <summary>
            Gets the id of the parent item of this this item. The parent item is 
            typically a folder in the library.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemSignature.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemSignature.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryItemType">
            <summary>Represent the type of a library item.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryItemType.RootLabel">
            <summary>The label for the root folder (type).
            The library has a special type for the root folder but this asymmetry is hidden in the public API.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryItemType.Types">
            <summary>The static library item types.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryItemType.PublicKnownTypes">
            <summary>The known types  that are public.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemType.#ctor(System.String,Spotfire.Dxp.Framework.Library.InternalLibraryItemType.KnownType)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryItemType"/> class.</summary>
            <param name="label">The label for the type.</param>
            <param name="knownType">The known type.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.Analysis">
            <summary>Gets the library type for a TIBCO Spotfire analysis file.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.InformationLink">
            <summary>Gets the library type for an information link.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.Folder">
            <summary>Gets the library type for a folder in the library.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.DataFunction">
            <summary>Gets the library type for a data function.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.ColorScheme">
            <summary>Gets the library type for a color scheme.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.SbdfDataFile">
            <summary>Gets the library type for a SBDF file.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.AutomationServicesJob">
            <summary>Gets the library type for an automation services job.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.DataSource">
            <summary>Gets a data source in the library.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.ConnectionDataSource">
            <summary>Gets a connector data source in the library.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.DataConnection">
            <summary>Gets a connector data connection in the library.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.AllTypes">
            <summary>Gets all known types.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.Label">
            <summary>Gets the label that is the primary key for the item type in the library database.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemType.LibraryEntryType">
            <summary>Gets the type of the library entry in a KnownType.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemType.FromLibraryEntryType(Spotfire.Dxp.Framework.Library.InternalLibraryItemType)">
            <summary>Converts a <see cref="T:Spotfire.Dxp.Framework.Library.InternalLibraryItemType"/> to a <see cref="T:Spotfire.Dxp.Framework.Library.LibraryItemType"/>.</summary>
            <param name="type">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemType.FromLabel(System.String)">
            <summary>Converts a label to a <see cref="T:Spotfire.Dxp.Framework.Library.LibraryItemType"/>.</summary>
            <param name="label">The type to convert.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryItem">
            <summary>Represents an item in the library.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItem.#ctor(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>
            Constructs an item from a library entry.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.Signature">
            <summary>
            Gets the signature of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.Id">
            <summary>
            Gets the id of this item. This value shall be used in search and other operations
            to refer to this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.Title">
            <summary>
            Gets the title of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.Description">
            <summary>
            Gets the description of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.Path">
            <summary>
            Gets the path of this item, or <c>null</c> if the path was not retrieved 
            from the library when this item was created.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryManager"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.Properties">
            <summary>
            Gets the properties of this item, or <c>null</c> if the properties was not retrieved 
            from the library when this item was created.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Library.LibraryManager"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.ItemType">
            <summary>Returns the type of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.ParentId">
            <summary>
            Gets the id of the parent item of this this item. The parent item is 
            typically a folder in the library.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.FormatVersion">
            <summary>
            Gets the format version of this item, or <c>null</c> if the format version has not been specified.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.ContentSize">
            <summary>
            Gets the content size in bytes of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.Created">
            <summary>
            Gets a DateTime describing when this item was created in the library.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.LastModified">
            <summary>
            Gets a DateTime describing when the last modification of this item was made in the library.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.LastAccess">
            <summary>
            Gets a DateTime describing when the contents of this item was last accessed in the library.
            If this item has never been accessed, <c>DateTime.MinValue</c> is returned.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItem.HasBeenAccessed">
            <summary>
            Returns <c>true</c> if the contents of this item has been accessed since it was created.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryItemProperty">
            <summary>Represents a property of a library item.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemProperty.#ctor(System.String,System.String[])">
            <summary>
            Creates a library item property with the specified key and values.
            </summary>
            <param name="name">The key of the propery.</param>
            <param name="values">The values of the propery.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemProperty.Name">
            <summary>
            Gets the name of this property. 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemProperty.Count">
            <summary>
            Gets the number of values in this property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryItemProperty.Item(System.Int32)">
            <summary>
            Gets the value at the specified index in this property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemProperty.GetEnumerator">
            <summary>
            Enumerates the values in this property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryItemProperty.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the values in this property.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.InternalLibraryManager">
            <summary>Manages communication with the Library for loading and
            publishing documents.</summary>
            <remarks>This class needs a total rewrite.</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ExportableAll">
            <summary>
            The set of item types to be exported when the user selects to export "all items".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ExportableAnalysisFiles">
            <summary>
            The set of item types to be exported when the user selects to export "analysis files".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ExportableInformationModel">
            <summary>
            The set of item types to be exported when the user selects to export the "information model".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ExportableDataAccess">
            <summary>
            The set of item types to be exported when the user selects to export the "data access".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ExportableDataFunctions">
            <summary>
            The set of item types to be exported when the user selects to export "data functions".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ExportableDataFiles">
            <summary>
            The set of item types to be exported when the user selects to export "data files".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ExportableColorSchemes">
            <summary>
            The set of item types to be exported when the user selects to export "color schemes".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ImportableAll">
            <summary>
            The set of item types to be imported when the user selects to import "all items".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ImportableAnalysisFiles">
            <summary>
            The set of item types to be imported when the user selects to import "analysis files".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ImportableInformationModel">
            <summary>
            The set of item types to be imported when the user selects to import the "information model".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ImportableDataAccess">
            <summary>
            The set of item types to be imported when the user selects to import the "data access".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ImportableDataFiles">
            <summary>
            The set of item types to be imported when the user selects to import the "data files".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ImportableDataFunctions">
            <summary>
            The set of item types to be imported when the user selects to import "data functions".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ImportableColorSchemes">
            <summary>
            The set of item types to be imported when the user selects to import "color schemes".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryAdministratorVisibleAll">
            <summary>
            The set of all item types that should be visible in the Library Administrator.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryAdministratorVisibleContainers">
            <summary>
            The set of all container item types (e.g. folders) that should be visible in the Library Administrator.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryWebVisibleAll">
            <summary>
            The set of all item types that should be visible in the web client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryWebVisibleFiles">
            <summary>
            The set of all non-container item types that should be visible in the web client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryWebVisibleContainers">
            <summary>
            The set of all container item types that should be visible in the web client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.InformationElementsAll">
            <summary>
            The set of all information model element types.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.DxpOpen">
            <summary>
            The set of all item types that can be opened by TIBCO Spotfire.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.cache">
            <summary>
            A user level library entry cache.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.#ctor(Spotfire.Dxp.Services.Library.ILibraryService,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.InternalLibraryManager"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="serviceProvider">Used to fetch services.</param>
            <remarks>Safe for multithreading.</remarks>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">Thrown if the set of item types cannot be initialized</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.InternalLibraryManager.Cache">
            <summary>
            Gets a user level cache for different library items.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.GetRoot">
            <summary>Returns the root entry.</summary>
            <returns>The root entry filled with all information (<see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Default"/>, 
            <see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Properties"/>, <see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Path"/>, 
            <see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Permissions"/> and <see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Dependencies"/>).</returns>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">Thrown if an error occurs</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.GetRoot(System.Boolean)">
            <summary>
            Returns the root entry.
            </summary>
            <param name="byPassCache">if set to <c>true</c> by pass the cache.</param>
            <returns>
            The root entry filled with all information (<see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Default" />,
            <see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Properties" />, <see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Path" />,
            <see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Permissions" /> and <see cref="F:Spotfire.Dxp.Framework.Library.LibraryEntry.Fields.Dependencies" />).
            </returns>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">Thrown if an error occurs</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ListSubItems(Spotfire.Dxp.Framework.Library.LibraryEntry,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Library.InternalLibraryItemType},Spotfire.Dxp.Framework.Library.LibraryEntry.Fields)">
            <summary>Lists sub items of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryEntry"/>.
            This entry must be of an <see cref="T:Spotfire.Dxp.WebServices.ItemType"/> that can have sub items (container == true).
            </summary>
            <param name="folderToList">The <see cref="T:Spotfire.Dxp.Framework.Library.LibraryEntry"/> for which sub items will be listed. 
            This entry must be of an <see cref="T:Spotfire.Dxp.WebServices.ItemType"/> that can have sub items (container == true).</param>
            <param name="types">The types of items to list.</param>
            <param name="fieldsToGet">The fields to include in the items returned.</param>
            <returns>A list of <see cref="T:Spotfire.Dxp.Framework.Library.LibraryEntry"/>'s to which the current user has at least read access.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="folderToList"/> is <c>null</c></exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If the <paramref name="folderToList"/> is not a container (folder, root, ...)</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.Search(Spotfire.Dxp.Framework.Library.SearchParameters,Spotfire.Dxp.Framework.Library.LibraryEntry.Fields)">
            <summary>Searches for Library entries fulfilling the search parameters given by <paramref name="searchParameters"/>.</summary>
            <param name="searchParameters">A set of parameters which determines what to search for.</param>
            <param name="fieldsToGet">The fields to include in the items returned.</param>
            <returns>A list of <see cref="T:Spotfire.Dxp.Framework.Library.LibraryEntry"/>'s to which the current user has at least read access.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="searchParameters"/> is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.CanceledException">If the operation was canceled by the user.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.GetEntry(System.Guid,Spotfire.Dxp.Framework.Library.LibraryEntry.Fields)">
            <summary>Get the library entry defined by <paramref name="entryId"/>.
            No content will be loaded. Use LoadContent if content should be loaded.
            </summary>
            <param name="entryId">The entry id.</param>
            <param name="fieldsToGet">The fields to include in the item returned.</param>
            <returns>The requested entry.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="entryId"/>is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If the entry does not exist or if any error 
            occurs while communcating with the Library service.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.TryGetEntries(System.Collections.Generic.IEnumerable{System.Guid},Spotfire.Dxp.Framework.Library.LibraryEntry.Fields)">
            <summary>Loads the library entries defined by <paramref name="entryIds"/>.
            No content will be loaded, only entry information.</summary>
            <param name="entryIds">The entry ids to load.</param>
            <param name="fieldsToGet">The fields to return with the entry.</param>
            <returns>A list of the items that exists.</returns>
            <exception cref="T:System.ArgumentNullException">If any of the <paramref name="entryIds"/>is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any errors communcating with the Library service.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.TryGetEntries(System.Collections.Generic.IEnumerable{System.Guid},Spotfire.Dxp.Framework.Library.LibraryEntry.Fields,System.Boolean)">
            <summary>
            Loads the library entries defined by <paramref name="entryIds"/>.
            No content will be loaded, only entry information.
            </summary>
            <param name="entryIds">The entry ids to load.</param>
            <param name="fieldsToGet">The fields to return with the entry.</param>
            <param name="byPassCache">if set to <c>true</c> by pass the cache.</param>
            <returns>
            A list of the items that exists.
            </returns>
            <exception cref="T:System.ArgumentNullException">If any of the <paramref name="entryIds"/>is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any errors communcating with the Library service.</exception>
            <remarks>
            Reentrant.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.PathToId(System.String,Spotfire.Dxp.Framework.Library.InternalLibraryItemType)">
            <summary>Finds the id of the Library entry with the path defined by <paramref name="path"/>.
            </summary>
            <param name="path">The path for which the id will be found.</param>
            <param name="fileType">Which file type it is. Can supply folder for both folder and root.</param>
            <returns>The Guid for the item, <c>null</c> if not found.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="path"/> or the <paramref name="fileType"/> 
            is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any errors communcating with the Library service.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If the user has unsufficient permissions to the library entry path 
            the <see cref="P:Spotfire.Dxp.Framework.Library.LibraryException.FaultCode"/> property will be set to 
            <see cref="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.InsufficientPermissions"/>.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.IdToPath(System.Guid)">
            <summary>Get the path for the given entry Id.</summary>
            <returns>The path for the Id, <c>null</c> if id do not exist.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="entryId"/>is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.GetParentBranchForEntry(System.Guid,Spotfire.Dxp.Framework.Library.LibraryEntry.Fields)">
            <summary>Gets the parent branch for the child entry given by <paramref name="childId"/>. 
            The returned branch starts with the top most the entry the user has access to and 
            followed by all sub folders and ends with the child entry itself. Hence, the returned list is ordered. 
            </summary>
            <param name="childId">The child id for which the parent branch will be fetched.</param>
            <param name="fieldsToGet">The data fields to get</param>
            <returns>An ordered list of entries where the section</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="childId"/> is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If the entry does not exist.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LoadContent(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>Loads the content for the specified <paramref name="entry"/> from the library
            and returns the path to the downloaded temporary file.
            The caller is responsibe for removing the temporary file once used.
            </summary>
            <param name="entry">The entry to load the content of.</param>
            <returns>The library entry including content.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If the entry does not exist, or if the entry is not a file.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.CanceledException">If the operation was canceled by the user.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LoadContents(System.String)">
            <summary>
            Downloads the specified attachment and returns the path to the downloaded temporary file.
            The caller is responsibe for removing the temporary file once used.
            </summary>
            <param name="attachmentId">The attachment id.</param>
            <returns>The path to the temporary file.</returns>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ValidateEntry(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>
            Validates if the library entry content should be downloaded or not. Only analysis files are validated, this method returns <it>true</it> for all other content.
            </summary>
            <param name="entry">The library entry to validate.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.Save(Spotfire.Dxp.Framework.Library.LibraryEntry,Spotfire.Dxp.Framework.Library.LibraryEntry.Fields)">
            <summary>Saves the given entry to the library. Only entry information is saved, no content.
            If the entry already exists (must have an <c>Id</c>) overwrite is allowed. 
            If the entry have no <c>Id</c>, a new item is created, then it must be unique in this folder.
            </summary>
            <param name="entry">The entry to save. If the <c>Id</c> of the object is set, 
            this will be an update of an existing item, otherwise a new item will be created.</param>
            <param name="fields">The fields that should be populated in the saved item.</param>
            <returns>A new LibraryEntry with the updated information.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If <c>Id</c> is not set (Create) and there already exist 
            an item in the <c>ParentId</c> folder with the same title.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If <c>Id</c> is set (Update) and the item do not exist in the <c>ParentId</c> folder.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If the <c>Title</c> is &gt; than 250 characters or if it contains invalid characters.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.CanceledException">If the operation was canceled by the user.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.Save(Spotfire.Dxp.Framework.Library.LibraryEntry,System.String,Spotfire.Dxp.Framework.Library.LibraryEntry.Fields)">
            <summary>Saves the given entry, information and content, to the library. 
            If the entry already exists (must have an <c>Id</c>) overwrite is allowed. 
            If the entry have no <c>Id</c>, a new item is created, then it must be unique in this folder.
            </summary>
            <param name="entry">The entry to save. If the <c>Id</c> of the object is set, 
            this will be an update of an existing item, otherwise a new item will be created.</param>
            <param name="fileName">Optional the content document to save. Set to <c>null</c> for updates and folders.</param>
            <param name="fields">The fields that should be populated in the saved item.</param>
            <returns>A new LibraryEntry with the updated information.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If <c>Id</c> is not set (Create) and there already exist 
            an item in the <c>ParentId</c> folder with the same title.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If <c>Id</c> is set (Update) and the item do not exist in the <c>ParentId</c> folder.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If the <c>Title</c> is &gt; than 250 characters or if it contains invalid characters.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.CanceledException">If the operation was canceled by the user.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.Save(Spotfire.Dxp.Framework.Library.LibraryEntry,System.Action{System.IO.Stream},Spotfire.Dxp.Framework.Library.LibraryEntry.Fields,System.Boolean)">
            <summary>
            Saves the given entry, information and content, to the library.
            If the entry already exists (must have an <c>Id</c>) overwrite is allowed.
            If the entry have no <c>Id</c>, a new item is created, then it must be unique in this folder.
            </summary>
            <param name="entry">The entry to save. If the <c>Id</c> of the object is set,
            this will be an update of an existing item, otherwise a new item will be created.</param>
            <param name="streamWriter">A method that, when called, writes the data to store to a stream.</param>
            <param name="fields">The fields that should be populated in the saved item.</param>
            <param name="embedInSubtaskProgress">if set to <c>true</c> embed in subtask progress.</param>
            <returns>
            A new LibraryEntry with the updated information.
            </returns>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If <c>Id</c> is not set (Create) and there already exist
            an item in the <c>ParentId</c> folder with the same title.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry" /> is <c>null</c>.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If <c>Id</c> is not set (Create) and there already exist
            an item in the <c>ParentId</c> folder with the same title.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If <c>Id</c> is not set (Create) and there already exist
            an item in the <c>ParentId</c> folder with the same title.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If <c>Id</c> is not set (Create) and there already exist
            an item in the <c>ParentId</c> folder with the same title.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.CanceledException">If the operation was canceled by the user.</exception>
            <remarks>
            Reentrant.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.Delete(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Library.LibraryEntry})">
            <summary><para>Deletes the specified items from the library. If any of the specified items refers to a folder 
            all sub-items will be deleted along with the item itself.</para><para>To delete a file or folder the current 
            user must have "write" access to the folder.</para></summary>
            <param name="items">The items to delete.</param>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.Delete(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary><para>Deletes the specified items from the library. If any of the specified items refers to a folder 
            all sub-items will be deleted along with the item itself.</para><para>To delete a file or folder the current 
            user must have "write" access to the folder.</para></summary>
            <param name="items">The ID:s of the entries to delete.</param>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.TryDelete(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary><para>Deletes the specified items from the library. If any of the specified items refers to a folder 
            all sub-items will be deleted along with the item itself.</para><para>To delete a file or folder the current 
            user must have "write" access to the folder.</para><para>If trying to delete an item that is required by another
            item, the operation will fail and return false.</para></summary>
            <returns>True if all items could be deleted, false otherwise.</returns>
            <param name="items">The ID:s of the items to delete.</param>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the Library service.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.GetLibraryWebLink(System.Guid)">
            <summary>Gets a library link from a given entryId.
            The result is of the form <c>http://servername/spotfire/library?guid=entryId</c>.
            </summary>
            <remarks>This method does not check whether the item with 
            id=<paramref name="entryId"/>
            exists or not.</remarks>
            <param name="entryId">The entry id.</param>
            <returns>The web link to the library item specified by <paramref name="entryId"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="entryId"/> is 
            <c>null</c> or empty.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If the link to the Library cannot
            be calculated.</exception>
            <remarks>This method is reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.CreateWebClientLibraryFileLink(System.String,System.Boolean)">
            <summary>Gets a TIBCO Spotfire Web Player URL for the given library file (path).
            <c>'webRoot'/OpenAnalysis?file='librarypath'</c>.
            </summary>
            <remarks>This method does check whether the resulting URL is valid one.</remarks>
            <param name="libraryFilePath">The path to the file in the library.
            <c>/Section/Folder/Sub Folder/File name</c></param>
            <param name="escapeSpaces">Should unwanted chars be escaped. Exaple space converted to %20</param>
            <returns>If the resulting URL is valid it will be returned; otherwise an empty string will be returned.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="libraryFilePath"/> is 
            <c>null</c> or empty.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If the link to the Library cannot
            be calculated.</exception>
            <remarks>This method is reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.IsLibraryAdministrator">
            <summary>Determines whether the current logged on user is a Library Administrator or not. For server 
            versions greater than or equal to 3.2, Administrators are also considered Library Administrators.</summary>
            <returns><c>true</c> if the current user is a Library Administrator or an Administrator; otherwise, 
            <c>false</c>.</returns>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">For any communication errors with the User Directory service.</exception>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.ValidateOnline">
            <summary>
            Validates that the client is online.
            </summary>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">When the client is offline.</exception>
            <remarks>reentrant</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.StartServiceRequest(System.String,Spotfire.Dxp.Framework.Library.InternalLibraryManager.RequestStartExecuter)">
            <summary>
            Starts a library service request.
            </summary>
            <param name="operation">The operation title.</param>
            <param name="executer">The request executor.</param>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">When the operation failed.</exception>
            <remarks>reentrant if executer parameter is reentrant</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.DownloadAttachment(System.Guid,System.String,System.String,System.Int64)">
            <summary>Downloads an attachment from the Library, for example a file.
            This download is executed in a separate thread in order for the user to be able to cancel the download. 
            If the user cancel the download the executing thread is aborted.</summary>
            <param name="attachmentId">Id of the attachment to download.</param>
            <param name="fileSuffix">The file suffix of the resulting temporary file; maybe null.</param>
            <param name="progressText">The text to be displayed to the user in the progress dialog.</param>
            <param name="size">The size of the attachment.</param>
            <returns>The path to the downloaded attachment.</returns>
            <remarks>Reentrant.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.RemoveOrphanedAttachmentFromServer(System.Guid)">
            <summary>
            Remove the canceled attachment from the server if the user pressed cancel before 
            all the attachments were downloaded.
            </summary>
            <param name="attachmentId">The id of the attachment to be removed.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache">
            <summary>
            Cache for library identifiers to library entries and paths to identifiers.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.LibraryCacheEnabled">
            <summary>
            Gets a value indicating if the library cache is enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.cache">
            <summary>
            A user level cache for different library items.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.disposed">
            <summary>
            Is this instance disposed?
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the LibraryCache class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.RetrieveFromCache(System.Collections.Generic.IEnumerable{System.Guid},Spotfire.Dxp.Framework.Library.LibraryEntry.Fields,System.Collections.Generic.List{Spotfire.Dxp.Framework.Library.LibraryEntry},System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves library entries from the cache, the missing ids 
            </summary>
            <param name="entryIds">The entries to retrieve from the cache.</param>
            <param name="fieldsToGet">The needed fields for the library entries to be retrieved.</param>
            <param name="result">The entries found in the cache.</param>
            <param name="idsToFetch">The entries that should be fetched from the library.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.Remove(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Removes the items from the cache.
            </summary>
            <param name="items">The items to remove.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.Add(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Library.LibraryEntry})">
            <summary>
            Adds the library entries to the cache, if the cache is enabled.
            </summary>
            <param name="entries">The entries to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.Add(System.Guid,System.String,Spotfire.Dxp.Framework.Library.InternalLibraryItemType)">
            <summary>Adds IdToPath and PathToId (if fileType is set) to the cache.</summary>
            <param name="id">The library identifier to add.</param>
            <param name="path">The path to add</param>
            <param name="fileType">The file type to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.TryGetId(System.String,Spotfire.Dxp.Framework.Library.InternalLibraryItemType,System.Guid@)">
            <summary>
            Tries to get the id for the specified path and file type from the cache.
            </summary>
            <param name="path">The library path.</param>
            <param name="fileType">The library file type.</param>
            <param name="id">The resulting library id</param>
            <returns>True if the specified path and file type was found in the cache.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.CreateKey(System.String,Spotfire.Dxp.Framework.Library.InternalLibraryItemType)">
            <summary>
            Creates a cache key for the specified path and file type
            </summary>
            <param name="path">The library path.</param>
            <param name="fileType">The library file type.</param>
            <returns>The cache key for the specified path and file type</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.CreateKey(System.Guid)">
            <summary>
            Creates a cache key for the specified id.
            </summary>
            <param name="id">The library identifier.</param>
            <returns>The cache key for the specified id.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.Add(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>
            Adds the library entry to the cache.
            </summary>
            <param name="libraryEntry"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.InternalLibraryManager.LibraryCache.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryAccessControlManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryAccessControlManager.webServiceCache">
            <summary>
            The web service cache from which the library access control service is retrieved when needed. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryAccessControlManager.webService">
            <summary>
            The library access control service. For testing purposes only!
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryAccessControlManager.#ctor(Spotfire.Dxp.Services.WebServiceCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryAccessControlManager"/> class.
            </summary>
            <param name="webServiceCache">The web service cache.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryAccessControlManager.#ctor(Spotfire.Dxp.Services.Library.ILibraryAccessControlService)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryAccessControlManager"/> class.
            This constructor is for test purposes only.
            </summary>
            <param name="webService">The web service.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryEntry">
            <summary>Container for a cached library entry.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryEntry.Limitations">
            <summary>Contains limitations on various properties of library items, 
            e.g. the length of titles.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Limitations.MaxDescriptionLength">
            <summary>
            Gets the maximum description length, currently 1000.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Limitations.MaxTitleLength">
            <summary>
            Gets the maximum title length, currently 256.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Limitations.MaxFormatVersionLength">
            <summary>
            Gets the maximum format version length, currently 50.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Limitations.MaxPropertyNameLength">
            <summary>
            Gets the maximum property name length, currently 150.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.#ctor(Spotfire.Dxp.Framework.Library.InternalLibraryItemType,System.Guid,System.String,System.String,System.String)">
            <summary>
            Constructor creating a new unsaved library entry with specifying 
            all the default properties that may be set by the client.
            </summary>
            <param name="itemType">the item type</param>
            <param name="parentId">the parent ID</param>
            <param name="title">the title</param>
            <param name="formatVersion">the format version</param>
            <param name="description">the description</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.#ctor(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>
            Copy constructor. Copies all basic information from the given entry.
            </summary>
            <param name="entry">the entry to copy</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.ValidFields">
            <summary>The fields are valid to use (loaded) in the item.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Id">
            <summary>Gets the ID of the entry.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.IdAsString">
            <summary>Gets the ID of the entry as a string.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.ParentId">
            <summary>Gets the ID of the entry's parent entry.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Title">
            <summary>The title/name. Must not be longer than 250 characters. 
            Must be unique in the parent folder for an entry type.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.DisplayName">
            <summary>
            Gets the display name. This is the value of the spotfire.DisplayName property if it exists and Title otherwise.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Description">
            <summary>A brief description of the library entry.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.FormatVersion">
            <summary>The format version of the library entry.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.CreatedDate">
            <summary>The date and time when the entry was created.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.CreatedBy">
            <summary>Gets the user that created the entry.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.CreatedByName">
            <summary>Gets the name the user that created the entry, null if none.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.CreatedByDisplayName">
            <summary>Gets the display name the user that created the entry, null if none.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.ModifiedDate">
            <summary>Gets the date and time when the entry was last modified.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.ModifiedBy">
            <summary>Gets the user that last modified the entry.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.ModifiedByName">
            <summary>Gets name of the user that last modified the entry, null if none.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.ModifiedByDisplayName">
            <summary>Gets the display name of the user that last modified the entry, null if none.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.AccessedDate">
            <summary>Gets the date and time when the entry was last accessed.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Size">
            <summary>Gets the size of the content of this item.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Hidden">
            <summary>Gets whether the item is hidden or not.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.IsRoot">
            <summary>
            True if the item is the library root item, false otherwise. The root item is an ordinary folder and should 
            in most cases not be treated any differently than other folders.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.IsFolder">
            <summary>
            True if the type of the item is spotfire.folder, false otherwise. Will be true also for the root item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Dependencies">
            <summary></summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.ParentPath">
            <summary>The path to the parent. If root folder this returns <c>null</c>.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Path">
            <summary></summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Permissions">
            <summary></summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Properties">
            <summary>Contains the properties of the entry, like keywords, ....</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.ItemType">
            <summary></summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryEntry.IsSaved">
            <summary></summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.IsRootPath(System.String)">
            <summary>Checks if the given path is the root path.</summary>
            <param name="path"></param>
            <returns><c>true</c> if it is the root path.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.GetParentPath(System.String)">
            <summary>Get the path to the parent of this path.
            It do not check if the path exists.</summary>
            <param name="fullPath">The child path.</param>
            <returns>The parent path,<c>null</c> if the given path is the root path.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.GetTitleFromPath(System.String)">
            <summary>Get the titel part of the path.
            It do not check if the path exists.</summary>
            <param name="fullPath">The child path.</param>
            <returns>The title,<c>null</c> if the given path is the root path.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.CombinePath(System.String,System.String)">
            <summary>Make a normalized path of the folder and the item.</summary>
            <param name="folder">Folder path.</param>
            <param name="entryTitle">A file name that is not null, empty or contains only white spaces.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.NormalizePath(System.String)">
            <summary>Creates a valid library path.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.MakeShortPath(System.String)">
            <summary>Make a shorter trimmed path for url:s</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.GetParentPathList(System.String)">
            <summary>Get  list of all the paths parent paths, including the given path.
            /A/B/C/D will return {/, /A, /A/B, /A/B/C, /A/B/C/D} </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.SplitPath(System.String,System.String@,System.String@)">
            <summary>The inverse of CombinePath, splits a path to a library entry
            into the folder path and the entry title.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.GetPropertyScalarValueOrDefault``1(System.String,``0)">
            <summary>
            Get a property value (or a default value if not present) from a library entry.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="defaultValue">The default value to use if the property is not present.</param>
            <returns>The property value or the default value if the attribute is not present.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.ValidateAndTrimEntryTitle(System.String)">
            <summary>Checks that an entry title is valid and trims leading and
            trailing whitespace characters.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.CreateValidTitle(System.String)">
            <summary>Removes invalid characters from the specified title and trim end if too long.</summary>
            <param name="title">The title.</param>
            <returns>A string with valid characters.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryEntry.IsValidChar(System.Char)">
            <summary>Determines whether a character is valid in a library title.</summary>
            <param name="c">The character to test.</param>
            <returns><c>true</c> if [is valid char] [the specified c]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryException">
            <summary>Exceptions thrown for errors encountered at Library service
            communications.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryException.#ctor(System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.Library.LibraryException"/> class.
            </summary>
            <param name="message">A message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryException"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryException"/> class.
            </summary>
            <param name="nonLocalizedMessage">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryException.FaultCode">
            <summary>Gets the fault code.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryException.FaultString">
            <summary>Gets the fault string.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryException.ServerStackTrace">
            <summary>Gets the server stack trace.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode">
            <summary>Fault codes for LibraryExceptions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.Undefined">
            <summary>Undefined fault.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.EntryTitleInvalid">
            <summary>Library entry title is invalid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.EntryExist">
            <summary>Library entry exists.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.EntryDoesNotExist">
            <summary>Library entry does not exist.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.InvalidParent">
            <summary>The parent entry is invalid, for example wrong type etc.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.EntryWrongType">
            <summary>Library entry is of wrong type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.UserDirectoryException">
            <summary>Any error from using the User Directory.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.ClientIsOffline">
            <summary>The client is offline.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.UserUnauthorized">
            <summary>User is unauthorized to perform the requested operation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.UnexpectedResult">
            <summary>The result from the server was unexpected or incomplete.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.AttachmentFailure">
            <summary>Failed to upload or download attachment.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.LibraryServiceException">
            <summary>Any failures from a LibraryServiceException.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.LibraryServiceNotRunning">
            <summary>When the library service is not running.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.LibraryAccessControlServiceException">
            <summary>Specifies any failures from a LibraryAccessControlServiceException.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.InsufficientPermissions">
            <summary>The user has insufficient permissions to an item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.InvalidSearchExpression">
            <summary>The user has entered an invalid search expression.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryExceptionFaultCode.Other">
            <summary>Any other errors.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryImportExportManager">
            <summary>
            The manager for library import export.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryLinks">
            <summary>
            Declares methods for retrieving links of different types 
            for a library item. 
            If the resulting link should contain the <see cref="P:Spotfire.Dxp.Framework.Library.LibraryLinksOption.Path">path</see> to the library item 
            use <c>Uri.AbsoluteUri</c> on the resulting uri for a correct string representation for http or https 
            related links in order to comply with different browsers and systems and <c>Uri.ToString()</c> for TIBCO Spotfire uri. 
            See <see href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</see> and related discussions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryLinks.manager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryLinks.#ctor(Spotfire.Dxp.Framework.Library.LibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryLinks"/> class.
            </summary>
            <param name="manager">The bookmark manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryLinks.TryGetWebPlayerRedirectUri(Spotfire.Dxp.Framework.Library.LibraryItem,Spotfire.Dxp.Framework.Library.LibraryLinksOption,System.Uri@)">
            <summary>
            Tries to get a uri for a TIBCO Spotfire Web Player Server redirect page of the specified library item, which 
            should be accessed through http or https.
            </summary>
            <param name="item">The library item to retrieve the TIBCO Spotfire Web Player Server redirect page uri for.</param>
            <param name="option">The option for generating the resulting uri.</param>
            <param name="uri">The TIBCO Spotfire Web Player Server redirect page uri for the specified library item.</param>
            <returns>True if successfully created a uri for a TIBCO Spotfire Web Player Server redirect page; otherwise false.</returns>
            <remarks>Use <c>Uri.AbsoluteUri</c> on the resulting uri for a correct string representation if 
            <see cref="P:Spotfire.Dxp.Framework.Library.LibraryLinksOption.Path"/> is used.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="item"/> or <paramref name="option"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryLinks.TryGetWebPlayerUri(Spotfire.Dxp.Framework.Library.LibraryItem,Spotfire.Dxp.Framework.Library.LibraryLinksOption,System.Uri@)">
            <summary>
            Tries to get a uri for a TIBCO Spotfire Web Player analysis with the specified library item, which 
            should be accessed through http or https.
            </summary>
            <param name="item">The library item to retrieve the TIBCO Spotfire Web Player Player analysis uri for.</param>
            <param name="option">The option for generating the resulting uri.</param>
            <param name="uri">The TIBCO Spotfire Web Player analysis uri with the specified library item.</param>
            <returns>True if successfully created a uri for a TIBCO Spotfire Web Player analysis; otherwise false.</returns>
            <remarks>Use <c>Uri.AbsoluteUri</c> on the resulting uri for a correct string representation if 
            <see cref="P:Spotfire.Dxp.Framework.Library.LibraryLinksOption.Path"/> is used.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="item"/> or <paramref name="option"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryLinks.TryGetRedirectUri(Spotfire.Dxp.Framework.Library.LibraryItem,Spotfire.Dxp.Framework.Library.LibraryLinksOption,System.Uri@)">
            <summary>
            Tries to get a uri for a TIBCO Spotfire Server redirect page of the specified library item, which 
            should be accessed through http or https.
            </summary>
            <param name="item">The library item to retrieve the TIBCO Spotfire Server redirect page uri for.</param>
            <param name="option">The option for generating the resulting uri.</param>
            <param name="uri">The TIBCO Spotfire Server redirect page uri for the specified library item.</param>
            <returns>True if successfully created a uri for a TIBCO Spotfire Server redirect page; otherwise false.</returns>
            <remarks>Use <c>Uri.AbsoluteUri</c> on the resulting uri for a correct string representation if 
            <see cref="P:Spotfire.Dxp.Framework.Library.LibraryLinksOption.Path"/> is used.</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="item"/> or <paramref name="option"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryLinks.TryGetUri(Spotfire.Dxp.Framework.Library.LibraryItem,Spotfire.Dxp.Framework.Library.LibraryLinksOption,System.Uri@)">
            <summary>
            Tries to get a uri for a TIBCO Spotfire analysis of the specified library item. 
            The uri returned uses the TIBCOSpotfire protocol.
            </summary>
            <param name="item">The library item to retrieve the TIBCO Spotfire analysis uri for.</param>
            <param name="option">The option for generating the resulting uri.</param>
            <param name="uri">The TIBCO Spotfire analysis uri for the specified library item.</param>
            <returns>True if successfully created a uri for a TIBCO Spotfire analysis; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="item"/> or <paramref name="option"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryLinksOption">
            <summary>Options that are used to specified the format for links to library items.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryLinksOption.SingletonId">
            <summary>
            The prefer id singleton.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryLinksOption.SingletonPath">
            <summary>
            The prefer path singleton.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryLinksOption.options">
            <summary>
            The preferred output options.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryLinksOption.#ctor(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryLinksOption"/> class.
            </summary>
            <param name="preferredOutput">The preferred output.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryLinksOption.Id">
            <summary>Gets the option where resulting link will use the library identifier.
            This option can be used for all resulting links.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryLinksOption.Path">
            <summary>Gets the option where resulting link will use the library path.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryLinksOption.PreferredOutput">
            <summary>
            Gets the preferred options 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryLinksOption.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>true if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryLinksOption.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns> A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryManager">
            <summary>Provides access to the TIBCO Spotfire library.
            An instance of this class is available as a service on the user level.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryManager.internalLibraryManager">
            <summary>
            The internal library manager.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryManager.links">
            <summary>
            The public API facade to retrieve links of different
            types for a library item.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryManager.ConflictResolution">
            <summary>When copying or moving library items to a new folder how should any conflict be resolved.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryManager.ConflictResolution.KeepOld">
            <summary>Resolve by keeping the old and not overwriting.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryManager.ConflictResolution.KeepNew">
            <summary>Resolve by overwriting the old item with the new item.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryManager.ConflictResolution.KeepBoth">
            <summary>Resolve by keeping both items. The new item will have (2) added to the end of the title.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.#ctor(Spotfire.Dxp.Framework.Library.InternalLibraryManager)">
            <summary>
            Initializes a new instance of the LibraryManager class.
            </summary>
            <param name="internalLibraryManager">The internal library manager.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryManager.Links">
            <summary>
            Gets a collection of methods for retrieving library items uri of different types.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryManager.InternalLibraryManager">
            <summary>
            Gets the internal library manager.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.String,Spotfire.Dxp.Framework.Library.LibraryItemType,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])">
            <summary>
            Tries to get the item associated with the specified path. Returns <c>true</c> if the item is found and
            <c>false</c> otherwise. 
            On success, the <paramref name="item"/> parameter is assigned and populated according to the 
            specified metadata options.
            </summary>
            <param name="path">The path of the item to get.</param>
            <param name="itemType">The type of the item. There can be several items with the same path but 
            with different types.</param>
            <param name="item">Will be assigned with the library item or <c>null</c> if no item with 
            the specified path and type can be found.</param>
            <param name="retrievalOptions">Specifies the kinds of metadata that the returned 
            item shall be populated with.</param>
            <returns><c>true</c> if an item was found, <c>false</c> otherwise.</returns>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If an error occurs in the communication with the library.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> or <paramref name="itemType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="path"/> is an empty string.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.Guid,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])">
            <summary>
            Tries to get the item associated with the specified id. Returns <c>true</c> if the item is found and
            <c>false</c> otherwise. 
            On success, the <paramref name="item"/> parameter is assigned and populated according to the 
            specified metadata options.
            </summary>
            <param name="id">The id of the item to get.</param>
            <param name="item">Will be assigned with the library item or <c>null</c> if no item with 
            the specified id can be found.</param>
            <param name="retrievalOptions">Specifies the kinds of metadata that the returned 
            item shall be populated with.</param>
            <returns><c>true</c> if an item was found, <c>false</c> otherwise.</returns>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If an error occurs in the communication with the library.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="id"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="id"/> is an empty Guid.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.Search(System.String,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])">
            <summary>
            Gets a collection of items matching the specified search expression.
            </summary>
            <param name="searchExpression">An expression describing the items that shall be returned. 
            The syntax used is the same as in the search field in the "Open from Library" dialog. 
            See the topic "Searching the Library" in the TIBCO Spotfire User´s Guide for a description 
            of the search syntax.</param>
            <param name="retrievalOptions">Specifies the kinds of metadata that the returned 
            items shall be populated with.</param>
            <returns>A collection of items matching the search.</returns>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If an error occurs in the communication with the library.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.Delete(Spotfire.Dxp.Framework.Library.LibraryItem)">
            <summary>
            Deletes the specified item in the library.
            </summary>
            <param name="item">The item to delete.</param>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If an error occurs in the communication with the library.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.CreateFolder(Spotfire.Dxp.Framework.Library.LibraryItem,System.String,Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings)">
            <summary>
            Creates a folder with the specified folderName in the library. The folder is created under the 
            specified parentFolder.
            </summary>
            <param name="parentFolder">The parent folder.</param>
            <param name="folderName">The name of the folder.</param>
            <param name="metadataSettings">The metadata to associate with the library folder.</param>
            <returns>An object describing the created library folder.</returns>
            <exception cref="T:Spotfire.Dxp.Framework.Library.LibraryException">If an error occurs in the communication with the library.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.Copy(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Library.LibraryItem},Spotfire.Dxp.Framework.Library.LibraryItem,Spotfire.Dxp.Framework.Library.LibraryManager.ConflictResolution)">
            <summary>Copy one or more library items to the specified folder.
            If an item to copy is a folder, all contained items and folders are included.
            The items and any descendants will all be given new IDs.
            All ancestors will also be updated with a new "Updated By Principal" and "Updated Timestamp".
            If an error occurs all changes will be rolled back.</summary>
            <param name="itemsToCopy">The items to copy.
            Use <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.String,Spotfire.Dxp.Framework.Library.LibraryItemType,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/>,
            <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.Guid,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/> or
            <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.Search(System.String,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/> to retrieve the items.</param>
            <param name="folderToCopyItemsTo">The folder to copy the items to.</param>
            <param name="conflictResolution">The conflict resolution to use when items with the same name exists in the destination folder.</param>
            <returns>The items copied to the new folder.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.Move(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Library.LibraryItem},Spotfire.Dxp.Framework.Library.LibraryItem,Spotfire.Dxp.Framework.Library.LibraryManager.ConflictResolution)">
            <summary>Move one or more library items to the specified folder.
            If an item to move is a folder all contained items and folders are included.
            All ancestors will also be updated with a new "Updated By Principal" and "Updated Timestamp".
            If an error occurs all changes will be rolled back.</summary>
            <param name="itemsToMove">The items to move.
            Use <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.String,Spotfire.Dxp.Framework.Library.LibraryItemType,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/>,
            <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.Guid,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/> or
            <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.Search(System.String,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/> to retrieve the items.</param>
            <param name="folderToMoveItemsTo">The folder to move the items to.</param>
            <param name="conflictResolution">The conflict resolution to use when items with the same name exists in the destination folder.
            Note all items included in <see crefparam="itemsToMove"/> are removed after move,
            also the items that are not moved to the new folder.</param>
            <returns>The items moved to the new folder.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.SetLibraryItemTitle(Spotfire.Dxp.Framework.Library.LibraryItem,System.String)">
            <summary>Sets the title of an existing library item.</summary>
            <param name="itemToUpdate">The library item to update.
            Use <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.String,Spotfire.Dxp.Framework.Library.LibraryItemType,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/>,
            <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.Guid,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/> or
            <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.Search(System.String,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/> to retrieve the item.</param>
            <param name="title">The new title for the library item.</param>
            <returns>The updated library item.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.SetLibraryItemMetadata(Spotfire.Dxp.Framework.Library.LibraryItem,Spotfire.Dxp.Framework.Library.LibraryItemMetadataSettings)">
            <summary>Sets the metadata of an existing library item.
            Only the properties explicitly set in metadata object will be updated.
            To keep old values of Description, Keywords or Properties, do not set those properties.</summary>
            <param name="itemToUpdate">The library item to update.
            Use <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.String,Spotfire.Dxp.Framework.Library.LibraryItemType,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/>,
            <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem(System.Guid,Spotfire.Dxp.Framework.Library.LibraryItem@,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/> or
            <see cref="M:Spotfire.Dxp.Framework.Library.LibraryManager.Search(System.String,Spotfire.Dxp.Framework.Library.LibraryItemRetrievalOption[])"/> to retrieve the item.</param>
            <param name="metadata">The metadata to set on the library item.</param>
            <returns>The updated library item.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.TryGetTIBCOSpotfireLink(Spotfire.Dxp.Framework.Library.LibraryItem,Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink@)">
            <summary>
            Tries to get a TIBCO spotfire link for the specified library item.
            </summary>
            <param name="item">The library item.</param>
            <param name="link">The link; null if not successfully created.</param>
            <returns>True if the link was successfully created; otherwise false</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.ToInternalConflictResolution(Spotfire.Dxp.Framework.Library.LibraryManager.ConflictResolution)">
            <summary>Convert public enum to internal enum type.</summary>
            <param name="conflictResolution">The conflict resolution.</param>
            <returns>The internal type.</returns>
            <exception cref="T:Spotfire.Dxp.Internal.Utilities.EnumNotImplementedException`1"></exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryManager.GetNewEntry(Spotfire.Dxp.Framework.Library.LibraryItem)">
            <summary>Download a new library item for the given item (bypass cache).</summary>
            <param name="item">The item to get from the server.</param>
            <returns>The new item.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel">
            <summary>Represents a promptmodel for the open from library dialog that uses keywords rather than folder structure.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.serviceProvider">
            <summary>
            The service provider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.onLibraryEntrySelectedExecutor">
            <summary>
            Executed when an item has been selected and the dialogue is about to close.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.searchTypes">
            <summary>
            The types to limit search to. If empty all types are shown.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.additionalSearchExpression">
            <summary>
            Search expression that will be anded together with the users search.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.initialSelector">
            <summary>
            Optional predicate that determines if an entry should start selected.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.title">
            <summary>
            The dialog title.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.helpTopicId">
            <summary>
            The help topic id.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.availableItemsText">
            <summary>
            The text on the label over the items search.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.#ctor(System.IServiceProvider,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Library.InternalLibraryItemType},Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.OnLibraryEntrySelectedExecutor,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="limitTo">The types to limit search to. If empty all types are shown.</param>
            <param name="onLibraryEntrySelectedExecutor">Executed when an item has been selected and the dialogue is about to close.</param>
            <param name="title">The dialog title.</param>
            <param name="helpTopicId">The help topic id.</param>
            <param name="availableItemsText">The text on the label over the items search.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.#ctor(System.IServiceProvider,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Library.InternalLibraryItemType},Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.OnLibraryEntrySelectedExecutor,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="limitTo">The types to limit search to. If empty all types are shown.</param>
            <param name="onLibraryEntrySelectedExecutor">Executed when an item has been selected and the dialogue is about to close.</param>
            <param name="title">The dialog title.</param>
            <param name="helpTopicId">The help topic id.</param>
            <param name="availableItemsText">The text on the label over the items search.</param>
            <param name="additionalSearchExpression">Search expression that will be anded together with the users search.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.#ctor(System.IServiceProvider,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Library.InternalLibraryItemType},Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.OnLibraryEntrySelectedExecutor,System.String,System.String,System.String,System.String,System.Predicate{Spotfire.Dxp.Framework.Library.LibraryEntry})">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="limitTo">The types to limit search to. If empty all types are shown.</param>
            <param name="onLibraryEntrySelectedExecutor">Executed when an item has been selected and the dialogue is about to close.</param>
            <param name="title">The dialog title.</param>
            <param name="helpTopicId">The help topic id.</param>
            <param name="availableItemsText">The text on the label over the items search.</param>
            <param name="additionalSearchExpression">Search expression that will be anded together with the users search.</param>
            <param name="initialSelector">Optional predicate that determines if an entry should start selected.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.OnLibraryEntrySelectedExecutor">
            <summary>
            Executes when a library entry has been selected and the dialogue is about to close.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="libraryEntry">The library entry.</param>
            <returns>True if everything was ok and the dialog should close, false otherwise.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.OnLibraryEntrySelected">
            <summary>
            Gets the delegate that is executed when an item has been selected and the dialogue is about to close.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.SearchTypes">
            <summary>
            Gets the types to limit search to. If empty all types are shown.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.AdditionalSearchExpression">
            <summary>
            Gets an optional search expression that will be anded together with the users search. May be string.empty.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.InitialSelector">
            <summary>
            Gets the predicate that determines if an entry should start selected.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.Title">
            <summary>
            Gets the dialog title.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.HelpTopicId">
            <summary>
            Gets the help topic id.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.AvailableItemsText">
            <summary>
            Gets the text on the label over the items search.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.GetService(System.Type)">
            <summary>
            Gets a service.
            </summary>
            <param name="serviceType">The type of the service to get.</param>
            <returns>The service or null if not found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryOpenByKeyWordPromptModel.DefaultInitialSelector(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>
            The default initial selector.
            </summary>
            <param name="entry">The entry to determine selection for.</param>
            <returns>Always false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryPreferences">
            <summary>
            Preferences on group level related to Library Open and Save dialogs.
            Preferences on user level found in 
            Spotfire.Dxp.Application.UserSettings.LibrarySettings
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryPreferences.showDetailsOfIL">
            <summary>
            Indicates if detailed information of Information Links should be 
            displayed when marking an Information Link.
            Added as part of bugfix for bug 64899
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryPreferences.embedAllDataWhenSavingToLibrary">
            <summary>
            Whether all data is embedded by default when saving to the library.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.LibraryPreferences.forceEmbedAllDataWhenSavingToLibrary">
            <summary>
            Whether all data has to be embedded when saving to the library.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryPreferences.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryPreferences"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryPreferences.EmbedAllDataWhenSavingToLibrary">
            <summary>Gets or sets a value indicating whether all data is embedded by default when saving to the library.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryPreferences.ForceEmbedAllDataWhenSavingToLibrary">
            <summary>Gets or sets a value indicating whether all data has to be embedded when saving to the library.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryPreferences.BlurPreviewImages">
            <summary> Gets or sets a value indicating whether to blur preview images or not </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryPreferences.ShowDetailsOfIL">
            <summary>
            Gets a value indicating whether the detailed content of an InformationLink 
            should be displayed when marked or not.
            Set this to false for groups suffering from long waits until Open button reacts
            due to long response-times to library database and InformationLinks with many columns.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryPreferences.Category">
            <summary>Gets a value defining the top category for the preference.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryPreferences.SubCategory">
            <summary>Gets a value defining the sub category for the preference.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryPropertyCollection">
            <summary>
            Represents a collection of properties associated with a library item.
            
            A property consists of a name and a list of one or more values.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.LibraryPropertyCollection.Names">
            <summary>The names of all properties in the collection.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryPropertyCollection.RemoveProperty(System.String)">
            <summary>
            Removes the property with the given name.
            </summary>
            <param name="name">The name of the property to remove.</param>
            <exception cref="T:System.ArgumentException">If the property name is invalid.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryPropertyCollection.SetProperty(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Sets the given property. Overwrite any existing property with the same name. 
            </summary>
            <param name="name">The name of the property.</param>
            <param name="values">The values of the property.</param>
            <exception cref="T:System.ArgumentException">If the property name is invalid.</exception>
            <exception cref="T:System.ArgumentException">If one of the property value is null or string.Empty.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryPropertyCollection.SetProperty(System.String,System.String)">
            <summary>
            Sets the given property. Overwrite any existing property with the same name,
            removes the property if the value is null or string.Empty.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <exception cref="T:System.ArgumentException">If the property name is invalid.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryPropertyCollection.MakeKeywordList(System.String)">
            <summary>Creates a list of keywords from a semicolon 
            seperated string. Suitable for converting keyword string
            from a library entry to a document property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryPropertyCollection.MakeKeywordString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates a semicolon separated string from
            the supplied list of strings. Suitable for converting 
            the keywords document property to a library entry keyword.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryPropertyCollection.ValidatePropertyName(System.String)">
            <summary>
            Validates the property name.
            </summary>
            <param name="name">The property name to validate</param>
            <exception cref="T:System.ArgumentNullException">If the name is null or string.empty.</exception>
            <exception cref="T:System.ArgumentException">The the name is longer than the maximum allowed lenght. <see cref="P:Spotfire.Dxp.Framework.Library.LibraryEntry.Limitations.MaxPropertyNameLength"/></exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper">
            <summary>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.#ctor(Spotfire.Dxp.Services.WebServiceCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.LoadVisibleTypes(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.Save(Spotfire.Dxp.WebServices.LibraryItem,System.String,Spotfire.Dxp.WebServices.Fields[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.ListSubItems(System.String,Spotfire.Dxp.WebServices.ItemType[],Spotfire.Dxp.WebServices.Fields[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.ListDependentItems(System.String[],Spotfire.Dxp.WebServices.ItemType[],Spotfire.Dxp.WebServices.Fields[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.ListRemappedDependencies(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.SafeLoadItems(System.String[],Spotfire.Dxp.WebServices.Fields[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.LoadAttachment(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.LoadTypes(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.SafePathToId(System.String,Spotfire.Dxp.WebServices.ItemType)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.SafeIdToPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.Search(Spotfire.Dxp.WebServices.SearchParameters,Spotfire.Dxp.WebServices.Fields[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.Delete(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.TryDelete(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.DownloadAttachment(System.String,System.String,System.Func{System.IO.Stream,System.IO.Stream})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.UploadAttachment(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.UploadAttachment(System.Action{System.IO.Stream})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.Move(System.String[],System.String,Spotfire.Dxp.WebServices.ConflictResolution,Spotfire.Dxp.WebServices.Fields[])">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.LibraryServiceWrapper.Copy(System.String[],System.String,Spotfire.Dxp.WebServices.ConflictResolution,Spotfire.Dxp.WebServices.Fields[])">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.Permissions">
            <summary>
            Represents permissions on library items.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.SearchParameters">
            <summary>Search parameters used to search the Library.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.SearchParameters.ItemTypes">
            <summary>Gets all file types to search for.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.SearchParameters.EntryIds">
            <summary>Gets all Library entry id's to search in.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.SearchParameters.SearchPattern">
            <summary>Gets all search patterns.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.SearchParameters.MaxResults">
            <summary>Maximum number of items in search result (All == 0).</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.SearchParameters.Timeout">
            <summary>Search query timeout, in seconds (0 == no timeout).</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.SearchParameters.IncludeHiddenItems">
            <summary>
            Gets or sets a value indicating wheter hidden items should be included in the search
            result.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.SearchParameters.OrderBy">
            <summary>The column to sort the result by.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.SearchParameters.SortDirection">
            <summary>Sort direction.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.SearchParameters.AddItemType(Spotfire.Dxp.Framework.Library.InternalLibraryItemType)">
            <summary>Adds an item type to search for.
            </summary>
            <param name="itemType">Type of the item to search for.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.SearchParameters.AddEntryId(System.Guid)">
            <summary>Adds a Library entry id to search in.
            </summary>
            <param name="entryId">The Library entry id to search in.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink">
            <summary>Parses a string to represent a link to an analysis, an information link or a search in the library.
            Used when pasting string data or if this string is supplied through the command line whene
            launching the application.
            Case insensitive string format:
            (server:[server URL])
               analysis:path|guid
                   (configurationBlock:[configuration block])|(bookmark:guid)
               informationlink:path|guid
                   (configurationBlock:[configuration block])
               search:[search string]
                   (orderby: Title | Modified | Created | Accessed | ContentSize | Description)
                   (maxresult: [positive integer])
                   (sortdirection: Ascending | Descending)
                   (searchin:guid)
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Quote">
            <summary>
            The quote character
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.SingleQuote">
            <summary>
            The single quote character.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Backslash">
            <summary>
            The backslash character
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Colon">
            <summary>
            The colon character
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.EscapeCharacter">
            <summary>
            The escape character in decoded strings.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.EncodeSpecials">
            <summary>
            Special characters when encoding  tibco spotfire links as strings.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.DecodeSpecials">
            <summary>
            Special characters when decoding tibco spotfire links as strings.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Log">
            <summary>
            The TIBCO Spotfire link helper logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PathRegex">
            <summary>
            The regular expression used to validate a valid path value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.RewriteTextAreaLinks">
            <summary>
            The regular expression used to rewriting links in a text 
            area to relative Web Player links.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.stringToFeatureMap">
            <summary>
            Maps string values to features.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.validFeatures">
            <summary>
            The list of valid feature combination, for now hard coded.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.webClientUrl">
            <summary>
            The base url to the TIBCO Spotfire Web Player Server
            E.g. http://spotfireweb/SpotfireWeb
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.bookmark">
            <summary>
            The bookmark argument.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.configurationBlock">
            <summary>
            The configuration block
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.features">
            <summary>
            The link features
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.guid">
            <summary>
            The item guid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.isValid">
            <summary>
            Indicates if the link is valid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.linkType">
            <summary>
            The link type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.path">
            <summary>
            The path for the item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.search">
            <summary>
            The search parameters
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.spotfireServerUrl">
            <summary>
            The base url to the TIBCO Spotfire Server.
            E.g http://spotfireserver/spotfire
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink"/> class.
            </summary>
            <remarks>Examples of valid uris are:
            tibcospotfire:analysis:/path/to/analysis
            informationlink:864d749e-794c-577f-8eea-03be54fded87
            Examples of invalid uris are:
            analysis:path/to/analysis
            informationlink:/path/to/informatiolink/
            something:864d749e-794c-577f-8eea-03be54fded87
            </remarks>
            <param name="uri">A string representing the link.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.#ctor(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink"/> class.
            </summary>
            <param name="linkType">The link type.</param>
            <param name="id">The guid for the item.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.#ctor(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink"/> class.
            </summary>
            <param name="linkType">The link type.</param>
            <param name="path">The path to the item.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.#ctor(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType,System.Guid,System.Guid,System.String,System.Uri,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink"/> class.
            </summary>
            <param name="linkType">The link type</param>
            <param name="id">The library identifier for the item</param>
            <param name="bookmarkId">The bookmark library identifier; may be empty guid.</param>
            <param name="libraryPath">The path to the library item; maybe empty</param>
            <param name="spotfireServerUrl">The base url to the TIBCO Spotfire Server; may be empty.</param>
            <param name="webClientUrl">The base url to the TIBCO Spotfire Web Player Server; may be empty.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType">
            <summary>
            Indicates which type the link represents.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType.Unknown">
            <summary>
            Unknown link type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType.Analysis">
            <summary>
            An analysis.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType.InformationLink">
            <summary>
            An information link.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType.Search">
            <summary>
            A library search
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType.Server">
            <summary>
            A link to a TIBCO Spotfire Server but no
            other information.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput">
            <summary>
            Describes the preferred output for resulting Uri generated from the TIBCO Spotfire link.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput.None">
            <summary>
            No preferred output, unknown result.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput.Path">
            <summary>
            The resulting link will have the original path value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput.LibraryIdentifier">
            <summary>
            The resulting link will use the library identifier over library path
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput.UrlEncode">
            <summary>
            The resulting link will have values url encoded.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput.LinkEncode">
            <summary>
            The resulting link will have the values encoded 
            according to standard TIBCOSpotfire links.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput.DefaultHttp">
            <summary>
            The default preferred output for http and https, Path over library identifier, url encoded values where 
            applicable.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput.DefaultTIBCOSpotfire">
            <summary>
            The default prefered output for tibcospotfire links, Path over library identifier,
            TIBCOSpotfire link encoded values where applicable.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.BookmarkId">
            <summary>
            Gets the bookmark identifier
            </summary>
            <remarks>Check the HasBookmark property before accessing this property.</remarks>
            <exception cref="T:System.InvalidOperationException">If the bookmark is invalid.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.BookmarkIdAsString">
            <summary>
            Gets the Bookmark Id of the link as a string.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the id is invalid.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.ConfigurationBlock">
            <summary>
            Gets the configuration block argument.
            </summary>
            <remarks>Check the HasConfigurationBlock property before acessing this property.</remarks>
            <exception cref="T:System.InvalidOperationException">If the configuration block is invalid.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Features">
            <summary>
            Gets the parsed features for this link.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.HasBookmark">
            <summary>
            Gets a value indicating whether the link has a bookmark.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.HasConfigurationBlock">
            <summary>
            Gets a value indicating whether the link has an configuration block.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.HasId">
            <summary>
            Gets a value indicating whether the link has an id.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.HasPath">
            <summary>
            Gets a value indicating whether the link has a path.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.HasServerUrl">
            <summary>
            Gets a value indicating whether the link has an server url.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Id">
            <summary>
            Gets the identifier for item in the link.
            </summary>
            <remarks>Check the HasId property before acessing this property.</remarks>
            <exception cref="T:System.InvalidOperationException">If the id is invalid.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.IdAsString">
            <summary>
            Gets the Id of the link as a string.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the id is invalid.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.IsValid">
            <summary>
            Gets a value indicating whether if the link is valid.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Path">
            <summary>
            Gets the path for item in the link.
            </summary>
            <remarks>Check the HasPath property before acessing this property.</remarks>
            <exception cref="T:System.InvalidOperationException">If the path is invalid.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Search">
            <summary>
            Gets the search parameters argument
            </summary>
            <remarks>Check the Type property before accessing this property.</remarks>
            <exception cref="T:System.InvalidOperationException">If this link does not represent a search.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.ServerUrl">
            <summary>
            Gets the server url argument.
            </summary>
            <remarks>Check the HasServerUrl property before accessing this property.</remarks>
            <exception cref="T:System.InvalidOperationException">If the server url is invalid.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Type">
            <summary>
            Gets the type of the item represented by the link.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.EncodeValue(System.String)">
            <summary>
            Encodes a value that should be used in a tibcospotfire links.
            </summary>
            <param name="s">The input string representation of the value.</param>
            <returns>The encoded string value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetUri(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput)">
            <summary>
            Gets the Url for this TIBCO Spotfire link
            </summary>
            <param name="preferredOutput">The preferred output options.</param>
            <returns>A TIBCO Spotfire link.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.ToString">
            <summary>
            Returns a string representing the link preferring Path without url encoding over Id.
            </summary>
            <returns>A string representation of the link.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.ToString(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput)">
            <summary>
            Returns a string representing the link with the specified preferred output.
            </summary>
            <param name="preferredOutput">The preferred output.</param>
            <returns>A string representation of the link.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Decode(System.String,System.Boolean)">
            <summary>
            Decodes a complete url string. 
            </summary>
            <param name="s">The input string to decode</param>
            <param name="urlDecodeColon">True if colon character should be decoded to the url decoded equivivalent; otherwise false.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.IsValidType(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>
            Validates if a link can be created for the specified 
            library entry.
            </summary>
            <param name="libraryEntry">The library entry to validate.</param>
            <returns>True if a link can be created for this type; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetSpotfireServerPublicUri(Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService)">
            <summary>
            Gets the configured spotfire server public uri.
            </summary>
            <param name="connectivity">The connectivity service, the IsOnline check should already have been performed.</param>
            <returns>the configured spotfire server public uri</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.RewriteTIBCOSpotfireLinks(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput,System.String)">
            <summary>
            Rewrites all TIBCOSpotfire links in a HTML document with relative links
            to the web player.
            </summary>
            <param name="preferredOutput">The preferred output options.</param>
            <param name="content">The html content.</param>
            <returns>A content string with rewritten tibcospotfire links.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.TryCreateLink(Spotfire.Dxp.Framework.DocumentModel.DocumentLocation,Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink@)">
            <summary>
            Tries to create a TIBCO Spotfire link for the specified document and bookmark.
            </summary>
            <param name="documentLocation">The document location to create the link for.</param>
            <param name="link">The resulting link.</param>
            <returns>True if successfully created the link; otherwise false, usually because the 
            document is not currently stored in the library.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.TryCreateLink(Spotfire.Dxp.Framework.DocumentModel.DocumentLocation,System.Guid,Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink@)">
            <summary>
            Tries to create a TIBCO Spotfire link for the specified document and bookmark.
            </summary>
            <param name="documentLocation">The document location to create the link for.</param>
            <param name="bookmarkId">The bookmark library identifier that should be included in the link.</param>
            <param name="link">The resulting link.</param>
            <returns>True if successfully created the link; otherwise false, usually because the 
            document is not currently stored in the library.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.TryCreateLink(Spotfire.Dxp.Framework.Library.LibraryEntry,Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink@)">
            <summary>
            Tries to create a TIBCO Spotfire link for the specified library entry.
            </summary>
            <param name="libraryEntry">The library entry to create the link for.</param>
            <param name="link">The resulting link</param>
            <returns>True if successfully created the link; otherwise false.</returns>
            <remarks>Tries to fetch the library path for analysis library entries if 
            it doesn't exists in the supplied library entry.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetDirectDownloadUrl">
            <summary>
            Gets a link to an analysis for direct download.
            </summary>
            <returns>A link to the analysis for direct download; null if the spotfire server is not set 
            or if the LinkType is not analysis or if this link doesn't have an library identifier
            assigned.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetRedirectQueryString(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput)">
            <summary>
            Gets the redirect query string for this link.
            </summary>
            <param name="preferredOutput">The preferred output options.</param>
            <returns>A string representing the redirect query string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetRedirectUrl(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput)">
            <summary>
            Gets a TIBCO Spotfire Server redirect link.
            </summary>
            <param name="preferredOutput">The preferred output options.</param>
            <returns>A redirect link for the TIBCO Spotfire server;
            null if the server base url is not set or
            if the link type is not analysis or search.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetWebPlayerRedirectUrl(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput)">
            <summary>
            Gets a Web Player Server redirect link.
            </summary>
            <param name="preferredOutput">The preferred output options.</param>
            <returns>A redirect link for the web player server;
            null if the web player server base url is not set or
            if the link type is not analysis or search.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetWebPlayerUrl(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput)">
            <summary>
            Gets a link to a web client analysis, including
            a bookmark if associated.
            </summary>
            <param name="preferredOutput">The preferred output options.</param>
            <returns>A link to a web client analysis;
            null if the web player server url is not set or
            if this link doesn't have a library path associated or
            if the link type is not analysis.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetWebPlayerUrl(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput,System.Boolean)">
            <summary>
            Gets a link to a web client analysis, including
            a bookmark if associated.
            </summary>
            <param name="preferredOutput">The preferred output options.</param>
            <param name="relative">True if the links should be relative.</param>
            <returns>A link to a web client analysis;
            null if the web player server url is not set or
            if this link doesn't have a library path associated or
            if the link type is not analysis.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetWebPlayerBaseUriFromSettings(Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService)">
            <summary>
            Gets the configured web player server base uri.
            </summary>
            <param name="connectivity">The connectivity service, the IsOnline check should already have been performed.</param>
            <returns>The web player server base uri if found; otherwise null;</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.EncodeValue(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput,System.String)">
            <summary>
            Utility method that encodes a value given the specified preferred output.
            Usually url encoded or tibcospotfire link encoded.
            </summary>
            <param name="preferredOutput">The preferred output.</param>
            <param name="value">The value to be encoded.</param>
            <returns>The encoded value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetLinkType(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures)">
            <summary>
            Extracts the link type from a feature set.
            </summary>
            <param name="features">The feature set to extract link type from.</param>
            <returns>The link type of the feature set; LinkType.Unknown if no valid link type was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.GetTypeAsString(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.LinkType)">
            <summary>
            Converts a enum LinkType to a string.
            </summary>
            <param name="linkType">The link type.</param>
            <returns>A string representing the link type.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.IsValidFeatures(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures)">
            <summary>
            Checks if the supplied features are valid.
            </summary>
            <param name="features">The features to validate</param>
            <returns>True of the features are valid; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.TryFixUrlDecodedServerValue(System.String,System.String@)">
            <summary>
            Tries to fix urls that have been decoded, for example by Internet Explorer
            Currently only fixes the server value if it exists.
            </summary>
            <param name="uri">The input uri string that might need 'fixing'</param>
            <param name="fixedUri">The resulting 'fixed' uri string.</param>
            <returns>True if the server value was found and needed fixing.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.TryParseServerUrl(System.String,System.Uri@)">
            <summary>
            Parses the string value as a well formed Uri string
            </summary>
            <param name="serverUriString">The server uri string to be parsed.</param>
            <param name="serverUri">When this method returns, 
            contains the parsed Uri; otherwise, null. 
            This parameter is passed uninitialized.</param>
            <returns>True if parsing the specified string was successful; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.AppendSearch(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput,System.Text.StringBuilder,System.Char,System.Char)">
            <summary>
            Appends the search arguments to the string builder.
            </summary>
            <param name="preferredOutput">The preferred output format.</param>
            <param name="sb">The string builder to append to.</param>
            <param name="typeValueSeparator">The separator between types and values.</param>
            <param name="typesSeparator">The separator between two types.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Init(System.String)">
            <summary>
            Initializes the class from a uri.
            </summary>
            <param name="uri">The uri representing the link.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.Reset">
            <summary>
            Resets the link to invalid state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.ToString(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Gets a string representing the tibcospotfire link
            </summary>
            <param name="preferredOutput">The preferred output options.</param>
            <param name="typeValueSeparator">The character that should separate the type from its value.</param>
            <param name="typesSeparator">The character that should separate two types</param>
            <param name="protocolPrefix">True if the protocol should prefix the string representation.</param>
            <param name="includeServer">True if the server features shold be included in the string
              representation.</param>
            <returns>A string representation of the tibocspotfire link</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.UsePath(Spotfire.Dxp.Framework.Library.TIBCOSpotfireLink.PreferredOutput)">
            <summary>
            Determines if path should be used in the output Uri given
            the specified preferred output and the current information in
            the TIBCO Spotfirel link.
            </summary>
            <param name="preferredOutput">The preferred output.</param>
            <returns>True if path should be used; false if Id should be used; Null if neither Id or Path can be used.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures">
            <summary>Represents features in a tibcospotfire link.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.Server">
            <summary>
            Represents the server url value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.InformationLink">
            <summary>
            Represents opening an information link
            from the library.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.Analysis">
            <summary>
            Represents opening an analysis from 
            the library.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.Search">
            <summary>
            Represents a search
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.Bookmark">
            <summary>
            Represents the bookmark argument
            Only valid when opening an analysis
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.ConfigurationBlock">
            <summary>
            Represents the configuration block argument
            Only valid when opening an analysis or 
            information link
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.OrderBy">
            <summary>
            Represents the order by argument.
            Only valid when performing a search.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.MaxResult">
            <summary>
            Represents the max result argument.
            Only valid when performing a search.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.SortDirection">
            <summary>
            Represents the sort direction argument.
            Only valid when performing a search.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Library.TIBCOSpotfireLinkFeatures.SearchIn">
            <summary>
            Represents the folder to search in.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.ActiveSpacesLicense">
            <summary>
            Exposed for active spaces.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.ActiveSpacesLicense.ActiveSpaces">
            <summary>
            Gets the active spaces license.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Connectors">
            <summary>
            Base class for registering new licensed functions for the Connector license.
            </summary>
            <example>
            The following example illustrates how to use the Connector license to register a new licensed function:
            <code lang="c#">
            
            internal sealed class MyLicensedConnectorFunction : Connectors
            {
               internal sealed new class Functions : Connectors.Functions
               {
                   public static readonly LicensedFunction MyFeature = CreateLicensedFunction("myfeature", "My Feature");
               }
            }
            </code>
            </example>   
            <seealso cref="T:Spotfire.Dxp.Framework.License.License"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Connectors.LicenseId">
            <summary>
            Unique license identifier for the Connectors license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Connectors.LicenseName">
            <summary>
            Localized name for the license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Connectors.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.Connectors"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.Connectors.ConnectorsLicenseId">
            <summary>
            Gets the unique identifier for the Connectors license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Connectors.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            Comparsed two licenses to determine sort order.
            </summary>
            <param name="lf1">Left function.</param>
            <param name="lf2">Right function.</param>
            <returns>An integer value.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Connectors.Functions">
            <summary>
            Contains the functions of the <see cref="T:Spotfire.Dxp.Framework.Licenses.Connectors"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Connectors.Functions.CreateLicensedFunction(System.String,System.String)">
            <summary>
            Creates a licensed function given the id, name, and the description.
            </summary>
            <param name="id">Identifier of the licensed function.</param>
            <param name="name">Name of the licensed function.</param>
            <returns>A LicensedFunction instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.ConstrainedLicensedFeature">
            <summary>
            A wrapper for licensed features that are constrained.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.ConstrainedLicensedFeature.licensedFeature">
            <summary>
            The licensed feature that this instance wraps.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.ConstrainedLicensedFeature.isEnabled">
            <summary>
            <c>true</c> if the license should be enabled.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.ConstrainedLicensedFeature.#ctor(Spotfire.Dxp.Framework.License.ILicensedFeature,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.ConstrainedLicensedFeature"/> class.
            </summary>
            <param name="licensedFeature">The licensed feature.</param>
            <param name="isEnabled">if set to <c>true</c> [is enabled].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.ConstrainedLicensedFeature.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.ConstrainedLicensedFeature.Spotfire#Dxp#Framework#License#ILicensedFeature#IsEnabled(Spotfire.Dxp.Framework.License.LicenseManager)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.ConstrainedLicensedFeature.Spotfire#Dxp#Framework#License#ILicensedFeature#GetDisplayString(Spotfire.Dxp.Framework.License.LicenseManager)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Diagnostics">
            <summary>
            The TIBCO Spotfire Diagnostics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Diagnostics.LicenseId">
            <summary>
            The license id.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Diagnostics.LicenseName">
            <summary>
            The license name
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Diagnostics.lfs">
            <summary>
            The licensed functions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Diagnostics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.Diagnostics"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.Diagnostics.InstanceId">
            <summary>Gets the ID of the Diagnostics License.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.Diagnostics.SortOrder">
            <summary>
            Gets the list of license functions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Diagnostics.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Diagnostics.Functions">
            <inheritdoc/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Diagnostics.Functions.ApplicationProfiler">
            <summary>
            The licensed function ApplicationProfiler.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Diagnostics.Functions.CreateLicensedFunction(System.String,System.String)">
            <summary>
            Creates the licensed function.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <returns>The licensed function.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.LicensedFeatures">
            <summary>
            A list of all features that are under license control.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenFile">
            <summary>The licensed feature OpenFile.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenFromLibrary">
            <summary>The licensed feature OpenFromLibrary.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenLinkedData">
            <summary>The licensed feature OpenLinkedData.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.SaveDxpFile">
            <summary>The licensed feature SaveDxpFile.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.SaveToLibrary">
            <summary>The licensed feature SaveToLibrary.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ExportToPowerPoint">
            <summary>The licensed feature ExportToPowerPoint.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ExportToPdf">
            <summary>The licensed feature ExportToPdf.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ExportImage">
            <summary>The licensed feature ExportImage.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ExportData">
            <summary>The licensed feature ExportData.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.Print">
            <summary>The licensed feature Print.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ShowDoD">
            <summary>The licensed feature ShowDoD.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.UndoRedo">
            <summary>The licensed feature UndoRedo.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.BookmarkPanel">
            <summary>The licensed feature BookmarkPanel.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.BookmarksPrivate">
            <summary>The licensed feature BookmarksPrivate.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.BookmarksPublic">
            <summary>The licensed feature BookmarksPublic.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ChangePassword">
            <summary>The licensed feature ChangePassword.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ShareToTibbr">
            <summary>The licensed feature ShareToTibbr.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ShareLink">
            <summary>The licensed feature Share link.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CollaborationPanel">
            <summary>The licensed feature CollaborationPanelCollaborationPanel.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateMultipleViews">
            <summary>The licensed feature Create Multiple Views.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.Diagnostics">
            <summary>The licensed feature for the Support Diagnostics and Logging dialog.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenFileData">
            <summary>The licensed feature OpenFileData.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenLibraryData">
            <summary>The licensed feature OpenFileData.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenLibraryDataConnection">
            <summary>The licensed feature OpenLibraryDataConnection.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenDatabaseData">
            <summary>The licensed feature OpenDatabaseData.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenInformationLinks">
            <summary>The licensed feature OpenInformationLinks.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenCustomMadeFile">
            <summary>The licensed feature OpenCustomMadeFile.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ReplaceData">
            <summary>The licensed feature ReplaceData.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.OpenEmptyData">
            <summary>The licensed feature OpenEmptyData.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.InsertNewColumn">
            <summary>The licensed feature InsertNewColumn.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.MergeData">
            <summary>The licensed feature MergeData.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ManageDataTables">
            <summary>The licensed feature ManageDataTables.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LoadDataOnDemand">
            <summary>The licensed feature LoadDataOnDemand.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateInformationLink">
            <summary>The licensed feature CreateInformationLink.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreatePage">
            <summary>The licensed feature CreatePage.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateTable">
            <summary>The licensed feature CreateTable.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateGraphicalTable">
            <summary>The licensed feature CreateGraphicalTable.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateCrossTable">
            <summary>The licensed feature CreateCrossTable.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateBarChart">
            <summary>The licensed feature CreateBarChart.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateWaterfallChart">
            <summary>The licensed feature CreateWaterfallChart.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateLineChart">
            <summary>The licensed feature CreateLineChart.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateCombinationChart">
            <summary>The licensed feature CreateCombinationChart.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreatePieChart">
            <summary>The licensed feature CreatePieChart.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateScatterPlot">
            <summary>The licensed feature CreateScatterPlot.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateScatterPlot3d">
            <summary>The licensed feature CreateScatterPlot3d.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateMapChart">
            <summary>The licensed feature CreateMapChart.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateTreemap">
            <summary>The licensed feature CreateTreemap.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateHeatMap">
            <summary>The licensed feature CreateHeatMap.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateParallelPlot">
            <summary>The licensed feature CreateParallelPlot.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateSummaryTable">
            <summary>The licensed feature CreateSummaryTable.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateTextArea">
            <summary>The licensed feature CreateTextArea.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ActionLink">
            <summary>The licensed feature ActionLink.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ChangeColumnSelector">
            <summary>The licensed feature ChangeColumnSelector.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.SimpleVisualizationProperties">
            <summary>The licensed feature SimpleVisualizationProperties.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.AdvancedVisualizationProperties">
            <summary>The licensed feature AdvancedVisualizationProperties.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ErrorBars">
            <summary>The licensed feature ErrorBars.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.SimpleFilterPanelProperties">
            <summary>The licensed feature SimpleFilterPanelProperties.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.AdvancedFilterPanelProperties">
            <summary>The licensed feature AdvancedFilterPanelProperties.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.SimpleDataProperties">
            <summary>The licensed feature SimpleDataProperties.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.AdvancedDataProperties">
            <summary>The licensed feature AdvancedDataProperties.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.AdvancedDocumentProperties">
            <summary>The licensed feature AdvancedDocumentProperties.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.DataPanel">
            <summary>The licensed feature DataPanel.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.Recommendations">
            <summary>The licensed feature Recommendations.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.RecordTagPanel">
            <summary>The licensed feature RecordTagPanel.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.Exportability">
            <summary>The licensed feature Exportability.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.Lists">
            <summary>The licensed feature Lists.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CustomQuery">
            <summary>The licensed feature CustomQuery.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateAnnotations">
            <summary>The licensed feature Create Annotation.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateCollaborationConversations">
            <summary>The licensed feature Create Collaboration Conversations.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ViewCollaborationConversations">
            <summary>The licensed feature View Collaboration Conversations.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateKpiChart">
            <summary>The licensed feature CreateKpiChart.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ReplaceValuesInVisualizations">
            <summary>The licensed feature ReplaceValuesInVisualizations.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CreateBoxPlot">
            <summary>The licensed feature  CreateBoxPlot.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.AdvancedAggregationMethods">
            <summary>The licensed feature  AdvancedAggregationMethods.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CustomExpressions">
            <summary>The licensed feature  CustomExpressions.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.SetColumnFromMarked">
            <summary>The licensed feature  SetColumnFromMarked.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LineSimilarity">
            <summary>The licensed feature  LineSimilarity.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.KMeansClustering">
            <summary>The licensed feature  KMeansClustering.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.HierarchicalClustering">
            <summary>The licensed feature  HierarchicalClustering.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.DataRelationships">
            <summary>The licensed feature  DataRelationships.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CurveDraw">
            <summary>The licensed feature  CurveDraw.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.CurveFromDataTable">
            <summary>The licensed feature  CurveFromDataTable.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.StraightLine">
            <summary>The licensed feature  StraightLine.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.PolynomialCurve">
            <summary>The licensed feature  PolynomialCurve.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LogisticRegressionCurve">
            <summary>The licensed feature  LogisticRegressionCurve.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.PowerCurve">
            <summary>The licensed feature  PowerCurve.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.GaussianCurve">
            <summary>The licensed feature  GaussianCurve.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LogarithmicCurve">
            <summary>The licensed feature  LogarithmicCurve.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ExponentialCurve">
            <summary>The licensed feature  ExponentialCurve.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.RegisterDataFunctions">
            <summary>The licensed feature  RegisterDataFunctions.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.ExecuteDataFunctions">
            <summary>The licensed feature  ExecuteDataFunctions.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.PredictiveModeling">
            <summary>The licensed feature  PredictiveModeling.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.InsertPredictedColumn">
            <summary>The licensed feature  InsertPredictedColumn.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LogInToWebClient">
            <summary>The licensed feature to use web the web client.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.WebAuthor">
            <summary>The licensed feature to use web analyzer mode.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LicensedOnDesktopUnavailableInWeb(Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            Creates a licensed feature that is controlled by the provided license function in the desktop client but is not available in the web client.
            </summary>
            <param name="desktopLicense">The desktop license.</param>
            <returns>The licensed feature</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.SameLicenseOnDesktopAndWeb(Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            Creates a license feature that uses the same license in the desktop and web client.
            </summary>
            <param name="license">The license.</param>
            <returns>The license</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.DifferentLicenseOnDesktopAndWeb(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            Creates a license feature that uses the different licenses in the desktop and web client.
            </summary>
            <param name="desktopLicense">The desktop license.</param>
            <param name="webLicense">The web license.</param>
            <returns>
            The license.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LicensedFeatureDependsOnClientType">
            <summary>
            Represents a licensed feature which depends on the client type. I.e, if it is the desktop forms client or the web client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LicensedFeatureDependsOnClientType.desktopLicense">
            <summary>
            The licensed function that is used in the forms client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LicensedFeatureDependsOnClientType.webLicense">
            <summary>
            The licensed function that is used in the web client.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LicensedFeatureDependsOnClientType.#ctor(Spotfire.Dxp.Framework.License.ILicensedFeature,Spotfire.Dxp.Framework.License.ILicensedFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LicensedFeatureDependsOnClientType"/> class.
            </summary>
            <param name="desktopLicense">The desktop licenses.</param>
            <param name="webLicense">The web licenses.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LicensedFeatureDependsOnClientType.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LicensedFeatureDependsOnClientType.Spotfire#Dxp#Framework#License#ILicensedFeature#IsEnabled(Spotfire.Dxp.Framework.License.LicenseManager)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.LicensedFeatures.LicensedFeatureDependsOnClientType.Spotfire#Dxp#Framework#License#ILicensedFeature#GetDisplayString(Spotfire.Dxp.Framework.License.LicenseManager)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.WebAuthor">
            <summary>
            The TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.LicenseId">
            <summary>
            The license id.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.LicenseName">
            <summary>
            The license name
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.lfs">
            <summary>
            The licensed functions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.WebAuthor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.WebAuthor"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.WebAuthor.SortOrder">
            <summary>
            Gets the list of license functions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.WebAuthor.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.WebAuthor.AnyEnabled(Spotfire.Dxp.Framework.License.LicenseManager)">
            <summary>
            Gets a value indicating whether any <see cref="T:Spotfire.Dxp.Framework.License.ILicensedFeature" /> is enabled within the license.
            </summary>
            <param name="licenseManager">The license manager.</param>
            <returns>
              <c>True</c> if at least one feature is enabled.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions">
            <inheritdoc/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.WebAuthor">
            <summary>
            The licensed function WebAuthor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.OpenFileData">
            <summary>
            The Open File Data feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.OpenLibraryData">
            <summary>
            The Open Library Data feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.OpenLibraryDataConnection">
            <summary>
            The Open Library Data Connection feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreatePage">
            <summary>
            The Create Page feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.SimpleVisualizationProperties">
            <summary>
            The Simple Visualization Properties feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.AdvancedVisualizationProperties">
            <summary>
            The Advanced Visualization Properties feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.SimpleFilterPanelProperties">
            <summary>
            The Simple Filter Panel Properties feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.ChangeColumnSelector">
            <summary>
            The Change Column Selector feature of the TIBCO Spotfire Web Author license. 
            This feature must be enabled in order for column selectors to have sliders, drop down menus, and add buttons.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateBarChart">
            <summary>
            The Create Bar Chart feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateWaterfallChart">
            <summary>
            The Create Waterfall Chart feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateTable">
            <summary>
            The Create Table feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateCrossTable">
            <summary>
            The Create Cross Table feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateAnnotations">
            <summary>
            The Create Annotations feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateLineChart">
            <summary>
            The Create Line Chart feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateParallelPlot">
            <summary>
            The Create Parallel Plot feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreatePieChart">
            <summary>
            The Create Pie Chart feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateScatterPlot">
            <summary>
            The Create Scatter Plot feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateMapChart">
            <summary>
            The Create Map Chart feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateKpiChart">
            <summary>
            The Create KPI Chart feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.ReplaceValuesInVisualizations">
            <summary>
            The Create Replace Value in Plot Context feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.OpenInformationLinks">
            <summary>
            The Open Information Links feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.ReplaceData">
            <summary>
            The Replace data menu.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.OpenEmptyData">
            <summary>
            The license for prompting for open empty data.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.ManageDataTables">
            <summary>
            This feature must be enabled to be able to use File->Add Data Table,
            Edit->Data Table Properties, Manage Relations, Insert New Data table.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateTreemap">
            <summary>
            The Create Tree Map feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.ErrorBars">
            <summary>
            The Error Bars feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateCombinationChart">
            <summary>
            The Create Combination Chart feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.InsertNewColumn">
            <summary>
            The Insert New Column feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.MergeData">
            <summary>
            The Merge Data (Add rows/columns) feature of the TIBCO Spotfire Web Author license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.DataPanel">
            <summary>The Data Panel feature of the TIBCO Spotfire Web Author license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.Recommendations">
            <summary>The Recommendation feature of the TIBCO Spotfire Web Author license.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.WebAuthor.Functions.CreateLicensedFunction(System.String,System.String)">
            <summary>
            Creates the licensed function.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <returns>The licensed function.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Administrator">
            <summary>The TIBCO Spotfire Administrator license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Administrator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.Administrator"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.Administrator.InstanceId">
            <summary>Get the ID of the Administrator License.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.Administrator.SortOrder">
            <summary>
            Creates and returns the list of license functions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Administrator.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            The Compare method is used to sort the licence functions visible in the Administration Manager.
            </summary>
            <param name="lf1">The license function to be compared to lf2.</param>
            <param name="lf2">The license function to be compared to lf1.</param>
            <returns>-1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2. </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Clinical">
            <summary>The TIBCO Spotfire Clinical license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Clinical.LicenseId">
            <summary>
            Identifier for the Clincial license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Clinical.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.Clinical"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Clinical.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            Compares two license functions.
            </summary>
            <param name="lf1">The license function to be compared to lf2.</param>
            <param name="lf2">The license function to be compared to lf1.</param>
            <returns>
            -1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Clinical.Functions">
            <summary>
            The TIBCO Spotfire Clincial license definition.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Clinical.Functions.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.Clinical.Functions"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Clinical.Functions.CreateLicensedFunction(System.String,System.String,System.String)">
            <summary>
            Creates a licensed function given the id, name, and the description.
            </summary>
            <param name="id">The identifier of the licene function to create.</param>
            <param name="name">The name of the license function to create.</param>
            <param name="description">A description of the created license function.</param>
            <returns>A list of Oracle Clinical databases.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer">
            <summary>The TIBCO Spotfire EnterprisePlayer license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.OpenFile">
            <summary>
            The Open feature of the TIBCO Spotfire EnterprisePlayer license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.Print">
            <summary>
            The Print feature of the TIBCO Spotfire EnterprisePlayer license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.SaveDxpFile">
            <summary>The Save TIBCO Spotfire File feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.SaveToLibrary">
            <summary>The Save to Library feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.OpenFromLibrary">
            <summary>The Open from Library feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.OpenLinkedData">
            <summary>The user is allowed to open files with linked data.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.ExportToPowerPoint">
            <summary>The Export to PowerPoint feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.ExportToPdf">
            <summary>The Export to PDF of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.ExportImage">
            <summary>The Export Image feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.ExportData">
            <summary>The Export Data feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.UndoRedo">
            <summary>The UndoRedo feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.ShowDoD">
            <summary>The ShowDoD feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.ChangePassword">
            <summary>The ChangePassword feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.BookmarkPanel">
            <summary>
            The Bookmark Panel feature of the TIBCO Spotfire EnterprisePlayer license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.BookmarksPrivate">
            <summary>The BookmarksPrivate feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.BookmarksPublic">
            <summary>The BookmarksPublic feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.ShareToTibbr">
            <summary>The ShareToTibbr feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.ShareLink">
            <summary>The Share link feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.CollaborationPanel">
            <summary>The Collaboration Panel feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.CreateCollaborationConversations">
            <summary>
            The Create Collaboration Conversations feature of the TIBCO Spotfire EnterprisePlayer license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.ViewCollaborationConversations">
            <summary>
            The View Collaboration Conversations of the TIBCO Spotfire EnterprisePlayer license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.Diagnostics">
            <summary>The Support Diagnostics and Logging Dialog feature of the TIBCO Spotfire EnterprisePlayer license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Functions.CreateMultipleViews">
            <summary>
            The Create Multiple views feature of the TIBCO Spotfire Enterprise Player license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.InstanceId">
            <summary>Get the ID of the Enterprise Player License.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.SortOrder">
            <summary>
            Creates and returns the list of license functions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.EnterprisePlayer.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            The Compare method is used to sort the licence functions visible in the Administration Manager.
            </summary>
            <param name="lf1">The license function to be compared to lf2.</param>
            <param name="lf2">The license function to be compared to lf1.</param>
            <returns>-1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2. </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Metrics">
            <summary>The TIBCO Spotfire Metrics license.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Metrics.Functions">
            <inheritdoc/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.CreateBoxPlot">
            <summary>
            The Create Box Plot feature of the TIBCO Spotfire Metrics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.CustomExpressions">
            <summary>
            The Custom Expressions feature of the TIBCO Spotfire Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.DataRelationships">
            <summary>
            The DataRelationships feature of the TIBCO Spotfire Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.AdvancedAggregationMethods">
            <summary>
            The Advanced Aggregation Methods feature of the TIBCO Spotfire Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.KMeansClustering">
            <summary>
            The K-Means Clustering feature of the TIBCO Spotfire Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.HierarchicalClustering">
            <summary>
            The Hierarchical Clustering feature of the TIBCO Spotfire Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.LineSimilarity">
            <summary>
            The Line Similarity feature of the TIBCO Spotfire Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.SetColumnFromMarked">
            <summary>
            The Set Column From Marked feature of the TIBCO Spotfire Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.StraightLine">
            <summary>
            The Straight Line feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.ExponentialCurve">
            <summary>
            The Exponential Curve feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.LogarithmicCurve">
            <summary>
            The Logarithmic Curve feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.LogisticRegressionCurve">
            <summary>
            The Logistic Regression Curve feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.PolynomialCurve">
            <summary>
            The Polynomial Curve feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.PowerCurve">
            <summary>
            The Power Curve feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.GaussianCurve">
            <summary>
            Gaussian Curve feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.CurveDraw">
            <summary>
            The Curve Draw feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.CurveFromDataTable">
            <summary>
            The Curve from Data Table feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.RegisterDataFunctions">
            <summary>
            The Register Data Functions feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.PredictiveModeling">
            <summary>
            The Predictive Modeling feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.InsertPredictedColumn">
            <summary>
            The Insert Predicted Column feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Metrics.Functions.ExecuteDataFunctions">
            <summary>
            The Execute Data Functions feature of the Spotfire DXP Statistics license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Metrics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.Metrics"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.Metrics.SortOrder">
            <summary>
            Creates and returns the list of license functions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Metrics.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            The Compare method is used to sort the licence functions visible in the Administration Manager.
            </summary>
            <param name="lf1">The license function to be compared to lf2.</param>
            <param name="lf2">The license function to be compared to lf1.</param>
            <returns>-1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2. </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.InformationModeler">
            <summary>The TIBCO Spotfire Information Modeler license.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.InformationModeler.Functions">
            <inheritdoc/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.InformationModeler.Functions.InformationModelAdministrate">
            <summary>
            The Administrate Information Model feature of the TIBCO Spotfire Information Modeler license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.InformationModeler.Functions.PromptForParameter">
            <summary>
            The Prompt Parameter feature of the TIBCO Spotfire Information Modeler license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.InformationModeler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.InformationModeler"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.InformationModeler.InstanceId">
            <summary>Get the ID of the InformationModeler License.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.InformationModeler.SortOrder">
            <summary>
            Creates and returns the list of license functions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.InformationModeler.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            The Compare method is used to sort the licence functions visible in the Administration Manager.
            </summary>
            <param name="lf1">The license function to be compared to lf2.</param>
            <param name="lf2">The license function to be compared to lf1.</param>
            <returns>-1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2. </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Professional">
            <summary>The TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.Professional.Functions">
            <inheritdoc/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.OpenFileData">
            <summary>
            The Open File Data feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.OpenLibraryData">
            <summary>
            The Open Library Data feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreatePage">
            <summary>
            The Create Page feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.AdvancedFilterPanelProperties">
            <summary>
            The Advanced Filter Panel Properties feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.SimpleVisualizationProperties">
            <summary>
            The Simple Visualization Properties feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.AdvancedVisualizationProperties">
            <summary>
            The Advanced Visualization Properties feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.ChangeColumnSelector">
            <summary>
            The Change Column Selector feature of the TIBCO Spotfire Professional license. 
            This feature must be enabled in order for column selectors to have sliders, drop down menus, and add buttons.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateBarChart">
            <summary>
            The Create Bar Chart feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateWaterfallChart">
            <summary>
            The Create Waterfall Chart feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.AdvancedDataProperties">
            <summary>
            The Advanced Data Properties feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.AdvancedDocumentProperties">
            <summary>
            The Advanced Document Properties feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.RecordTagPanel">
            <summary>
            The Record Tag Panel feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateTable">
            <summary>
            The Create Table feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateCrossTable">
            <summary>
            The Create Cross Table feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateAnnotations">
            <summary>
            The Create Annotations feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateInformationLink">
            <summary>
            The Create Information Link feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateLineChart">
            <summary>
            The Create Line Chart feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateMapChart">
            <summary>
            The Create Map Chart feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateParallelPlot">
            <summary>
            The Create Parallel Plot feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreatePieChart">
            <summary>
            The Create Pie Chart feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateScatterPlot">
            <summary>
            The Create Scatter Plot feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateTextArea">
            <summary>
            The Create Text Area feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateGraphicalTable">
            <summary>
            The Create Graphical Table feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateKpiChart">
            <summary>
            The Create KPI Chart feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.InsertNewColumn">
            <summary>
            The Insert New Column feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.ReplaceValuesInVisualizations">
            <summary>
            The Create Replace Value transformations in visualizations feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.MergeData">
            <summary>
            The Merge Data feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.OpenCustomMadeFile">
            <summary>
            The Open Custom File feature of the TIBCO Spotfire Professional license. 
            This feature must be enabled in order for user actions on the File-Open 
            and File-Replace Data hooks to be available.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.OpenDatabaseData">
            <summary>
            The Open Database Data feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.OpenInformationLinks">
            <summary>
            The Open Information Links feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.ReplaceData">
            <summary>
            The Replace data menu.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.OpenEmptyData">
            <summary>
            The license for prompting for open empty data.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.SimpleDataProperties">
            <summary>
            The Simple Data Properties feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.SimpleFilterPanelProperties">
            <summary>
            The Simple Filter Panel Properties feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.UseCustomMadeTools">
            <summary>
            The Use Custom Made Tools feature of the TIBCO Spotfire Professional license. 
            This feature must be enabled in order for user actions on the Tools
            hooks to be available.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateSummaryTable">
            <summary>
            The Create Summary Table feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.ActionLink">
            <summary>
            The Action Link feature on the TIBCO Spotfire Professional license.
            This feature must be enabled in order to create Action Links in the textbox.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.ManageDataTables">
            <summary>
            This feature must be enabled to be able to use File->Add Data Table,
            Edit->Data Table Properties, Manage Relations, Insert New Data table.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.LoadDataOnDemand">
            <summary>
            This feature must be enabled to be able to load data on demand.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.Exportability">
            <summary>
            The Export plot data feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateScatterPlot3d">
            <summary>
            The Create 3D Scatter Plot feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateTreemap">
            <summary>
            The Create Tree Map feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateHeatMap">
            <summary>
            The Create Heat Map feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.ErrorBars">
            <summary>
            The Error Bars feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CreateCombinationChart">
            <summary>
            The Create Combination Chart feature of the TIBCO Spotfire Professional license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.Lists">
            <summary>Server-administered "LicensedFunction" for displaying the portfolio.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.DataPanel">
            <summary>The Data Panel feature of the TIBCO Spotfire Professional license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.Recommendations">
            <summary>The Recommendations feature of the TIBCO Spotfire Professional license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.ActiveSpaces">
            <summary>The Active Spaces feature of the TIBCO Spotfire Professional license.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.Professional.Functions.CustomQuery">
            <summary>The Custom Query feature is part of the TIBCO Spotfire Professional license.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Professional.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Licenses.Professional"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.Professional.InstanceId">
            <summary>Get the ID of the Professional License.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.Professional.SortOrder">
            <summary>
            Creates and returns the list of license functions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Professional.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            The Compare method is used to sort the licence functions visible in the Administration Manager.
            </summary>
            <param name="lf1">The license function to be compared to lf2.</param>
            <param name="lf2">The license function to be compared to lf1.</param>
            <returns>-1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2. </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Licenses.Professional.AnyEnabled(Spotfire.Dxp.Framework.License.LicenseManager)">
            <summary>
            Gets a value indicating whether any <see cref="T:Spotfire.Dxp.Framework.License.ILicensedFeature" /> is enabled within the license.
            </summary>
            <param name="licenseManager">The license manager.</param>
            <returns>
              <c>True</c> if at least one feature is enabled.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.WebPlayer">
            <summary>The TIBCO Spotfire Web Player license.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Licenses.WebPlayer.Functions">
            <inheritdoc/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebPlayer.Functions.CreateCollaborationConversations">
            <summary>
            The Create Collaboration Conversations feature of the TIBCO Spotfire Web Player license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebPlayer.Functions.ViewCollaborationConversations">
            <summary>
            The View Collaboration Conversations feature of the TIBCO Spotfire Web Player license.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Licenses.WebPlayer.Functions.CreateMultipleViews">
            <summary>
            The Create Multiple views feature of the TIBCO Spotfire Web Player license.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Licenses.WebPlayer.SortOrder">
            <summary>
            Creates and returns the list of license functions.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.AnyAuthorLicensedFeature">
            <summary>
            A composite licensed feature that is enabled if any author license is enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.AnyAuthorLicensedFeature.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.AnyAuthorLicensedFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.AnyAuthorLicensedFeature"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.AnyAuthorLicensedFeature.GetDisplayString(Spotfire.Dxp.Framework.License.LicenseManager)">
            <inheritdoc/> 
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.AnyAuthorLicensedFeature.IsEnabled(Spotfire.Dxp.Framework.License.LicenseManager)">
            <inheritdoc/> 
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.ILicensedFeature">
            <summary>
            An interface for classes that represents license control of a feature. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.ILicensedFeature.GetDisplayString(Spotfire.Dxp.Framework.License.LicenseManager)">
            <summary>
            Gets a string that can be displayed to the user which lists the licensed function(s) that controls this feature on a particular client type.
            </summary>
            <param name="licenseManager">The license manager.</param>
            <returns>
            The display string.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.ILicensedFeature.IsEnabled(Spotfire.Dxp.Framework.License.LicenseManager)">
            <summary>
            Determines whether the licensed feature is enabled given a license manager.
            </summary>
            <param name="licenseManager">The license manager.</param>
            <returns>
              <c>true</c> if the licensed feature is enabled.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense">
            <summary>Allows customization of a license for a given group.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.#ctor(Spotfire.Dxp.Framework.License.Administration.LicenseDefinition)">
            <summary>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.#ctor(Spotfire.Dxp.Framework.License.Administration.LicenseDefinition,System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.String}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense"/> class.
            </summary>
            <param name="licenseDef">The license definition.</param>
            <param name="enabledInGroupNames">The group names that this 
            function is inherited from, including "this" group.</param>
            <param name="enabledFunctions">The enabled functions, and the groups 
            these are inherited from, including "this" group.</param>
            <param name="currentGroupName">The name of the currently administered group.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.Id">
            <summary>
            Gets the id of the administered license.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.Name">
            <summary>
            Gets the name the administered license.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.Description">
            <summary>
            Gets the description the administered license.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Spotfire.Dxp.Framework.License.Administration.LicenseAdministration"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.ReadOnly">
            <summary>
            Gets or sets a value indicating whether or not this license is read-only.
            </summary>
            <value><c>true</c> if this license is read-only; otherwise, <c>false</c>.</value>
            <remarks>Settings this value also affects the functions contained
            in the license, that is, setting a license to read-only also sets
            all functions to read-only.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.IsInherited">
            <summary>
            Gets a value indicating whether this instance is inherited.
            </summary>
            <value>
            	<c>true</c> if this instance is inherited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.InheritedFromGroupNames">
            <summary>
            Gets the group id this customized license is inherited from.
            </summary>
            <value>The parent groups id.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.Functions">
            <summary>
            Gets the functions of the administered license.
            </summary>
            <value>The functions.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.CustomizedLicense.Compare(Spotfire.Dxp.Framework.License.Administration.CustomizedLicense,Spotfire.Dxp.Framework.License.Administration.CustomizedLicense)">
            <summary>
            Compares two licenses.
            </summary>
            <param name="cl1"> The license to be compared to cl2</param>
            <param name="cl2"> The license to be compared to cl1</param>
            <returns>-1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.Administration.LicenseAdministration">
            <summary>
            Allows administration of the licenses assigned to and customized for a given group.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicenseAdministration.GroupId">
            <summary>
            Gets the group id.
            </summary>
            <value>The group id.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicenseAdministration.GroupOrUserName">
            <summary>
            Gets the name of the group or the name of the user for whom this 
            object describes the licens assignments.
            </summary>
            <value>The name of the group.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicenseAdministration.CustomizedLicenses">
            <summary>
            Gets the customized licenses for the given group.
            </summary>
            <value>The customized licenses.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.LicenseAdministration.GetLicensedFunction(Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            Gets the administration object for the licensed function.
            </summary>
            <param name="licensedFunction">The licensed function.</param>
            <returns>The administraion object or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.Administration.LicenseAdministrationManager">
            <summary>Allows licenses and licensed functions to be assigned to groups.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.Administration.LicenseAdministrationManager.licenseDefinitions">
            <summary>LicenseId (Name) -> LicenseDefinition</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.LicenseAdministrationManager.#ctor(Spotfire.Dxp.Services.License.ILicenseAdministrationService,Spotfire.Dxp.Framework.ApplicationModel.ModulesService)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.Administration.LicenseAdministrationManager"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.LicenseAdministrationManager.LookupGroupName(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Looks up the name of the group with the specified id.
            </summary>
            <param name="groupId"></param>
            <param name="groupIdToNameDict">Used to cache lookups to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.LicenseAdministrationManager.GetLicenseAdministrationForGroup(System.String)">
            <summary>
            Gets the LicenseAdministration object allowing the licenses 
            for group <paramref name="groupId"/> to be administered.
            </summary>
            <param name="groupId">The group id.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.LicenseAdministrationManager.GetLicenseAdministrationForUser(System.String)">
            <summary>
            Gets the LicenseAdministration object allowing the licenses 
            for group <paramref name="userName"/> to be inspected.
            </summary>
            <param name="userName">The composite user name.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.LicenseAdministrationManager.Save(Spotfire.Dxp.Framework.License.Administration.LicenseAdministration)">
            <summary>
            Saves the specified license administration object to the server.
            </summary>
            <param name="licenseAdministration">The llicense administration.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration">
            <summary>
            Allows administration of a licensed function for a license customized for a given group.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.confirmationMessage">
            <summary>
            The confirmation message. May be <c>null</c> if no confirmation is needed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.#ctor(Spotfire.Dxp.Framework.License.License,Spotfire.Dxp.Framework.License.LicensedFunction,System.Boolean,System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.#ctor(Spotfire.Dxp.Framework.License.License,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.Id">
            <summary>
            Gets the id of the administered licensed function.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.Name">
            <summary>
            Gets the name the administered license function.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.Description">
            <summary>
            Gets the description the administered license function.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.IsInherited">
            <summary>
            Gets a value indicating whether this licensed function is inherited.
            </summary>
            <value>
            	<c>true</c> if this instance is inherited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.InheritedFromGroupNames">
            <summary>
            Gets the names of the groups that this licensed function is inherited from.
            </summary>
            <value>the names of the groups that this licensed function is inherited from.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.ReadOnly">
            <summary>
            Gets or sets a value indicating whether or not this object is read-only.
            </summary>
            <value><c>true</c> if this license is read-only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.ConfirmationMessage">
            <summary>
            Gets or sets the confirmation message. May be <c>null</c> if no confirmation is needed.
            </summary>
            <value>
            The confirmation message.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration.Compare(Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration,Spotfire.Dxp.Framework.License.Administration.LicensedFunctionAdministration)">
            <summary>
            The Compare method compares two LicensedFunctionAdministration objects. 
            </summary>
            <param name="lfa1">The LicensedFunctionAdministration to be compared to lfa2.</param>
            <param name="lfa2">The LicensedFunctionAdministration to be compared to lfa1.</param>
            <returns>-1 if lfa1 is smaller than lfa2, 0 if lfa1=lfa2, 1 if lfa1 is larger than lfa2.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.License">
            <summary>
            Abstract base class for all classes that define licenses.     
            <para>
            A license is defined by its <see cref="P:Spotfire.Dxp.Framework.License.License.Id"/> which must be globally 
            unique, a <see cref="P:Spotfire.Dxp.Framework.License.License.Name"/>, and a <see cref="P:Spotfire.Dxp.Framework.License.License.Description"/>.
            </para>
            </summary>
            
            <remarks>This class cannot be extended through inheritance.</remarks>
            
            <seealso cref="T:Spotfire.Dxp.Framework.License.LicenseManager"/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.License.Functions">
            <summary>
            A class declaring the functions of the <see cref="T:Spotfire.Dxp.Framework.License.License"/>.        
            </summary>
            
            <seealso cref="T:Spotfire.Dxp.Framework.License.LicenseManager"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.License.Functions.LicensedFunctions">
            <summary>
            Gets an object which can be used to enumerate the functions in
            the current license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.Functions.#ctor">
            <summary>
            Initializes a new instance of class <see cref="T:Spotfire.Dxp.Framework.License.License.Functions"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.Functions.CreateLicensedFunction(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a licensed function given the id, name, and the description.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.Functions.CreateLicensedFunction(System.String,System.String,System.String)">
            <summary>
            Creates a licensed function given the id, name, and the description.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.License.Functions.AlwaysEnabled">
            <summary>
            Defines a <see cref="T:Spotfire.Dxp.Framework.License.LicensedFunction"/> that is always enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.License.Functions.AlwaysDisabled">
            <summary>Defines a <see cref="T:Spotfire.Dxp.Framework.License.LicensedFunction"/> that is always disabled.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.License.Id">
            <summary>Gets the globally unique id of this license.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.License.Name">
            <summary>Gets the localized name of this license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>Compares two license functions.</summary>
            <param name="lf1">The license function to be compared to lf2.</param>
            <param name="lf2">The license function to be compared to lf1.</param>
            <returns>-1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2. </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.License.Description">
            <summary>Gets the localized description of this license.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.License"/> class.
            </summary>
            <param name="id">
            The identifier of the license. The id must be globally
            unique. If it is not it will be ignored. It may not be null or an 
            empty string.
            </param>
            <param name="name">
            A user friendly name for this license. This name may not be null or
            an empty string.
            </param>
            <param name="description">
            A user friendly description of the license and what it
            controls. This description may not be null. If no description is to
            be provided, pass <c>string.Empty</c>.
            </param>
            
            <exception cref="T:ArgumentNullException">
            If any of the parameters are <c>null</c>.
            </exception>
            
            <exception cref="T:ArgumentException">
            If either <paramref name="id"/> or <paramref name="name"/> is 
            <c>null</c>.
            </exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.License.LicensedFunctions">
            <summary>Return a list of all license functions in this class.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.License.SortOrder">
            <summary>
            Creates and returns the list of licenses.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.Compare(Spotfire.Dxp.Framework.License.License,Spotfire.Dxp.Framework.License.License)">
            <summary>
            The Compare method is used to sort the licences visible in the Administration Manager.
            </summary>
            <param name="license1">The license to be compared to license2.</param>
            <param name="license2">The license to be compared to license1.</param>
            <returns>-1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2. </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.ToString">
            <summary>
            Returns the name and id of a license.
            </summary>
            <returns>The name and id of a license.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.GetHashCode">
            <summary>
            Using base.GetHashCode()
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.Equals(System.Object)">
            <summary>
            Compare with another license based on id.
            </summary>
            <param name="obj">The license to compare with.</param>
            <returns>true if the licenses are equal. false if the licenses aren't equal.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.GetSortorder(Spotfire.Dxp.Framework.License.LicensedFunction,System.Collections.Generic.List{Spotfire.Dxp.Framework.License.LicensedFunction})">
            <summary>
            Gets the sort order of the specified licensed function.
            </summary>
            <param name="licensedFunction">The licensed function.</param>
            <param name="totalOrder">The total order of licensed functions to compare.</param>
            <returns>The sort order.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.License.Compare(Spotfire.Dxp.Framework.License.LicensedFunction,Spotfire.Dxp.Framework.License.LicensedFunction,System.Collections.Generic.List{Spotfire.Dxp.Framework.License.LicensedFunction})">
            <summary>
            Compares two licesened functions using the specified order.
            </summary>
            <param name="lf1">The license function to be compared to lf2.</param>
            <param name="lf2">The license function to be compared to lf1.</param>
            <param name="totalOrder">The total order of licensed functions to compare.</param>
            <returns>-1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2. </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.Cache.LicenseCache">
            <remarks/>
            <summary>This class is not to be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Cache.LicenseCache.License">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Cache.LicenseCache.SchemaVersion">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Cache.LicenseCache.Signature">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Cache.LicenseCache.Username">
            <remarks/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.LicenseCache.#ctor">
            <summary>Initializes a new instance of type <see cref="T:LicenseCache"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.Cache.LicenseCache.SchemaAssemblyPath">
            <summary>The path to the xml schema for the license cache.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Cache.LicenseCache.LatestVersion">
            <summary>Get the latest version of the license cache file.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.LicenseCache.Read(System.IO.TextReader)">
            <summary>Reads an LicenseCache from the specified reader stream.</summary>
            <param name="configReader">The config reader stream.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.LicenseCache.Read(System.String)">
            <summary>
            Reads a LicenseCache from the specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.LicenseCache.HasValidSignature">
            <summary>Checks that the license contents correspond to the saved signature.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.LicenseCache.Write(System.String)">
            <summary>
            Writes this LicenseCache to the specified file.
            </summary>
            <param name="fileName">Name (path) of the file.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.LicenseCache.Read(System.IO.Stream)">
            <summary>
            Reads an LicenseCache from the specified stream.
            </summary>
            <param name="configStream">The config stream.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.LicenseCache.Write(System.IO.Stream)">
            <summary>Writes the specified stream.</summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.LicenseCache.GenerateLicenseSignature">
            <summary>Generates a hashed signature of the license contents.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.LicenseCache.GenerateDataToSign">
            <summary>Builds a string containing all the license identifiers and their hidden functions.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.Cache.License">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Cache.License.HiddenFunctions">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Cache.License.Id">
            <remarks/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.License.ToString">
            <summary>Debug print</summary>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.Cache.Function">
            <remarks/>
            <summary>This class is not to be used.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.Cache.Function.Id">
            <remarks/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.Function.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.Cache.Function"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.Function.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.Cache.Function"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.Cache.Function.ToString">
            <summary>Debug print</summary>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.LicensedFunction">
            <summary>
            Instances of this class define parts of a license that can be enabled or
            disabled by administrators. The licensed function consists of an 
            identifier, a name, and a description. The <see cref="P:Spotfire.Dxp.Framework.License.LicensedFunction.Id"/> of the 
            function is required be unique within the <see cref="T:Spotfire.Dxp.Framework.License.License"/> to which
            it is being added. The <see cref="P:Spotfire.Dxp.Framework.License.LicensedFunction.Name"/> and <see cref="P:Spotfire.Dxp.Framework.License.LicensedFunction.Description"/> 
            together constitute a user-friendly representation of the feature. 
            Therefore, it is recommended that these strings are localized.
            <para>
            Licensed functions are typically created as static members of a concrete
            <see cref="T:Spotfire.Dxp.Framework.License.License"/> implementation.
            </para>
            </summary>
            
            <seealso cref="T:Spotfire.Dxp.Application.Extension.CustomLicense"/>
            <seealso cref="T:Spotfire.Dxp.Framework.License.LicenseManager"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.LicensedFunction.Id">
            <summary>Gets the id of this license function. 
            This id is unique within the license.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.LicensedFunction.Name">
            <summary>Gets the localized name of the license.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.LicensedFunction.Description">
            <summary>Gets the localized description.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.LicensedFunction.ParentId">
            <summary>Gets the id of the parent.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicensedFunction.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.LicensedFunction"/> class.
            </summary>
            <param name="id">
            The identifier of the feature within its parent id. The id must be
            unique. If it is not it will be ignored. It may not be null or an 
            empty string.
            </param>
            <param name="name">
            A user friendly name for this function. This name may not be null or
            an empty string.
            </param>
            <param name="description">
            A user friendly description of the licensed feature and what it
            controls. This description may not be null. If no description is to
            be provided, pass <c>string.Empty</c>.
            </param>
            <param name="parentId">The id of the parent license.</param>
            <param name="parentName">The name of the parent license.</param>
            
            <exception cref="T:ArgumentNullException">
            If any of the parameters are <c>null</c>.
            </exception>
            
            <exception cref="T:ArgumentException">
            If either <paramref name="id"/> or <paramref name="name"/> is 
            <c>null</c>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicensedFunction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>
            is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with 
            the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicensedFunction.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            <see cref="M:System.Object.GetHashCode"/> is suitable for use in 
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicensedFunction.ToString">
            <summary>Debug info about the object.</summary>
            <returns>A string describing this <see cref="T:Spotfire.Dxp.Framework.License.LicensedFunction"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicensedFunction.Spotfire#Dxp#Framework#License#ILicensedFeature#IsEnabled(Spotfire.Dxp.Framework.License.LicenseManager)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicensedFunction.GetQualifiedName">
            <summary>
            Gets the qualified name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicensedFunction.Spotfire#Dxp#Framework#License#ILicensedFeature#GetDisplayString(Spotfire.Dxp.Framework.License.LicenseManager)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.LicenseManager">
            <summary>
            The LicenseManager is an application wide service that provides 
            information on which <see cref="T:Spotfire.Dxp.Framework.License.LicensedFunction"/> that are enabled.
            New instances of this manager cannot be created. To access the one and
            only instance of this class, use one of the service provider methods
            available.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.LicenseManager.Log">
            <summary>
            License Manager logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.LicenseManager.declaredLicenseIdToHiddenFunctionIds">
            <summary>
            License Id -> set of hidden function id 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.LicenseManager.isDeploymentModeEnabled">
            <summary>
            Indicates if the application is in deployment mode.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.LicenseManager.clientType">
            <summary>
            The client type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.LicenseManager.validSignature">
            <summary>
            Indicates if the license cache has a valid signature.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.License.LicenseManager.explicitDisableMode">
            <summary>
            Indicated if the license checks shall return true for all missing licenses instead of false.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.#ctor(Spotfire.Dxp.Internal.Utilities.ClientType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.LicenseManager" /> class
            in deployment mode, which means that all licenses are enabled.
            </summary>
            <param name="clientType">Type of the client.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.#ctor(Spotfire.Dxp.Framework.License.Cache.LicenseCache,Spotfire.Dxp.Internal.Utilities.ClientType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.LicenseManager" /> class.
            </summary>
            <param name="cache">The cache.</param>
            <param name="clientType">Type of the client.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.#ctor(Spotfire.Dxp.Framework.License.Cache.LicenseCache,Spotfire.Dxp.Internal.Utilities.ClientType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.LicenseManager" /> class.
            </summary>
            <param name="cache">The cache.</param>
            <param name="clientType">Type of the client.</param>
            <param name="explicitDisableMode">if <c>true</c>, the license checks shall return true for all missing licenses</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.#ctor(System.String,Spotfire.Dxp.Internal.Utilities.ClientType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.LicenseManager" /> class.
            </summary>
            <param name="fileName">The license cache file name.</param>
            <param name="clientType">Type of the client.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.#ctor(System.Boolean,Spotfire.Dxp.Internal.Utilities.ClientType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.License.LicenseManager"/> class.
            </summary>
            <param name="isPriviledgedModeEnabled">Indicates if priviledged mode is enabled.</param>
            <param name="clientType">Type of the client.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.License.LicenseManager.GetDisabledFunctions">
            <summary>
            The delegate used to get the disabled license functions given the license identifier.
            </summary>
            <param name="licenseId">The license identifier to get the disabled license functions for.</param>
            <returns>The list of disabled functions; may be null.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.LicenseManager.InternalIsEnabledPredicate">
            <summary>
            Gets or sets the internal is enabled predicate.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.LicenseManager.IsDeploymentModeEnabled">
            <summary>
            Gets a value indicating whether deployment mode is enabled.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.License.LicenseManager.ValidSignature">
            <summary>
            Gets a value indicating whether the cache file has a valid signature.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.IsEnabled(Spotfire.Dxp.Framework.License.LicensedFunction)">
            <summary>Determines whether the specified licensed function is enabled.
            </summary>
            <param name="licensedFunction">
            The licensed function to query. May not be null.
            </param>
            <returns>
            <c>true</c> if the specified licensed function is enabled; 
            otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="licensedFunction"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.GetLicenseCacheFileName">
            <summary>
            Gets the license cache file name.
            </summary>
            <returns>The license cache file name,</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.SaveCacheFile(Spotfire.Dxp.Framework.License.Cache.LicenseCache)">
            <summary>Saves the license cache object to the cache file.</summary>
            <param name="lc">The cache to save.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.IsLicenseSaved">
            <summary>Determines whether there is cached license file on the client.</summary>
            <returns><c>true</c> if a cached file exits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.GetLicenseCacheFromServer(Spotfire.Dxp.Services.License.ILicenseService,Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService)">
            <summary>
            Gets the license information from the server and writes it to
            the <paramref name="serverConnection"/>, using the LicenseCache.xsd format.
            </summary>
            <param name="serverConnection">The server connection.</param>
            <param name="connectivityService">The connectivity service used to determine server version.</param>
            <returns>A license cache.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.CreateLicenseCacheForServerlessClient">
            <summary>
            Creates a license cache programatically that will contain the license information for a "Spotfire Desktop".
            </summary>
            <returns>A license cache</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.ChooseLicensedFeature(Spotfire.Dxp.Framework.License.ILicensedFeature,Spotfire.Dxp.Framework.License.ILicensedFeature)">
            <summary>
            Chooses the licensed feature depending on client.
            </summary>
            <param name="desktopLicense">The desktop license.</param>
            <param name="webLicense">The web license.</param>
            <returns>The licensed feature.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.IsEnabled(Spotfire.Dxp.Framework.License.ILicensedFeature)">
            <summary>Determines whether the specified licensed feature is enabled.
            </summary>
            <param name="licensedFeature">
            The licensed function to query. May not be null.
            </param>
            <returns>
            <c>true</c> if the specified licensed feature is enabled; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.HasLicenses">
            <summary>
            Returns true if this LicenseManager has one or more enabled licenses.
            </summary>
            <returns>True if the license manager has one or more enabled licenses; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.EnabledLicenseIDs">
            <summary>Gets a list of enabled license identifiers.</summary>
            <returns>List of all the Licenses that has enabled functions.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.IsWebClient_BADDESIGN">
            <summary>
            Determines whether this is the web client.
            </summary>
            <returns>
              <c>true</c> if [is web client]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.GetLicense(System.String,Spotfire.Dxp.Framework.License.LicenseManager.GetDisabledFunctions)">
            <summary>
            Constructs a Cache.License and populates it with the disabled functions
            retrieved from the server connection object.
            </summary>
            <param name="licenseId">The license id.</param>
            <param name="getDisabledFunctions">The delegate used to get the disabled functions.</param>
            <returns>The license funtion.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.Init(Spotfire.Dxp.Framework.License.Cache.LicenseCache)">
            <summary>
            Initializes the license manager with the specified license cache.
            </summary>
            <param name="cache">The license cache.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.License.LicenseManager.InitCore(Spotfire.Dxp.Framework.License.Cache.LicenseCache)">
            <summary>
            Initializes the license manager with the specified license cache.
            </summary>
            <param name="cache">The license cache.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.LoginProgressPromptModel">
            <summary>
            The login dialog progress prompt model.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginProgressPromptModel.#ctor(Spotfire.Dxp.Services.ServerInformation,Spotfire.Dxp.Framework.ApplicationModel.CobrandingService,System.String,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.LoginProgressPromptModel"/> class.
            </summary>
            <param name="serverInformation">The server to login to.</param>
            <param name="cobranding">The cobranding service.</param>
            <param name="progressMessage">The progress message to display.</param>
            <param name="cancellationTokenSource">The cancellation token source that will be canceled from the dialog.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginProgressPromptModel.ServerInformation">
            <summary>
            Gets the server information.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginProgressPromptModel.ProgressMessage">
            <summary>
            Gets the progress message.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginProgressPromptModel.ProductCaption">
            <summary>
            Gets the product caption.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginProgressPromptModel.TokenSource">
            <summary>
            Gets the cancellation token source.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow">
            <summary>
            Performs a Spotfire OAuth2 authentication flow.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.Logger">
            <summary>
            The login control logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.authorizationEndpoint">
            <summary>
            The OAuth2 authorization endpoint.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.clientId">
            <summary>
            The OAuth2 client id.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.tokenEndpoint">
            <summary>
            The OAuth2 token endpoint.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.cobrandingService">
            <summary>
            The cobranding service.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.#ctor(Spotfire.Dxp.Services.ServerInformation,Spotfire.Dxp.Framework.ApplicationModel.CobrandingService)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow"/> class.
            </summary>
            <param name="server">The server information.</param>
            <param name="cobrandingService">The cobranding service.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.ProgressMessage">
            <summary>
            Gets the localized progress message when performing an authentication.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.Authenticate(System.Threading.CancellationToken)">
            <summary>
            Performs the OAuth2 authentication flow which will
            launch the system default web browser to interact with the user.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">When the operation or commuication fails.</exception>>
            <exception cref="T:System.Security.Authentication.AuthenticationException">When authentication fails.</exception>
            <exception cref="T:Spotfire.Dxp.Framework.ApplicationModel.CanceledException">When the user canceled the authentication flow.</exception>
            <returns>The authorization token.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.CreateHttpListener(System.String@)">
            <summary>
            Creates a http listener on a random port for the loopback interface, or localhost if the initial
            attempt failed.
            </summary>
            <param name="redirectUri">The redirect URI that the http listener is listening on.</param>
            <returns>A http listener.</returns>
            <exception cref="T:System.InvalidOperationException">When http listener was not started.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.ReActivateApplication(System.Boolean,System.IntPtr)">
            <summary>
            Reactiviate the activate application if specified.
            </summary>
            <param name="reactivate">if set to <c>true</c> the window handle is used to reactivate.</param>
            <param name="windowHandle">The window handle to reactivate.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.GetRandomUnusedPort">
            <summary>
            Gets the random unused port.
            </summary>
            <returns>A random unsed port.</returns>
            <remarks>See http://stackoverflow.com/a/3978040</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.PerformCodeExchange(System.String,System.String,System.String)">
            <summary>
            Performs the code exchange.
            </summary>
            <param name="code">The code.</param>
            <param name="codeVerifier">The code verifier.</param>
            <param name="redirectUri">The redirect URI.</param>
            <returns>The authorization token.</returns>
            <exception cref="T:System.InvalidOperationException">When the code exchange failed with a protocol error.</exception>
            <exception cref="T:System.Net.WebException">When the code exchange failed for other reasons.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.RandomDataBase64Url(System.UInt32)">
            <summary>
            Returns URI-safe data with a given input length.
            </summary>
            <param name="length">Input length (nb. output will be longer)</param>
            <returns>The uri safe random data string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.Sha256(System.String)">
            <summary>
            Returns the SHA256 hash of the input string.
            </summary>
            <param name="inputString">The input string to hash.</param>
            <returns>SHA256 hash.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.Base64UrlencodeNoPadding(System.Byte[])">
            <summary>
            Base64url no-padding encodes the given input buffer.
            </summary>
            <param name="buffer">The buffer to base64 encode.</param>
            <returns>The bas64 url encoded value of the specified buffer.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.ApplicationIsActivated(System.IntPtr@)">
            <summary>Returns true if the current application has focus, false otherwise</summary>
            <param name="activeWindowHandle">The active window handle.</param>
            <returns>True if the current application is activated; otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.NativeMethods">
            <summary>
            PInvoke definitions used by the <see cref="T:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.NativeMethods.GetForegroundWindow">
            <summary>
            Gets the foreground window.
            </summary>
            <returns>The handle to the foreground window.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
            Gets the window thread process identifier.
            </summary>
            <param name="handle">The handle.</param>
            <param name="processId">The process identifier.</param>
            <returns>The identifier of the thread that created the window.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2AuthenticationFlow.NativeMethods.SetForegroundWindow(System.IntPtr)">
            <summary>
            Brings the thread that created the specified window into the foreground and activates the 
            window. Keyboard input is directed to the window, and various visual cues are changed for 
            the user. The system assigns a slightly higher priority to the thread that created the 
            foreground window than it does to other threads.
            </summary>
            <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
            <returns>True if the call succeeded; otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.OAuth2PromptModel">
            <summary>The prompt model for logging in using OAuth2.
            Ask the user to login to the browser window launched after the prompt closes.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.OAuth2PromptModel.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.OAuth2PromptModel"/> class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.SpotfireOAuth2Authenticator">
            <summary>
            An authenticator that handle re-authentication and make sure to add 
            the authorization token when using Spotfire OAuth2 authentication.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Services.Authenticator" />
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.SpotfireOAuth2Authenticator.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.SpotfireOAuth2Authenticator.#ctor(Spotfire.Dxp.Services.ServerInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.SpotfireOAuth2Authenticator"/> class.
            </summary>
            <param name="serverInformation">Representation of the server to authenticate against.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.SpotfireOAuth2Authenticator.ConfigureWebRequest(System.Net.WebRequest,Spotfire.Dxp.Services.SpotfirePrincipal,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.SpotfireOAuth2Authenticator.TryReAuthenticate(System.Exception,System.Collections.Generic.List{System.Net.Cookie})">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.SpotfireOAuth2Authenticator.TryReAuthenticate(Spotfire.Dxp.Services.ServerInformation,System.IServiceProvider)">
            <summary>Tries the re authenticate with server by poping dialog where user can launch browser to login again.</summary>
            <param name="serverInformation">The server information to reauthenticate with.</param>
            <param name="serviceProvider">The service provider.</param>
            <returns>If it succeeded to login again.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.ValidateSpotfireServerCredentials">
            <summary>
            Delegate used to validate credentials
            </summary>
            <param name="userName">The user name</param>
            <param name="password">The password.</param>
            <param name="errors">The errors; if any.</param>
            <returns>True if the credentials are valid; otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel">
            <summary>
            Prompt model for entering credentials to the Spotfire Server when
            the session is no longer authorized.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.server">
            <summary>
            The server information.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.username">
            <summary>
            The Spotfire Server username.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.validateCredentials">
            <summary>
            The credentials validator.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.password">
            <summary>
            The user entered password.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.#ctor(Spotfire.Dxp.Framework.Login.ValidateSpotfireServerCredentials,Spotfire.Dxp.Services.ServerInformation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel"/> class.
            </summary>
            <param name="validateCredentials">The credentials validator.</param>
            <param name="serverInformation">The server information.</param>
            <param name="initialUserName">Initial name of the user.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.Server">
            <summary>
            Gets the server information.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.Username">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.IsPasswordEnabled">
            <summary>
            Gets a value indicating whether the password field should be enabled.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.SpotfireServerCredentialsPromptModel.ValidateCredentials">
            <summary>
            Gets the validate credentials delegate.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.SpotfireWebAuthenticator">
            <summary>
            An authenticator that handles re-authentication for 
            a web browser based authentication mechanism. Currently
            only used for soap calls.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.SpotfireWebAuthenticator.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.SpotfireWebAuthenticator.#ctor(Spotfire.Dxp.Services.ServerInformation)">
            <summary>
             Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.SpotfireWebAuthenticator" /> class
            </summary>
            <param name="serverInformation">The server information.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.SpotfireWebAuthenticator.TryReAuthenticate(System.Exception,System.Collections.Generic.List{System.Net.Cookie})">
            <summary>Tries to re-authenticate the user.</summary>
            <param name="exceptionToCheck">The exception that might cause the reauthentication.</param>
            <param name="serverSessionIdsOnOriginalRequest">The <see cref="P:Spotfire.Dxp.Services.SpotfirePrincipal.ServerSessionIds"/> for the original request.</param>
            <returns>Returns <c>true</c> if the user was reauthenticated, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.WebLoginPromptModel">
            <summary>
            The web login prompt model
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.WebLoginPromptModel.#ctor(Spotfire.Dxp.Services.ServerInformation,Spotfire.Dxp.Framework.ApplicationModel.CobrandingService)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.WebLoginPromptModel"/> class.
            </summary>
            <param name="serverInformation">The server to login to.</param>
            <param name="cobranding">The cobranding service.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.WebLoginPromptModel.Cookies">
            <summary>
            Gets or sets the cookies from the web view after the user has logged in.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.WebLoginPromptModel.ServerInformation">
            <summary>
            Gets the server information.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.WebLoginPromptModel.ProductCaption">
            <summary>
            Gets the product caption
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.WebLoginPromptModel.LogoBannerImage">
            <summary>
            Gets the logo banner image.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.LoginInfo">
            <summary>
            Holds login information about a particular TIBCO Spotfire Server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfo.server">
            <summary>
            Server information.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfo.userAllowsRememberMe">
            <summary>
            Have the user allowed remember me.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfo.area">
            <summary>
            The server area.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfo.identity">
            <summary>
            The spotfire identity.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfo.modulesSpecifiedByServer">
            <summary>
            The modules specified by the server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfo.userAllowedRememberDeploymentArea">
            <summary>
            If the user has checked the "remember area" checkbox in the ChooseDeploymentArea dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfo.isInaccessible">
            <summary>
            Is the server currently inaccessible.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.LoginInfo"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.LoginInfo"/> class.
            </summary>
            <param name="serverUri">The server base uri</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.LoginInfo"/> class.
            </summary>
            <param name="serverUri">The server base uri.</param>
            <param name="area">The server deployment area.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.#ctor(System.Uri,System.String,Spotfire.Dxp.Services.SpotfireIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.LoginInfo"/> class.
            </summary>
            <param name="serverUri">The server base uri.</param>
            <param name="area">The server deployment area.</param>
            <param name="identity">The identity of the user.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.#ctor(Spotfire.Dxp.Services.ServerInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.LoginInfo"/> class.
            </summary>
            <param name="serverInformation">The server information.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.#ctor(Spotfire.Dxp.Framework.Login.LoginInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.LoginInfo"/> class.
            Copy contructor.
            </summary>
            <param name="other">Another instance to create a copy of.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Login.LoginInfo"/> class.</summary>
            <param name="info">The serialization info</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfo.UserAllowedRememberDeploymentArea">
            <summary>
            Gets or sets a value indicating whether the user allows remember deployment area.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfo.Server">
            <summary>
            Gets or sets information regarding the server logging into.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfo.ModulesSpecifiedByServer">
            <summary>
            Gets or sets the collection of modules specified by the server and server area the last time 
            this login info was used and successfully logged in to the server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfo.IsInaccessible">
            <summary>
            Gets or sets a value indicating whether the server is inaccessible.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfo.UserAllowsRememberMe">
            <summary>
            Gets or sets a value indicating whether the user allows remember me.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfo.HasCredentials">
            <summary>
            Gets a value indicating whether or not credentials are stored within this 
            <see cref="T:Spotfire.Dxp.Framework.Login.LoginInfo"/> object.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfo.Area">
            <summary>
            Gets or sets the server area.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfo.UpdateLocation">
            <summary>
            Gets the server update location.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfo.Identity">
            <summary>
            Gets or sets the identity of this login info. Can be null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.Compare(Spotfire.Dxp.Framework.Login.LoginInfo,Spotfire.Dxp.Framework.Login.LoginInfo)">
            <summary>
            Compares two LoginInfo objects based on their URI.
            </summary>
            <param name="x">One LoginInfo</param>
            <param name="y">Another LoginInfo</param>
            <returns>0 if the two instance are consider equals; otherwise a negative or positive integer.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.ValidateAgainstServer">
            <summary>
            Validates the login information against the server.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.Copy(Spotfire.Dxp.Framework.Login.LoginInfo)">
            <summary>
            Copies login information from another instance to this instance.
            </summary>
            <param name="other">The LoginInfo to copy information from.</param>
            <remarks>[ehsan, 2007-04-19] This method should be removed. All uses of it
            should be replaced with the copy constructor.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.ToString">
            <summary>
            Returns the string representation of the login information.
            </summary>
            <returns>A string representation of the login information.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.Equals(System.Object)">
            <summary>
            Tests that object is an LoginInfo and is equal to this one.
            </summary>
            <param name="obj">An object to compare against</param>
            <returns>True if the objects are equal</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.GetHashCode">
            <summary>
            Returns a hash code for the current state of the LoginInfo.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.TryLogin">
            <summary>
            Tries to login with the identity and authenticator (if any) specified in the loginInfo.
            This method will either return a principal or throw an exception.
            </summary>
            <exception>Throws FormatException</exception>
            <exception>Throws WebException</exception>
            <exception>Throws AuthenticationException</exception>
            <returns>A principal.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.Equals(Spotfire.Dxp.Framework.Login.LoginInfo,Spotfire.Dxp.Framework.Login.LoginInfo)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first LoginInfo to compare.</param>
            <param name="y">The second LoginInfo to compare.</param>
            <returns>true if the specified LoginInfo are equal; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.GetHashCode(Spotfire.Dxp.Framework.Login.LoginInfo)">
            <summary>
            Returns a hash code for the current state of specified LoginInfo.
            </summary>
            <param name="obj">The object to get the hash code for.</param>
            <returns>The hash code of the specified.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.Equals(Spotfire.Dxp.Framework.Login.LoginInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other"> An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implementes ISerializable.
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfo.GetAuthenticator">
            <summary>
            Creates and returns a suitable Autenticator for the specified login info.
            </summary>
            <returns>A suitable authenticator.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.LoginInfoCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfoCollection.logins">
            <summary>
            The set of login info objects contained in this collection. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfoCollection.chosenLogin">
            <summary>
            The login info for the server last/currently used.
            Invariant: This object is an element of the logins list.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfoCollection.lastLogin">
            <summary>
            The time of the last login to any server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.LoginInfoCollection.anyLoginLoadedFromFile">
            <summary>
            whether or not at least one login with correct time was loaded from settings file.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfoCollection.PreferredFilename">
            <summary>
            Gets the preferred filename.
            </summary>
            <value>The preferred filename.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfoCollection.UserHasPreviouslyLoggedIn">
            <summary>
            Gets whether or not the user has previsouly logged in onto a server.
            The value of this property is detected by looking at the 
            <see cref="P:Spotfire.Dxp.Framework.Login.LoginInfoCollection.LastLogin"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfoCollection.IsWorkOfflineAllowed">
            <summary>
            Gets whether or not it is allowed to work offline.
            </summary>
            <value>
            true iff the server allows us to work offline and if
            the maximum allowed number of days since the last login has not
            expired; otherwise false.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfoCollection.HasOfflineLicenseExpired">
            <summary>
            Gets whether or not the client license for working offline 
            (timebomb) has expired.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfoCollection.AnyLoginLoadedFromFile">
            <summary>
            Gets or sets whether or not at least one login with correct time was loaded from settings file.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Login.LoginInfoCollection.ChosenLogin">
            <summary>
            Gets or sets the chosen login info. Add the login info to the collection 
            if it does not already exist in the collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfoCollection.GetModulesInUse">
            <summary>
            Gets all modules currently used by any server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfoCollection.FindAll(System.Predicate{Spotfire.Dxp.Framework.Login.LoginInfo})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to search for.</param>
            <returns>A list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty list.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.LoginInfoCollection.Deserialize(System.String)">
            <summary>
            Deserializes a login info collection from the specified file.
            If an error is encountered, null is returned.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator">
            <summary>
            A specialized authenticator for windows integrated authentication.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.#ctor(Spotfire.Dxp.Services.ServerInformation)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator"/> class.
            </summary>
            <param name="serverInformation">
            Representation of the server to authenticate against.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.Authenticate(Spotfire.Dxp.Services.SpotfireIdentity,System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Authenticates the user as identified by the given identity and
            returns a principal object representing the user.
            </summary>
            <param name="identity">The identity of the user to log in.</param>
            <param name="culture">The users culture.</param>
            <param name="uiCulture">The users UI culture.</param>
            <returns>The principal of the logged in user.</returns>
            
            <exception cref="T:System.Net.WebException">a communication error or if the user cannot be logged in.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="identity"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">the user with the given <paramref name="identity"/> is already logged in.</exception>
            <exception cref="T:System.Security.Authentication.AuthenticationException">Could not authenticate user.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.LogonUserOnComputer(System.String,System.String)">
            <summary>Logon a user in windows.</summary>
            <param name="username">The username of the user.</param>
            <param name="password">The password of the user.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">If the login fails.</exception>
            <returns>A WindowsIdentity for the user, remember to dispose this.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods">
            <summary>Holds native methods for the Windows Login function.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LogonType">
            <summary>The logon type to use when logging in the Windows Account.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LogonType.LOGON32_LOGON_INTERACTIVE">
            <summary>This logon type is intended for users who will be interactively using the computer, such as a user being logged on by a terminal server, remote shell, or similar process. This logon type has the additional expense of caching logon information for disconnected operations; therefore, it is inappropriate for some client/server applications, such as a mail server.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LogonType.LOGON32_LOGON_NETWORK">
            <summary>This logon type is intended for high performance servers to authenticate plaintext passwords. The LogonUser function does not cache credentials for this logon type.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LogonType.LOGON32_LOGON_BATCH">
            <summary>This logon type is intended for batch servers, where processes may be executing on behalf of a user without their direct intervention. This type is also for higher performance servers that process many plaintext authentication attempts at a time, such as mail or web servers.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LogonType.LOGON32_LOGON_SERVICE">
            <summary>Indicates a service-type logon. The account provided must have the service privilege enabled.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LogonType.LOGON32_LOGON_UNLOCK">
            <summary>GINAs are no longer supported. Windows Server 2003 and Windows XP:  This logon type is for GINA DLLs that log on users who will be interactively using the computer.This logon type can generate a unique audit record that shows when the workstation was unlocked.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LogonType.LOGON32_LOGON_NETWORK_CLEARTEXT">
            <summary>This logon type preserves the name and password in the authentication package, which allows the server to make connections to other network servers while impersonating the client. A server can accept plaintext credentials from a client, call LogonUser, verify that the user can access the system across the network, and still communicate with other servers.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LogonType.LOGON32_LOGON_NEW_CREDENTIALS">
            <summary>This logon type allows the caller to clone its current token and specify new credentials for outbound connections. The new logon session has the same local identifier but uses different credentials for other network connections. This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LOGON32_PROVIDER_DEFAULT">
            <summary>
              Use the standard logon provider for the system. The default security provider is negotiate, unless you pass NULL for the domain name and the user name is not in UPN format. In this case, the default provider is NTLM.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Login.WindowsIntegratedAuthenticator.NativeMethods.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.Win32.SafeHandles.SafeFileHandle@)">
            <summary>
              The LogonUser function attempts to log a user on to the local computer. The local computer is the computer from which LogonUser was called. You cannot use LogonUser to log on to a remote computer. You specify the user with a user name and domain and authenticate the user with a plaintext password. If the function succeeds, you receive a handle to a token that represents the logged-on user. You can then use this token handle to impersonate the specified user or, in most cases, to create a process that runs in the context of the specified user.
            </summary>
            <param name="lpszUsername"> A pointer to a null-terminated string that specifies the name of the user. This is the name of the user account to log on to. If you use the user principal name (UPN) format, User@DNSDomainName, the lpszDomain parameter must be NULL. </param>
            <param name="lpszDomain"> A pointer to a null-terminated string that specifies the name of the domain or server whose account database contains the lpszUsername account. If this parameter is NULL, the user name must be specified in UPN format. If this parameter is ".", the function validates the account by using only the local account database. </param>
            <param name="lpszPassword"> A pointer to a null-terminated string that specifies the plaintext password for the user account specified by lpszUsername. When you have finished using the password, clear the password from memory by calling the SecureZeroMemory function. For more information about protecting passwords, see Handling Passwords. </param>
            <param name="dwLogonType"> The type of logon operation to perform. This parameter can be one of the following values, defined in Winbase.h. </param>
            <param name="dwLogonProvider"> Specifies the logon provider. This parameter can be one of the following values. </param>
            <param name="phToken"> A pointer to a handle variable that receives a handle to a token that represents the specified user. </param>
            <returns> If the function succeeds, the function returns nonzero. </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform">
            <summary>
            The intended platform, i.e operation system, for a module/package.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Windows">
            <summary>
            The Windows intended platform, this should correspond to modules/packages 
            that is applicable to both 32 an 64 bit version of Windows.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.WindowsX64">
            <summary>
            The Windows x64 intended platform also includeds <see cref="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Windows"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.WindowsX86">
            <summary>
            The Windows x86 intended platform, also includeds <see cref="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Windows"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.WindowsAll">
            <summary>
            The Windows intended platform for all related binaries which includeds 
            <see cref="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Windows"/>, <see cref="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.WindowsX64"/> and <see cref="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.WindowsX86"/>
            </summary>
            <remarks>This should only be used when a client wants to download all related packages</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Linux">
            <summary>
            The Linux intended platform.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.OSX">
            <summary>
            The OSX intended platform.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.platform">
            <summary>
            The name of the platform.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.additionalPlatforms">
            <summary>
            Additional platforms.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform"/> class.
            </summary>
            <param name="platform">The platform</param>
            <param name="additionalPlatforms">Additional platforms</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.MyPlatform">
            <summary>
            Gets the intended platform for my current process, i.e. 64 bit version will return
            <see cref="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.WindowsX64"/> and 32 bit will return <see cref="F:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.WindowsX86"/>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Parse(System.String)">
            <summary>
            Parses the specified string to an IntendedPlatform
            </summary>
            <param name="platform">the string to parse</param>
            <returns>The intended platform for the specified string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Equals(Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform)">
            <summary>
            Determines if the specified platform is equal to the current.
            </summary>
            <param name="other">The platform to compare with the current.</param>
            <returns>true if the specified platform  is equal to the current; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Includes(Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform)">
            <summary>
            Checks if the specified platform is included in this platform.
            </summary>
            <param name="intendedPlatform">The intended platform to check.</param>
            <returns>True of the specified platform is included in this platform; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.IntendedPlatform.Includes(Spotfire.Dxp.Framework.ModuleHandling.ServerModule)">
            <summary>
            Checks if the specified mopule is included in this platform.
            </summary>
            <param name="module">The module to check.</param>
            <returns>True of the specified module is included in this platform; otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.AddInsHelper">
            <summary>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding.AssemblyName">
            <summary>
            Gets the assembly name.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding.MinVersionString">
            <summary>
            Gets the lowest compatible version as a string.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding.MinVersion">
            <summary>
            Gets the lowest compatible version as a Version.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding.MaxVersionString">
            <summary>
            Gets the highest compatible version as a string.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding.MaxVersion">
            <summary>
            Gets the highest compatible version as a Version.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding.IsCompatibleWith(System.Version)">
            <summary>
            True is this assembly binding matches the specified version.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding.IsCompatibleWith(System.Reflection.AssemblyName)">
            <summary>
            True is this assembly binding matches the assembly name.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.ClientModule">
            <summary>
            Represents a module.xml file in a Spotfire module.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.DocumentFileName">
            <summary>The name of the module file (module.xml).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.ModuleRootFolderPath">
            <summary>
            Used as path prefix to indicate that a path is relative to the folder where 
            a module is unpacked, rather than absolute.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.languagePackCulture">
            <summary>If not null, this is a language pack for the specified culture.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.webPlayerContentFolder">
            <summary>If not null, this module has files that shall be installed under
            the webroot in the Web Player. All these located in the folder specified by this field.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.FolderPath">
            <summary>
            Gets the absolute path to the folder conaining the module.xml and all other 
            files that make up the module contents.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Id">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Name">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Version">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Bindings">
            <summary>
            Gets the bindings.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Extensions">
            <summary>
            Gets the extensions.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.IntendedClient">
            <summary>
            Gets or sets the package intendend client.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Capability">
            <summary>
            Gets or sets the package service capabilities.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.ConfigurationFiles">
            <summary>
            Gets the configuration files.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.IntendedPlatform">
            <summary>
            Gets or sets the intendend platform (Operation System)
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Resources">
            <summary>
            Gets the resources.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.LanguagePackCulture">
            <summary>
            Gets or sets the language pack culture.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.WebPlayerContentFolder">
            <summary>
            Gets or sets the web player content folder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.#ctor(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ClientModule"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
            <param name="folderPath">The folder path.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ClientModule"/> class.
            </summary>
            <param name="folderPath">The path to the folder conaining the module.xml and all other 
            files that make up the module contents.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ClientModule"/> class from being created.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Load(System.String)">
            <summary>
            Loads a <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ClientModule"/> instance from the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <returns>A new  <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ClientModule"/> instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ClientModule"/> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Validate">
            <summary>
            Throws an exception if this instance is not valid.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.InitModule(System.Xml.XmlElement)">
            <summary>
            Initializes the module.
            </summary>
            <param name="rootElement">The root element.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.GetBestMatchingAssemblyBinding(System.Reflection.AssemblyName,Spotfire.Dxp.Framework.ModuleHandling.AssemblyBinding@)">
            <summary>
            Gets the best matching assembly binding.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if a matching assembly binding was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Determined if the two specified byte arrays are equal.
            </summary>
            <param name="first">The first byte array to compare.</param>
            <param name="second">The second byte array to compare.</param>
            <returns><c>true</c> if the byte arrays are equal.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.SaveDescriptionFile(System.String)">
            <summary>
            Saves the client module description file to the specified path.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.Write(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes this instance as an element with the specified element name to the specified xml writer.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="xmlWriter">The XML writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModule.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ClientModuleCollection class. Modules are read from the 
            module.xml in the folder with the specified path or from its immediate sub folders.
            </summary>
            <param name="pathToSearch">The path to a folder in which to search for modules.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection.Add(System.String,System.Predicate{Spotfire.Dxp.Framework.ModuleHandling.ClientModule})">
            <summary>
            Adds the specified client module to this collection. If a client module with the
            same Id already exists in the collection, it will be replaced if the specified
            client module has a strictly higher version.
            </summary>
            <param name="pathToSearch">The path to a folder in which to search for modules.</param>
            <param name="skipModulesFilter">The skip modules filter.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection.Add(Spotfire.Dxp.Framework.ModuleHandling.ClientModule)">
            <summary>
            Adds the specified client module to this collection. If a client module with the 
            same Id already exists in the collection, it will be replaced if the specified 
            client module has a strictly higher version.
            </summary>
            <param name="clientModule"></param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection.Count">
            <summary>
            Gets the count of modules in this collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection.ResolveReference(System.Reflection.AssemblyName)">
            <summary>
            Gets the assembly binding that matches the specified assembly name, or null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection.ReadClientModules(System.Collections.Generic.IEnumerable{System.String},Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection,Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection@)">
            <summary>
            Reads a ClientModuleCollection according to the specification or from the 
            module folders.
            </summary>
            <param name="moduleFolders">The folders to search for modules in.</param>
            <param name="specification">The specification of the modules and versions that shall be read
            or null to read all available modules.</param>
            <param name="clientModules">The modules read from disk.</param>
            <returns>true if all specified modules where found, false otherwise or if no specification is given.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection.GetAllModules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all client modules in the specified module folders.
            </summary>
            <param name="moduleFolders"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection.TryReadModuleFromFolder(System.String,Spotfire.Dxp.Framework.ModuleHandling.ClientModule@)">
            <summary>
            Tries to read a client module from the specified folder.
            </summary>
            <param name="folderPath">The path to the folder where the module.xml file resides.</param>
            <param name="clientModule">The read client module or null.</param>
            <returns>true if a client module was read, otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ClientModuleCollection.ReadModulesFromFolderOrImmediateSubFolders(System.String)">
            <summary>
            Reads client modules from the specified folder or all immediate sub folders.
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference">
            <summary>
            Represents a referens to a module that has been downloaded from the server. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.seriesId">
            <summary>
            The series id of the referred module.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.name">
            <summary>
            The name of the referred module.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.version">
            <summary>
            The version of the referred module.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.pathHint">
            <summary>
            The absolute path to the folder from which the referred module was last loaded.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference"/> class. The specified xmlElement.
            is assumed to be the "module" element.
            </summary>
            <param name="xmlElement">The Xml element from which to read and initialize a new ModuleReference instance.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.#ctor(System.Guid,System.String,System.Version,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference"/> class.
            </summary>
            <param name="seriesId">The series id of the referred module.</param>
            <param name="name">The name of the referred module.</param>
            <param name="version">The version of the referred module.</param>
            <param name="pathHint">The absolute path to the folder from which the referred module was last loaded.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.#ctor(System.Guid,System.String,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference"/> class.
            </summary>
            <param name="seriesId">The series id of the referred module.</param>
            <param name="name">The name of the referred module.</param>
            <param name="version">The version of the referred module.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.SeriesId">
            <summary>
            Gets the series id of the referred module.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.Name">
            <summary>
            Gets the name of the referred module.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.Version">
            <summary>
            Gets the version of the referred module.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.PathHint">
            <summary>
            Gets the absolute path to the folder from which the referred module was last loaded.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReference.Write(System.Xml.XmlWriter)">
            <summary>
            Writes this instance to the specified xmlWriter.
            </summary>
            <param name="xmlWriter">The xmlWriter to write this instance to.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection">
            <summary>
            Represents a collection of module references
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.modules">
            <summary>
            The module references in this collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection"/> class. The specified xmlElement.
            is assumed to be the "modules" element.
            </summary>
            <param name="xmlElement">The Xml element from which to read and initialize a new ServerModules instance.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.Count">
            <summary>
            Gets the count of module references in this collection.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.Item(System.Guid)">
            <summary>Gets the module reference with the specified id, or null.
            </summary>
            <param name="seriesId">
            The module series id.
            </param>
            <returns>The value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.Read(System.String)">
            <summary>
            Reads a ModuleReferenceCollection from the specified string.
            </summary>
            <param name="xmlString">A string containing an xml representation of a ModuleReferenceCollection.</param>
            <returns>The ModuleReferenceCollection read from the string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.ReadFromFile(System.String)">
            <summary>
            Reads a ModuleReferenceCollection from the specified file.
            This method is robust as it does not throw exceptions on failure but returns null.
            </summary>
            <param name="filePath">The path to the file containing an xml representation of a ModuleReferenceCollection.</param>
            <returns>A ModuleReferenceCollection or null.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.HasReferencesToAllEssentialModulesInTheSpotfireDistribution">
            <summary>
            Checks if this collection contains references to all important modules in the Spotfire Distribution.
            </summary>
            <returns>true if this collection contains references to all important modules in the Spotfire Distribution.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.WriteToString">
            <summary>
            Writes an xml representation of this ModuleReferenceCollection to a string.
            </summary>
            <returns>A string with an xml representation of this ModuleReferenceCollection.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.WriteToFile(System.String)">
            <summary>
            Writes an xml representation of this ModuleReferenceCollection to the specified file.
            </summary>
            <param name="filePath">The path to the file where this ModuleReferenceCollection shall be written.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.Add(Spotfire.Dxp.Framework.ModuleHandling.ModuleReference)">
            <summary>
            Adds the specified module reference to this collection
            </summary>
            <param name="moduleReference">The module reference to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.Contains(System.Guid,System.Version)">
            <summary>
            Determines if this collection has a reference to a module with the specified series id and version.
            </summary>
            <param name="seriesId">The series id.</param>
            <param name="version">The version.</param>
            <returns>True if this collection has a reference to a module with the specified series id and version.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.Contains(System.Guid)">
            <summary>
            Determines if this collection has a reference to a module with the specified series id.
            </summary>
            <param name="seriesId">The series id.</param>
            <returns>True if this collection has a reference to a module with the specified series id.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.Write(System.Xml.XmlWriter)">
            <summary>
            Writes this ModuleReferenceCollection  to the specified xmlWriter.
            </summary>
            <param name="xmlWriter">The xmlWriter to write this ModuleReferenceCollection to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the module references in this collection.
            </summary>
            <returns>An enumerator for the module references in this collection</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleReferenceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the module references in this collection.
            </summary>
            <returns>An enumerator for the module references in this collection</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.IntendedClient.GetClients">
            <summary>
            Gets all official clients that should be displayed 
            in the PackageBuilder UI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.Module.IsSpotfireModule(System.Guid)">
            <summary>
            Returns true if the specified series id is for one of the Spotfire modules.
            </summary>
            <param name="seriesId"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.Module.IsSpotfireModule(System.String)">
            <summary>
            Returns true if the specified series id is for one of the Spotfire modules.
            </summary>
            <param name="seriesId"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.Module.GetSpotfireDistributionModuleSeriesIds">
            <summary>
            Gets a list of the series ids of the modules included in a Spotfire Distribution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.Module.IsSpotfireModule">
            <summary>
            Returns true if this is one of the Spotfire modules.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.Module.AddSpotfireModule(System.String)">
            <summary>
            Adds a module (package) id to the list of Spotfire owned.
            </summary>
            <param name="seriesId">The GUID for the module</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.ModuleInfo">
            <summary>
            Describes a module. Used by LoginInfo to remember which modules that are specified 
            by the server.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.ModuleInfoCollection">
            <summary>
            Represents a collection of module info objects.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleInfoCollection.ToModuleReferences">
            <summary>
            Builds a module reference collection representing all modules in this collection.
            </summary>
            <returns>A collection of module references.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleInfoCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ModuleInfoCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.Resource">
            <summary>
            Represents a resource in a module. 
            A Resource is just a file included in a module that is given a public identifier 
            consisting of a name and an optional culture.
            The ModulesService can be used to lookup resources in a running DXP instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.Resource.FullPath">
            <summary>
            Gets the absolute path to the resource file.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.Resource.RelativePath">
            <summary>
            Gets the resource file's path relative the defining module file.
            </summary>
            <value>The relative path.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.Resource.PublicName">
            <summary>
            Gets the public name of this resouce.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.Resource.Culture">
            <summary>
            Gets the culture of this resouce.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.Resource.Identifier">
            <summary>
            Gets the identifier of this resouce.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.ResourceIdentifier">
            <summary>
            Identifies a resource with a name and an optional culture.
            Omitting the culture is the same as specifying the invariant culture.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ResourceIdentifier.name">
            <summary>
            The name of the resource. Always non-null and non-empty.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ResourceIdentifier.culture">
            <summary>
            The culture of the resource. Always defined.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ResourceIdentifier.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a resource identifier from a name and an optional culture.
            </summary>
            <param name="name"></param>
            <param name="culture"></param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ResourceIdentifier.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ResourceIdentifier.Culture">
            <summary>
            Gets the culture.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ResourceIdentifier.CreateFromAttributes(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Creates a ResourceIdentifier from the attribues on the specified xml element.
            Returns null if the correct attributes are not found.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.ServerModule">
            <summary>
            Represents a module deployed on the server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ServerModule.Id">
            <summary>
            Gets the Id of the module deployed on the server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ServerModule.Name">
            <summary>
            Gets the Name of the module deployed on the server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ServerModule.Version">
            <summary>
            Gets the Version of the module deployed on the server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ServerModule.Path">
            <summary>
            Gets the relative path to the cab file of the module deployed on the server.
            The path is relative to the base download URI, which is the UpdateLocation 
            of the Area on the server from which this ServerModule instance was retrieved.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ServerModule.IntendedClient">
            <summary>
            Gets the intended client of the module deployed on the server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ServerModule.IntendedPlatform">
            <summary>
            Gets the intended platform of the module deployed on the server.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ModuleHandling.ServerModule.IsPre31SpotfireModule">
            <summary>
            Returns true if this is a Spotfire module with a version less than those shipped in 3.1.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ModuleHandling.ServerModules">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ModuleHandling.ServerModules.Log">
            <summary>
            The server modules logger.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ModuleHandling.ServerModules.ForceUpdate">
            <summary>
            Gets a value indicating if the deployment was published with the Force Update flag. If so,
            the user shall not be allowed to select "Later" in the update dialog.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent">
            <summary>
            The abstract analysis life cycle event.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent"/> class.
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent"/> class.</summary>
            </summary>
            <param name="action">The life cycle event action.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.WebAnalysisId">
            <summary>
            Gets or sets the web analysis identifier (waid)
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.AnalysisLibraryPath">
            <summary>
            Gets or sets the analysis library path associated 
            with this life cycle event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.AnalysisLibraryId">
            <summary>
            Gets or sets the analysis library identifier associated 
            with this life cycle event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.AnalysisModified">
            <summary>
            Gets or sets the analysis modified date.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.Action">
            <summary>
            Gets the action associated 
            with this life cycle event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.JobDefinitionId">
            <summary>
            Gets or sets the associated job definition id.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.JobInstanceId">
            <summary>
            Gets or sets the associated job instance id.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.FormattedAnalysisModified">
            <summary>
            Gets or sets formatted analysis modified date.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AnalysisLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.AutomationServicesJobLifeCycleEvent">
            <summary>
            A automation services life cycle event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AutomationServicesJobLifeCycleEvent.JobId">
            <summary>
            Gets or sets the Job Id
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AutomationServicesJobLifeCycleEvent.JobStatus">
            <summary>
            Gets or sets the Job Status
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AutomationServicesJobLifeCycleEvent.JobStatusText">
            <summary>
            Gets or sets the Job Status Message
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AutomationServicesJobLifeCycleEvent.SequenceNumber">
            <summary>Gets or sets the sequence number for the status message in this job.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.AutomationServicesJobLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.ErrorCodes">
            <summary>
            Those error codes are used by the ClosedAnalysisLifeCycleEvent when opening the analysis failed to show what went wrong.
            When changed are made, notify the TSS developer team.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.ClosedReason">
            <summary>
            The closed reason
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.UserLoggedOut">
            <summary>
            User logged out.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.Exception">
            <summary>
            An exception occurred.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.ClosedByAdministrator">
            <summary>
            Closed by an administrator.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.ClosedByUser">
            <summary>
            Closed by the user.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.CanceledByUser">
            <summary>
            Canceled by the user.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.ScheduledUpdates">
            <summary>
            A bit unclear, something to do with scheduled updates.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.DifferentServer">
            <summary>
            The identifier comes from a different server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.Restart">
            <summary>
            The server was restarted or the waid is on a different server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.Idle">
            <summary>
            The document was idle for too long.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.Stale">
            <summary>
            The document was stale.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosedReason.Unknown">
            <summary>
            Unknown reason.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent">
            <summary>
            The closed analysis life cycle event.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent"/> class.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent.ClosedReason">
            <summary>
            Gets or sets the reason for the closed analysis.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent.ClosedReasonString">
            <summary>
            Gets or sets the reason for the closed analysis. Is used to serialize enum value as a string
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent.ErrorMessage">
            <summary>
            Gets or sets the error user message or error message 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent.ErrorCode">
            <summary>
            Gets or sets the error user message or error message 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent.ErrorDetails">
            <summary>
            Gets or sets the error details.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent.CanRetry">
            <summary>
            Gets or sets a value indicating whether scheduled updates can ever succeed to load this one - is there any point of retrying?
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosedAnalysisLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.ClosingReason">
            <summary>
            The reason for closing an analysis.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosingReason.ScheduledUpdates">
            <summary>
            Closing by schedules updates because of explicit unloading or that a schedule is no longer active.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.ClosingReason.ClosingByUser">
            <summary>
            Closing initiated by user.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.ClosingAnalysisLifeCycleEvent">
            <summary>
            The closing analysis life cycle event.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.ClosingAnalysisLifeCycleEvent.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.ClosingAnalysisLifeCycleEvent"/> class.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosingAnalysisLifeCycleEvent.ClosingReason">
            <summary>
            Gets or sets the reason for closing the analysis.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosingAnalysisLifeCycleEvent.ClosingReasonString">
            <summary>
            Gets or sets the reason for closing the analysis. Is used to serialize enum value as a string.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ClosingAnalysisLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.CreatedUserSessionLifeCycleEvent">
            <summary>
            Created user session life cycle event
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.CreatedUserSessionLifeCycleEvent.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.CreatedUserSessionLifeCycleEvent"/> class.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.CreatedUserSessionLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent">
            <summary>
            A life cycle event for health status changed.
            The class name is bad since this was about memory only initially.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.cpuStatus">
            <summary>
            The CPU status value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.memoryStatus">
            <summary>
            The memory status value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.pagingStatus">
            <summary>
            The memory status value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.wcfStatus">
            <summary>
            The WCF status value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.diskStatus">
            <summary>
            The memory status value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.averageNodeCpuUsage">
            <summary>
            the average node CPU %.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.averageInstanceCpuUsage">
            <summary>
            the average instance CPU %.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.averageCpuUsage">
            <summary>
            the average CPU %.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.currentNodeCpuUsage">
            <summary>
            the current node CPU %.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.currentInstanceCpuUsage">
            <summary>
            the current instance CPU %.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.currentInstanceMemoryUsage">
            <summary>
            the current instance memory usage.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.availableScheduledUpdatesSlots">
            <summary>
            the number of available scheduled updates slots.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.maxScheduledUpdatesSlots">
            <summary>
            Max number of scheduled updates slots.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.outstandingWcfCalls">
            <summary>
            The number of outstanding WCF calls.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.memoryAvailableMb">
            <summary>
            the memory available MB.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.memoryAvailablePercentage">
            <summary>
            the memory available %.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.cachedDocs">
            <summary>
            Number of cached documents.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.openDocs">
            <summary>
            Number of open documents.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.runningQueries">
            <summary>
            Number of currently running queries.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.addedReason">
            <summary>
            Used for explanation string generation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.#ctor(Spotfire.Dxp.Internal.Utilities.HealthStatus.Status,Spotfire.Dxp.Internal.Utilities.HealthStatus.Status,Spotfire.Dxp.Internal.Utilities.HealthStatus.Status,Spotfire.Dxp.Internal.Utilities.HealthStatus.Status,Spotfire.Dxp.Internal.Utilities.HealthStatus.Status,System.Double,System.Double,System.Int64,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent"/> class.
            </summary>
            <param name="cpuStatus">An integer between 0 and 10 that describes the degree of CPU load.</param>
            <param name="memoryStatus">An integer between 0 and 10 that describes the degree of memory load.</param>
            <param name="pagingStatus">An integer between 0 and 10 that describes the degree of data paging.</param>
            <param name="diskStatus">An integer between 0 and 10 that describes the amount of free temp disk space.</param>
            <param name="wcfStatus">An integer between 0 and 10 that describes the degree of WCF traffic.</param>
            <param name="nodeCurrentCpu">The current CPU % value for the node.</param>
            <param name="instanceCurrentCpu">The current CPU % value for the instance.</param>
            <param name="instanceCurrentMemory">The current memory usage.</param>
            <param name="cachedDocs">Number of cached documents.</param>
            <param name="openDocs">Number of open documents.</param>
            <param name="runningQueries">Number of currently running queries</param>
            <param name="outstandingWcfCalls">Number of outstanding WCF calls</param>
            <param name="availableScheduledUpdatesSlots">Number of available scheduled updates slots</param>
            <param name="maxScheduledUpdatesSlots">Max number of scheduled updates slots</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.Status">
            <summary>
            Gets the overall System status.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.CpuStatus">
            <summary>
            Gets the System CPU status.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.MemoryStatus">
            <summary>
            Gets the System memory status.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.PagingStatus">
            <summary>
            Gets the paging status.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.WcfStatus">
            <summary>
            Gets the WCF status.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.DiskStatus">
            <summary>
            Gets the paging status.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.AverageCpuUsage">
            <summary>
            Gets the average CPU %.
            Depending on the setting WebPlayer_AverageCpuLoadCountOnlyCurrentProcess the global or the value for this instance only will be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.AverageInstanceCpuUsage">
            <summary>
            Gets the average instance CPU %.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.AvailableDiskMb">
            <summary>
            Gets the available MB disk space (temp disk).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.AverageNodeCpuUsage">
            <summary>
            Gets the average node CPU %.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.CurrentInstanceCpuUsage">
            <summary>
            Gets the average instance CPU %.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.CurrentInstanceMemoryUsage">
            <summary>
            Gets the current instance memory usage.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.OutstandingWcfCalls">
            <summary>
            Gets the current instance memory usage.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.CurrentInstanceMemoryUsagePercentage">
            <summary>
            Gets the current instance memory usage.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.CurrentNodeCpuUsage">
            <summary>
            Gets the average node CPU %.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.MemoryAvailablePercentage">
            <summary>
            Gets the memory available %.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.AvailableScheduledUpdatesSlots">
            <summary>
            Gets the number of available scheduled updates slots.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.MaxScheduledUpdatesSlots">
            <summary>
            Gets the max number of scheduled updates slots.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.CachedDocuments">
            <summary>
            Gets the number of cached documents.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.OpenDocuments">
            <summary>
            Gets the number of open documents.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.CurrentRunningQueries">
            <summary>
            Gets the number of currently running queries.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.MemoryAvailableMb">
            <summary>
            Gets the memory available in MB.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.Explanation">
            <summary>
            Gets an explanation to the current status.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.Contents">
            <inheritdoc />
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.MemoryStatusChangedMonitoringEvent.GetPercentage(System.Double)">
            <summary>
            Make sure to get a value between 0 and 100.
            </summary>
            <param name="v">The percentage.</param>
            <returns>The resulting percentage.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.MessageEnvelop">
            <summary>
            A message envelop.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.MessageEnvelop.#ctor(Spotfire.Dxp.Framework.Monitoring.LifeCycleEvent,Spotfire.Dxp.Framework.Monitoring.EventSender)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.MessageEnvelop"/> class.</summary>
            <param name="lifeCycleEvent">The life Cycle Event.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MessageEnvelop.LifeCycleEvent">
            <summary>
            Gets life cycle event for given message envelop.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.MessageEnvelop.EventSender">
            <summary>
            Gets life cycle event sender.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.EventSender">
            <summary>
            An event sender.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.EventSender.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.EventSender"/> class.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.EventSender.Type">
            <summary>
            Gets the sender type. Type is final and used as a discriminator.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.EventSender.WebPlayerInstanceId">
            <summary>
            Gets or sets the web player instance id.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.EventSender.ServiceId">
            <summary>
            Gets or sets the node manager service instance id. It identifies a service in the topology
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.EventSender.Uri">
            <summary>
            Gets or sets the worker host base uri.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.LifeCycleEvent">
            <summary>
            A life cycle event.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.LifeCycleEvent.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.LifeCycleEvent"/> class.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.LifeCycleEvent.FormattedTimestampUtc">
            <summary>
            Gets or sets formatted timestamp, expressed in Coordinated Universal Time (UTC), when the life cycle event was created.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.LifeCycleEvent.TimestampUtc">
            <summary>
            Gets or sets the timestamp, expressed in Coordinated Universal Time (UTC), when the life cycle event was created.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.LifeCycleEvent.FormattedTimestamp">
            <summary>
            Gets or sets formatted timestamp, expressed as the local time, when the life cycle event was created.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.LifeCycleEvent.Timestamp">
            <summary>
            Gets or sets the timestamp, expressed as the local time, when the life cycle event was created.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.LifeCycleEvent.Contents">
            <summary>
            Gets a string with all relevant event values in it.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.NotificationType">
            <summary>
            The NotificationType
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.NotificationType.LowTempDisk">
            <summary>
            The service instance has low available temp disk space.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.NotificationType.LongUpTime">
            <summary>
            The service instance has been up for a very long time.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.NotificationType.ExcessivePaging">
            <summary>
            Excessive paging recently.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.NotificationType.ManyErrors">
            <summary>
            Many errors recently.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.NotificationType.StartStop">
            <summary>
            Service was started or stopped.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.Seriousness">
            <summary>
            The Seriousness
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.Seriousness.Panic">
            <summary>
            Panic Seriousness: action is needed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.Seriousness.Critical">
            <summary>
            Critical Seriousness
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.Seriousness.Warning">
            <summary>
            Warning Seriousness
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.Seriousness.Info">
            <summary>
            Info Seriousness
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.Seriousness.Ok">
            <summary>
            Ok Seriousness
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.NotificationLifeCycleEvent">
            <summary>
            The closed analysis life cycle event.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.NotificationLifeCycleEvent.#ctor(Spotfire.Dxp.Framework.Monitoring.NotificationType,Spotfire.Dxp.Framework.Monitoring.Seriousness,System.Double,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.NotificationLifeCycleEvent"/> class.</summary>
            <param name="notificationType">The type of notification.</param>        
            <param name="seriousness">The degree of seriousness</param>
            <param name="value">The reason for the event.</param>
            <param name="explanation">A string that describes the notification.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.NotificationLifeCycleEvent.NotificationType">
            <summary>
            Gets or sets the NotificationType for the event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.NotificationLifeCycleEvent.Value">
            <summary>
            Gets or sets the describing value.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.NotificationLifeCycleEvent.Explanation">
            <summary>
            Gets or sets an explanation or suggested action.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.NotificationLifeCycleEvent.Seriousness">
            <summary>
            Gets or sets the Seriousness.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.NotificationLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.OpenedReason">
            <summary>
            The opened reason.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpenedReason.ScheduledUpdates">
            <summary>
            The analysis was opened 
            by scheduled updates, either by explicit load
            of an analysis (external event) or that a schedule
            is now active
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpenedReason.OpenedByUser">
            <summary>
            The analysis opened by a user.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.OpenedResult">
            <summary>
            The opened result, mainly used by scheduled updates.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpenedResult.Unknown">
            <summary>
            Unknown, default value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpenedResult.Load">
            <summary>
            The analysis was loaded from scratch
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpenedResult.Update">
            <summary>
            The analysis was updating
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpenedResult.NoChange">
            <summary>
            There was no update, since the no modification
            was found.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpenedResult.Canceled">
            <summary>
            There was no update, since another update was already in progress.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent">
            <summary>
            The opened analysis life cycle event.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent.loadTimeTicks">
            <summary>
            LoadTimeTicks field.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent"/> class.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent.OpenedReason">
            <summary>
            Gets or sets the reason for the opened analysis.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent.OpenedReasonString">
            <summary>
            Gets or sets the reason for the opened analysis. Is used to serialize enum value as a string.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent.OpenedResult">
            <summary>
            Gets or sets the result for the opened analysis.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent.OpenedResultString">
            <summary>
            Gets or sets the result for the opened analysis. Is used to serialize enum value as a string.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent.LoadTime">
            <summary>
            Sets the time it took to open the analysis.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent.CanceledAnalysisLibraryId">
            <summary>
            Gets or sets the analysis library identifier associated with a canceled life cycle event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpenedAnalysisLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.OpeningReason">
            <summary>
            The opening reason
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpeningReason.ScheduledUpdates">
            <summary>
            The opening of the analysis is initiated  by scheduled updates, either by explicit load
            of an analysis (external event) or that a schedule is now active
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.OpeningReason.OpeningByUser">
            <summary>
            The opening of the analysis is initiated by a user.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.OpeningAnalysisLifeCycleEvent">
            <summary>
            The opening analysis life cycle event.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.OpeningAnalysisLifeCycleEvent.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.OpeningAnalysisLifeCycleEvent"/> class.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpeningAnalysisLifeCycleEvent.OpeningReason">
            <summary>
            Gets or sets the reason for opening an analysis.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpeningAnalysisLifeCycleEvent.OpeningReasonString">
            <summary>
            Gets or sets the reason for opening an analysis. Is used to serialize enum value as a string.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.OpeningAnalysisLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.RecycleReason">
            <summary>
            The closed reason
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.RecycleReason.Idle">
            <summary>
            The service instance is idling and may be recycled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.RecycleReason.UsersLoggedIn">
            <summary>
            Users are logged in.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.RecycleReason.OutOfDisk">
            <summary>
            We are out of disk.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.RecycleReason.AutomationServicesJobsRunning">
            <summary>
            Users are logged in.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.RecycleReason.TooEarly">
            <summary>
            Too early to recycle the process.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Monitoring.RecycleReason.Unknown">
            <summary>
            Unknown reason.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.RecycleStatusLifeCycleEvent">
            <summary>
            The closed analysis life cycle event.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.RecycleStatusLifeCycleEvent.#ctor(System.Boolean,Spotfire.Dxp.Framework.Monitoring.RecycleReason)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.RecycleStatusLifeCycleEvent"/> class.</summary>
            <param name="mayBeRecycled">Indicating whether the service instance may be recycled or not.</param>
            <param name="reason">The reason for the event.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.RecycleStatusLifeCycleEvent.RecycleReason">
            <summary>
            Gets or sets the reason for the event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.RecycleStatusLifeCycleEvent.MayBeRecycled">
            <summary>
            Gets or sets a value indicating whether the service instance may be recycled or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.RecycleStatusLifeCycleEvent.ReasonString">
            <summary>
            Gets or sets the reason for the event. Is used to serialize enum value as a string
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.RecycleStatusLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.ReleaseCachedAnalysisLifeCycleEvent">
            <summary>
            The released cached analysis life cycle event, emitted when
            analysis are released from the DocumentCache.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.ReleaseCachedAnalysisLifeCycleEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.ReleaseCachedAnalysisLifeCycleEvent"/> class.
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.ReleaseCachedAnalysisLifeCycleEvent"/> class.</summary>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ReleaseCachedAnalysisLifeCycleEvent.ReferenceCount">
            <summary>
            Gets or sets the number of referenced instances of
            the analysis file.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.ReleaseCachedAnalysisLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.RemovedUserSessionLifeCycleEvent">
            <summary>
            Removed user session life cycle event
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.RemovedUserSessionLifeCycleEvent.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.RemovedUserSessionLifeCycleEvent"/> class.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.RemovedUserSessionLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.UserLifeCycleEvent">
            <summary>
            A life cycle event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.UserLifeCycleEvent.UserName">
            <summary>
            Gets or sets the user name associated with this
            life cycle event, e.g who initiated the life cycle event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.UserLifeCycleEvent.UserSessionId">
            <summary>
            Gets or sets the user session id associated with this
            life cycle event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.UserLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Monitoring.UserSessionLifeCycleEvent">
            <summary>
            User session life cycle event
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Monitoring.UserSessionLifeCycleEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.UserSessionLifeCycleEvent"/> class.
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Monitoring.UserSessionLifeCycleEvent"/> class.</summary>
            </summary>
            <param name="action">The life cycle event action.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.UserSessionLifeCycleEvent.Action">
            <summary>
            Gets the action associated 
            with this life cycle event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Monitoring.UserSessionLifeCycleEvent.Contents">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistanceCompatibilityDocumentIndependentAttribute">
            <summary>
            Represents an attribute that is supposed to guarantee that the class
            does not depend on the document. Used in combination with standins
            to guarantee that the class the standin is a stand in for will not
            end up in a inconsistent state when it, at a later point in the 
            life time of the document, replaces the standin.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistanceCompatibilityDocumentIndependentAttribute.IsDocumentIndependent(System.Type)">
            <summary>
            Determines whether the type does not depend on the document state.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the type has the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistanceCompatibilityDocumentIndependentAttribute"/> 
            and thereby guarantee that it does not depend on the document state.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo">
            <summary>
            Collects statistics data for document loading.
            Can as well be used for time measurement of any other process. The results are visible in DiagnosticsDialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.loadEntries">
            <summary>
            General load information.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.InfoType">
            <summary>
            Type of load information. Should be used as a parameter to 
            <see cref="M:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.BeginLoadBlock(Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.InfoType)"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.InfoType.DocumentLoadTime">
            <summary>
            Indicates block that performes document unzipping and deserialization.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.LoadEntries">
            <summary>
            Gets general load information as name-value pairs.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.BeginLoadBlock(Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.InfoType)">
            <summary>
            Starts counting time of specified block.
            </summary>
            <param name="entryName">Type of loading.</param>
            <returns><see cref="T:System.IDisposable"/> instance for counting time. 
            The counting stops once the instance is disposed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.BeginLoadBlock(System.String)">
            <summary>
            Starts counting time of specified block.
            </summary>
            <param name="entryName">Type of loading, which can be any string.</param>
            <returns><see cref="T:System.IDisposable"/> instance for counting time. 
            The counting stops once the instance is disposed.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch">
            <summary>
            A utility class that can measure time.
            Starts measuring when constructed and stops when disposed.     
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch.parent">
            <summary>
            The outer class instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch.#ctor(Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch"/> class. 
            </summary>
            <param name="parent">Outer class</param>
            <param name="name">Loading information name</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch"/> class.
            A default constructor to enable class inheritance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch"/> class. 
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch.Name">
            <summary>
            Gets or sets name of loading information.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch.Stopwatch">
            <summary>
            Gets or sets stopwatch instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch.Start">
            <summary>
            Starts the stopwatch.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DocumentLoadInfo.DisposableStopwatch.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection">
            <summary>
            A collection of callbacks that will be called when a document has been loaded inorder to 
            resolve compatibility issues.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection.compatibilityConfigureCallbacks">
            <summary>
            The callbacks to call later together with the document node that they map to.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection.Clone(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Clones the specified old document.
            </summary>
            <param name="newDocument">The new document.</param>
            <returns>A new compatibility callback collection which references the new document.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection.AddCompatibilityConfigureCallback(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.Action{Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection,Spotfire.Dxp.Framework.DocumentModel.DocumentNode},System.Boolean)">
            <summary>
            Adds a callback that will be called after the document has been attached and data has been loaded.
            The callback will be called to handle compatibility issues after all pre 2.0 callbacks have been called.
            It will be called for all file versions except the current one.
            </summary>
            <param name="node">The document node.</param>
            <param name="callback">The callback.</param>
            <param name="runOnAllVersions">if set to <c>true</c> this callback will run on all versions, even current version.</param>
            <remarks>
            The runOnAllVersions parameter was added as means to make it possible to fix things in the document, that might have 
            happened in an earlier version of the document, but has now been re saved. The only way to to this was before to use 
            an internal event with a never trigger. 
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection.InvokeCompatibilityConfigureCallbacks(Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection)">
            <summary>
            Invokes the compatibility configure callbacks.
            </summary>
            <param name="compatibilityItemCollection">The compatibility item collection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection.InvokeCompatibilityConfigureCallbacks(Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection,System.Predicate{System.Boolean})">
            <summary>
            Invokes the compatibility configure callbacks.
            </summary>
            <param name="compatibilityItemCollection">The compatibility item collection.</param>
            <param name="shouldRunCallback">Calls this predicate with the shouldRunFlag to check if callback should be run</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityCallbackCollection.ClearVersionDependentCallbacks">
            <summary>
            Clear all callbacks except those that should be run on all versions (those where IsRunOnAllVersions() returns true)
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection">
            <summary>
            A collection that document node can use to store of deserialized information during deserialization
            and later access by overriding the <see cref="M:DocumentNode.ResolveCompatibility"/> method.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection.compatibilityMap">
            <summary>
            The compatibility item map.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection.Clone(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Clones the specified old document.
            </summary>
            <param name="newDocument">The new document.</param>
            <returns>A new compatibility callback collection which references the new document.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection.Add(System.Object,System.String,System.Object)">
            <summary>
            Adds and entry to the collection.
            </summary>
            <param name="key">The key.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityItemCollection.Get(System.Object,System.String)">
            <summary>
            Gets the compatibility item associated with the specified key and name. Returns null if no
            item has been added for the specified key and name during deserialization.
            Compatibility items can be added using <see cref="M:DocumentNode.AddCompatibilityItem"/>.
            </summary>
            <param name="key">The key (typically the node).</param>
            <param name="name">The name (typically the property name).</param>
            <returns>The compatibility item.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector">
            <summary>
            The library entry redirector. This class is used to redirect library entry guids to other entries. 
            It will redirect an entry if the analysis has been copied in the library together with entry. The entry guid should then
            be redirected to the library entry guid for the copy.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.Logger">
            <summary>
            Logger for the DataTable class.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.MinumumServerVersion">
            <summary>
            The minumum server version that supports redirection of library entries.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.mapping">
            <summary>
            A mapping that maps the original guid to the guids that it should be replaced with.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.#ctor(System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector" /> class.
            </summary>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.CreateForLibraryEntry(Spotfire.Dxp.Framework.Library.InternalLibraryManager,System.Guid)">
            <summary>
            Creates for library entry.
            </summary>
            <param name="internalLibraryManager">The internal library manager.</param>
            <param name="libraryEntryId">The library entry id.</param>
            <returns>The library entry redirector.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.CreateFromXml(System.Xml.XmlDocument)">
            <summary>
            Creates a library entry redirector from an XML document with redirected ids.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>The library entry redirector.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.GetRedirector(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the redirector.
            </summary>
            <param name="context">The context.</param>
            <returns>The library entry redirector</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.Redirect(System.Guid)">
            <summary>
            Redirects the specified library entry id.
            </summary>
            <param name="libraryEntryId">The library entry id.</param>
            <returns>The redirected library entry id</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.Redirect(System.Collections.Generic.List{System.Guid})">
            <summary>
            Redirects the specified library entry ids.
            </summary>
            <param name="libraryEntryIds">The library entry ids.</param>
            <returns>The redirected library entry ids</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.Redirect(System.String)">
            <summary>
            Redirects the specified library entry id.
            </summary>
            <param name="libraryEntryId">The library entry id.</param>
            <returns>The redirected library entry id (as a string).</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector.RedirectIdentifiersInText(System.String)">
            <summary>
            Searches the specified string for library entry ids and replaces them with redirected ones.
            </summary>
            <param name="mayContainLibraryEntryIds">The string that may contain library entry ids.</param>
            <returns>The same string but with redirected library entry ids (if there were any).</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Extensions">
            <summary>
            Class with extension methods for peristance-related classes and interfaces.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Extensions.ContainsEntry(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <summary>
            Determines whether the specified SerializationInfo contains an entry with the specified name and
            optionally an object type that can be assigned to the specified type.
            </summary>
            <param name="info">The information.</param>
            <param name="name">The name.</param>
            <param name="type">The type or null.</param>
            <returns>
              <c>true</c> if the SerializationInfo contains the specified entry.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Extensions.ContainsEntry(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Checks if a name is contained in the serialization info.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if an entry with the specified name exists, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Extensions.GetValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Gets a value of type T from serialization info.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="info">Serialization info.</param>
            <param name="name">Name of value.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Extensions.HasProperty(System.Runtime.Serialization.SerializationInfo,Spotfire.Dxp.Framework.DocumentModel.PropertyName)">
            <summary>
            Checks if a property name is contained in the serialization info.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="propertyName">The property name.</param>
            <returns>
              <c>true</c> if the specified property name has been serialized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute">
            <summary>
            Specifies that a value has been added to an enum.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute.majorVersion">
            <summary>
            The major persistence version in which the field was added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute.minorVersion">
            <summary>
            The minor persistence version in which the field was added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute.name">
            <summary>
            The name of the value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute" /> class.
            </summary>
            <param name="majorVersion">The major version.</param>
            <param name="minorVersion">The minor version.</param>
            <param name="name">The name of enum value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute.Name">
            <summary>
            Gets the name of the enum value that has been added.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute.MajorVersion">
            <summary>
            Gets the major persistence version in which the field was added.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute.MinorVersion">
            <summary>
            Gets the minor persistence version in which the field was added.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute.Get(System.String,System.Type)">
            <summary>
            Returns the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute"/> for the specified enum vbalue name, or null.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="type">The type.</param>
            <returns>
            A <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityEnumValueAddedAttribute"/>, or null.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute">
            <summary>
            Specifies that a field has been added to the persistence format of a class or struct.
            Used to test and at runtime verify that the type serialized in a way that is compatible
            with earlier versions and that no unnecessary fields are serialized.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.fieldName">
            <summary>
            The name of the field that has been added. Case is significant.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.fieldType">
            <summary>
            The type of the field that has been added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.majorVersion">
            <summary>
            The major persistence version in which the field was added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.minorVersion">
            <summary>
            The minor persistence version in which the field was added.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.#ctor(System.Int32,System.Int32,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute"/> class.
            </summary>
            <param name="majorVersion">The major version.</param>
            <param name="minorVersion">The minor version.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="fieldType">The type of the field.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.FieldName">
            <summary>
            Gets the name of the field that has been added. Case is significant.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.FieldType">
            <summary>
            Gets the type of the field that has been added.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.MajorVersion">
            <summary>
            Gets the major persistence version in which the field was added.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.MinorVersion">
            <summary>
            Gets the minor persistence version in which the field was added.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.Get(System.String,System.Type)">
            <summary>
            Returns the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute"/> for the specified field
            that the specified type is marked with, or null.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="type">The type.</param>
            <returns>
            A <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute"/>, or null.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute.GetAttributesInTypeHierarchy(System.Type)">
            <summary>
            Returns the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute"/> for the specified type and base types.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldAddedAttribute"/>.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute">
            <summary>
            Specifies that a field has been removed from the persistence format of a class or struct.
            Used to test and at runtime verify that the type serialized in a way that is compatible
            with earlier versions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.fieldName">
            <summary>
            The name of the field that has been removed. Case is significant.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.fieldType">
            <summary>
            The type of the field that has been removed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.majorVersion">
            <summary>
            The major persistence version in which the field was removed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.minorVersion">
            <summary>
            The minor persistence version in which the field was removed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.#ctor(System.Int32,System.Int32,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute"/> class.
            </summary>
            <param name="majorVersion">The major version.</param>
            <param name="minorVersion">The minor version.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="fieldType">The type of the field.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.FieldName">
            <summary>
            Gets the name of the field that has been removed. Case is significant.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.FieldType">
            <summary>
            Gets the type of the field that has been removed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.MajorVersion">
            <summary>
            Gets the major persistence version in which the field was removed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.MinorVersion">
            <summary>
            Gets the minor persistence version in which the field was removed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.Get(System.String,System.Type)">
            <summary>
            Returns the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute"/> for the specified field
            that the specified type is marked with, or null.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="type">The type.</param>
            <returns>
            A <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute"/>, or null.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute.GetAttributesInTypeHierarchy(System.Type)">
            <summary>
            Returns the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute"/> instances for the specified type and base types.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityFieldRemovedAttribute"/> instances.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute">
            <summary>
            Specifies that a type has been added from the persistence format of a class or struct.
            Used to test and at runtime verify that the type serialized in a way that is compatible
            with earlier versions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute.majorVersion">
            <summary>
            The major persistence version in which the type was added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute.minorVersion">
            <summary>
            The minor persistence version in which the type was added.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute"/> class.
            </summary>
            <param name="majorVersion">The major version.</param>
            <param name="minorVersion">The minor version.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute.MajorVersion">
            <summary>
            Gets the major persistence version in which the type was added.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute.MinorVersion">
            <summary>
            Gets the minor persistence version in which the type was added.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute.Get(System.Type)">
            <summary>
            Returns the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute"/>
            that the specified type is marked with, or null.
            </summary>
            <param name="t">The type to examine.</param>
            <returns>A <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceCompatibilityTypeAddedAttribute"/>, or null.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.StreamingContextExtensions">
            <summary>
            Methods that extends <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.StreamingContextExtensions.IsPersistenceFragmentSerialization(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Determines if the serialization is a fragment serialization for persistence, as used when
            serializing analytic items for object graphs.
            </summary>
            <param name="context">The streaming context.</param>
            <returns>
            true if the serialization is for persistence and fragment.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings">
            <summary>
            Holds settings for how system types are serialized and deserialized.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings.AllowClaimsIdentity">
            <summary>
            Gets a value indicating whether to allow System.Security.Claims.ClaimsIdentity to be persisted.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings.TypesNotAllowedToBePersisted">
            <summary>
            Gets the types not allowed to be persisted.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings"/> class.
            </summary>
            <param name="allowClaimsIdentity">if set to <c>true</c> allow claims identity.</param>
            <param name="typesNotAllowedToBePersisted">The additional types not allowed to be persisted.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.LoadInfo">
            <summary>Contains information about load times for the document and data.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.LoadInfo.tableLoadInfo">
            <summary>Contains load information about data tables.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.LoadInfo.documentLoadInfo">
            <summary>Contains load information about the document.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LoadInfo.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.LoadInfo"/> class.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LoadInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.LoadInfo"/> class during deserialization.</summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.LoadInfo.TableLoadInfo">
            <summary>Gets the table load info dictionary.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.LoadInfo.DocumentLoadInfo">
            <summary>Gets the document load info dictionary.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LoadInfo.SetTableLoadInfo(System.String,System.String)">
            <summary>
            Sets the data table load info.
            </summary>
            <param name="key">The load info key.</param>
            <param name="value">The load info value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LoadInfo.SetDocumentLoadInfo(System.String,System.String)">
            <summary>
            Sets the document load info.
            </summary>
            <param name="key">The load info key.</param>
            <param name="value">The load info value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.LoadInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.LoadInfo.PropertyNames">
            <summary>Contains property name constants for the public properties.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.LoadInfo.PropertyNames.TableLoadInfo">
            <summary>The name of the property TableLoadInfo.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.LoadInfo.PropertyNames.DocumentLoadInfo">
            <summary>The name of the property DocumentLoadInfo.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.CompatibilityTable.LookupAssembly(System.String)">
            <summary>
            Looks up and returns the Assembly bound to the specified <paramref name="originalAssemblyName"/>. 
            Returns <c>null</c> if no Assembly is bound for <paramref name="originalAssemblyName"/> or for 
            the weak (Name and PublicKeyToken) verison of <paramref name="originalAssemblyName"/>.
            </summary>
            <param name="originalAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DxpFileContributorRegistry">
            <summary>
            Represents a collection of <see cref="T:Spotfire.Dxp.Framework.Persistence.IDxpFileContributor"/> objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpFileContributorRegistry.fileContributors">
            <summary>
            The list of all file contributors in the collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpFileContributorRegistry.Register(Spotfire.Dxp.Framework.Persistence.IDxpFileContributor)">
            <summary>
            Registers the specified file contributor.
            </summary>
            <param name="fileContributor">The file contributor.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpFileContributorRegistry.OnBeforeSave">
            <summary>
            Called before a document is saved to file or to the library.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpFileContributorRegistry.OnDocumentSaveLocationDetermined(Spotfire.Dxp.Framework.DocumentModel.DocumentLocation,Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings)">
            <summary>
            Called when the document save location is determined.
            </summary>
            <param name="documentLocation">The save document location.</param>
            <param name="saveSettings">The save settings.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpFileContributorRegistry.OnReadFromDxp(Spotfire.Dxp.Internal.Utilities.ZipReader,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector)">
            <summary>
            Called when a document is loaded from a DXP-file.
            </summary>
            <param name="zipReader">The zip archive reader.</param>
            <param name="document">The document.</param>
            <param name="libraryEntryRedirector">The library entry redirector.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpFileContributorRegistry.OnWriteToDxp(Spotfire.Dxp.Internal.DocumentLocationType,Spotfire.Dxp.Internal.Utilities.ZipWriter)">
            <summary>
            Called when the specified document is about to be written to a DXP-file.
            </summary>
            <param name="documentLocationType">The document location type.</param>
            <param name="zipWriter">The zip archive writer.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException">
            <summary>
            Used to hold information about a failure to open a DXP file.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.FailureType">
            <summary>
            Desribes the type of failure.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.FailureType.FileCorrupt">
            <summary>
            Used to describe that the file is corrupt.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.FailureType.FileCorruptMissingRequiredEntry">
            <summary>
            Used to describe that the file is corrupt due to a missing 
            required entry in the zip archive..
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.FailureType.IncompatibleVersion">
            <summary>
            Used to describe that the file version is not compatible to 
            this version of TIBCO Spotfire.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.FailureType.IncompatibleDevelopmentVersion">
            <summary>
            Used to describe that the file version is not compatible to 
            this version of TIBCO Spotfire and that the file was saved with 
            a development version..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.Type">
            <summary>
            Gets the failure type.
            </summary>
            <value>The failure type.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.MissingEntry">
            <summary>
            Gets the name of the entry that was missing in the file that could 
            not be opened.
            </summary>
            <value>The missing entry.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.FileVersion">
            <summary>
            Gets the file version of the file that could not be opened.
            </summary>
            <value>The file version.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.#ctor(Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.FailureType,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.#ctor(Spotfire.Dxp.Framework.Persistence.DxpFileFormatException.FailureType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="data">Additional data.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpFileReadResult.ReleaseZipArchiveAndCleanup">
            <summary>
            Shall be called when embedded data has been loaded to release the references to 
            the zip archive, thus closing it.
            Must also be called in exception handlers during document load.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings.ServerURL">
            <summary>
            Used when a file is saved by the Web-client for opening in the desktop client.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings.UserHostAddress">
            <summary>
            Used when a file is saved by the Web-client for opening in the desktop client.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings.SaveMode">
            <summary>Indicates if a copy of the document should 
            be saved that certain attributes (like DocumentOrigin) 
            should not be updated.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings.SaveTarget">
            <summary>
            Indicates the target of the save operation.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings.DeleteExistingBookmarks">
            <summary>
            Gets a value indicating whether existing bookmarks should be deleted or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings.SaveCompatibilityVersion">
            <summary>
            Gets a value indicating whether the document should also contain a compatibility version.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SaveMode.Save">
            <summary>
            Indicates that the current analysis is saved to its current
            location or created
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SaveMode.SaveAs">
            <summary>Indicates that a copy of the document should 
            be saved to a new location.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SaveMode.SaveCopy">
            <summary>Indicates that a copy of the document should 
            be saved and that certain attributes (like DocumentOrigin) 
            should not be updated.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader">
            <summary>DXP File reader implementation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.EntryTemplateDocument">
            <summary>
            Zip entry template for the document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.EntryTemplateEmbeddedResources">
            <summary>
            Zip entry template for the embedded resources.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.EntryNameDocument">
            <summary>
            Zip entry name for the document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.EntryNameMetadata">
            <summary>
            Zip entry name for the metadata.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.EntryNameConfigurationBlock">
            <summary>
            Zip entry name for the ConfigurationBlock.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.EntryNameEmbeddedResources">
            <summary>
            Zip entry name for the embedded resources.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.EntryNamePreviewImage">
            <summary>
            Zip entry name for the embedded preview image.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.EntryNamePreviewDescription">
            <summary>
            Zip entry name for the embedded preview description.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.DirNameEmbeddedResources">
            <summary>
            Zip directory name for the embedded resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.GetMetadataSerializer">
            <summary> </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.#ctor(Spotfire.Dxp.Framework.Persistence.PersistenceManager)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader"/> class.
            </summary>
            <param name="persistenceManager">The persistence manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.IsAvailableInWebClient">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.Open(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.GetFileFormatMatch(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.SupportedFileExtensions">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.DocumentType">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.IsLicensed(Spotfire.Dxp.Framework.License.LicenseManager)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.Rank">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.ValidateCompatibilityVersion(Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata)">
            <summary>
            Validates that the file was saved with a version of the file format that can be opened by the executing instance.
            Returns the first compatible version contained in the dxp file that the executing instance can open.
            </summary>
            <param name="fileMetadata">The file metadata.</param>
            <returns>
            The first compatible version contained in the dxp file that the executing instance can open.
            </returns>
            <exception cref="T:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException">If the dxp file does not contain an entry compatible with the excuting intance.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.ValidateDxpFile(System.String)">
            <summary>
            Validates the existence of the DXP-file specified by file name.
            </summary>
            <param name="fileName">The DXP file name.</param>
            <returns><c>True</c> if a valid DXP.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.TryGetFilePreview(System.String,System.Drawing.Image@)">
            <summary>
            Tries to the get file preview from the DXP file specified by filename.
            </summary>
            <param name="fileName">The DXP file name.</param>
            <param name="image">The image.</param>
            <returns>
              <c>True</c> if successful; otherwise <c>False</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.HasFilePreview(System.String)">
            <summary>
            Determines whether the specified DXP-file has an image preview.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>
              <c>true</c> if the specified DXP-file has an image preview.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.TryGetFileDescription(System.String,System.String@)">
            <summary>
            Tries to the get file description from the DXP file specified by filename.
            </summary>
            <param name="fileName">The DXP file name.</param>
            <param name="description">The description.</param>
            <returns>
              <c>True</c> if successful; otherwise <c>False</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.TryReadEmbeddedResourceByName(System.String,System.IO.Stream,System.Action{System.IO.Stream})">
            <summary>
            Tries to read the named embedded resource from the document stream. If the embedded resource is found, the
            action is called with a stream that can read the contents of the embedded resource.
            </summary>
            <param name="name">The name of the embedded resource.</param>
            <param name="docStream">A stream from which a .dxp file can be read.</param>
            <param name="embeddedResourceAction">The action to perform on the content stream of the embedded resource.</param>
            <returns>True if the embedded resource was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.BuildLibraryEntryRedirector(Spotfire.Dxp.Internal.Utilities.ZipReader)">
            <summary>
            Builds the library entry redirector from zip archieve.
            </summary>
            <param name="zReader">The zip reader.</param>
            <returns>The library entry redirector.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.BuildEmbeddedResources(Spotfire.Dxp.Framework.Persistence.DeserializationContext,Spotfire.Dxp.Internal.Utilities.ZipReader,System.String,Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.ZipArchiveReferenceCollection)">
            <summary>
            Build all EmbeddedResources and bind them in the DeserializationContext.
            </summary>
            <param name="desContext">The deserialization context.</param>
            <param name="zReader">The zip reader.</param>
            <param name="embeddedResourcesEntryName">The name of the embedded resources entry.</param>
            <param name="zipArchiveReferenceCollection">The zip archive reference collection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.LoadDocument(System.IO.Stream,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String}},Spotfire.Dxp.Framework.Persistence.PersistenceManager,System.IServiceProvider)">
            <exception cref="T:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException">
            May wrap a ZipException (corrupt file).
            May also wrap a SerializationException due to incompatible file versions.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            Serialization error due to other reasons than file incompatibility.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.LoadDocument(System.IO.Stream,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String}},Spotfire.Dxp.Framework.Persistence.PersistenceManager,System.IServiceProvider,System.Int32)">
            <summary>
            Loads the document from the specified stream.
            </summary>
            <param name="docStream">The document stream.</param>
            <param name="trustedScriptHashes">The trusted script hashes.</param>
            <param name="persistenceManager">The persistence manager.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="supportedVersionIndex">The index of which version to open, defaults to 0.</param>
            <returns>
            The read result.
            </returns>
            <exception cref="T:Spotfire.Dxp.Framework.Persistence.DxpFileFormatException">Thrown if load fails.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.ZipArchiveReferenceCollection">
            <summary>
            Represents a collection of references into a zip archive.
            Implements IDisposable. Closes all references and the zip archive when disposed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.DxpDocumentFile.#ctor(System.String,System.Int32,Spotfire.Dxp.Framework.Persistence.PersistenceManager)">
            <summary> </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.DxpDocumentFile.DocumentType">
            <summary> </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.DxpDocumentFile.DocumentTitle">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.DxpDocumentFile.FileFormatMatch">
            <summary> </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.DxpDocumentFile.FilePath">
            <inheritdoc />
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DxpDocumentFileReader.DxpDocumentFile.GetDocument(System.IServiceProvider)">
            <summary> </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.ExtensionAttribute">
            <summary>
            The attribute for extensions.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ExtensionAttribute.#ctor(System.String)">
            <summary>
            Create an extension attribute.
            </summary>
            <param name="name">The name of the extension.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.ExtensionAttribute.Name">
            <summary>
            The name of the extension.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ExtensionAttribute.IsExtension(System.Type)">
            <summary>
            Check if a type is marked as an extension.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is marked as an extension.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ExtensionAttribute.ExtensionName(System.Type)">
            <summary>
            Get the name of an extension.
            </summary>
            <param name="type">The extension type.</param>
            <returns>The name of the extension if the type is an extension; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ExtensionAttribute.GetExtensionBase(System.Type)">
            <summary>
            Get the extension base type for an extension type.
            </summary>
            <param name="type">The extension type.</param>
            <returns>The extension base type for the extension type. Returns null if none exists.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.ExtensionBaseAttribute">
            <summary>
            The attribute for extension base classes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ExtensionBaseAttribute.#ctor(System.Type)">
            <summary>
            Construct an extension base attribute.
            </summary>
            <param name="standInType">The type of the stand in object that should
            be created at deserialization if an extension of this extension base
            is not available.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.ExtensionBaseAttribute.StandInType">
            <summary>
            Get the stand in type for this extensionbase attribute.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ExtensionBaseAttribute.IsExtensionBase(System.Type)">
            <summary>
            Check if a type is an extension base.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an extension base.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ExtensionBaseAttribute.GetStandIn(System.Type)">
            <summary>
            Get the stand in class for an extension base.
            </summary>
            <param name="extensionBase">The extension base.</param>
            <returns>The stand in class</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.ExtensionStandInAttribute">
            <summary>
            The attribute for stand ins.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.ExtensionStandInAttribute.standInTypes">
            <summary>
            Type to info if it is a standin.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ExtensionStandInAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExtensionStandInAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ExtensionStandInAttribute.IsExtensionStandIn(System.Type)">
            <summary>
            Check if a type is a stand in.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a stand in type.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResources">
            <summary>
            FOR SPOTFIRE INTERNAL USE ONLY.
            Represents the EmbeddedResources.xml in a DXP file.
            </summary>
            <remarks/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResources.#ctor">
            <summary>
            Constructor for the xml deserializer.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResources.EmbeddedResource">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResources.SchemaVersion">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResource">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResource.Id">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResource.ArchiveElementPath">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResource.UpdateStyle">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResource.LinkRef">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResource.LinkRefSpecified">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.EmbeddedResource.Name">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata">
            <summary>
            FOR SPOTFIRE INTERNAL USE ONLY.
            Represents the Metadata.xml in a DXP file.
            </summary>
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersionDevelopmentSuffix">
            <summary>
            Suffix used for CurrentFileFormatVersion during development projects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.CurrentFileFormatVersion">
            <summary>The current version of the file format.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion70">
            <summary>
            The file format version tag for Spotfire 7.0.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion75">
            <summary>
            The file format version tag for Spotfire 7.5.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion76">
            <summary>
            The file format version tag for Spotfire 7.6.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion77">
            <summary>
            The file format version tag for Spotfire 7.7.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion78">
            <summary>
            The file format version tag for Spotfire 7.8.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion79">
            <summary>
            The file format version tag for Spotfire 7.9.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion710">
            <summary>
            The file format version tag for Spotfire 7.10.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion711">
            <summary>
            The file format version tag for Spotfire 7.11.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion712">
            <summary>
            The file format version tag for Spotfire 7.12.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion713">
            <summary>
            The file format version tag for Spotfire 7.13.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion714">
            <summary>
            The file format version tag for Spotfire 7.14.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.FileFormatVersion100">
            <summary>
            The file format version tag for Spotfire 10.0.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.AllPre2_0FileFormatVersions">
            <summary>All versions of the file format that have been released before Spotfire DXP 2.0.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.DeltaPre2_1FileFormatVersions">
            <summary>All versions of the file format that have been released before between Spotfire DXP 2.0 and 2.1.0.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.AllSupportedFileFormatVersions">
            <summary>All versions of the file format that have been released.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.CurrentEmbeddedDataFormatVersion">
            <summary>
            The version number on the embedded data format used by the data engine.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.#ctor">
            <summary>
            Constructor for the xml deserializer.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.IsPre5_0">
            <summary>
            Gets a value indicating if the file was saved in a version prior to 5.0.
            </summary>
            <returns>true if it was saved in a version prior to 5.0, otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.ContainsUnknownCompatibilityVersion(System.String@)">
            <summary>
            Determines whether the compatibility version contains an entry which is not a supported format in this version.
            </summary>
            <param name="unknown">The unknown version.</param>
            <returns>
              <c>True</c> if an unknown entry exists ; otherwise <c>False</c>.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.Contents">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.Properties">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.DocumentType">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.SchemaVersion">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.FileMetadata.CompatibilityVersion">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.FileFormat.Content">
            <summary>
            FOR SPOTFIRE INTERNAL USE ONLY.
            Represents an entry in the contents of a Metadata.xml.
            </summary>
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.Content.ArchiveElementType_AnalysisDocument">
            <summary>
            The ArchiveElementType string for the AnalysisDocument.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.Content.ArchiveElementType_EmbeddedResources">
            <summary>
            The value of the ArchiveElementType attribute for Content elements
            in a Metadata.xml that refers to EmbeddedResources.xml elements in 
            the archive.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.Content.ArchiveElementType_ConfigurationBlock">
            <summary>
            The value of the ArchiveElementType attribute for Content elements
            in a Metadata.xml that refers to ConfigurationBlock.txt elements in 
            the archive.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileFormat.Content.#ctor">
            <summary>
            Constructor for the xml deserializer.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileFormat.Content.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.FileFormat.Content"/> class.
            </summary>
            <param name="archiveElementType">Type of the archive element.</param>
            <param name="version">The version.</param>
            <param name="archiveElementPathTemplate">The archive element path.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.Content.ArchiveElementType">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.Content.Version">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.Content.ArchiveElementPath">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.FileFormat.Property">
            <summary>
            FOR SPOTFIRE INTERNAL USE ONLY.
            Represents an entry in the Property of a Metadata.xml.
            </summary>
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.Property.SavedByAssemblyFileVersion">
            <summary>
            The value of the AssemblyFileVersion attribute on the Framework assembly 
            that save the DXP file.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.Property.ServerUrl">
            <summary>
            Used to encode the server that shall be used when opening a file.
            This property is set when  file is saved by the Web client in order to be opened 
            in the desktop client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.Property.UserHostAddress">
            <summary>
            Used to encode the Single-Sign-On client IP that shall be used when opening a file.
            This property is set when  file is saved by the Web client in order to be opened 
            in the desktop client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.FileFormat.Property.EmbeddedDataFormatVersion">
            <summary>
            The format version of the embedded data in the analysis.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileFormat.Property.#ctor">
            <summary>
            Constructor for the xml deserializer.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileFormat.Property.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Property"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.Property.Key">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FileFormat.Property.Value">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.FileReadException">
            <summary>
            This exception is used for errors regarding reading of files.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileReadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.FileReadException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileReadException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.FileReadException"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileReadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.FileReadException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FileReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.IDxpFileContributor">
            <summary>
            Implement to contribute data to the .dxp file during save and to extract 
            data from the .dxp file during load.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDxpFileContributor.OnWriteToDxp(Spotfire.Dxp.Internal.DocumentLocationType,Spotfire.Dxp.Internal.Utilities.ZipWriter)">
            <summary>
            Called when the specified document is about to be written to a DXP-file.
            </summary>
            <param name="documentLocationType">The document location type.</param>
            <param name="zipWriter">The zip archive writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDxpFileContributor.OnReadFromDxp(Spotfire.Dxp.Internal.Utilities.ZipReader,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector)">
            <summary>
            Called when a document is loaded from a DXP-file.
            </summary>
            <param name="zipReader">The zip archive reader.</param>
            <param name="document">The document.</param>
            <param name="libraryEntryRedirector">The library entry redirector.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDxpFileContributor.OnBeforeSave">
            <summary>
            Called before a document is saved to file or to the library.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDxpFileContributor.OnDocumentSaveLocationDetermined(Spotfire.Dxp.Framework.DocumentModel.DocumentLocation,Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings)">
            <summary>
            Called when the document save location is determined.
            </summary>
            <param name="documentLocation">The save document location.</param>
            <param name="saveSettings">The save settings.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource">
            <summary>Represents a resource that can owned by the document and embedded in the DXP file.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.embeddedResource">
            <summary>The mutable embedded resource.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.hash">
            <summary>
            The hash string of the embedded resource.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.#ctor(System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource"/> class.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="content">The contents of the resource.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.#ctor(System.String,System.Action{System.IO.Stream})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource"/> class.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="contentWriter">A method that can write the contents of the resource to a stream.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.#ctor(System.Action{System.IO.Stream})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource"/> class.
            </summary>
            <param name="contentWriter">A method that can write the contents of the resource to a stream.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.#ctor(Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource"/> class.
            </summary>
            <param name="other">A The other instance, used as a template.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.#ctor(System.Xml.XmlElement,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource"/> class.
            </summary>
            <param name="xmlElement">The Xml element to initialize the object from.</param>
            <param name="content">The content stream.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.Hash">
            <summary>
            Gets the hash string of the embedded resource.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.OpenRead">
            <summary>
            Opens a stream from this <see cref="T:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource"/> for reading.
            </summary>
            <returns>A readable <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Gets the object data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.Read(System.IO.Stream)">
            <summary>
            Reads the embedded resource from the specified zip stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The embedded resource; or null.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.Duplicate">
            <summary>
            Returns a duplicate of this instance.
            </summary>
            <returns>A duplicate of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.Save(System.IO.Stream)">
            <summary>
            Saves the embedded resource as Zip to the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.WriteToStream(System.IO.Stream)">
            <summary>
            Writes the contents of this embedded resource to the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.FormatBytes(System.Byte[])">
            <summary>
            Formats the specified byte array as a hexadecimal string.
            </summary>
            <param name="bytes">The bytes to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.HasSerializationEntry(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Gets a value indicating whether the specified entry exists in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="entryName">The entry name.</param>
            <returns><c>True</c> if the entry exists; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ImmutableEmbeddedResource.SaveMetadataToXml(System.IO.Stream)">
            <summary>
            Saves the metadata of the embedded resource as Xml to the specified stream.
            </summary>
            <param name="stream">The stream to save Xml to.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.MissingComponentException">
            <summary>
            This exception is used for errors regarding missing software components.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.MissingComponentException.#ctor(System.String)">
            <summary>
            Create a missing component exception.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.MissingComponentException.#ctor">
            <summary>
            Create a missing component exception.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.MissingComponentException.#ctor(System.String,System.Exception)">
            <summary>
            Create a missing component exception.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.MissingComponentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.MissingExtension">
            <summary>
            This class is used to represent the content of an object which has been replaced by a stand in
            when the document is loaded.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.MissingExtension.#ctor(System.Runtime.Serialization.SerializationInfo,Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Create an object which represents a missing extension.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.MissingExtension.MissingExtensionName">
            <summary>
            Get the name of the missing extension.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.MissingExtension.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo with the fields of the missing extension.
            </summary>
            <param name="info">The SerializationInfo to populate.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute">
            <summary>
            Used to markup the persistence version of a class in order to 
            support the writing of backwards compatible classes.
            </summary>
            <remarks>
            During deserialization of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>, 
            the persistence version of the serialized 
            type can be retreived by calling <see cref="M:Spotfire.Dxp.Framework.DocumentModel.DocumentNode.GetPersistedVersion(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Type)"/>.
            By inspecting this object, the deserialization code can determine what values to 
            expect in the serialized format and thus what to deserialize.
            <para>
            Make sure to increment the persistence version of a class whenever the fields that it serializes change 
            in any way. This includes addition and removal the serialized fields as well as changes of name 
            and type.
            </para>
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.Default">
            <summary>
            The default PersistenceVersionAttribute to use for 
            Types that are not marked with a PersistenceVersionAttribute.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.CompatibilityVersions">
            <summary>
            The compatibility versions in which the document can be saved. This applies also to visual analytic items in bookmarks and comments.
            The versions are listed in descending order with the newest version first.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.Current">
            <summary>
            The persistence version that changed types in the current release shall be marked with.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.MajorVersion">
            <summary>
            Gets the major version.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.MinorVersion">
            <summary>
            Gets the minor version.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute"/> class.
            </summary>
            <param name="majorVersion">The major version.</param>
            <param name="minorVersion">The minor version.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An <see cref="T:System.Object"></see> to compare with this instance or <c>null</c>.</param>
            <returns>
            true if obj equals the type and value of this instance; otherwise, false.
            </returns>
            <inheitdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.IsDefaultAttribute">
            <summary>
            When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class.
            </summary>
            <returns>
            true if this instance is the default attribute for the class; otherwise, false.
            </returns>
            <inheitdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.Match(System.Object)">
            <summary>OBSOLETE! DO NOT USE!</summary>
            <exclude/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <inheitdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.Get(System.Type)">
            <summary>Returns the PersistenceVersionAttribute that the specified
            type is marked with, or the default PersistenceVersionAttribute if
            the specified type is not marked with a PersistenceVersionAttribute.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.IsMarkedWithPersistenceVersion(System.Type)">
            <summary>
            Determines whether the specifies type is marked with persistence version.
            </summary>
            <param name="t">The type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.IsGreaterThanOrEqual(Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute)">
            <summary>
            Determines whether this instance is greater than or equal to the specified other instance.
            </summary>
            <param name="other">The other instance.</param>
            <returns>true if this instance is greater than or equal to the specified other instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.IsGreaterThan(Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute)">
            <summary>
            Determines whether the version number of this instance is greater than the version number of the specified other instance.
            </summary>
            <param name="other">The other instance.</param>
            <returns><c>true</c> if the version number of this instance is greater than the version number of the specified other instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.IsLessThanOrEqual(Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute)">
            <summary>
            Determines whether this instance is less than or equal to the specified other instance.
            </summary>
            <param name="other">The other instance.</param>
            <returns>true if this instance is less than or equal to the specified other instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.IsLessThanOrEqual(System.Int32,System.Int32)">
            <summary>
            Tests if this version is less than or equal to the given version.
            </summary>
            <param name="majorVersion">Major version.</param>
            <param name="minorVersion">Major version.</param>
            <returns>True if this version is less than or equal to the given version.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute.GreaterThanOrEqual(System.Int32,System.Int32)">
            <summary>
            Tests if this version is greater than or equal to the given version.
            </summary>
            <param name="majorVersion">Major version.</param>
            <param name="minorVersion">Major version.</param>
            <returns>True if this version is greater than or equal to the given version.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceNameAttribute">
            <summary>
            Describes the name that is used to serialize a field. Used when the
            serialized name differs from the PascalCased name of the field itself.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceNameAttribute"/> class.
            </summary>
            <param name="name">The name used when serializing this field.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.NotPersistedAttribute">
            <summary>
            Used to markup types that are not intended to be persisted when the 
            document is saved to a file. 
            </summary>
            
            <remarks>
            An attempt to save a document containing 
            an object of a type that is marked with this attribute fails.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.NotPersistedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.NotPersistedAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.NotPersistedAttribute.IsMarkedWithNotPersistedAttribute(System.Type)">
            <summary>Returns true if the specified type is marked with a 
            NotPersistedAttribute attribute; otherwise false.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.NonSystemTypeInfo">
            <summary>
            Class for holding information on non system types.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo">
            <summary>
            Class for holding serialized information on a type.
            NOTE: The isSerializationAllowed flag must be refactored if instances of this class shall be
            cached and used both for persistence and undo serialization.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.boundType">
            <summary>
            The actual Type object bound to this type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.replaced">
            <summary>
            Indicates if the type that was serialized was not found in the executing app domain and has 
            been replace by a StandIn type or one of the UnknowObject types.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.#ctor(System.String,System.String,System.String,Spotfire.Dxp.Framework.Persistence.NonSystemTypeInfo,System.Type,System.Boolean)">
            <summary>
            Constructs a SerializedTypeInfo.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.BoundType">
            <summary>
            The type bound for this TypeInfo.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.SystemAssembliesWithTypesAllowedToBePersisted">
            <summary>
            The set of system assemblies with types that are allowed to be persisted in DXP files.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.HashSetAssembly">
            <summary>
            The assembly containing HashSet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.Spotfire#Dxp#Framework#Persistence#IPersistedType#FullTypeName">
            <summary>
            Gets the full name of this persisted type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.Spotfire#Dxp#Framework#Persistence#IPersistedType#AssemblyName">
            <summary>
            Gets the assembly name.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.Spotfire#Dxp#Framework#Persistence#IPersistedType#IsSystemType">
            <summary>
            <c>true</c> if this representes a .Net system type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.Spotfire#Dxp#Framework#Persistence#IPersistedType#PersistenceVersion">
            <summary>
            Gets the PersistenceVersionAttribute that
            the serialized type was marked with.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.Spotfire#Dxp#Framework#Persistence#IPersistedType#BaseType">
            <summary>
            Gets information on the base type of this persisted type.
            Returns <c>null</c> if there is no base type.
            </summary>
            <remarks>Use this instead of IPersistedType.BaseType to prevent
            recursion and a stack overflow.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo.HasStandIn(System.Type)">
            <summary>
            Determines whether the type has a standin.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the type has a standin.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.StandInHelper">
            <summary>
            Helper class for implementation of StandIns.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute">
            <summary>
            Maps conversion between different versions of the same enum type.
            </summary>
            <remarks>
            The version mapping is NOT implemented for FlagsEnums. It is futher more 
            NOT implemented or tested for consecutive renames (for instance back 
            to same name again). Those use cases will require extending the existing code 
            and tests! 
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute.fromVersion">
            <summary>
            The version in which the change was introduced.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute.mapFromValue">
            <summary>
            The value to map from. This value that may exist in earlier versions 
            of the enum. If found it should be replaced by the <see cref="P:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute.MapToValue"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute.mapToValue">
            <summary>
            The value to use, i.e. the present value of the enum.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute.FromVersion">
            <summary>
            Gets the version from which the conversion should be done.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute.MapFromValue">
            <summary>
            Gets the value that should be converted.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute.MapToValue">
            <summary>
            Gets the value which to convert to.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute.#ctor(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
            Maps conversion between different versions of the same enum type.
            </summary>
            <param name="fromMajorVersion">
            Major version of the enum when the change was introduced.
            </param>
            <param name="fromMinorVersion">
            Minor version of the enum when the change was introduced.
            </param>
            <param name="mapFromValue">
            The previous value of the enum which should be replaced.
            </param>
            <param name="mapToValue">
            The present value of the enum.
            </param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder">
            <summary>
            Maps FragmentHoles to objects. Used during fragment
            deserialization to replace each hole with the object bound to it.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder.GetBoundObject(System.Int64)">
            <summary>
            Looks up the object previously bound to <paramref name="holeId"/>
            by a call to <see cref="M:Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder.Bind(Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo,System.Object)"/>.
            </summary>
            <param name="holeId"></param>
            <returns>The object bound to <paramref name="holeId"/> or
            <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder.Bind(Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo,System.Object)">
            <summary>
            Binds <paramref name="holeInfo"/> to <paramref name="obj"/>.
            </summary>
            <remarks>
            Subsequent calls to <see cref="M:Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder.GetBoundObject(System.Int64)"/> will return 
            <paramref name="obj"/> when the <see cref="T:Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo"/> 
            corresponding to <paramref name="holeInfo"/> is passed.
            This method must be called to provide bindings for all holes
            referenced by a Fragment before it is deserialized.
            </remarks>
            <param name="holeInfo"></param>
            <param name="obj"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.IPersistedType">
            <summary>
            DO NOT USE!
            </summary>
            <exclude/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IPersistedType.AssemblyName">
            <summary>
            DO NOT USE!
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IPersistedType.FullTypeName">
            <summary>
            DO NOT USE!
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IPersistedType.PersistenceVersion">
            <summary>
            DO NOT USE!
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IPersistedType.IsSystemType">
            <summary>
            DO NOT USE!
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IPersistedType.BaseType">
            <summary>
            DO NOT USE!
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.ObjectReference`1">
            <summary>
            Generic implementation of IObjectReference.
            </summary>
            <remarks>
            A class derived from ObjectReferenceBase is used to serialize a 
            reference to an object and to lookup the object bound to
            the reference during deserialization.
            
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ObjectReference`1.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements IObjectReference.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ObjectReference`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ObjectReference`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.GetObjectData().
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.ObjectState">
            <summary>
            Holds the serialization state of an object. This class encapsulates a 
            SerializationInfo to make it serializable.<br></br>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.ObjectState.Info">
            <summary>
            Gets the SerializationInfo object encapsulated by this 
            ObjectState object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ObjectState.#ctor(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Creates an ObjectState encapsulating <paramref name="serializationInfo"/> as
            its' state.
            </summary>
            <param name="serializationInfo"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ObjectState.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements  ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.ObjectState.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements  ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DeserializationContext">
            <summary>
            The context used when a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> is deserialized.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DeserializationContext.libraryEntryRedirector">
            <summary>
            The library entry redirector. This is used to redirect library entry guids. It will redirect a library entry guid if the analysis has been 
            copied together with another library entry or if the it has been exported from the library and them imported into the same or another library.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DeserializationContext.keepDocumentNodeIDsForClone">
            <summary>
            Determines if document node ids should be kept while deserializing for clone.
            The default value is true so most users of deserialization will keep the node ids.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DeserializationContext.CompatibilityItemCollection">
            <summary>
            Gets the compatibility item collection.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DeserializationContext.DocumentGeneration">
            <summary>The generation of the live document when a snapshot is taken. 
            Only used by DocumentNode when taking snapshots.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DeserializationContext.HoleBinder">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder"/> used during 
            deserialization.
            </summary>
            <remarks>
            This property is kept public in order to allow for custom 
            implementations of Fragment holes and their resolution to 
            bound objects.
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DeserializationContext.KeepDocumentNodeIDsForClone">
            <summary>
            Get a value indicating whether document node IDs should be kept or generated fresh while deserializing for clone.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DeserializationContext.ZipReader">
            <summary>
            Gets or sets the zip reader.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.DeserializationContext.LibraryEntryRedirector">
            <summary>
            Gets the library entry redirector.
            </summary>
            <value>
            The library entry redirector.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.#ctor(System.Int32)">
            <summary>Only used by CommandHistory when taking snapshots.
            </summary>
            <param name="documentGeneration"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.#ctor">
            <summary>
            Constructs a DeserializationContext.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.#ctor(Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder,System.IServiceProvider)">
            <summary>
            Constructs a DeserializationContext that will use <paramref name="holeBinder" /> as its FragmentHoleBinder.
            </summary>
            <param name="holeBinder">Used to lookup object to replace
            fragment holes with. May be <c>null</c>.</param>
            <param name="parentServiceProvider">The ServiceProvider to which
            GetService calls will be delegated. May be <c>null</c>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.#ctor(Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder,System.IServiceProvider,Spotfire.Dxp.Framework.Persistence.LibraryEntryRedirector)">
            <summary>
            Constructs a DeserializationContext that will use <paramref name="holeBinder" /> as its FragmentHoleBinder.
            </summary>
            <param name="holeBinder">Used to lookup object to replace
            fragment holes with. May be <c>null</c>.</param>
            <param name="parentServiceProvider">The ServiceProvider to which
            GetService calls will be delegated. May be <c>null</c>.</param>
            <param name="libraryEntryRedirector">The library entry redirector.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.AddPostDeserializationCallback(System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.Persistence.DeserializationContext.PostDeserializationCallback)">
            <summary>
            Adds a callback that will be called after deserialization.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.InvokePostDeserializationCallbacks">
            <summary>
            Called at the end of deserialization to invoke all registered callbacks.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.GetPersistedType(System.Runtime.Serialization.SerializationInfo,System.Type)">
            <summary>
            Looks up an <see cref="T:Spotfire.Dxp.Framework.Persistence.IPersistedType" /> describing the inherited type that
            has been bound to the specified <paramref name="boundType" /> of
            the object that was serialized into the data described by
            <paramref name="info" />.
            </summary>
            <param name="info">The info.</param>
            <param name="boundType">The type to retrieve info for.</param>
            <returns>
            An <see cref="T:Spotfire.Dxp.Framework.Persistence.IPersistedType" /> or <c>null</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.GetPersistedType(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Looks up an <see cref="T:Spotfire.Dxp.Framework.Persistence.IPersistedType" /> describing the inherited type that
            has been bound to the specified <paramref name="boundType" /> of
            the object that was serialized into the data described by
            <paramref name="info" />.
            </summary>
            <param name="info">The info.</param>
            <param name="boundType">The type to retrieve info for, will be matched by substring..</param>
            <returns>
            An <see cref="T:Spotfire.Dxp.Framework.Persistence.IPersistedType" /> or <c>null</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.GetPersistedVersion(System.Runtime.Serialization.SerializationInfo,System.Type)">
            <summary>
            Gets the persisted version of the object of the specified <paramref name="type"/> 
            deserialized from the specified <paramref name="info"/>. 
            </summary>
            <param name="info">The info.</param>
            <param name="type">The type.</param>
            <returns>The persisted version.</returns>
            <remarks>
            This method returns null if the serialized data was not associated to the specified <paramref name="type"/>. 
            This occurs for example when <paramref name="type"/> is a new Type in 
            the middle of the inheritance hierarchy that has been added after the serialized data was constructed.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.GetPersistedVersion(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Gets the persisted version of the object of the specified <paramref name="type"/> 
            deserialized from the specified <paramref name="info"/>. 
            </summary>
            <param name="info">The info.</param>
            <param name="type">The caller type, this will be matched using substring..</param>
            <returns>The persisted version.</returns>
            <remarks>
            This method returns null if the serialized data was not associated to the specified <paramref name="type"/>. 
            This occurs for example when <paramref name="type"/> is a new Type in 
            the middle of the inheritance hierarchy that has been added after the serialized data was constructed.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.AddCompatibilityItem(System.Object,System.String,System.Object)">
            <summary>DO NOT USE!</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.GetSerializedType(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Looks up a <see cref="T:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo"/>
            which describes the type which the object was serialized with.
            <paramref name="info"/>.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.ShareSerializedTypesWith(Spotfire.Dxp.Framework.Persistence.SerializationContext)">
            <summary>
            Shares the serialized type info dictionary with <paramref name="serializationContext"/>.
            </summary>
            <param name="serializationContext"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.DeserializationContext.GetBoundObject``1(System.Int64)">
            <summary> </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource">
            <summary>
            Represents an resource that is embedded in the DXP file.
            </summary>
            <remarks>
            Use and serialize an instance of this object to store data in the DXP file when the analysis is saved.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.FinalizerLoggingEnabled">
            <summary>
            Finalizer logging is enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.TempDirectory">
            <summary>
            Temporary directory used for deserialization.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.name">
            <summary>
            The name of this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.uniqueIdentifier">
            <summary>
            The unique identifier of this instance, used to determine equality between instances.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.writeContentsDelegate">
            <summary>
            A delegate that can write the contents of this embedded resource to a stream.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.zipArchiveStream">
            <summary>
            A stream from an entry in the .dxp zip archive from which the contents of this 
            embedded resource can be read.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.zipEntrySize">
            <summary>
            The size of the zip archive entry. Used for progress.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> class.
            </summary>
            <param name="name">The name of the embedded resource.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> class.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="uniqueIdentifier">A string that uniquely identifies this embedded resource. 
            If two EmbeddedResource objects are serialized with the same uniqueIdentifier, only the contents from one of them will 
            be written to the dxp archive.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.#ctor(System.String,System.Action{System.IO.Stream},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource" /> class.
            </summary>
            <param name="name">The name of the embedded resource.</param>
            <param name="writeContentsDelegate">A delegate that will be called to write the contents of
            the embedded resource to a stream. For embedded resources that are serialized for persistence,
            this delegate will be called exactly once.</param>
            <param name="uniqueIdentifier">The unique identifier.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.InvalidOperationException">The deserialization context has not been correctly setup.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.OpenRead">
            <summary>
            Opens a stream from this <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> for reading.
            </summary>
            <returns>A readable <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.OpenWrite">
            <summary>
            Opens a stream to this <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> for writing.
            </summary>
            <returns>A writable <see cref="T:System.IO.Stream"/>.</returns>
            <remarks>
            Data written to an <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> will be stored in 
            the DXP file if the <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> is serialized by a 
            <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> in the document.
            <para>
            When the document is loaded from a DXP file, any serialized <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/>s
            can be deserialized as any other object and their content can be accessed 
            by calling the <see cref="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.OpenRead"/> method. 
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.SetUniqueIdentifier(System.String)">
            <summary>
            Sets the unique identifier of this instance. Used to determine equality between instances.
            If two EmbeddedResource objects are serialized with the same unique identifier, only the contents from one of them will 
            be written to the dxp archive.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.MoveZipEntryToTempFileIfUnread">
            <summary>
            If this embedded resource was created from a zip archive entry stream, moves the contents
            of the entry stream to a temp file and closes the entry stream.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.OpenAndClear">
            <summary>
            Opens a stream from this <see cref="T:Spotfire.Dxp.Framework.Persistence.EmbeddedResource"/> for reading.
            </summary>
            <returns>A readable <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.WriteToStream(System.IO.Stream)">
            <summary>
            Writes the contents of this embedded resource to the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.OpenWriteTempFile">
            <summary>
            Opens the temporary file holding the contents of this EmbeddedResource for writing, creating it if needed.
            </summary>
            <returns>
            The file stream.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.ClearTempFile">
            <summary>
            Clear the temp file if there is one.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.EmbeddedResource.Finalize">
            <summary>
            Destructor that removes any temporary file.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo">
            <summary>
            Represents a Hole in a <see cref="T:Spotfire.Dxp.Framework.Persistence.SerializedFragment`1"/>.
            </summary>
            <remarks>
            A FragmentHoleInfo contains metadata about an object that has been 
            replaced by a hole in the object graph in a 
            <see cref="T:Spotfire.Dxp.Framework.Persistence.SerializedFragment`1"/>. The metadata is intended to be 
            sufficient to find, possibly by prompting a user, a suitable object
            to bind to the hole in the running application instance.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo.#ctor(System.Object)">
            <summary>
            Constructs a fragment hole that will replace 
            <paramref name="replacedObject"/>.
            </summary>
            <param name="replacedObject"></param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo.ReplacedObject">
            <summary>
            Gets the object replaced by this hole. Will return null if this 
            FragmentHoleInfo has been deserialized.
            </summary>
            <remarks>
            Intended to allow the code constructing a fragment to inspect the
            holes created and fill them with metadata that helps finding
            suitable replacement objects for deserialization of the fragment.
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo.ExternalId">
            <summary>
            Gets or sets the external id.
            </summary>
            <value>The external id.</value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.FragmentHoleReference">
            <summary>
            Represents a Hole in a <see cref="T:Spotfire.Dxp.Framework.Persistence.SerializedFragment`1"/>.
            </summary>
            <remarks>
            A FragmentHoleReference object is used to serialize a reference to a 
            <see cref="T:Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo"/> and to lookup the object bound to
            the hole during deserialization.
            <para>
            This class does NOT implement IObjectReference since the .Net 
            serialization framework does not allow IObjectReference.GetRealObject
            to return <c>null</c>. In order to be able to replace fragment holes
            with <c>null</c> references, the FragmentHoleReference class is treated
            specially by the XmlFormatter.
            </para>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FragmentHoleReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.FragmentHoleReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.GetObjectData().
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.DocumentTypes">
            <summary>
            The different types of document files.
            </summary>
            <remarks>
            Each document file contains one document. To allow the type of the 
            document to be examined without requiring the entire document to be 
            deserialized, the document is classified with a DocumentTypes which 
            is stored in the document file metadata. 
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DocumentTypes.Analysis">
            <summary>
            An analysis document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DocumentTypes.Template">
            <summary>
            A template document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DocumentTypes.Guide">
            <summary>
            A guide document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DocumentTypes.Data">
            <summary>
            A document containing only data.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DocumentTypes.Other">
            <summary>
            Some other type of document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.DocumentTypes.All">
            <summary>
            All sorts of documents.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.IDocumentFile">
            <summary>
            Interface for the DocumentFile. Represents metadata for a file that is
            readable by an application.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentFile.DocumentType">
            <summary>
            Gets the file type of the DocumentFile.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentFile.FileFormatMatch">
            <summary>
            Gets a value indicating how well the IDocumentFileReader that 
            produced this IDocumentFile is able to understand the format of the
            underlying file.
            </summary>
            <returns>A value between 0 and 100 indicating the file format match,
            where 0 is no match and 100 is perfect match.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentFile.DocumentTitle">
            <summary>
            Gets the document title, typically file name.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentFile.FilePath">
            <summary>
            Gets the originating file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDocumentFile.GetDocument(System.IServiceProvider)">
            <summary>
            Extracts the document or an object from which the document can be built from the file.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDocumentFile.Close">
            <summary>
            Close any internal objects, such as database connections.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader">
            <summary>
            For Spotfire internal use only.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader.Open(System.String)">
            <summary>
            Creates an <see cref="T:Spotfire.Dxp.Framework.Persistence.IDocumentFile"/> object representing the file specified by
            <paramref name="filePath"/>.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
            An <see cref="T:Spotfire.Dxp.Framework.Persistence.IDocumentFile" />.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader.GetFileFormatMatch(System.String)">
            <summary>
            Examines the file name extension (and possibly also the content) 
            of the file specified by <paramref name="fileName"/> and returns a 
            value indicating how well suited this Reader is to open
            <paramref name="fileName"/>.
            </summary>
            <param name="fileName"></param>
            <returns>A value between 0 and 100 indicating the file format match,
            where 0 is no match and 100 is perfect match.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader.SupportedFileExtensions">
            <summary>
            Returns an array of file name extensions that this Reader 
            is capable of opening.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader.DocumentType">
            <summary>
            Gets the file type of the DocumentFile.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader.IsLicensed(Spotfire.Dxp.Framework.License.LicenseManager)">
            <summary>Return true if the license to use this reader is enabled.
            </summary>
            <value>True if the license to use this reader is enabled.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader.IsAvailableInWebClient">
            <summary>Return true if the file reader is available in the web client.
            </summary>
            <value>True if the file reader is available in the web client.</value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension">
            <summary>
            Represents a supported file extension, including a description.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.Description">
            <summary>
            Gets a description of the supported file extension.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.GetExtensions">
            <summary>
            Gets an array of extension strings (without the leading ".").
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.Contains(System.String)">
            <summary>Determines if this instance contains the specified <paramref name="extension"/>.
            </summary>
            <param name="extension">The extension to check for (without the leading ".").</param>
            <returns>
            	<c>true</c> if <paramref name="extension"/> is included; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.#ctor(System.String,System.String[])">
            <summary>
            Creates a SupportedFileExtension.
            </summary>
            <param name="description">Desription of the extension.</param>
            <param name="extensions">The extension strings that are supported (without the leading ".").
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.op_Equality(Spotfire.Dxp.Framework.Persistence.SupportedFileExtension,Spotfire.Dxp.Framework.Persistence.SupportedFileExtension)">
            <summary>
            Equality operator based on <see cref="M:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.op_Inequality(Spotfire.Dxp.Framework.Persistence.SupportedFileExtension,Spotfire.Dxp.Framework.Persistence.SupportedFileExtension)">
            <summary>
            Inequality operator based on <see cref="M:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SupportedFileExtension.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.IPersistenceBehaviourProvider">
            <summary>
            This interface should be implemented and registered in the AddIn 
            framework by modules that need to affect the behaviour of serialization 
            and deserialization. Typically, backward compatibility issues are
            solved by implementing this interface.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceManager"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IPersistenceBehaviourProvider.SerializationSurrogateSelector">
            <summary>
            Shall return a SurrogateSelector to be used during serialization.
            </summary>
            <remarks>
            If the <see cref="T:System.Runtime.Serialization.SurrogateSelector"/>
            class is used, surrogates must be added using a 
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that has a <c>null</c> 
            Context. 
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IPersistenceBehaviourProvider.DeserializationSurrogateSelector">
            <summary>
            Shall return a SurrogateSelector to be used during deserialization.
            </summary>
            If the <see cref="T:System.Runtime.Serialization.SurrogateSelector"/>
            class is used, surrogates must be added using a 
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that has a <c>null</c> 
            Context. 
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.IPersistenceBehaviourProvider.Binder">
            <summary>
            Shall return a SerializationBinder to be used during 
            deserialization. The <c>BindToType</c> method of the returned 
            SerializationBinder must return <c>null</c> if does not specify a
            a binding for a given type.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceBehaviourProviderProperties">
            <summary>
            Defines the AddIn property keys used for AddIns implementing 
            the IPersistenceBehaviourProvider interface.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceBehaviourProviderProperties.SerializationBinderRanking">
            <summary>
            AddIn property used to determine the Ranking of an
            IPersistenceBehaviourProvider when the Default Serialization 
            Binder is constructed. See <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceManager"/>
            for more details. The value of this property should be an int.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceBehaviourProviderProperties.SerializationSurrogateSelectorRanking">
            <summary>
            AddIn property used to determine the Ranking of an
            IPersistenceBehaviourProvider when the Default Serialization 
            Binder is constructed. See <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceManager"/>
            for more details. The value of this property should be an int.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceBehaviourProviderProperties.DeserializationSurrogateSelectorRanking">
            <summary>
            AddIn property used to determine the Ranking of an
            IPersistenceBehaviourProvider when the Default Serialization 
            Binder is constructed. See <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceManager"/>
            for more details. The value of this property should be an int.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceContextBase">
            <summary>
            Base class for <see cref="T:Spotfire.Dxp.Framework.Persistence.SerializationContext"/> and <see cref="T:Spotfire.Dxp.Framework.Persistence.DeserializationContext"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceContextBase.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceContextBase"/> class.
            </summary>
            <param name="parentServiceProvider">The parent service provider.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceContextBase.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceContextBase.State">
            <summary>
            Gets/Sets the PersistenceContextStates
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceContextBase.Properties">
            <summary>
            General-purpose property container.
            Currently used for DataManager serialization where it contains the PersistentDataContainer.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceManager">
            <summary>
            The PersistenceManager is used to resolve backward compatibility issues when a DXP file is opened.
            <seealso cref="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.AddTypeBinding(System.String,System.String,System.Int32,System.Int32,System.Type)"/>
            <seealso cref="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.AddFieldTypeBinding(System.Type,System.String,System.Type)"/>
            <seealso cref="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.AddFieldRename(System.String,System.String,System.Int32,System.Int32,System.Type,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.#ctor">
            <summary>
            Initializes a new instance of the PersistenceManager class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.RegisterDocumentFileReader(Spotfire.Dxp.Framework.Persistence.IDocumentFileReader)">
            <summary>Register a <see cref="T:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader"/> as one available
            reader for <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceManager"/> to use when reading a
            file.
            </summary>
            <param name="reader">The reader to register.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="reader"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">If a reader already is
            registered that supports any of the file extensions that <paramref name="reader"/>
            supports, and where both the readers have the same <see cref="T:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader"/>.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.InternalCanOpen(System.String,Spotfire.Dxp.Framework.License.LicenseManager,Spotfire.Dxp.Framework.Persistence.DocumentTypes)">
            <summary>Determine if the file specified by <paramref name="fileName"/>
            can be opened, for instance if there is a licensed reader that supports the
            file extension of the file. It is no guarantee that the data in the file
            can be read even if this method returns <c>true</c>.
            </summary>
            <param name="fileName">The name of the file to check.</param>
            <param name="licenseManager">The license manager.</param>
            <param name="supportedDocumentTypes">The document types that should be considered openable</param>
            <returns><c>true</c> if a licensed reader exist that supports the
            file extension of the file <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.InternalOpen(System.String,Spotfire.Dxp.Framework.License.LicenseManager)">
            <summary>
            Open the file specified by <paramref name="fileName" /> using a
            suitable IDocumentFileReader of the specified document type.
            </summary>
            <remarks>
              <list type="number">
              <item>
            Consults the Addin framework to find all IDocumentFileReaders that
            support the extension of the <paramref name="fileName" /> and for
            which there is currently an enabled license.
              </item>
              <item>
            Checks each of the found IDocumentFileReaders how well it can read
            the <paramref name="fileName" /> using
              <see cref="M:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader.GetFileFormatMatch(System.String)" />.
              </item>
              <item>
            If any of the IDocumentFileReaders is a PerfectMatch the first
            found is used.
              </item>
              <item>
            Else if any of the IDocumentFileReaders is a Match the first
            found is used.
              </item>
              <item>
            Otherwise, throws a FileLoadException.
              </item>
              </list>
            </remarks>
            <param name="fileName">Name of the file to open.</param>
            <param name="licenseManager">The license manager.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.InternalTryOpen(System.String,Spotfire.Dxp.Framework.License.LicenseManager,Spotfire.Dxp.Framework.Persistence.IDocumentFile@)">
            <summary>
            Tries to open the file specified by <paramref name="filePath" /> using a
            suitable IDocumentFileReader of the specified document type.
            </summary>
            <param name="filePath">Name of the file to open.</param>
            <param name="licenseManager">The license manager.</param>
            <param name="documentFile">The document file.</param>
            <returns>True, if succesful.</returns>
            <remarks>
              <list type="number">
              <item>
            Consults the Addin framework to find all IDocumentFileReaders that
            support the extension of the <paramref name="filePath" /> and for
            which there is currently an enabled license.
              </item>
              <item>
            Checks each of the found IDocumentFileReaders how well it can read
            the <paramref name="filePath" /> using
              <see cref="M:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader.GetFileFormatMatch(System.String)" />.
              </item>
              <item>
            If any of the IDocumentFileReaders is a PerfectMatch the first
            found is used.
              </item>
              <item>
            Else if any of the IDocumentFileReaders is a Match the first
            found is used.
              </item>
              <item>
            Otherwise, throws a FileLoadException.
              </item>
              </list>
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.AddTypeBinding(System.String,System.String,System.Int32,System.Int32,System.Type)">
            <summary>
            Adds a binding of a type with the specified original assembly and type name. 
            Use this method to add support for backwards compatibility with respect to removed types.
            When an object with the specified specified original assembly and type, marked with a PersistenceVersion 
            attribute less than the specified majorUpperVersion and minorUpperVersion, is encountered in the 
            serialized format, an object of the specified boundType will be deserialized in place of the
            original type.
            </summary>
            <param name="originalAssemblyName">Name of the original assembly.</param>
            <param name="originalTypeName">Name of the original type.</param>
            <param name="majorUpperVersion">Used with minorVersion to specify when this binding shall apply.</param>
            <param name="minorUpperVersion">The smallest minor version (within the specified majorVersion) 
            of the specified original type for which  
            this binding shall not apply.</param>
            <param name="boundType">The type that is to be bound to the specified original type.</param>
            <example>
            Assume that type A is no longer available and has been replaced by type B. Also assume that the last 
            PersistenceVersion of A was 1.7. To deserialize a 
            document containing objects of type A as objects of type B, a call to 
            PersistenceManager.AddTypeBinding() must be made. 
            Typically, the call shall be made by an AddIn related to A and B.
            <code>
            persistenceManager.AddTypeBinding(
                    "The.Assembly.Name.Of.Type.A, Version=1.0.0.0, PublicKeyToken=094358714857...", 
                    "Some.Namespace.A", 
                    1, 8, typeof(B)); 
            </code>
            With the binding above, all occurences of type A in the serialized document will be replaced 
            with type B, including uses as array element type and generic arguments. Thus a serialized List&lt;A&gt;
            will deserialize as a List&lt;B&gt;.
            
            <para>
            It is also possible to add bindings for generic types. Assume that the type Foo&lt;T&gt;
            is no longer available and has been replaced by type Bar&lt;T&gt;. Also assume that the last 
            PersistenceVersion of Foo&lt;T&gt; was 1.0. To deserialize a 
            document containing objects of type Foo&lt;int&gt;, Foo&lt;string&gt;, etc., 
            as objects of type Bar&lt;int&gt; and Bar&lt;string&gt;, a call to 
            PersistenceManager.AddTypeBinding() must be made as follows: 
            <code>
            persistenceManager.AddTypeBinding(
                    "The.Assembly.Name.Of.Type.Foo, Version=1.0.0.0, PublicKeyToken=094358714857...", 
                    "Some.Namespace.Foo`1",  // The "`1" syntax means "Generic type with one type argument". 
                    1, 1, typeof(Bar&lt;&gt;)); 
            </code>
            </para>
            </example>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.AddFieldTypeBinding(System.Type,System.String,System.Type)">
            <summary>
            Adds a binding for the specified <paramref name="fieldName"/> in the class or struct specified by <paramref name="definingType"/>.
            The value of such fields are deserialized as the specified <paramref name="fieldType"/>.
            </summary>
            <param name="definingType">Type of the class or struct that defines the field.</param>
            <param name="fieldName">Name of the field in the <paramref name="definingType"/>.</param>
            <param name="fieldType">The Type that the value of the field shall deserialize as.</param>
            <remarks>
            Use this class to add support for backwards compatibility with respect to type changes of
            fields in a class or struct. Note that the new type of the field 
            (specified by <paramref name="fieldType"/>) must be able to deserialize itself from 
            the serialized info stored by the old type of the field.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.AddFieldRename(System.String,System.String,System.Int32,System.Int32,System.Type,System.String,System.String)">
            <summary>
            Adds a binding for the field with the specified <paramref name="originalFieldName"/>
            in a class of the specified <paramref name="originalAssemblyName"/> and <paramref name="originalTypeName"/>
            of a PersistenceVersion less than the specified <paramref name="majorUpperVersion"/> and <paramref name="minorUpperVersion"/>.
            If the class or struct containing the <paramref name="originalFieldName"/> is being deserialized as the
            specified <paramref name="boundType"/>, value of the field is deserialized and bound to the
            specified <paramref name="newFieldName"/>.
            </summary>
            <param name="originalAssemblyName">Name of the assembly of the serialized class.</param>
            <param name="originalTypeName">Name of the type of the serialized class.</param>
            <param name="majorUpperVersion">The upper exclusive bound of the major version of the serialized class.</param>
            <param name="minorUpperVersion">The upper exclusive bound of the minor version of the serialized class.</param>
            <param name="boundType">The Type of the class or struct being deserialized required for the 
            field rename to be made.</param>
            <param name="originalFieldName">Name of the field in the serialized class.</param>
            <param name="newFieldName">The name of the field as expected by the deserialization code of the specified boundType.</param>
            <remarks>
            Use this class to add support for backwards compatibility with respect to name changes of
            fields in a class or struct.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.Save(Spotfire.Dxp.Framework.Persistence.DocumentTypes,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.Persistence.IDocumentSaveSettings,System.String)">
            <summary>
            Saves <paramref name="doc"/> as a .dxp file at
            <paramref name="fileName"/>.
            </summary>
            <param name="documentType">The document type.</param>
            <param name="doc">Root node of the document object graph.</param>
            <param name="settings">The document save settings or <c>null</c>.</param>
            <param name="fileName">Path including filename where the file should 
            be stored.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.Save(Spotfire.Dxp.Framework.Persistence.DocumentTypes,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,System.String)">
            <summary>
            Convenience method to save a document without a configuration block.
            </summary>
            <param name="documentType"></param>
            <param name="doc"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.AddEmbeddedResources(Spotfire.Dxp.Framework.Persistence.SerializationContext,Spotfire.Dxp.Internal.Utilities.ZipWriter,System.String)">
            <summary>
            Adds the embedded resources to the zip archieve.
            </summary>
            <param name="serContext">The ser context.</param>
            <param name="zWriter">The zip archive writer.</param>
            <param name="embeddedResourceEntryName">The name of the embedded resource entry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.SerializeFragmentForNodeCopy``1(``0,Spotfire.Dxp.Framework.Persistence.PrunerBase,System.IServiceProvider)">
            <summary>
            Serializes a fragment of an object graph.
            </summary>
            <remarks>
            A fragment is created by serializing <see cref="T:Spotfire.Dxp.Framework.Persistence.FragmentHoleReference"/>
            objects in place of some of the real objects in 
            <paramref name="objectGraph"/>.
            The State part of the
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> is set 
            to <see cref="F:System.Runtime.Serialization.StreamingContextStates.Clone"/>. 
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="objectGraph"></param>
            <param name="pruner">The pruner.</param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.DeserializeFragmentForNodeCopy``1(Spotfire.Dxp.Framework.Persistence.SerializedFragment{``0},Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder)">
            <summary>
            Deserializes the fragment but doesn't keep the document node ids.
            </summary>
            <typeparam name="T">The type of the returned subtree root.</typeparam>
            <param name="fragment">The fragment to deserialize.</param>
            <param name="holeBinder">The fragment hole binder.</param>
            <returns>The deserialized fragment subtree root.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.DeserializeFragment``1(Spotfire.Dxp.Framework.Persistence.SerializedFragment{``0},Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder,Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Int64})">
            <summary>
            Deserializes the fragment and keeps the document node ids.
            </summary>
            <typeparam name="T">The type of the returned subtree root.</typeparam>
            <param name="fragment">The fragment to deserialize.</param>
            <param name="holeBinder">The fragment hole binder.</param>
            <param name="excludedItems">The set of object ids excluded from deserialization.</param>
            <returns>The deserialized fragment subtree root.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.DeserializePersistedFragment``1(System.IO.Stream,Spotfire.Dxp.Framework.Persistence.FragmentHoleBinder)">
            <summary>
            Deserializes the fragment from persistence. Used for analytic items.
            </summary>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="stream">The stream that contains the fragment.</param>
            <param name="holeBinder">The hole binder.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.InternalGetSupportedExtensions(Spotfire.Dxp.Framework.Persistence.DocumentTypes,Spotfire.Dxp.Framework.License.LicenseManager)">
            <summary>
            Returns all file extensions supported for opening by
            implementors of IDocumentFileReader in the AddIn context.
            Only extensions implemented by currently licensed readers
            are returned.
            </summary>
            <returns>An array of supported file extension.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.GetBestMatchingDocumentFileReader(System.String,Spotfire.Dxp.Framework.License.LicenseManager,Spotfire.Dxp.Framework.Persistence.DocumentTypes)">
            <summary>Get <see cref="T:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader"/> that have the best match
            and have the highest rank.
            </summary>
            <param name="fileName"></param>
            <param name="licenseManager">The license manager.</param>
            <param name="supportedDocumentTypes">The document types that should be considered.</param>
            <returns>The best matching reader with the highest rank. If no matching
            reader is found, <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.DeserializeUndoRedoGraph(System.IO.Stream,Spotfire.Dxp.Framework.Persistence.DeserializationContext)">
            <summary>
            Deserialize an object graph for undo/redo purposes. Only used by the PagedCommandStack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.SerializeForUndoRedo(System.IO.Stream,System.Object,Spotfire.Dxp.Framework.Persistence.PrunerBase)">
            <summary>
            Serialize an object graph for undo/redo purposes. Only used by the PagedCommandStack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.Clone(System.Object)">
            <summary>Clones the specified graph by serializing it and deserializing it again.
            </summary>
            <param name="graph">The object graph to be cloned.</param>
            <returns>A clone of the specified graph.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.SerializeForPersistence(System.IO.Stream,System.Object,System.IServiceProvider,Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute,Spotfire.Dxp.Framework.Persistence.SerializationContext,Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings)">
            <summary>
            Serializes an object graph to the provided stream for persistence
            </summary>
            <param name="serializationStream">The serialization stream.</param>
            <param name="graph">The graph.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="compatibilityVersion">The persistence version of the dxp that shall be able to open the serialized document.</param>
            <param name="oldContext">The old serialization context.</param>
            <param name="systemTypeSerializationSettings">The settings for system types serialization.</param>
            <returns>
            The serialization context.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.DeserializePersistedGraph(System.IO.Stream,Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings)">
            <summary> 
            Deserializes an object graph from the provided stream. 
            The graph is assumed to have been saved for persistence.
            The deserialization is made with a new DeserializationContext that is then discarded.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.DeserializePersistedGraph(System.IO.Stream,Spotfire.Dxp.Framework.Persistence.DeserializationContext,Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings)">
            <summary> 
            Deserializes an object graph from the provided stream. 
            The graph is assumed to have been saved for persistence.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.GetSerializationInfo(System.Object,System.Type,Spotfire.Dxp.Framework.Persistence.PrunerBase,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Extracts the SerializationInfo from an object returns null for strings and arrays.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.PersistenceManager.FormatterConverter">
            <summary>
            Returns a default formatter converter.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceManager.IRewriteForOlderFileVersion">
            <summary>
            Implement in order to rewrite the document when saving for an older version. This is useful for example when introducing a
            new visual that the older version can not open.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.PersistenceManager.IRewriteForOlderFileVersion.Rewrite(Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute)">
            <summary>
            Rewrites the document for saving for the specified older version. Called in an transient transaction
            to ensure all changes are undone 
            </summary>
            <param name="olderVersion">The older version.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.SerializationBinderChain">
            <summary>
            Encapsulates a chain (list) of SerializationBinders into one 
            <see cref="T:System.Runtime.Serialization.SerializationBinder"/>. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationBinderChain.Chain(System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Adds <paramref name="binder"/> to the end of the chain. 
            </summary>
            <remarks>
            NOTE: The <paramref name="binder"/><c>.BindToType</c> method
            must return <c>null</c> if it does not have a binding for the 
            specified type.
            </remarks>
            <param name="binder">The binder to add to the end of the chain. 
            May be null, in which case it is not added to the chain.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationBinderChain.BindToType(System.String,System.String)">
            <summary>
            Calls BindToType on all SerializationBinders on the chain, 
            in order, returning 
            the first non <c>null</c> Type bound by one of the binders.
            </summary>
            
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns>The first non <c>null</c> Type bound by a binder is 
            returned. If none of the binders in the chain bind to the specified
            <paramref name="typeName"/>, <c>null</c> is returned.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.SerializationContext">
            <summary>
            The context used when a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> is serialized.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.SerializationContext.SerializedTypeInfoDict">
            <summary>
            Gets the serialized type info dictionary.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.GetSerializedType(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Looks up a <see cref="T:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo"/>
            which describes the type which the object was serialized with.
            This is used by the formatter to get the original type of a 
            an object replaced by a stand in.
            <paramref name="info"/>.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.SerializationInfoCloned(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Updates the information bound to <paramref name="originalInfo"/> with <paramref name="cloneInfo"/>.
            </summary>
            <param name="originalInfo">The original <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="cloneInfo">The new, cloned <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.RecordSerializedType(System.Runtime.Serialization.SerializationInfo,Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo)">
            <summary>
            Sets a <see cref="T:Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo"/> which describes the type which 
            the object was originally serialized with. This is used by the 
            MissingExtension in a stand in to record its original type.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.#ctor(System.IServiceProvider,Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute,Spotfire.Dxp.Framework.Persistence.SerializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.SerializationContext" /> class.
            </summary>
            <param name="parentServiceProvider">The parent service provider.</param>
            <param name="compatibilityVersion">The persistence version of the dxp that shall be able to open the serialized document.</param>
            <param name="oldContext">The old context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.Schedule(Spotfire.Dxp.Framework.Persistence.FragmentHoleInfo)">
            <summary>
            Schedules the fragment hole for inclusion in the fragment being 
            constructed.
            </summary>
            <remarks>
            This method should be used by classes (typically surrogates) that
            need to serialize a FragmentHoleReference instead of a real object.
            </remarks>
            <param name="fragmentHole">Fragment hole to be scheduled.</param>
            <returns>A FragmentHoleReference object connected to 
            <paramref name="fragmentHole"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.GetScheduledHoles">
            <summary>
            Returns the FragmentHoleInfo objects scheduled in 
            this SerializationContext.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.Schedule(Spotfire.Dxp.Framework.Persistence.EmbeddedResource)">
            <summary>
            Schedules an embedded resource for inclusion in object graph 
            being serialized.
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.GetScheduledEmbeddedResources">
            <summary>
            Returns the embedded resources scheduled in 
            this SerializationContext.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.ScheduleDispose(System.IDisposable)">
            <summary>
            Schedule something to be disposed after the serialization is complete.
            </summary>
            <param name="item">The object to dispose.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.Dispose">
            <summary>
            Disposes things that have been scheduled during the serialization.
            Does not implement IDisposable since it's a public class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializationContext.GetPersistingVersion(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute"/> defining in which version the document is being saved.
            This method is intended to be called by the GetObjectData method during serialization.
            <para>
            When the document is saved in compatibility mode the document graph and all objects in it are serialized 
            twice, first with the intention of saving the latest version and then saving an earlier version that can be opened by an
            earlier version of TIBCO Spotfire. An object that needs to adapt its persisted data so that the saved file can be 
            interpreted by an earlier version of the associated class can switch on the value returned by this method.
            </para>
            </summary>
            <param name="context">The context passed to the GetObjectData method during serialization.</param>
            <returns>
            A <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute"/> instance.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.PersistenceContextState">
            <summary>
            Used in <see cref="T:Spotfire.Dxp.Framework.Persistence.SerializationContext"/> and 
            <see cref="T:Spotfire.Dxp.Framework.Persistence.DeserializationContext"/> to indicate a substate of 
            <see cref="T:System.Runtime.Serialization.StreamingContextStates"/>.Other.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceContextState.None">
            <summary>
            No substate specified. Used when the state of the surrounding 
            StreamingContext is not Other.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceContextState.Fragment">
            <summary>
            Indicates serializaton or deserialization of a fragment.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceContextState.UndoRedo">
            <summary>
            Indicates serialization or deserialization for undo/redo.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceContextState.Snapshot">
            <summary>
            Indicates serialization or deserialization when taking snapshots.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.PersistenceContextState.Clone">
            <summary>
            Indicates serialization or deserialization when making a clone of a document node.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.SerializedFragment`1">
            <summary>
            Represents a serialized fragment of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            A fragment of type T is an object graph spanned from a T 
            object where some objects in the graph are missing. Such missing 
            objects are called Holes. 
            The T object can be reconstructed from the fragment by 
            calling PersistenceManager.DeserializeFragment{T} with a 
            <see cref="T:Spotfire.Dxp.Framework.Persistence.DeserializationContext"/> that has a correctly typed object
            bound to each Hole.
            </remarks>
            <typeparam name="T">The <see cref="T:System.Type"/> of the fragmented object.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SerializedFragment`1.contentBytes">
            <summary>
            The serialized T object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SerializedFragment`1.fragmentEmbeddedResources">
            <summary>
            All EmbeddedResources referenced by the T object.
            </summary>
            <remarks>
            A SerializedFragment needs to keep references to the 
            EmbeddedResources used by the T object in order for the 
            EmbeddedResources to get included in the Document file if
            the SerializedFragment is eventually saved.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializedFragment`1.GetHoles">
            <summary>
            Gets an array of FragmentHoleInfo objects describing all
            the holes in this fragment.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializedFragment`1.GetEmbeddedResources">
            <summary>
            Gets the embedded resources used by this fragment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializedFragment`1.Open">
            <summary>
            Opens a Stream from which the serialized fragmented object graph 
            can be read.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SerializedFragmentContext.fragmentHoles">
            <summary>
            All objects in the graph that have not been serialized as part of the fragment
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.SerializedFragmentContext.fragmentEmbeddedResources">
            <summary>
            All EmbeddedResources referenced by the fragment.
            </summary>
            <remarks>
            A SerializedFragment needs to keep references to the 
            EmbeddedResources used by the T object in order for the 
            EmbeddedResources to get included in the Document file if
            the SerializedFragment is eventually saved.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializedFragmentContext.GetHoles">
            <summary>
            Gets an array of FragmentHoleInfo objects describing all
            the holes in this fragment.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SerializedFragmentContext.GetEmbeddedResources">
            <summary>
            Gets the embedded resources used by this fragment.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.SimpleSerializationBinder">
            <summary>
            A simple dictionary-based SerializationBinder.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SimpleSerializationBinder.AddBinding(System.String,System.String,System.Type)">
            <summary>
            Adds a binding for the specified <paramref name="typeName"/> and
            <paramref name="assemblyName"/> to <paramref name="targetType"/>.
            </summary>
            <param name="assemblyName">The full assembly name of the type to
            bind.</param>
            <param name="typeName">The full type name of the type to bind.</param>
            <param name="targetType">The type to bind to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.SimpleSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            Implements SerializationBinder.BindToType().  
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns>The type previously bound by <see cref="M:Spotfire.Dxp.Framework.Persistence.SimpleSerializationBinder.AddBinding(System.String,System.String,System.Type)"/> or
            <c>null</c> if no type has been bound for the specified 
            <paramref name="typeName"/> and
            <paramref name="assemblyName"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UnknownEnum.#ctor(System.String,Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="typeInfo"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.UnknownObject">
            <summary>
            This class is used to replace an object of a class which is missing
            when a document is loaded and which doesn't extend an extension base.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UnknownObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UnknownObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UnknownObject.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray">
            <summary>
            This class represents an array of unknown objects.
            This class is used to replace an object of a class which is missing
            when a document is loaded and which doesn't extend an extension base.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.typeInfo">
            <summary>
            The serialized type info
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.array">
            <summary>
            The serialized array
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.enums">
            <summary>
            Determines if the array holds enums.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.#ctor(Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo,System.Array,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray"/> class.
            </summary>
            <param name="typeInfo">The serialized type info.</param>
            <param name="array">The array.</param>
            <param name="enums">Determines if the array holds enums or objects.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.TypeInfo">
            <summary>
            Gets the type info.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.Array">
            <summary>
            Gets the array.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.HoldsEnums">
            <summary>
            Gets a value indicating whether this array holds enums
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.HoldsObjects">
            <summary>
            Gets a value indicating whether this array holds objects.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.Spotfire#Dxp#Framework#DocumentModel#IExplicitlyClonable#Clone(Spotfire.Dxp.Framework.DocumentModel.CloneDict,Spotfire.Dxp.Framework.Persistence.PersistenceContextState,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Clones the array and its contents.
            </summary>
            <param name="dict">The clone dict.</param>
            <param name="targetState">The target persistence context state.</param>
            <param name="serContext">The serializtion streaming context.</param>
            <param name="deserContext">The deserializtion streaming context.</param>
            <returns>A cloned unknown array.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.Spotfire#Dxp#Framework#DocumentModel#IExplicitlyClonable#UpdateReferences(Spotfire.Dxp.Framework.DocumentModel.CloneDict)">
            <summary>
            Updates references.
            </summary>
            <param name="dict">The clone dict.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.Enums(Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo,System.Array)">
            <summary>
            Creates a new array with unknown enums
            </summary>
            <param name="typeInfo">The serialized type info.</param>
            <param name="array">The array of unknown enums.</param>
            <returns>A new array with unknown enums.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UnknownObjectArray.Objects(Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo,System.Array)">
            <summary>
            Creates a new array with unknown objects.
            </summary>
            <param name="typeInfo">The serialized type info.</param>
            <param name="array">The array of unknown objects.</param>
            <returns>A new array with unknown objects.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.UserLevelPersistenceManager">
            <summary>
            A facade to the global persistence manager that is registered as a service on the User level.
            This service forwards a number of calls to the global persistence manager. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.UserLevelPersistenceManager.persistenceManager">
            <summary>
            The global persistence manager service.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.UserLevelPersistenceManager.licenseManager">
            <summary>
            The user level license manager service.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UserLevelPersistenceManager.CanOpen(System.String,Spotfire.Dxp.Framework.Persistence.DocumentTypes)">
            <summary>Determine if the file specified by <paramref name="fileName"/>
            can be opened, for instance if there is a licensed reader that supports the
            file extension of the file. It is no guarantee that the data in the file
            can be read even if this method returns <c>true</c>.
            </summary>
            <param name="fileName">The name of the file to check.</param>
            <param name="supportedDocumentTypes">The document types that should be considered openable</param>
            <returns><c>true</c> if a licensed reader exist that supports the
            file extension of the file <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UserLevelPersistenceManager.Open(System.String)">
            <summary>
            Open the file specified by <paramref name="fileName" /> using a
            suitable IDocumentFileReader of the specified document type.
            </summary>
            <remarks>
              <list type="number">
              <item>
            Consults the Addin framework to find all IDocumentFileReaders that
            support the extension of the <paramref name="fileName" /> and for
            which there is currently an enabled license.
              </item>
              <item>
            Checks each of the found IDocumentFileReaders how well it can read
            the <paramref name="fileName" /> using
              <see cref="M:Spotfire.Dxp.Framework.Persistence.IDocumentFileReader.GetFileFormatMatch(System.String)" />.
              </item>
              <item>
            If any of the IDocumentFileReaders is a PerfectMatch the first
            found is used.
              </item>
              <item>
            Else if any of the IDocumentFileReaders is a Match the first
            found is used.
              </item>
              <item>
            Otherwise, throws a FileLoadException.
              </item>
              </list>
            </remarks>
            <param name="fileName">Name of the file to open.</param>
            <returns></returns>
            <exception cref="T:System.IO.FileLoadException">
            <c>System.IO.FileLoadException</c>
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UserLevelPersistenceManager.TryOpen(System.String,Spotfire.Dxp.Framework.Persistence.IDocumentFile@)">
            <summary>
            Tries to open the file specified by <paramref name="filePath" /> using a
            suitable IDocumentFileReader of the specified document type.
            </summary>
            <param name="filePath">The uploaded file path.</param>
            <param name="documentFile">The document file.</param>
            <returns>
            True, if successfull
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UserLevelPersistenceManager.GetSupportedExtensions(Spotfire.Dxp.Framework.Persistence.DocumentTypes)">
            <summary>
            Returns all file extensions supported for opening by
            implementors of IDocumentFileReader in the AddIn context.
            Only extensions implemented by currently licensed readers
            are returned.
            </summary>
            <returns>An array of supported file extension.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.UserLevelPersistenceManager.GetFileExtensionFilter(Spotfire.Dxp.Framework.Persistence.DocumentTypes)">
            <summary>
            Gets the file extension filter (the list of supported file extensions).
            </summary>        
            <param name="types">The types.</param>
            <returns>
            List of extensions
            </returns>        
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter">
            <summary>
            Helper class used for deserialization by the XmlFormatter.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.systemTypeSerializationSettings">
            <summary>
            The additional system types allowed to be serialized.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializedValue">
            <summary>
            Objects of this class represent deserialized values. We need
            this class for two reasons. Firstly, because structs have to be dealt 
            with in a special manner when they are registered in the ObjectManager.
            Secondly because we sometimes need to register fixups.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializedNonAgggregate">
            <summary>
            This class is used to represent deserialized non aggregate values, that is,
            enums and primitive values.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializedStruct">
            <summary>
            This class is used to represent deserialized structs.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializedReference">
            <summary>
            This class is used to represent deserialized references such
            as references to arrays and ordinary objects.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.Deserialize">
            <summary>
            Deserialize an object graph contained in the input stream.
            </summary>
            <returns></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            Deserialization failed or malformed XML.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializationMalformedXml(System.String)">
            <summary> Throws an exception which reports a problem with malformed XML.
            </summary>
            <param name="message">Detailed message</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The deserialized XML is malformed.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializationUnexpectedElement(System.String)">
            <summary> Throws an exception which reports an unexpected XML element.
            </summary>
            <param name="elementName">The name of the unexpected element.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeValue(Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.Context)">
            <summary> Deserialize a value
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeType(System.String,Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.Context)">
            <summary>
            Deserialize a type
            </summary>
            <param name="typeElementName">The XML element tag used in the input stream</param>
            <param name="context">The context. May be null</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeTypeObject">
            <summary> Deserialize a type object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.BindType(System.String,System.String,Spotfire.Dxp.Framework.Persistence.NonSystemTypeInfo,System.Collections.Generic.List{Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo})">
            <summary>
            Determined which type in the running instance that corresponds to the
            specified serialized type.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="fullTypeName">Full name of the type.</param>
            <param name="nonSystemTypeInfo">May be null.</param>
            <param name="genericArguments">May be null.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeString">
            <summary> Deserializes a string.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeObjectRef">
            <summary> Deserialize an object reference.
            </summary>
            <returns>The reference.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializePrimitive">
            <summary> Deserialize a primitive value.
            </summary>
            <returns>The deserialized value in an object</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeMultiDimensionalArray(Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.Context)">
            <summary> Deserialize a multidimensional array.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeArray(Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.Context)">
            <summary> Deserialize an array.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.EnumVersionConvert(System.Type,Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute,System.String)">
            <summary>
            Checks to see if the <paramref name="valueIn"/> should be converted and returns the converted value.
            </summary>
            <param name="type">The enum type to convert.</param>
            <param name="perVersion">The version of the persisted enum value.</param>
            <param name="valueIn">The value of the persisted enum.</param>
            <returns>
            The converted enum value or the original value if no conversion was needed.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.CustomSerialized(System.Type)">
            <summary>
            Determine whether we should use custom or reflection deserialization
            for a particular type.
            </summary>
            <param name="objType">The type</param>
            <returns>True if we should use custom serialization</returns>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeObject(Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.Context)">
            <summary>
            Deserialize an object.
            </summary>
            <param name="context">The context. May be null</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeStruct(Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.Context)">
            <summary> Deserialize an object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.PopulateFieldsWithReflection(System.Object,System.Type,System.Int64,System.Collections.Generic.Dictionary{System.String,Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializedValue})">
            <summary>
            Populate the fields of an object using reflection.
            </summary>
            <param name="obj">The object to populate</param>
            <param name="objType">The type of the object.</param>
            <param name="id">The id of the object.</param>
            <param name="fields">The fields read from the input stream.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.BuildSerializationInfo(Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo,System.Int64,System.Collections.Generic.Dictionary{System.String,Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializedValue})">
            <summary>
            Builds a SerializationInfo for a set of fields.
            </summary>
            <param name="typeInfo">Type information for the object or struct which contains the fields.</param>
            <param name="id">The id of the object or struct</param>
            <param name="fields">The fields</param>
            <returns>The SerializationInfo.</returns>       
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeFields(Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo)">
            <summary>
            Deserializes the fields of an object or struct.
            </summary>
            <returns>The deserialized fields</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializeField(System.Collections.Generic.Dictionary{System.String,Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.DeserializedValue},Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo)">
            <summary>
            Deserialize a field and add it to the fields.
            </summary>
            <param name="fields">The fields where the field is added.</param>
            <param name="enclosingType">Type of the enclosing object.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.BoundObjectReference">
            <summary>
            This class is used in the fix for FragmentHoleReference.
            
            It is used to encapsulate ISerializable objects bound to holes when 
            they are registered with the objectManager. The deserialization
            constructor of the encapsulated object is not called by the <see cref="T:System.Runtime.Serialization.ObjectManager"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.FragmentHoleReferenceFix(System.Runtime.Serialization.SerializationInfo,System.Int64)">
            <summary>
            This is a fix to not have the deserialization constructor called for objects referenced through fragment holes.
            This method also handles null references through unbound holes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.GetRequiredAttribute(System.String)">
            <summary> Reads the value of a required attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.GetRequiredInt(System.String)">
            <summary> Reads the value of a required integer attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.GetRequiredLong(System.String)">
            <summary> Reads the value of a required long attribute.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.DeserializationFormatter.GetId">
            <summary> Reads the value of the Id attribute.
            </summary>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.NonOwningReference">
            <summary>
            This class is used to mark a reference as non-owning.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.NonOwningReferenceArray">
            <summary>
            This class is used to mark an array as holding non-owning references.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.ExtensionInfo">
            <summary>
            Instances of this class holds the information about an extension. 
            The information is required to see whether the reference to the extension
            is through a supertype of the extension base. 
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.ReferenceInfo">
            <summary>
            Instances of this class holds information about a non
            owning reference which has not been checked yet so that
            it can be checked when the owning reference appears. 
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.FieldReferenceInfo">
            <summary>
            This class holds information about a reference stored in a field so that we
            can create reasonably informative error messages.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.ArrayReferenceInfo">
            <summary>
            This class holds information about a reference stored in an array so that we
            can create reasonably informative error messages.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.MultiDimensionalArrayReferenceInfo">
            <summary>
            This class holds information about a reference stored in a multidimensional array so that we
            can create reasonably informative error messages.
            The reason to use different classes for arrays and multidimensional arrays is efficiency.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.RootReferenceInfo">
            <summary>
            This class holds information about a reference that originates from the root.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.IContext">
            <summary>
            An interface for contexts. Contexts are used to validate the extensions of
            a document while saving.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.TopLevelContext">
            <summary>
            This class implements a top level context where no checks are made.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.ExtensionContext">
            <summary>
            This class implements an extension context which is used while an
            extension is serialized. It is used to check that the extension
            is closed and that there are no references to internal nodes in the extension.
            This is used in conjunction with saving an object of a class marked as
            an extension so that these object can be replaced with a stand in.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.ExtensionContext.#ctor(System.String)">
            <summary>
            Construct an extension context.
            </summary>
            <param name="extensionTypeName">The name of the type of the root of the extension.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.ExtensionContext.AddExtension(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.Persistence.Xml.ExtensionInfo)">
            <summary>
            This method adds the root of an extension to the
            extension context.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.ExtensionContext.AddNonExtension(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            This method adds a document node which is not the root of
            an extension to the extension context.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.ExtensionContext.AddReference(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.Persistence.Xml.ReferenceInfo)">
            <summary>
            This method adds a non owning reference to the extension
            context.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.ExtensionContext.CheckClosed">
            <summary>
            This method checks if the extension is closed. That is
            it does not contain any outgoing references to other document nodes.
            All nodes of the extension must be added prior to calling the method.
            </summary>
            <returns>True if the extension is closed</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter">
            <summary>
            Helper class used for serialization by the XmlFormatter.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.systemTypeSerializationSettings">
            <summary>
            The additional system types allowed to be serialized.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.Serialize(System.Object)">
            <summary>
            Serialize an object graph.
            </summary>
            <param name="graph">The root of the object graph to serialize</param>
            <returns></returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeNull">
            <summary>
            Serialize a null reference.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeReference(System.Object,Spotfire.Dxp.Framework.Persistence.Xml.ReferenceInfo)">
            <summary>
            Serialize a reference. The reference may be marked as 
            an non-owning reference by wrapping it in a NonOwningReference or as
            an array of non-owning references by wrapping it in 
            a NonOwningReferenceArray.
            </summary>
            <param name="obj">The referenced object.</param>
            <param name="referenceInfo">Information on where the reference occurred.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeReferencedAggregateWitdId(System.Int64,System.Object,System.Boolean)">
            <summary>
            Serializes a referenced aggregate (an ordinary object, an array, a string or a type) marked with id.
            </summary>
            <param name="id">The id of the object.</param>
            <param name="obj">The aggregate to serialize.</param>
            <param name="nonOwningReferenceArrayFlag">A flag for an ugly hack</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeArray(System.Int64,System.Object,System.Type,System.Boolean)">
            <summary>
            Serializes an array marked with id.
            </summary>
            <param name="id">The id of the array.</param>
            <param name="obj">The array to serialize.</param>
            <param name="objType">The type of the array to serialize.</param>
            <param name="nonOwningReferenceArrayFlag">A flag for an ugly hack</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeMultiDimensionalArrayElements(System.Array,System.Type,System.Int32,System.Int64[],System.Boolean)">
            <summary>
            Serializes the array elements.
            </summary>
            <param name="arr">The array to serialize.</param>
            <param name="elemType">The type of the elements of the array.</param>
            <param name="dimension">The current dimension.</param>
            <param name="indices">The current indices.</param>
            <param name="nonOwningReferenceArrayFlag">A flag for an ugly hack</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeMultiDimensionalArrayElement(System.Array,System.Type,System.Int64[],System.Boolean)">
            <summary>
            Serializes an array element.
            </summary>
            <param name="arr">The array where the element resides.</param>
            <param name="elemType">The type of the element.</param>
            <param name="indices">The indices of the element to serialize.</param>
            <param name="nonOwningReferenceArrayFlag">A flag for an ugly hack</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeType(System.String,System.Type,System.Boolean)">
            <summary>
            Serializes a type.
            </summary>
            <param name="xmlTypeElementTag">The element tag to use in the XML output.</param>
            <param name="tObj">The type object.</param>
            <param name="contextRequiresSerializability">true if the type is serialized in a context 
            that requires it to be Serializable and have a PersistenceVersion.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeTypeInfo(System.String,Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo,System.Boolean)">
            <summary>
            Serializes a type info.
            </summary>
            <param name="xmlTypeElementTag">The element tag to use in the XML output.</param>
            <param name="typeInfo">The type info to serialize.</param>
            <param name="contextRequiresSerializability">true if the type is serialized in a context 
            that requires it to be Serializable and have a PersistenceVersion.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeTypeInfoObject(System.Int64,Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo,System.Boolean)">
             <summary>
             Serialize a type info object.
             </summary>
             <remarks>
             The type of a Type object is System.RuntimeType which 
             seems to be completely undocumented. Scheduling a
             System.RuntimeType object for serialization seems to 
             lead to a non-terminating loop.
            
             Thus we use SerializedTypeInfo to represent the relevant
             type information and serialize it in a special way.
             </remarks>
             <param name="id">The id of the type object</param>
             <param name="typeInfo">The type info object to serialize</param>
             <param name="contextRequiresSerializability">true if the type is serialized in a context 
             that requires it to be Serializable and have a PersistenceVersion.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.BuildTypeInfo(System.Type)">
            <summary>
            Build a SerializedTypeInfo which stores information about a
            serialized type.
            </summary>
            <param name="tObj">The type object</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.RestoreNonSystemTypeInfoSharing(Spotfire.Dxp.Framework.Persistence.NonSystemTypeInfo)">
            <summary>
            This function rebuilds a NonSystemTypeInfo to reintroduce
            the sharing of SerializedTypeInfo objects that might have been
            lost due the serialization in undo/redo.
            </summary>
            <param name="nonSystemTypeInfo">The NonSystemTypeInfo to restore.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.RestoreTypeInfoSharing(Spotfire.Dxp.Framework.Persistence.SerializedTypeInfo)">
            <summary>
            This function rebuilds a SerializedTypeInfo to reintroduce
            the sharing of SerializedTypeInfo objects that might have been
            lost due the serialization in undo/redo.
            </summary>
            <param name="typeInfo">The SerializedTypeInfo to restore.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeObject(System.Int64,System.Object,System.Type)">
            <summary>
            Serialize an object.
            </summary>
            <param name="id">The id of the object.</param>
            <param name="obj">The object or struct.</param>
            <param name="objType">The type of the object or struct.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeFields(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Serialize the fields of an object or struct.
            </summary>
            <param name="sInfo">The SerializationInfo with information on the contents of the fields.</param>
            <param name="containgObjTypeName">The type of the containing object.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeField(System.String,System.Object,System.Type,System.String)">
            <summary>
            Serialize a field.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="obj">The value of the field.</param>
            <param name="declaredFieldType">The declared type of the field.</param>
            <param name="containingObjTypeName">The type of the containing object.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.SerializeValueTypeValue(System.Object,Spotfire.Dxp.Framework.Persistence.Xml.ReferenceInfo)">
            <summary>
            Serializes a value of value type.
            </summary>
            <param name="obj">A box containing value to be serialized.</param>
            <param name="referenceInfo">The reference information.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerializationFormatter.EnumVersionConvert(System.Type,Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute,System.String)">
            <summary>
            Converts enum according to <see cref="T:Spotfire.Dxp.Framework.Persistence.EnumVersionMapAttribute"/> 
            if such exists or leaves unchanged if not.
            </summary>
            <param name="type">The type of the enum.</param>
            <param name="persistingVersion">The persistence version we are currently serializing for.</param>
            <param name="valueIn">The present value for the enum.</param>
            <returns>The possibly converted enum value to be serialized.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.SerException">
            <summary> Class for exceptions during serialization and deserialization.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SerException"/> class.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerException.TurnIntoSerException(System.Exception)">
            <summary>
            Turns the into ser exception.
            </summary>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerException.GetSerializationException">
            <summary>
            Gets the serialization exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerException.GetTop">
            <summary>
            Gets the top.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerException.AddField(System.String,System.String)">
            <summary>
            Adds the field.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.SerException.AddArrayIndex(System.String)">
            <summary>
            Adds the index of the array.
            </summary>
            <param name="indices">The indices.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.XmlFormatter">
            <summary>
            Handles serialization and deserialization to XML.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.XmlFormatter.Serialize(System.IO.Stream,System.Object,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.Persistence.PrunerBase,Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings)">
            <summary>
            Serializes the specified object graph to XML.
            </summary>
            <param name="serializationStream">The stream to serialize to.</param>
            <param name="graph">The object graph to serialize.</param>
            <param name="context">The streaming context.</param>
            <param name="pruner">The pruner.</param>
            <param name="systemTypeSerializationSettings">The settings for system types serialization.</param>
            <returns>The object id generator.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.XmlFormatter.Deserialize(System.IO.Stream,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a XML formatted object graph from the specified stream.
            </summary>
            <param name="serializationStream">The serialization stream that contains the XML.</param>
            <param name="context">The streaming context.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Persistence.Xml.XmlFormatter.Deserialize(System.IO.Stream,System.Runtime.Serialization.StreamingContext,Spotfire.Dxp.Framework.Persistence.CompatibilityTable,Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Int64},Spotfire.Dxp.Framework.Persistence.SystemTypeSerializationSettings)">
            <summary>
            Deserializes a XML formatted object graph from the specified stream.
            </summary>
            <param name="serializationStream">The serialization stream that contains the XML.</param>
            <param name="context">The streaming context.</param>
            <param name="compatibilityTable">The compatibility table.</param>
            <param name="excludedItems">The excluded items.</param>
            <param name="systemTypeSerializationSettings">The settings for system types serialization.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Persistence.Xml.XmlTags">
            <summary>
            This class contains string constants for XML tags used in the serialization format.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences">
            <summary>
            An immutable object holding preference valus that are accessed on background threads.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.AllowAdditionalUriSchemes">
            <summary>
            Gets a value indicating whether additional uri schemes (apart from the 
            default onces) are allowed to use in link in the product.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.AdditionalUriSchemes">
            <summary>
            Gets a array of additional uri schemes that are allowed
            in links in the product.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.AllowAdditionalFileExtensions">
            <summary>
            Gets a value indicating whether additional file extensions (apart from the 
            default onces) are allowed to use in link in the product.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.AdditionalFileExtensions">
            <summary>
            Gets a array of additional file extensions that are allowed
            in links in the product.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.UseWhitelistForSecuritySensitiveUris">
            <summary>
            Gets a value indicating whether to use a whitelist for security sensitive uris.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.WhitelistForSecuritySensitiveUris">
            <summary>
            Gets a the uris allowed in security sensitive contexts.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.UseAdditionalSystemTypesNotAllowedToBePersisted">
            <summary>
            Gets a value indicating whether the AdditionalSystemTypesNotAllowedToBePersisted shall be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.AdditionalSystemTypesNotAllowedToBePersisted">
            <summary>
            Gets a set of system types that are not allowed to be persisted, that is, serialized to and deserialized from the .dxp file.
            This set will extend the set of allowed types built into SerializedTypeInfo.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.PageFooterForExports">
            <summary>
            Gets the page footer text used for PDF exports.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.IImmutablePreferences.IsAllowedInSecuritySensitiveContext(System.Uri)">
            <summary>
            Determines whether the specified URI is allowed in security sensitive contexts.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
              <c>true</c> if the URI is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationExceptionFaultCode">
            <summary>Fault codes for LibraryExceptions.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationExceptionFaultCode.Undefined">
            <summary>Undefined fault.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationExceptionFaultCode.Serialization">
            <summary>Problems when serializing/deserializing values to/from
            server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationExceptionFaultCode.PreferenceObjectExist">
            <summary>A preference object exist with the same name for another
            user group.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationExceptionFaultCode.SettingsClassType">
            <summary>For any errors regarding loading a settings class from a
            given Type name, for example using reflection to create an instance of the
            settings class or retrieving the full Type name from a settings class.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationExceptionFaultCode.PreferenceType">
            <summary>If trying to set a preference value with an object of wrong type.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException">
            <summary>Exceptions thrown for errors encountered at Preference service
            communcations.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException.#ctor(System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException"/> class.
            </summary>
            <param name="message">A message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException.FaultCode">
            <summary>Gets the fault code.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>When Overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationManager">
            <summary>Used for administrating preferences and preference objects for user groups.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationManager.#ctor(Spotfire.Dxp.Services.Preferences.IPreferenceAdministrationService,System.IServiceProvider)">
            <summary>Constructs a <see cref="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationManager"/>.
            </summary>
            <param name="service">An <see cref="T:Spotfire.Dxp.Services.Preferences.IPreferenceAdministrationService"/>
            which provides credentials to access the server.</param>
            <param name="serviceProvider">The service provider used to access
            services.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationManager.GetPreferences(Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal)">
            <summary>Gets all preferences for the user group given by <paramref name="group"/>.
            The preferences returned are those for which it is possible to set 
            user group defined values.
            </summary>
            <param name="group">The user group for which preferences will be returned.</param>
            <returns>A list of preferences for the given user group.</returns>
            <exception cref="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException"></exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="group"/>
            is <c>null</c>.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationManager.SetPreferences(Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal,System.Collections.Generic.IList{Spotfire.Dxp.Framework.Preferences.PreferenceBase})">
            <summary>Sets a preference for the group given by <paramref name="group"/>.
            </summary>
            <param name="group">The user group for which the preference will be set.</param>
            <param name="preferences">The preferences to set. If each preference is
            not already set for the group it will be added, otherwise its value will
            be changed to the value specified. If the value of a property in 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>
            is <c>null</c>, the preference will be removed for the group.</param>
            <exception cref="T:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException">Thrown with 
            <see cref="P:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationException.FaultCode"/> = 
            <see cref="F:Spotfire.Dxp.Framework.Preferences.Administration.PreferenceAdministrationExceptionFaultCode.Serialization"/>
            if unable to serialize the values for the preferences.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="group"/> or
            <paramref name="preferences"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceUsage">
            <summary>Specifies identifiers that define the usage of a preference.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferenceUsage.SingleUser">
            <summary>The preference value is only defined for a single user.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferenceUsage.UserGroup">
            <summary>The preference may be defined for user groups.
            </summary>
            <remarks>
            User group defined preferences will be used whenever there 
            is no value defined for the single user.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase">
            <summary>
            Base class for Preference implementations.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Application.Extension.CustomPreference"/>
        </member>
        <member name="E:Spotfire.Dxp.Framework.Preferences.PreferenceBase.PropertyChanged">
            <summary>Occurs when one of the properties in this preference is changed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceBase.Category">
            <summary>
            Gets the name of the category.
            Implementations of this property are to return the name of
            the category to which the preference belongs. The category name must
            not be <c>null</c> or an empty string for the preference to be
            properly persisted.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceBase.SubCategory">
            <summary>
            Gets the name of the sub category.
            Implementations of this property are to return the name of
            the subcategory to which the preference belongs. The subcategory
            must not be <c>null</c> or an empty string for the preference to
            be properly persisted.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.#ctor">
            <summary>Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.Reset">
            <summary>
            Resets all values that may explicitly have been given to the properties
            of this preference on a user level basis through a calls to 
            <see cref="P:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.Value"/>. The effect of resetting a 
            property is that when the Value of it is queried, either the
            group value or the default value will be returned.
            </summary>
            <seealso cref="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Reset"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.Save">
            <summary>Persists all changes to the properties of this preference object.
            </summary>
            <remarks>
            If the value type of a property is mutable, internal changes made to 
            the property must be manually reported through calls to 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/> for the property value to be
            persisted.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.UndoChanges">
            <summary>Undoes any changes that may have been to all of the properties
            of this preference, since it was last saved.
            </summary>
            <seealso cref="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.UndoChanges"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceBase.IsEmpty">
            <summary>Gets a value indicating whether this preference object only contains default property values or not.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.AddPreference``1(Spotfire.Dxp.Framework.Preferences.PreferenceProperty{``0})">
            <summary>
            Call this method (in the constructor of your
            concrete preference class implementation) to add a new property
            to your preference class.
            </summary>
            <param name="property">The preference property to add.</param>
            
            <returns>
            The property that was added. Use the return value of this method to 
            assign a local variable.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="property"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If a property with the same name as <paramref name="property"/> 
            already has been added to this preference.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Override this method to perform desired operations when a 
            the value of a property has changed.
            </summary>
            <param name="args">
            Event arguments containing the name of the property.
            </param>
            <remarks>
            If this method is overridden, <c>base.OnPropertyChanged</c> must be
            the first call of your method.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.Reset(System.String)">
            <summary>Resets the property with the specified name.
            </summary>
            <param name="name">The name of the property.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="name"/> is an empty string.
            </exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceBase.AllProperties">
            <summary>Gets all properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.TryGetProperty(System.String,Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase@)">
            <summary>
            Tries the get property specified by name.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="property">The preference property.</param>
            <returns><c>True</c> if the property could be fetched.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceBase.UsingMode">
            <summary>Gets or sets the using mode.
            </summary>
            <value>The using mode.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.AddPreference(Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase)">
            <summary>Called by inheritors to add a new preference.
            </summary>
            <param name="preference">The preference to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.SetAllDirty(System.Boolean)">
            <summary>Sets all properties Dirty = <paramref name="dirty"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.GetAdministrationCopy">
            <summary>Gets an administration copy of this class. The administration
            copy does not have any values populated for its properties.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceCache">
            <summary>Cache of preferences used for persistence.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceCache"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceCache"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.Remove(Spotfire.Dxp.Framework.Preferences.PreferenceCategorization,System.String)">
            <summary>Removes the specified preference from the cache.
            </summary>
            <param name="cat">The categorization.</param>
            <param name="preferenceName">Name of the preference.</param>
            <returns><c>true</c> if the preference is found and removed, otherwise
            <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.Cleanup">
            <summary>Removes all categorizations where category or sub category is null or empty.
            </summary>
            <returns><c>true</c> if any categorizations was deleted from the cache, otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.Exists(Spotfire.Dxp.Framework.Preferences.PreferenceCategorization,System.String,Spotfire.Dxp.Framework.Preferences.PreferenceValue)">
            <summary>Find out if the preference with <paramref name="preferenceName"/>
            exists with the same value as <paramref name="value"/>.
            </summary>
            <param name="categorization">A categorization to which the preference 
            belongs.</param>
            <param name="preferenceName">The name of the preference.</param>
            <param name="value">The value to compare with. Both version and the actual value
            will be compared and must be the same.</param>
            <returns><c>true</c> if the preference exist with the same value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.Exists(Spotfire.Dxp.Framework.Preferences.PreferenceCategorization,System.String,System.String)">
            <summary>Find out if the preference with <paramref name="preferenceName"/>
            exists with the same value as <paramref name="version"/>.
            </summary>
            <param name="categorization">A categorization to which the preference 
            belongs.</param>
            <param name="preferenceName">The name of the preference.</param>
            <param name="version">The version to compare with.</param>
            <returns><c>true</c> if the preference exist with the same value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.Exists(Spotfire.Dxp.Framework.Preferences.PreferenceCategorization,System.String)">
            <summary>Find out if the preference with <paramref name="preferenceName"/>
            exists.
            </summary>
            <param name="categorization">A categorization to which the preference 
            belongs.</param>
            <param name="preferenceName">The name of the preference.</param>
            <returns><c>true</c> if the preference exist.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.GetValue(Spotfire.Dxp.Framework.Preferences.PreferenceCategorization,System.String)">
            <summary>Gets the value corresponding to <paramref name="categorization"/>
            and <paramref name="preferenceName"/>.
            </summary>
            <param name="categorization">A categorization to which the preference 
            belongs.</param>
            <param name="preferenceName">Name of the preference.</param>
            <returns>The value of the requested preference. <c>null</c> if not found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.GetPreferences(Spotfire.Dxp.Framework.Preferences.PreferenceCategorization)">
            <summary>Gets the preferences for a given categorization.
            </summary>
            <param name="categorization">A categorization to which the preference 
            belongs.</param>
            <returns>The preferences for the requested categorization.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.Add(Spotfire.Dxp.Framework.Preferences.PreferenceCategorization,System.String,Spotfire.Dxp.Framework.Preferences.PreferenceValue)">
            <summary>
            Adds a preference, belonging to the preferences categorization specified 
            by the <paramref name="categorization"/> argument, and the value to the cache.
            </summary>
            <param name="categorization">A categorization to which the preference 
            belongs.</param>
            <param name="preferenceName">The name of the preference.</param>
            <param name="value">The value of the preference.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.AddReplace(Spotfire.Dxp.Framework.Preferences.PreferenceCategorization,System.String,Spotfire.Dxp.Framework.Preferences.PreferenceValue,System.Boolean)">
            <summary>
            Adds a preference, belonging to the preferences categorization specified 
            by the <paramref name="categorization"/> argument, and the value to the cache.
            If there already is a value for
            the preference, it will be replaced with the new one.
            If the value of the preference is null it will only be removed from
            the cache.
            </summary>
            <param name="categorization">A categorization to which the preference 
            belongs.</param>
            <param name="preferenceName">The name of the preference.</param>
            <param name="value">The value of the preference.</param>
            <param name="removeIfNoValue">If <c>true</c> the preferenc will be removed
            from the cache if it has no value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.Add(Spotfire.Dxp.Framework.Preferences.PreferenceCache)">
            <summary>
            Adds all preference entries contained within the specified cache.
            </summary>
            <param name="cache">The <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceCache"/> whose 
            cached entries should be added.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.AddReplace(Spotfire.Dxp.Framework.Preferences.PreferenceCache,System.Boolean)">
            <summary>
            Adds all preference entries contained within the specified cache.
            </summary>
            <param name="cache">The <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceCache"/> whose 
            cached entries should be added.</param>
            <param name="removeIfNoValue">If <c>true</c> the preferenc will be removed
            from the cache if it has no value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCache.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceCacheType">
            <summary>Specifies type of preference cache.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferenceCacheType.GlobalAndGroup">
            <summary>Values for Global/Group.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferenceCacheType.User">
            <summary>Values for User.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferenceCacheType.LocalUser">
            <summary>Local for User.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferenceCacheType.Modified">
            <summary>Modified cache.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceCategorization">
            <summary>Categorization of preference used for persistence in cache.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceCategorization.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceCategorization"/> class.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The sub category.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceException">
            <summary>Exception class for exceptions occurred in preferences.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceException"/> class.
            </summary>
            <param name="faultCode">The fault code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceException"/> class.
            </summary>
            <param name="faultCode">The fault code.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceException.FaultCode">
            <summary>The exception's faultcode.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceException.ServerStackTrace">
            <summary>Gets the server stack trace.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceFactory">
            <summary>
            Base class for preference factories.
            
            <para>
            If your preference class provides an empty constructor, a call to
            <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceFactory.CreateSimpleFactory``1"/> will create a simple factory for that
            preference.
            </para>
            
            </summary>
            
            <remarks>This class cannot be extended through inheritance.
            Instead consult <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceFactory`1"/>.
            </remarks>
            <seealso cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceFactory`1"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFactory.CreateSimpleFactory``1">
            <summary>
            Creates a factory for preference types that provide empty constructors.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase">
            preference</see>.</typeparam>
            <returns>A factory for the given preference.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFactory.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFactory.CreatePreference">
            <summary>
            Creates a new instance of the preference the class is being a factory
            for.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceFactory.PreferenceType">
            <summary>
            Gets the type of the preference class being constructed by this
            factory implementation.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceFactory`1">
            <summary>
            Implement this class to customize how your <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>
            is constructed. An object of this type is required to be able to
            <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceRegistrationService.RegisterPreference(Spotfire.Dxp.Framework.Preferences.PreferenceFactory)">
            register</see> preferences.
            
            <para>
            If your preference class provides an empty constructor, a call to
            <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceFactory.CreateSimpleFactory``1"/> will create a simple 
            factory for that preference.
            </para>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceFactory`1.PreferenceType">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.SimplePreferenceFactory`1">
            <summary>
            A basic implementation of <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceFactory"/> to be used
            for preferences that provide empty constructors.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>
            to construct. The type requires an empty constructor.
            </typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.SimplePreferenceFactory`1.CreatePreference">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager">
            <summary>This class handles caching of preferences to the local file system.
            If the "useLocalCache" is turned off, the operations will do nothing.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager.LoadFile(Spotfire.Dxp.Framework.Preferences.PreferenceCacheType)">
            <summary>Load the cache file from disk</summary>
            <param name="type">The cache file type.</param>
            <returns>If file cache is turend off or the file do not exists, an empty default object is returned.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager.SaveFile(Spotfire.Dxp.Framework.Preferences.PreferenceCache,Spotfire.Dxp.Framework.Preferences.PreferenceCacheType)">
            <summary>Saves the preference cache to disk. If file cache is turend off, nothing is saved.</summary>
            <param name="cache">The cache to save.</param>
            <param name="type">The cache file type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager.LoadFile``1(Spotfire.Dxp.Framework.Preferences.PreferenceObjectCacheType)">
            <summary>Load the cache/diff file from disk.</summary>
            <typeparam name="T">PreferenceClassCacheDiff for Modified, PreferenceClassCache for the other.</typeparam>
            <param name="type">The cache file type.</param>
            <returns>If file cache is turend off or the file do not exists, an empty default object is returned.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager.SaveFile(System.Object,Spotfire.Dxp.Framework.Preferences.PreferenceObjectCacheType)">
            <summary>Saves the preference cache to disk. If file cache is turend off, nothing is saved.</summary>
            <param name="cache">The cache to save. PreferenceClassCacheDiff for Modified, PreferenceClassCache for the other.</param>
            <param name="type">The cache file type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager.LoadSynchronizationTimeStamps">
            <summary>Load the time stamp for last synchronisation.</summary>
            <returns>The time stamp.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager.SaveSynchronizationTimeStamps(Spotfire.Dxp.Framework.Preferences.SynchronizationTimeStamps)">
            <summary>Save the time stamps for last synchronisation.</summary>
            <param name="timeStamps">The time stamp.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager.LoadFile``1(System.String,``0)">
            <summary>Loads the preference cache from disk.</summary>
            <param name="fileName">The file name (without path) of the file to load from disk.</param>
            <param name="defaultValue">The default value to return if no data exists or if cache is turned off.</param>
            <returns>A <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceCache"/>. If file cache is turend off an empty default object is returned.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager.SaveFile(System.Object,System.String)">
            <summary>Saves the preference cache to disk.
            If file cache is turend off, nothing is saved.</summary>
            <param name="data">The data to serialize and save.</param>
            <param name="fileName">The file name (without path) of the file to save the cache to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceFileManager.DoMutexOperation(Spotfire.Dxp.Internal.Utilities.InternalIOUtilities.MutexOperationExecuter)">
            <summary>Acquires a <see cref="T:System.Threading.Mutex"/> to get exclusive access to 
            persisted cache files and then executes the delegate <paramref name="executor"/>.
            </summary>
            <param name="executor">The delegate to execute when <see cref="T:System.Threading.Mutex"/> is acquired.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceManager">
            <summary>    
            Provides functionality to retrieve and set preferences for the currently logged on user.
            There is only one object of this type available in the application. This instance is registered as a top-level
            service and can be accessed through one of the service provider methods. New instances of this type cannot be created.        
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceManager.Enabled">
            <summary>Gets whether or not the use of preferences is enabled.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceManager.GetPreference``1">
            <summary>Gets a preference that has been registered with the
            framework. Note that a preference must always have been 
            registered during the initialization phase of an
            add-in for it to be returned by this method.
            </summary>
            
            <typeparam name="T">The type of the preference class which must be
            a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>.</typeparam>
            
            <returns>
            The instance of the preference class corresponding to 
            <typeparamref name="T"/>.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">
            If the preference cannot be found, that is, it is not registered.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceManager.PreferenceExists``1">
            <summary>Determines whether or not a preferences of type <c>T</c> exists,
            that is, has been registered with the framework.
            </summary>
            <returns><c>true</c> if a preference of type <c>T</c> exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectCacheType">
            <summary>Specifies type of preference object cache.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferenceObjectCacheType.GlobalAndGroup">
            <summary>Values for Global/Group.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferenceObjectCacheType.User">
            <summary>Values for User.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferenceObjectCacheType.Modified">
            <summary>Modified cache.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectClassInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectClassInfo.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="className"></param>
            <param name="objectType"></param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectClassInfo.PreferenceObjectClassName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectClassInfo.PreferenceObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectClassInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectClassInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo.#ctor(Spotfire.Dxp.Framework.Preferences.PreferenceObjectClassInfo,System.String,System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="classInfo"></param>
            <param name="name"></param>
            <param name="isDefault"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo.#ctor(Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo"/> class.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo.PreferenceObjectClassInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo.PreferenceObjectName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo.PreferenceObjectValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo.IsDefault">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo.IsApplicationDefault">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Implements ISerializable.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache">
            <summary>Used to cache Preference Objects that is synchronized with the
            server.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache.#ctor">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache.Clear">
            <summary>Clears this cache.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache.GetAllClasses">
            <summary>
            Gets all classes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache.ClearDefault(System.String)">
            <summary>Clears the default for the preference object class given by 
            <paramref name="prefClass"/>.
            </summary>
            <param name="prefClass">The pref class.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache.SetAsDefault(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier)">
            <summary>Sets the Preference object identified by <paramref name="id"/>
            as default and clears the default for all others in the class.
            If the entry is not found, nothing will be done.
            </summary>
            <param name="id">The id for which default will be set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache.GetClassFromObjectId(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier)">
            <summary>Gets the Preference class from a given Preference Object id.
            </summary>
            <param name="id">The id for which the Preference class should be 
            returned.</param>
            <returns>The Preference class of <paramref name="id"/> or <c>null</c>
            if no class was found.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache.GetEntryFromObjectId(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier)">
            <summary>Gets the Preference object from a given Preference Object id.
            </summary>
            <param name="id">The id for which the Preference object should be 
            returned.</param>
            <returns>The Preference object with id = <paramref name="id"/> or <c>null</c>
            if no object was found.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheClass">
            <summary>Representing a Preference Class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheClass.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheClass"/> class.
            </summary>
            <param name="name">The name of the class.</param>
            <param name="argumentType">The Type of the Preference object values
            contained in the class.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff">
            <summary>Representing the diff of a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache"/> 
            since last synchronization.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff.Add(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheEntry,System.Type)">
            <summary>Adds an entry to the diff.
            The convention is that if the value of the entry is null, the entry
            should be removed from the class. Otherwise the entry is either added
            or changed.
            </summary>
            <param name="entry">The entry to add.</param>
            <param name="valueType">The type of the value of the entry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff.Add(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier,System.Object,System.Type,System.Boolean)">
            <summary>Adds an entry to the diff.
            The convention is that if the value of the entry is null, the entry
            should be removed from the class. Otherwise the entry is either added
            or changed.
            </summary>
            <param name="id">The id of the Preference object to add.</param>
            <param name="value">The value of the Preference object to add.</param>
            <param name="valueType">The type of the value of the entry.</param>
            <param name="isDefault"><code>true</code> if this is the default
            object for the class.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff.Items">
            <summary>Gets the items in the diff.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff.Clear">
            <summary>Clears this diff cache.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheEntry">
            <summary>Representing a Preference object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheEntry.#ctor(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier,System.Object,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheEntry"/> class.
            </summary>
            <param name="id">The id of the Preference object.</param>
            <param name="value">The value of the Preference object.</param>
            <param name="isDefault">Defines if the entry is the value specified
            as the default by an administrator.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1">
            <summary>
            A preference object is a named value that can be stored on a user, 
            group, and global level. Preference objects are managed through the 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService"/>, using which new objects 
            can be added, removed, and queried. The addition and removal of objects
            is, however, only available on a user (personal) level. Adding
            preference object to one or more groups is only available through the 
            user interface of the application itself.
            <para>
            A preference object consists of a unique identification (a name) within 
            its preference object class (see below), and the actual value. This 
            means that two different users cannot create an object with the same 
            name within the same preference object class.
            </para>
            <para>
            The value type of a preference object is generic to reflect the type of 
            the preference class it belongs to. To be able to persist preference 
            objects, the value type must be serializable. In addition, it is also 
            recommended for the type to be immutable, that is, it should not be 
            possible to change the state of objects of that type through public 
            property setters or methods.
            </para>
            <para>
            Once added to the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService"/>, preference
            objects are fully managed by that service and synchronized with the
            server. If the <see cref="P:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.Value"/> of the preference object changes,
            the <see cref="E:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.ValueChanged"/> event is 
            fired with a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectValueChangedEventArgs`1"/> 
            containing the previous and the new value. Through this event, the
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService"/> can track changes and reflect
            them both locally and on the server. However, if
            the value type of the object is not immutable and its internal state
            changes, the event is not fired and the changes will not be detected by 
            the manager. In such cases, it is absolutely necessary to explicitly 
            requested for the changes to be persisted
            through a call to <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.ApplyChanges``1(Spotfire.Dxp.Framework.Preferences.PreferenceObject{``0})"/>.
            </para>
            <para>
            In some cases it is not possible to alter the value of a preference
            object. Whether or not the value of an object can be changed is 
            reflected through the <see cref="P:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.IsReadOnly"/> property.
            Objects that are inherited from the group or those that are global are
            examples of read-only objects.
            </para>
            <para>
            A group of (that is, one or more) preference objects belong to one 
            preference class. One such class is globally identified through its
            name (a string), for example <c>MyPreferenceObjects</c> or 
            <c>Spotfire.Dxp.PreferenceObjects</c>. Note that a preference class does 
            not physically exist either locally or on the server.
            They are comparable to the concept of namespaces in .Net programming 
            languages. All preference objects belonging to the same preference class
            must have the same value type <c>T</c>. This implies that classes should 
            be logically named to hold preference objects for a well defined area.
            </para>
            <para>
            It is possible to define default preference objects at group and
            application level. Such default objects are used as fallback objects,
            for example when searching a class 
            (see <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.Find``1(System.String,``0,Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier)"/>).
            </para>
            </summary>
            
            <typeparam name="T">
            The type of the value that the preference object is to contain. The type
            must be serializable. In addition, it is recommended for the type to 
            implement the <see cref="M:System.Object.Equals(System.Object)"/> and to be immutable.
            </typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.#ctor(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier,`0)">
            <summary>Creates a new instance of type 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> given <paramref name="value"/>.
            </summary>
            <param name="id">The identifier of the object.</param>
            <param name="value">The value to set for the object.</param>
            
            <exception cref="T:System.NotSupportedException">
            If <typeparamref name="T"/> does not support being serialized.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.#ctor(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier,`0,System.Boolean,System.Boolean)">
            <summary>Creates a new preference object. This constructor is used
            from <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.CreateAndAddPrefObject(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheEntry,System.Type,System.Boolean)"/> 
            to recreate PreferenceObjects through reflection.
            </summary>
            <param name="id">The identifier of the object.</param>
            <param name="value">The value to set for the object.</param>
            <param name="isReadOnly">Defines if a user is able to modify the 
            value for the object. For user defined objects this should typically
            be set to <code>true</code>.</param>
            <param name="isDefault"><code>true</code> if this is the default
            object for the class.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.IsDefault">
            <summary>Gets if this is the default object for the class at group level.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.Id">
            <summary>Gets the Identifier for this preference object.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.ValueChanged">
            <summary>Occurs when the value of this object is changed.
            </summary>
            <remarks>
            The event is not raised when the internal state of the value object
            changes.
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.Value">
            <summary>Gets or sets the value for this preference object.
            If the object is read only, a <see cref="T:System.NotSupportedException"/>
            will be thrown if trying to set the value.
            When the value is set the <see cref="E:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.ValueChanged"/> event will be fired.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.IsReadOnly">
            <summary>Gets whether or not this object is read only, 
            that is, if its value can be changed by the user.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.IsApplicationDefault">
            <summary>Gets if this object is the default object defined for 
            the class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier">
            <summary>Objects of this type identify objects of type <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier.ClassName">
            <summary>Gets the name of the preference class the 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> being identified belongs to.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier.Name">
            <summary>Gets the name of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> being
            identified.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier.#ctor(System.String,System.String)">
            <summary>Initializes a new object of type 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier" />.
            </summary>
            <param name="className">The name of the preference class this
            object belongs to.</param>
            
            <param name="name">The name of the preference object. The name of an 
            object must be unique within the class.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService">
            <summary>
            Provides functionality to retrieve, add, and delete preference objects
            for the currently logged on user. There is only one object of this type
            available in the application. This instance is registered as a top-level
            service and can be accessed through one of the service provider methods.
            New instances of this type cannot be created.
            <para>
            A preference object defines a value that can be set as a preference.
            All preference objects are ordered in preference classes which defines
            categories of preference values.
            </para>
            <para>
            Preference objects created through this service, are cached locally on 
            the computer until synchronized with the server, at which point the 
            settings are written to the server. The synchronization procedure is 
            automatically managed, but doing so requires the application to be 
            connected to the server.
            </para>
            <para>
            When this service is initialized during application start-up, it will
            synchronize with the server to download new preference objects that
            may have been added for the currently logged on user. This, again,
            requires a connection to the server.
            </para>
            </summary>
            
            <seealso cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.#ctor(Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager)">
            <summary>Initializes a new instance of the 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService"/> class.
            Preference objects are fetched from the server.
            </summary>
            <remarks>
            An application default preference object must be added to this 
            service for each preference class.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.ExportPreferenceObject``1(System.String,System.String,System.String,``0)">
            <summary>Persists a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> to file. 
            Note that the Preference Object will not be added to the current
            user's set of object by calling this method;
            it will only be stored to file.
            <para>
            The export mechanism is based on the .Net XML serialization and
            therefore it is required of type <typeparamref name="T"/> to 
            implement all prerequisites for such serialization to be possible.
            </para>
            </summary>
            
            <typeparam name="T">
            The type of the Preference Object value. It is required of the type
            to be serializable.
            </typeparam>
            <param name="filePath">
            A full path to the location to which the Preference Object is to be 
            saved. Note that exceptions will be thrown if the path is not valid 
            or if it is not possible to save the file to that location for some 
            reason.
            </param>
            <param name="preferenceClassName">
            The Name of Preference Class to store the 
            <paramref name="preferenceObjectValue"/> under.
            </param>
            <param name="preferenceObjectName">
            The Name of Preference Object to save. 
            </param>
            <param name="preferenceObjectValue">
            The Value of Preference Object to save.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="filePath"/>,
            <paramref name="preferenceClassName"/> or <paramref name="preferenceObjectName"/>
            is <c>null</c> or empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="preferenceObjectValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            If the file could not be created.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            If the Preference Object could not be serialized to file.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetDefaultObjectName``1(System.String)">
            <summary>
            Gets the name of the default <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> 
            (user, group, or application default) for the class defined by 
            <paramref name="preferenceClassName"/>.
            </summary>
            <param name="preferenceClassName">
            The Name of the Preference Class to look-up.
            </param>
            <returns>
            The Name of a default object if found, otherwise an empty string.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.InitializeWithLocalCache">
            <summary>Initializes the service with data from the cache objects.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.InitializeWithCache(Spotfire.Dxp.Framework.Preferences.PreferenceClassCache,Spotfire.Dxp.Framework.Preferences.PreferenceClassCache)">
            <summary>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.AllClasses">
            <summary>Gets the name of all classes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetClassType(System.String)">
            <summary>Gets the class type for the preference class with 
            class name given by <paramref name="preferenceClassName"/>
            </summary>
            <param name="preferenceClassName">The class name.</param>
            <returns>The type of the preference objects for the preference class
            given by <paramref name="preferenceClassName"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetApplicationDefaultObjectName(System.String)">
            <summary>Gets the name of the application default object.
            </summary>
            <param name="prefClass">The pref class.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.CreateAndAddPrefObject(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheEntry,System.Type,System.Boolean)">
            <summary>Creates PreferenceObjects and stores locally. 
            Should be called at init phase only.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetObjectMarkedAsDefault``1(System.String)">
            <summary>Gets the object marked as default.
            </summary>
            <param name="prefClass">The pref class.</param>
            <returns>The object marked as default if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetObjectMarkedAsApplicationDefault``1(System.String)">
            <summary>Gets the object marked as application default.
            </summary>
            <param name="prefClass">The pref class.</param>
            <returns>The object marked as applicationdefault if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetDefaultObject``1(System.String)">
            <summary>Gets the default object defined for a class.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prefClass"></param>
            <returns>The default preference object for the class given
            by <paramref name="prefClass"/>. If no default class is
            found, <c>null</c> is returned.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.SaveDiff">
            <summary>Saves the diff.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.ValidateAddObjectForDefaultRules``1(Spotfire.Dxp.Framework.Preferences.PreferenceObject{``0})">
            <summary>Validates the object for default rules.
            If the object is marked as the default object there will be an
            exception thrown if there already is an object marked as default.
            Analogous for application default.
            </summary>
            <param name="prefObject">The preference object to validate.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.Add``1(Spotfire.Dxp.Framework.Preferences.PreferenceObject{``0})">
            <summary>
            Adds a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> to the current user's 
            personal defined set of objects. The added object will be stored
            locally until synchronized with the server, which occurs immediately
            if the application is connected to the server, or at the next login
            if it is not.
            <para>
            Note that the preference object being added must be globally unique
            identified by its class and its name. If an object with the same
            name already has been added, the object is only added to the local
            cache and never synchronized with the server.
            </para>
            </summary>
            
            <typeparam name="T">
            The type of the preference value for this preference object. The
            type must be serializable.
            </typeparam>
            <param name="preferenceObject">
            The preference object to add. This object may not be null or an
            exeption is thrown.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="preferenceObject"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> with the same Id
            already has been added, or if T is incorrect, 
            for example it does not comply with the type that has previously been
            registered with the default preference object.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the <paramref name="preferenceObject"/> is marked as a default
            object but a default object already exists either at application
            level or at user level.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.ApplyChanges``1(Spotfire.Dxp.Framework.Preferences.PreferenceObject{``0})">
            <summary>
            Applies changes made to a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> in the 
            current users own defined set of preference objects. 
            Note that this call requires the object to have previously been
            added to the user's preferences.
            </summary>
            <param name="preferenceObject">
            The preference object to apply changes to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="preferenceObject"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If <paramref name="preferenceObject"/> is read-only or a default
            preference object.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="preferenceObject"/> has not previously been 
            registered with the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService"/>.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.Remove``1(Spotfire.Dxp.Framework.Preferences.PreferenceObject{``0})">
            <summary>
            Removes a preference object from the current users own defined set
            of objects.
            </summary>
            <param name="preferenceObject">
            The preference object to remove.
            </param>
            
            <returns>
            <c>true</c> if the object was found and removed;
            otherwise <c>false</c>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="preferenceObject"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If the preference object is readonly, that is, the object doesn't 
            belong to the users own defined set of objects.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the preference class given in <paramref name="preferenceObject"/> 
            doesn't exist.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.Exists(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier)">
            <summary>
            Checks whether or not a preference object exists.
            </summary>
            <param name="objectId">
            The identification of the preference object to query.
            </param>
            <returns>
            	<c>true</c> if the object exists; otherwise
            <c>false</c>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="objectId"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">If the preference class given
            in <paramref name="objectId"/> doesn't exist.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetObjects``1(System.String)">
            <summary>
            Gets all preference objects of a specified class defined by
            <paramref name="className"/>.
            </summary>
            <param name="className">
            The name of the preference class for which all objects will be fetched.
            </param>
            <returns>
            All preference objects for the given class.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="className"/> is null, is an empty string, if the
            preference class is not defined, or if T is of
            wrong type (that is, does not match the type that the class was
            registered with).
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetObject``1(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier)">
            <summary>
            Gets one specific <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> with the identity 
            defined by <paramref name="objectId"/>. The retrieval is performed
            according to the following sets of rules:
            
            <list type="numbered">
            <item>If the requested preference object is found, return it.</item>
            <item>Else, if there is a user defined default object, return it.</item>
            <item>Else, if there is a group level defined default object, 
            return it. If the user is a member of more than one group, an 
            individual group order determines which default preference object 
            to use.
            </item>
            <item>Else, if there is an application default object, return it.</item>
            <item>Else, throw exception.</item>
            </list>
            </summary>
            
            <param name="objectId">
            The id of the object to be returned.</param>
            <returns>
            The preference object identified by <paramref name="objectId"/>. 
            If no object matches the id, a default object defined for the 
            preference class is returned.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="objectId"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">If T
            is of wrong type (differs from the type that has previously been
            registered with the given id), if the preference class is not 
            defined, or if no object to return was found 
            (including a default object).
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.FindAll``1(System.String,``0)">
            <summary>
            Finds all Preference Objects in the class defined by
            <paramref name="className"/> that have the same value as
            <paramref name="value"/> and returns the identifiers of the objects
            found. Note that it is very important for the type 
            <typeparamref name="T"/> to override the 
            <see cref="M:System.Object.Equals(System.Object)"/> method with an
            appropriate implementation, since that
            implementation alone affects the objects will match the given search 
            condition object, <paramref name="value"/>.
            </summary>
            
            <typeparam name="T">
            The type of the preference value for this preference object.
            </typeparam>
            <param name="className">
            The name of the preference class in which the search operation will
            be executed.
            </param>
            <param name="value">
            The value of the preference object to compare with. The Equals
            method of the object will be used to match objects in the given
            preference class.
            </param>
            
            <returns>
            A read-only collection consisiting of preference objects that 
            match the class and value given by <paramref name="className"/> 
            and <paramref name="value"/>.
            </returns>
            
            <remarks>Objects of type <typeparamref name="T"/> must override the
            <see cref="M:System.Object.Equals(System.Object)"/>.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/> or <paramref name="className"/> is
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="className"/> is an empty string, if the 
            preference class is not defined, or if T
            is of wrong type (for example does not match the type that was previously
            registered with the given class).
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.Find``1(System.String,``0,Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier)">
            <summary>
            Finds the one and only <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> in the class 
            defined by <paramref name="className"/> that has the same value as
            <paramref name="value"/> and the id as <paramref name="objectId"/>. If
            no such object is not found, the first object in the class that has
            the same value as T will be returned even if it 
            doesn't have the same id as <paramref name="objectId"/>. If no object with 
            the same value as T is found, a default object
            defined for the class will be returned.
            </summary>
            
            <typeparam name="T">
            The type of the preference value for this preference object.
            </typeparam>
            <param name="className">
            The name of the preference class for which the object will be found.
            </param>
            <param name="value">
            The value of the preference object to compare with.
            </param>
            <param name="objectId">
            The id of the preference object to compare with.
            </param>
            
            <returns>
            The preference object that match the class, value and id
            given by <paramref name="className"/>, <paramref name="value"/>,
            and <paramref name="objectId"/>. If no exact match is found, a best match
            is performed (see above).
            </returns>
            
            <exception cref="T:System.ArgumentNullException">If
            <paramref name="value"/>, <paramref name="className"/> or
            <paramref name="objectId"/> is <c>null</c>.</exception>
            
            <exception cref="T:System.ArgumentException">If <paramref name="className"/>
            is an empty string, if the preference class is not defined, or if
            T is of wrong type.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.AddApplicationDefault``1(Spotfire.Dxp.Framework.Preferences.PreferenceObject{``0})">
            <summary>
            Adds a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/> as the application default 
            preference object. 
            </summary>
            <typeparam name="T">The type of the preference value for this
            preference object.</typeparam>
            <param name="preferenceObject">
            The preference object to add.
            </param>
            
            <remarks>
            A preference object added through a call to this method will be 
            marked as the default object for the class to which it belongs and 
            returned from query methods such as <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetObject``1(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier)"/> in 
            cases where no match can be found. The default object is also marked 
            as read only and can therefore not be deleted or have its value 
            changed through the interface of this class. In addition default 
            objects are never persisted, for example stored on the local computer or be 
            on the server.
            <para>
            A default object is typically registered with this class during the
            initialization phase of application add-ins.
            </para>
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="preferenceObject"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If T is of wrong type, that is, does not match the
            type of objects previously registered.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If an object already is marked as application default.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectService.GetAllObjectNames(System.String)">
            <summary>
            Gets the names of all preference objects for the Preference Class given
            by <paramref name="className"/>, including the application default object.
            </summary>
            
            <param name="className">The name of the preference class for which
            all object names will be returned.</param>
            
            <returns>
            A list of all object names for the Preference class given by
            <paramref name="className"/>. If no objects are found, an empty list
            is returned.
            </returns>
            
            <exception cref="T:System.ArgumentException">If <paramref name="className"/>
            is <c>null</c> or empty.
            </exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectSynchronizationDiff">
            <summary>Contains the diff with Preference objects changed on the server
            since last synchronization.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectSynchronizationDiff.#ctor(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff,Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff,Spotfire.Dxp.Framework.Preferences.SynchronizationExtent,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectSynchronizationDiff"/> class.
            </summary>
            <param name="userDiff">The user diff.</param>
            <param name="globalAndGroupDiff">The global and group diff.</param>
            <param name="synchExtent">The synch extent.</param>
            <param name="timeStamp">The time stamp from the synchronization.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectSynchronizationDiff.UserDiff">
            <summary>Gets the diff for user defined values.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectSynchronizationDiff.GlobalAndGroupDiff">
            <summary>Gets the diff for global and groupd defined values.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectSynchronizationDiff.SynchronizationExtent">
            <summary>Gets the extent of the synchronization.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectSynchronizationDiff.TimeStamp">
            <summary>Gets the time stamp from the synchronization.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectValueChangedEventArgs`1">
            <summary>Event argument used when a preference objects value has changed.
            </summary>
            <typeparam name="T">
            The value type for the preference object.
            </typeparam>
            <seealso cref="E:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1.ValueChanged"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectValueChangedEventArgs`1.OldValue">
            <summary>Gets the old value of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectValueChangedEventArgs`1.NewValue">
            <summary>Gets the new value of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObject`1"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceObjectValueChangedEventArgs`1.Id">
            <summary>Gets the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier"/> of the
            preference object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceObjectValueChangedEventArgs`1.#ctor(Spotfire.Dxp.Framework.Preferences.PreferenceObjectIdentifier,`0,`0)">
            <summary>Initializes a new instance of type 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceObjectValueChangedEventArgs`1"/>.
            </summary>
            <param name="id">The id of the preference object.</param>
            <param name="oldValue">The value before the change.</param>
            <param name="newValue">The value after the change.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1">
            <summary>
            One or more preference properties constitute a preference implemented as
            a type extending <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>. Each preference 
            property is identified by a name and the 
            <see cref="P:Spotfire.Dxp.Framework.Preferences.PreferenceBase.Category"/> and 
            <see cref="P:Spotfire.Dxp.Framework.Preferences.PreferenceBase.SubCategory"/> of the preference that it 
            is contained in.
            <para>
            The value of a preference property is decided through inheritance, where
            user values always have precedence before group values, that is, a user
            can override that value of a property inherited from a group. The same
            way, a group can override the value of a parent group. In addition, 
            the preference property may have a default values which is returned when
            neither parent group(s) nor the user has defined a value for the 
            property.
            </para>
            <para>
            Each property is also associated with a version number. This version 
            number must always be increased if the property is changed from the 
            prior version such that the new version cannot be interpreted 
            by older version through the default behavior of the .Net serialization
            framework. For instance, if the type <typeparamref name="T"/> is changed 
            from <see cref="T:System.String"/> to <see cref="T:System.Int32"/>, the version number 
            should be increased. The version number should also be increased if 
            properties are added to or removed from <typeparamref name="T"/>.
            </para>
            </summary>
            <typeparam name="T">
            The value type of this property. Note that it is highly recommended for
            this type to be immutable, that is, it should not be possible to make 
            changes to the internal state of object of the type. If the type is
            not immutable, internal changes in object must be manually reported to
            the framework through calls to <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.OnValueChanged"/>.
            <para>
            Since the property is persisted using serialization, it is required of
            type <c>T</c> to be serializable. If <c>T</c> is a custom type, it must have a <c>PersistenceVersion</c> attribute.
            </para>
            </typeparam>
            
            <seealso cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceManager"/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.DefaultValueCalculatorCallback">
            <summary>
            Delegate that calculates a default value for the preference property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.Value">
            <summary>Gets or sets the value of the property.
            A get request to this property will return the overridden value of a
            preference property. That is, if the user has overridden the value
            inherited from the user group, that inherited value is returned.
            Otherwise, the group value is returned. The same way, group values
            may override the values inherited from parent groups. If no value
            can be found, neither at the group level nor at the user level, 
            a default value is returned. The default value is passed to the  
            constructors of this class, either as a value or a 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.DefaultValueCalculatorCallback"/>. If no default value 
            exists, <c>null</c> is returned for reference types, and 
            <c>0</c> is returned for value types.
            <para>
            Setting the property will only affect the user level value and 
            override the inherited group value (if such exists). 
            </para>
            <para>
            After setting or resetting the value of a preference property, Save() 
            must be called on the owning preference to cause the property
            to be persisted.
            </para>
            </summary>
            
            <remarks>
            If the value type of this property implements 
            <see cref="T:System.IComparable"/> and minimum and maximum values were 
            defined for this property when it was created, a check will 
            be performed against these values.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If the value exceeds the minimum or maximum values defined when this
            property was initialized.
            </exception>
            <seealso cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.Save"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.#ctor(System.String,System.String,Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope,Spotfire.Dxp.Framework.Preferences.PreferenceUsage)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="version">
            A version number for the property, for example <c>"1.0"</c>. If the data 
            type of the property changes, or any other change that will cause 
            the deserialization of the persisted property value to fail is 
            inflicted upon the property, the version number must be increased.
            </param>
            <param name="persistenceScope">
            Defines if the preference should be persisted locally or on server.
            </param>
            <param name="usage">
            The usage of the property, for example if it is possible to set user group 
            values for the property.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If either of the parameters <paramref name="name"/> or 
            <paramref name="version"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If either of the parameters <paramref name="name"/> or 
            <paramref name="version"/> is an empty string.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.#ctor(System.String,System.String,Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope,Spotfire.Dxp.Framework.Preferences.PreferenceUsage,`0)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="version">
            A version number for the property, for example <c>"1.0"</c>. If the data 
            type of the property changes, or any other change that will cause 
            the deserialization of the persisted property value to fail is 
            inflicted upon the property, the version number must be increased.
            </param>
            <param name="persistenceScope">
            Defines if the preference should be persisted locally or on server.
            </param>
            <param name="usage">
            The usage of the property, for example if it is possible to set user group 
            values for the property.
            </param>
            <param name="defaultValue">
            A default value for the property.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If either of the parameters <paramref name="name"/>,
            <paramref name="version"/>, or <paramref name="defaultValue"/> is 
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If either of the parameters <paramref name="name"/> or 
            <paramref name="version"/> is an empty string.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.#ctor(System.String,System.String,Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope,Spotfire.Dxp.Framework.Preferences.PreferenceUsage,Spotfire.Dxp.Framework.Preferences.PreferenceProperty{`0}.DefaultValueCalculatorCallback)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="version">
            A version number for the property, for example <c>"1.0"</c>. If the data 
            type of the property changes, or any other change that will cause 
            the deserialization of the persisted property value to fail is 
            inflicted upon the property, the version number must be increased.
            </param>
            <param name="persistenceScope">
            Defines if the preference should be persisted locally or on server.
            </param>
            <param name="usage">
            The usage of the property, for example if it is possible to set user group 
            values for the property.
            </param>
            <param name="defaultValueCalculator">
            A delegate that provides the default value of the property.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If either of the parameters <paramref name="name"/>,
            <paramref name="version"/>, or 
            <paramref name="defaultValueCalculator"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If either of the parameters <paramref name="name"/> or 
            <paramref name="version"/> is an empty string.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.#ctor(System.String,System.String,Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope,Spotfire.Dxp.Framework.Preferences.PreferenceUsage,`0,`0)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="version">
            A version number for the property, for example <c>"1.0"</c>. If the data 
            type of the property changes, or any other change that will cause 
            the deserialization of the persisted property value to fail is 
            inflicted upon the property, the version number must be increased.
            </param>
            <param name="persistenceScope">
            Defines if the preference should be persisted locally or on server.
            </param>
            <param name="usage">
            The usage of the property, for example if it is possible to set user group 
            values for the property.
            </param>
            <param name="minimum">
            Minimum value allowed for the property. The value of the property
            will be validated to this minimum when it is set.
            </param>
            <param name="maximum">
            Maximum value allowed for the property. The value of the property
            will be validated to this minimum when it is set.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If either of the parameters <paramref name="name"/>,
            <paramref name="version"/>, <paramref name="minimum"/>, or 
            <paramref name="maximum"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If either of the parameters <paramref name="name"/> or 
            <paramref name="version"/> is an empty string.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.#ctor(System.String,System.String,Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope,Spotfire.Dxp.Framework.Preferences.PreferenceUsage,`0,`0,`0)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="version">
            A version number for the property, for example <c>"1.0"</c>. If the data 
            type of the property changes, or any other change that will cause 
            the deserialization of the persisted property value to fail is 
            inflicted upon the property, the version number must be increased.
            </param>
            <param name="persistenceScope">
            Defines if the preference should be persisted locally or on server.
            </param>
            <param name="usage">
            The usage of the property, for example if it is possible to set user group 
            values for the property.
            </param>
            <param name="defaultValue">
            A default value for the property.
            </param>
            <param name="minimum">
            Minimum value allowed for the property. The value of the property
            will be validated to this minimum when it is set.
            </param>
            <param name="maximum">
            Maximum value allowed for the property. The value of the property
            will be validated to this minimum when it is set.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If either of the parameters <paramref name="name"/>,
            <paramref name="version"/>, or 
            <paramref name="defaultValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If either of the parameters <paramref name="name"/> or 
            <paramref name="version"/> is an empty string.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.#ctor(System.String,System.String,Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope,Spotfire.Dxp.Framework.Preferences.PreferenceUsage,Spotfire.Dxp.Framework.Preferences.PreferenceProperty{`0}.DefaultValueCalculatorCallback,`0,`0)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="version">
            A version number for the property, for example <c>"1.0"</c>. If the data 
            type of the property changes, or any other change that will cause 
            the deserialization of the persisted property value to fail is 
            inflicted upon the property, the version number must be increased.
            </param>
            <param name="persistenceScope">
            Defines if the preference should be persisted locally or on server.
            </param>
            <param name="usage">
            The usage of the property, for example if it is possible to set user group 
            values for the property.
            </param>
            <param name="defaultValueCalculator">
            A delegate that provides the default value of the property.
            </param>
            <param name="minimum">
            Minimum value allowed for the property. The value of the property
            will be validated to this minimum when it is set.
            </param>
            <param name="maximum">
            Maximum value allowed for the property. The value of the property
            will be validated to this minimum when it is set.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If either of the parameters <paramref name="name"/>,
            <paramref name="version"/>, or 
            <paramref name="defaultValueCalculator"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If either of the parameters <paramref name="name"/> or 
            <paramref name="version"/> is an empty string.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.OnValueChanged">
            <summary>
            Use this method to report changes that may have occurred inside of
            an mutable property value. The <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceBase.Save"/>
            must be used to persist the changes.
            </summary>
            <remarks>
            Not reporting changes for mutable value types will leave the 
            Preferences Framework unaware of the changes and results in the new 
            value not being persisted.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope">
            <summary>Specifies identifiers to indicate the scope of preference persistence, 
            that is, whether to store it locally or on the server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope.Local">
            <summary>Preferences are stored locally on the machine.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope.Server">
            <summary>Preferences are stored on server.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferencePropertyUsingMode">
            <summary>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferencePropertyUsingMode.Standard">
            <summary>The preference property is used normally, for instance to set
            user values.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferencePropertyUsingMode.Administration">
            <summary>The preference property is used in administration mode, for instance to set values for user groups.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase">
            <summary>Base class for a preference property. 
            For more information, refer to <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/>.
            </summary>
            
            <remarks>
            It is not possible to extend this class through inheritance. Instead,
            use the class <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/>.
            </remarks>
            <seealso cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.ignoreUserValue">
            <summary>
            If true, the user value shall be ignored and only the group value shall be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Usage">
            <summary>Gets the usage of the property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.ValueType">
            <summary>Gets the type of the value of this property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Name">
            <summary>Gets the name of this property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.#ctor(System.Type,System.String,System.String,Spotfire.Dxp.Framework.Preferences.PreferencePersistenceScope,Spotfire.Dxp.Framework.Preferences.PreferenceUsage,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase"/> class.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
            <param name="persistenceScope">The persistence scope.</param>
            <param name="usage">Defines the usage of this property, e.g., if it
            is group enabled or not.</param>
            <param name="hasDefaultValue">Shall be <c>true</c> to indicate that this property has 
            a default value.</param>
            <param name="defaultValue">The default value, or null.</param>
            
            <exception cref="T:System.ArgumentNullException">
            If either of the parameters <paramref name="valueType"/>,
            <paramref name="name"/>, or <paramref name="version"/> is 
            <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If either of the parameters <paramref name="name"/> or 
            <paramref name="version"/> is an empty string.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Reset">
            <summary>
            Resets any value that may explicitly have been given to this property
            on a user level basis through a call to 
            <see cref="P:Spotfire.Dxp.Framework.Preferences.PreferenceProperty`1.Value"/>. The effect of 
            resetting a property is that when the Value of it is queried, either 
            the group value or the default value will be returned.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.UndoChanges">
            <summary>Undoes any changes that may have been to the value of this property 
            since it was last saved.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.GroupValue">
            <summary>Gets the group value. For setting this property, use the
            <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.SetGroupValue(System.Object)"/> method.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Visible">
            <summary>
            Gets whether or not the property is visible in the administration UI.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.SetGroupValue(System.Object)">
            <summary>The user value
            </summary>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentException">If the value is outside the bounds
            specified by the minimum and maximum allowed value for the property, 
            if minimum and maximum is defined.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.OnValueChanged(System.EventArgs)">
            <summary>Override this to implement different behaviour when 
            raising the <see cref="E:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.ValueChanged"/> event. Do not forget to
            call base.OnValueChanged.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.IsValueGreaterOrEqualToMinimum(System.Object)">
            <summary>Determines whether <paramref name="value"/> is greater than
            or equal to the minimum allowed value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if value is greater than or equal to minmum; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.IsValueLessThanOrEqualToMaximum(System.Object)">
            <summary>Determines whether <paramref name="value"/> is less than
            or equal to the maximum allowed value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if value is less than or equal to maximum; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.ValueChanged">
            <summary>Raised when <see cref="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.UserValue"/> is changed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Maximum">
            <summary>Gets or sets the maximum.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Minimum">
            <summary>Gets or sets the minimum.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.HasMaximum">
            <summary>Gets a value indicating whether this instance has maximum.
            </summary>
            <value>
            	<c>true</c> if this instance has maximum; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.HasMinimum">
            <summary>Gets a value indicating whether this instance has minimum.
            </summary>
            <value>
            	<c>true</c> if this instance has minimum; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.HasDefaultValue">
            <summary>Gets ot sets a value indicating whether a default value has been specified to this instance.
            </summary>
            <value>
            	<c>true</c> if this instance has default value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.DefaultValue">
            <summary>Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.UsingMode">
            <summary>Gets or sets the using mode.
            </summary>
            <value>The using mode.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Save">
            <summary>Save changes. Just set the dirty flag to false. The actual save will handled by 
            the listener to the event raised by setting this property.
            <remarks>When in administration mode this method does nothing.</remarks>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.SetUserValueWithoutEvent(System.Object)">
            <summary>Sets the user value without raising value changed event.
            </summary>
            <param name="userValue">The user value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Dirty">
            <summary>Gets or sets a value indicating whether this <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase"/> is dirty.
            Will be set to true only when the user value has changed.
            Changing this property from false to true will raise a <see cref="E:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.ValueChanged"/> event.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.PreferencePersistenceScope">
            <summary>Gets the preference persistence scope.
            </summary>
            <value>The preference persistence scope.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.HasUserValue">
            <summary>Gets whether or not this instance has a user value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.HasGroupValue">
            <summary>Gets a value indicating whether this instance has group value.
            </summary>
            <value>
            	<c>true</c> if this instance has group value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.Version">
            <summary>Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.UserValue">
            <summary>Gets or sets the user value.
            </summary>
            <value>The user value.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase.IgnoreUserValue">
            <summary>
            Gets or sets a value indicating whether the user value shall be ignored and only the group value shall be used.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceRegistrationService">
            <summary>
            <para>
            Provides functionality to add preference types. 
            There is only one object of this type
            available in the application. This instance is registered as a top-level
            service and can be accessed through one of the service provider methods.
            New instances of this type cannot be created.
            </para>
            <para>
            For a logged on user to use a preference, it must first be registered 
            with this service. As soon as the user is logged on, 
            the preference is populated with its persisted values, if such exist.
            If not, the preference is given default values while waiting for the 
            user to set its values. When preferences are saved, their values are
            persisted using .Net serialization on the client and on the server
            depending on the settings of the preference.
            The preference is fetched thru the 
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceManager"/> 
            service.
            </para>
            </summary>
            
            <seealso cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>
            <seealso cref="T:PreferenceProperty"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceRegistrationService.#ctor">
            <summary>
            Internal constructor to prevent instantiation via the public API.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceRegistrationService.PreferenceExists(System.Type)">
            <summary>Determines if a Preferences of the given type exist.
            </summary>
            <returns><c>true</c> if it exists, otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceRegistrationService.GetRegistrations">
            <summary>Gets all registrations.
            </summary>
            <returns>A list with all registrations.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceRegistrationService.RegisterPreference(Spotfire.Dxp.Framework.Preferences.PreferenceFactory)">
            <summary>
            <para>
            Registers a preference factory with the preference framework.
            </para>
            <para>
            It is highly recommended to check whether or not a factory has
            been registered with the framework, prior to registering it. This
            is done using the <see cref="M:Spotfire.Dxp.Framework.Preferences.PreferenceRegistrationService.PreferenceExists(System.Type)"/> method.
            </para>
            </summary>
            
            <param name="preferenceFactory">
            The preference factory to register. May not be <c>null</c>.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            If factory creating a <paramref name="preferenceFactory"/> with the same 
            <see cref="P:Spotfire.Dxp.Framework.Preferences.PreferenceBase.Category"/> and 
            <see cref="P:Spotfire.Dxp.Framework.Preferences.PreferenceBase.SubCategory"/> has already been 
            registered with this class.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="preferenceFactory"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">If the factory returns null
            when asked to create a preference object. Also thrown if the
            preference class does not define the 
            <see cref="T:Spotfire.Dxp.Framework.Persistence.PersistenceVersionAttribute"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If this registry is no longer open for new registrations.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceRegistrationService.PreferenceExists``1">
            <summary>Determines whether or not a preferences of type <c>T</c> exists,
            that is, has been registered in the framework.
            </summary>
            <returns><c>true</c> if it exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager">
            <summary>
            <para>
            Provides functionality to retrieve and add preferences for the currently
            logged on user. There is only one object of this type
            available in the application. This instance is registered as a
            service on the User level and can be accessed through one of the service provider methods.
            New instances of this type cannot be created.
            </para>
            <para>
            To use a preference, it is registered with this manager. When registered, 
            the preference is populated with its persisted values, if such exist.
            If not, the preference is given default values while waiting for the 
            user to set its values. When preferences are saved, their values are
            persisted using .Net serialization on the client and on the server
            depending on the settings of the preference.
            </para>
            </summary>
            
            <remarks>
            Note caching preferences to local disk can be disabled. This is used by the Web Player.
            This can be set at reation or changed by PreferenceManager.Enabled.
            </remarks>
            
            <seealso cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>
            <seealso cref="T:PreferenceProperty"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.ConnectivityService">
            <summary>
            Gets the connectivity service.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.PreferenceService">
            <summary>Gets the preference service instance to use.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.CachePreferencesToLocalDisk">
            <summary>Gets whether or not the preferences should be cached to local disk.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.IsOnline">
            <summary>Gets a value indicating whether the server is online.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.#ctor(Spotfire.Dxp.Framework.Preferences.PreferenceRegistrationService,Spotfire.Dxp.Services.Preferences.IPreferenceService,Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService,Spotfire.Dxp.Framework.Persistence.PersistenceManager,System.Boolean,Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceManager"/> class.
            </summary>
            <param name="registrationService">Service containing preference registrations.</param>
            <param name="serverService">The server service interface.</param>
            <param name="serverInfoService">The server info.</param>
            <param name="persistenceManager">The persistence manager.</param>
            <param name="cachePreferencesToLocalDisk">Should the modification be synced to the local file system.</param>
            <param name="threadSynchronisationToken">The object that is used to synchronize multi-threaded access to this instance.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.PopulatePreferencesFromServer">
            <summary>Loads the preferences from the server or the local file cache.</summary>
            <exception cref="T:System.InvalidOperationException">If user not online.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.PopulatePreferencesFromLocalCache">
            <summary>Loads the preferences from the local cache files.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.Synchronize">
            <summary>Synchronizes the local preference cache with the server.
            Do nothing if cache read only or not on line.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.PreferenceExists(System.Type)">
            <summary>Determines if a Preferences of the given type exist.</summary>
            <returns><c>true</c> if it exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.GetPreference``1">
            <summary>Gets a preference object that has been registered with the
            framework. Note that a preference object must always have been 
            registered with the framework during the initialization phase of an
            add-in for it to be returned by this method.
            </summary>
            
            <typeparam name="T">The type of the preference class which must be
            a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>.</typeparam>
            
            <returns>
            The instance of the preference class corresponding to 
            <typeparamref name="T"/>.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">
            If the preference cannot be found, that is, it is not registered.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.GetPreference(System.Type)">
            <summary>
            Gets a preference object that has been registered with the framework. Note that a preference object must always have been registered
            with the framework during the initialization phase of an add-in for it to be returned by this method.
            </summary>
            <param name="t">The Type which must be a subclass a PreferenceBase or a subclass of it.</param>
            <returns>
            The instance of the preference class corresponding to Type t which must be a subclass of PreferenceBase.
            </returns>
            <exception cref="T:System.InvalidOperationException">If the preference is not a PreferenceBase</exception>
            <remarks>
            This was added for the special case Spotfire.Dxp.Data.Access.IAdapterPreference which do not reference Framework, and thus wasn't
            instead using able to use: <see cref="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.GetPreference``1" />.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.FindAllGroupEnabledPreferences">
            <summary>Finds all group enabled preferences.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.FindEnabledPreferences(System.String)">
            <summary>
            Finds all group enabled preferences for the provided sub category
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.RegisterPreference(Spotfire.Dxp.Framework.Preferences.PreferenceFactory)">
            <summary>Register a new preference, add it to the maps and listen to change events.</summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.ResetMemoryPreferences">
            <summary>Resets all preferences in memory to their default values.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.SavePreferencesToServer(Spotfire.Dxp.Framework.Preferences.PreferenceCache)">
            <summary>Update the server with the preferences in the cache.</summary>
            <returns>True if the preferences were saved to the server.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.SavePreferencesToServerOneByOne(Spotfire.Dxp.WebServices.Preference[])">
            <summary>Update the server with the preferences in the cache.
            Those that fail will be logged.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.TrySynchronizePreferences(System.String)">
            <summary>Upload changes in the modified cache file to the server and
            download changes from server and apply to the memory cache. Then write the new caches to the cache files.</summary>
            <param name="lastTimeStamp">The time stamp of the this/last sync time.</param>
            <returns>The time stamp of the last sync time.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.SynchronizePreferencesWithServer(System.String,Spotfire.Dxp.Framework.Preferences.PreferenceCache)">
            <summary>Uploads the changes in the cache to the server and downloads new changes. 
            Then write the new caches from the server to the memory and cache files.</summary>
            <param name="lastTimeStamp">The time stamp of the this/last sync time.</param>
            <param name="cache">The cache to upload to the server.</param>
            <returns>The time stamp of the last sync time.</returns>
            <exception cref="T:Spotfire.Dxp.Services.Preferences.PreferenceServiceException">Thrown if fails.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.SynchronizePreferences(Spotfire.Dxp.Framework.Preferences.PreferenceSynchronizationDiff)">
            <summary>Write the new caches from the server to the memory and cache files.</summary>
            <param name="synchronizationResponse">The server synchronization reposponse.</param>
            <returns>The time stamp of the last sync time.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.WritePropertyToCacheFile(Spotfire.Dxp.Framework.Preferences.PreferenceBase,Spotfire.Dxp.Framework.Preferences.PreferencePropertyBase,Spotfire.Dxp.Framework.Preferences.PreferenceCacheType)">
            <summary>Updates the cache file with property value and save it.</summary>
            <param name="preference">The preference to update.</param>
            <param name="property">The property value to set.</param>
            <param name="cacheType">The cache file to update.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.WriteDiffToFile(Spotfire.Dxp.Framework.Preferences.PreferenceCache,Spotfire.Dxp.Framework.Preferences.PreferenceCacheType)">
            <summary>Merge the diff and write it to the file.</summary>
            <param name="diff">The diff to merge.</param>
            <param name="type">The file to merge to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.ClearCacheFile(Spotfire.Dxp.Framework.Preferences.PreferenceCacheType)">
            <summary>Clears the preference cache file.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.ClearTimeStamps">
            <summary>Clears the synchronization time stamps.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.ClearAllServerCacheFiles">
            <summary>Clears all server caches, for example all caches for Preferences
            and Preference objects that are involved in server synchronization. 
            This includes the Time stamp cache. Local preferences cache is NOT cleared.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.CreateTimeStamps(System.String,System.String)">
            <summary>Creates a new time stamp.</summary>
            <param name="preferencesTimeStamp">Preference sync time, if <c>null</c> or empty, then not set.</param>
            <param name="preferenceObjectsTimeStamp">Preference object sync time, if <c>null</c> or empty, then not set.</param>
            <returns>The created time stamp.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.LookupPreference(System.String,System.String)">
            <summary>Fetch a preference from the in memory map.</summary>
            <param name="category">The category.</param>
            <param name="subCategory">The sub category.</param>
            <returns>The preference if it exist otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.ApplyDiffsToMemoryCache(Spotfire.Dxp.Framework.Preferences.PreferenceCache,Spotfire.Dxp.Framework.Preferences.PreferenceCache)">
            <summary>Apply the diffs to the memory cache</summary>
            <param name="userServerDiff">The user level changes.</param>
            <param name="groupServerDiff">The group level changes.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.PopulatePreferenceObjects(Spotfire.Dxp.Framework.Preferences.PreferenceObjectService)">
            <summary>Download preference objects from server and set them on the service.</summary>
            <param name="service">The preference service.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.PerformWorkerSynchronization(Spotfire.Dxp.Framework.Preferences.PreferenceObjectService)">
            <summary>
            Performs download/synchronization of preferences and preference objects in a worker
            environment, used when creating a user session and in order to achieve faster login time
            the two web service calls to the Spotfire Server are done in parallel.
            </summary>
            <param name="preferenceObjectService">The preference objects service.</param>
            <remarks>Inline of <see cref="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.PopulatePreferencesFromServer"/> and <see cref="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.PopulatePreferenceObjects(Spotfire.Dxp.Framework.Preferences.PreferenceObjectService)"/> so that
            the calls to the Spotfire Server can be done in parallel for faster login.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.StorePreferenceObjectDiffAndCacheAndUpdateServer(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff)">
            <summary>Stores modified preference objects to cache file. Modified objects 
            are always User defined values. Global and Group modifications are not allowed.
            </summary>
            <remarks>If the client is online, e.g., the server is reachable, the changed 
            objects in <paramref name="diff"/> will be updated on the server.
            Updates from server are not downloaded to client.</remarks>
            <param name="diff">The changed values.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.GetPreferenceClassCacheFromFile(Spotfire.Dxp.Framework.Preferences.PreferenceObjectCacheType)">
            <summary>Gets the preference class cache of requested type from disk file.</summary>
            <param name="cacheType">Type of the cache.</param>
            <returns>A <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCache"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.SynchronizePreferenceObjectsWithServerAndUpdateFiles(System.String)">
            <summary>Update changes from local file to server and write the changes from the server 
            to the local files, if update was successful.</summary>
            <remarks>Note, the preference service memory objects will not be updated.</remarks>
            <param name="lastTimeStamp">Last sync time.</param>
            <returns>The new sync time if successful, otherwise the old one.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.ClearPreferenceObjectCacheFile(Spotfire.Dxp.Framework.Preferences.PreferenceObjectCacheType)">
            <summary>Clears the preference object cache file.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.SavePreferenceObjectsToServerOneByOne(Spotfire.Dxp.WebServices.PreferenceObjectEntry[])">
            <summary>Save preference objects entries to the server by writing them one by one.
            Those that fail will be logged.</summary>
            <param name="objectEntries">Entries to be set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.MergeAndWritePreferenceObjectFile(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff,Spotfire.Dxp.Framework.Preferences.PreferenceObjectCacheType)">
            <summary>Updates a local cache file with with the values given by <paramref name="diff"/>.</summary>
            <param name="diff">The diff.</param>
            <param name="cacheType">Type of the cache.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.InternalPreferenceManager.AddAndWritePrefrenceObjectsToModifiedFile(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff)">
            <summary>The locally storde diff file is updated with values in <paramref name="diff"/>. 
            This is needed if we have a locally stored diff that has not been synchronized, 
            and there are more modified values that need to be stored.
            </summary>
            <param name="diff">The diff of values to update the locally stored diff with.</param>
            <returns>The merged diff after update.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceServiceWrapper">
            <summary>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceServiceWrapper.Instance(Spotfire.Dxp.Services.WebServiceCache)">
            <summary>Get an instance of this class.</summary>
            <param name="webServices">The web services.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceServiceWrapper.SynchronizePreferences(Spotfire.Dxp.WebServices.PreferenceDiff)">
            <summary>
            Synchronizes preferences with the server.
            </summary>
            <param name="request">A diff object containing the differences made
            on the client since last synchronization.</param>
            <returns>
            A diff containing the differences made on the server since
            the last synchronization.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceServiceWrapper.SetPreferences(Spotfire.Dxp.WebServices.Preference[])">
            <summary>
            Updates the server with the changed/added or removed preferences
            given in <paramref name="preferences"/>.
            </summary>
            <param name="preferences">The preferences to be updated on the server.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceServiceWrapper.SynchronizePreferenceObjects(Spotfire.Dxp.WebServices.PreferenceObjectDiff)">
            <summary>
            Synchronizes preference objects with the server.
            </summary>
            <param name="request">A diff object containing the differences made
            on the client since last synchronization.</param>
            <returns>
            A diff containing the differences made on the server since
            the last synchronization.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceServiceWrapper.SetPreferenceObjects(Spotfire.Dxp.WebServices.PreferenceObjectEntry[])">
            <summary>
            Updates the server with the changed/added or removed preferences
            given in <paramref name="preferenceObjects"/>.
            </summary>
            <param name="preferenceObjects">The preference objects to be updated on the server.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceServiceWrapper.GetDefaultPreferenceObject(System.String)">
            <summary>
            Gets the default preference object for the preference object class
            defined by <paramref name="prefObjectClass"/>.
            </summary>
            <param name="prefObjectClass">The preference object class for which
            the default object will be determined.</param>
            <returns>The current default preference object.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceSynchronizationDiff">
            <summary>Contains the diff with Preference values changed on the server
            since last synchronization.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceSynchronizationDiff.#ctor(Spotfire.Dxp.Framework.Preferences.PreferenceCache,Spotfire.Dxp.Framework.Preferences.PreferenceCache,Spotfire.Dxp.Framework.Preferences.SynchronizationExtent,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceSynchronizationDiff"/> class.
            </summary>
            <param name="userDiff">The user diff.</param>
            <param name="globalAndGroupDiff">The global and group diff.</param>
            <param name="synchExtent">The extent of the synchronization.</param>
            <param name="timeStamp">The time stamp from the synchronization.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceSynchronizationDiff.UserDiff">
            <summary>Gets the diff for user defined values.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceSynchronizationDiff.GlobalAndGroupDiff">
            <summary>Gets the diff for global and groupd defined values.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceSynchronizationDiff.SynchronizationExtent">
            <summary>Gets the extent of the synchronization.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceSynchronizationDiff.TimeStamp">
            <summary>Gets the time stamp from the synchronization.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities">
            <summary>Utilities used in the Preferences Framework.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.GetDirtyPropertiesAsPreferences(Spotfire.Dxp.Framework.Preferences.PreferenceBase,Spotfire.Dxp.Framework.Preferences.PreferencePropertyUsingMode)">
            <summary>
            Converts all properties of a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase" />
            to an array of <see cref="N:Spotfire.Dxp.Framework.Preferences" />.
            If <paramref name="usingMode" /> is <see cref="F:Spotfire.Dxp.Framework.Preferences.PreferencePropertyUsingMode.Administration" />
            the value set is the group value, otherwise it is the user value.
            </summary>
            <param name="prefBase">The <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase" /> to fetch properties from.</param>
            <param name="usingMode">The <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferencePropertyUsingMode" />.</param>
            <returns>
            An array of <see cref="T:Spotfire.Dxp.WebServices.Preference" />, one for each property in <paramref name="prefBase" />.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.PreferenceBaseToPreferenceKeyList(Spotfire.Dxp.Framework.Preferences.PreferenceBase)">
            <summary>Converts all properties of a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/>
            to an array of <see cref="T:Spotfire.Dxp.WebServices.PreferenceKey"/>.
            </summary>
            <param name="prefBase">The <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceBase"/> to fetch properties from.</param>
            <returns>An array of <see cref="T:Spotfire.Dxp.WebServices.PreferenceKey"/>, one for each property in <paramref name="prefBase"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.CacheToPreferenceDiff(Spotfire.Dxp.Framework.Preferences.PreferenceCache,System.String)">
            <summary>Converts preference cache to preference diff used for synchronization.
            </summary>
            <param name="userCache">The user cache.</param>
            <param name="timeStamp">The time stamp.</param>
            <returns>A preference diff.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.CacheToPreferenceArray(Spotfire.Dxp.Framework.Preferences.PreferenceCache)">
            <summary>Converts preferenc cache to preference array.
            </summary>
            <param name="userCache">The user cache.</param>
            <returns>A preference array</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.GetVersionFromPreference(Spotfire.Dxp.WebServices.Preference)">
            <summary>Gets the version from a preference.
            </summary>
            <param name="preference">The preference.</param>
            <returns>The version for the preference.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.GetSubCategoryFromPreference(Spotfire.Dxp.WebServices.Preference)">
            <summary>Gets the sub category from a preference.
            </summary>
            <param name="preference">The preference.</param>
            <returns>The sub category for the preference.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.PreferenceDiffToSynchronizationDiff(Spotfire.Dxp.WebServices.PreferenceDiff)">
            <summary>Converts a Preferences diff to a synchronization diff.
            </summary>
            <param name="serverDiff">The server diff.</param>
            <returns>A synchronization diff.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.PreferenceClassCacheDiffToPreferencObjectEntryArray(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff)">
            <summary>
            Converts a Preferences class diff to preferenc object entry array.
            </summary>
            <param name="diff">The diff.</param>
            <returns>
            A preference object entry array.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.PreferenceObjectDiffToPreferenceObjectSynchronizationDiff(Spotfire.Dxp.WebServices.PreferenceObjectDiff,Spotfire.Dxp.Framework.Persistence.PersistenceManager)">
            <summary>
            Converts a preferences object diff to a preference object synchronization diff.
            </summary>
            <param name="serverDiff">The server diff.</param>
            <param name="persistenceManager">The persistence manager.</param>
            <returns>
            A preference object synchronization diff.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.PreferenceObjectEntryArrayToPreferenceClassCacheDiff(Spotfire.Dxp.WebServices.PreferenceObjectEntry[],Spotfire.Dxp.Framework.Persistence.PersistenceManager)">
            <summary>
            Converts a Preference object entry array to a Preference class cache diff.
            </summary>
            <param name="entries">The entries to convert.</param>
            <param name="persistenceManager">The persistence manager.</param>
            <returns>A Preference class cache diff.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.PreferenceClassCacheDiffToPreferenceObjectDiff(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff,Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheDiff,System.String)">
            <summary>
            Converts a preferences class cache diff to preference object diff.
            </summary>
            <param name="userDiff">The user diff.</param>
            <param name="groupDiff">The group diff.</param>
            <param name="timeStamp">The time stamp.</param>
            <returns>
            A preference object diff.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.ConvertToServerPreferenceObject(Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheEntry)">
            <summary>
            Converts a <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheEntry" /> to
            a <see cref="T:Spotfire.Dxp.WebServices.PreferenceObjectEntry" />.
            </summary>
            <param name="entry">The entry to convert.</param>
            <returns>
            The resulting entry.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.ConvertToPreferenceClassCacheEntry(Spotfire.Dxp.WebServices.PreferenceObjectEntry,Spotfire.Dxp.Framework.Persistence.PersistenceManager)">
            <summary>
            Converts a <see cref="T:Spotfire.Dxp.WebServices.PreferenceObjectEntry"/> to a
            <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceClassCacheEntry"/>.
            </summary>
            <param name="entry">The entry to convert.</param>
            <param name="persistenceManager">The persistence manager.</param>
            <returns>The resulting entry.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.SerializeAndConvertToBase64String(System.Object)">
            <summary>
            XML serialization of <paramref name="obj" /> and converting
            it to a base64 string.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>
            A base64 string, but will return <c>null</c> if
            <paramref name="obj" /> is <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The serialization stream is
            a null reference or the graph is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">When an error occurs during
            serialization.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.TrySerializeBase64(System.Object,System.String@)">
            <summary>
            Serializes the given value and converts the serialized XML to a
            base64 encoded string.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="serializedValue">The resuls of the serialization and
            encoding process.</param>
            <returns>
            true if successful; otherwise false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.DeserializeFromBase64String(System.String,Spotfire.Dxp.Framework.Persistence.PersistenceManager)">
            <summary>
            XML deserialization of <paramref name="base64String"/>.
            </summary>
            <param name="base64String">The string to deserialize.</param>
            <param name="persistenceManager">The persistence manager.</param>
            <returns>
            A deserialized object, but will return <c>null</c> if
            <paramref name="base64String"/> is <c>null</c> or empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">When unable to convert from base64 string or
            when creating the <see cref="T:System.IO.MemoryStream"/>.</exception>
            <exception cref="T:System.FormatException">When unable to converte from base64 string.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">When an error occur during
            deserialization.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.TryDeserializeBase64(Spotfire.Dxp.Framework.Persistence.PersistenceManager,System.String,System.Object@)">
            <summary>
            Deserializes an object from a base64 encoded string.
            </summary>
            <param name="persistenceManager">The manager to use to serialize.</param>
            <param name="base64string">The string to decode and deserialize.</param>
            <param name="val">The resulting value.</param>
            <returns>true if successful; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceUtilities.TryDeserializeBase64ToJson(System.String,System.String,System.String,System.String,System.String@)">
            <summary>Tries to deserialize a base64 preference value to JSON.</summary>
            <param name="category">Preference category</param>
            <param name="type">Preference type</param>
            <param name="name">Preference name</param>
            <param name="base64String">Preference value, serialized and Base64 encoded</param>
            <param name="jsonValue">A JSON string containing the preference value deserialized from Base64.</param>
            <returns>A JSON string containing the preference value deserialized from Base64.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.PreferenceValue">
            <summary>Contains the value for a preference among with its version.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.PreferenceValue.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.PreferenceValue"/> class.
            </summary>
            <param name="serializedValue">The value.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceValue.HasValue">
            <summary>Gets a value indicating whether this instance has a value.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceValue.SerializedValue">
            <summary>Gets the value which is serialized to a string.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.PreferenceValue.Version">
            <summary>Gets the version.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.SynchronizationExtent">
            <summary>Defines the extent of a synchronization.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.SynchronizationExtent.Full">
            <summary>Full synchronization.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Preferences.SynchronizationExtent.Partial">
            <summary>Partial synchronization.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Preferences.SynchronizationTimeStamps">
            <summary>
            Represents the time-stamp of when we last synchronized the preferences
            with the server.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.SynchronizationTimeStamps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Preferences.SynchronizationTimeStamps"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.SynchronizationTimeStamps.PreferencesTimeStamp">
            <summary>
            Gets or sets the time-stamp of when the preferences were last synchronized.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.SynchronizationTimeStamps.PreferenceObjectsTimeStamp">
            <summary>
            Gets or sets the time-stamp of when the preference objects were last
            synchronized.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.SynchronizationTimeStamps.ServerUri">
            <summary>
            Gets or sets the URL of the server we last synchronized with.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Preferences.SynchronizationTimeStamps.Username">
            <summary>
            Gets or sets the username of he/she who last performed synchronization.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Preferences.SynchronizationTimeStamps.ResetTimestamps">
            <summary>Resets the last synced server timestamps.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster">
            <summary>
            Base for all scripts. This must exist in framework to support scripts definitions in all assemblies.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster.approvalStamp">
            <summary>
            The approval stamp
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster.#ctor(System.String,System.String,Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster" /> class.
            </summary>
            <param name="scriptCode">The script code.</param>
            <param name="name">The name.</param>
            <param name="scriptType">Type of the script.</param>
            <param name="approvalStamp">The approval stamp.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster.Hash">
            <summary>
            Gets the hash of this script.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster.Hash2">
            <summary>
            Gets the hash of this script with de-normalized line breaks.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster.Name">
            <summary>
            Gets the name of this script.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster.ScriptType">
            <summary>
            Gets the name of the script type.
            </summary>
            <value>
            The name of the script type.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster.ComputeApprovalFromScript(System.String)">
            <summary>
            Computes the approval from script.
            </summary>
            <param name="theScript">The script.</param>
            <returns>The approval stamp computer from the script</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster.IsApprovedByCurrentUser(Spotfire.Dxp.Internal.Utilities.ClientType,log4net.ILog)">
            <summary>
            Determines if this script is approved by the current user.
            </summary>
            <param name="clientType">Type of the client.</param>
            <param name="logger">The logger to log errors in. Typically: ScriptService.Log</param>
            <returns>
            True if this script is approved by the current user.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.DefaultScriptTruster.ComputeApprovalFromHash(System.String)">
            <summary>
            Computes the approval from hash.
            </summary>
            <param name="theHash">The hash.</param>
            <returns>The approval stamp computer from the hash</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ScriptTrust.HashComputer">
            <summary>
            Contains function to compute hashes. This is used by the script mechanism.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.HashComputer.Compute(System.String)">
            <summary>
            Computes the hash for a string.
            </summary>
            <param name="computeHashFrom">The string to compute the hash from.</param>
            <returns>The hash for the string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.HashComputer.DeNormalizeLineBreaks(System.String)">
            <summary>
            Converts all "\r\n" to "\n" in the specified string.
            </summary>
            <param name="str">The string to denormalize.</param>
            <returns>The denormalized string.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster">
            <summary>
            Base for all scripts and is used to check trusts in AnalysisApplication.
            </summary>
            <remarks>
            This must exist in framework to support scripts definitions in all assemblies.
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster.ScriptType">
            <summary>
            Gets the name of the script type.
            </summary>
            <value>
            The name of the script type.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster.Hash">
            <summary>
            Gets the hash of this script.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster.Hash2">
            <summary>
            Gets the hash of this script with de-normalized line breaks.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster.Name">
            <summary>
            Gets the name of this script.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster.IsApprovedByCurrentUser(Spotfire.Dxp.Internal.Utilities.ClientType,log4net.ILog)">
            <summary>
            Determines if this script is approved by the current user.
            </summary>
            <param name="clientType">Type of the client.</param>
            <param name="logger">The logger to log in.</param>
            <returns>
            True if this script is approved by the current user.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustLegacyOfflineCache">
            <summary>
            A representation of the content in the legacy script trust cache that is used in offline mode in the desktop client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustLegacyOfflineCache.trustedScripts">
            <summary>
            The trusted scripts.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustLegacyOfflineCache.#ctor(System.Collections.Generic.Dictionary{System.String,System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustLegacyOfflineCache"/> class.
            </summary>
            <param name="trustedScripts">The legacy trusted scripts.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustLegacyOfflineCache.GetFilePath">
            <summary>
            Gets the path to the cache file where legacy trusted scripts are kept.
            </summary>
            <returns>The path to the cache file where trusted scripts are kept.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustLegacyOfflineCache.ReadFromFile">
            <summary>
            Reads the legacy offline script cache from file.
            </summary>
            <returns>The cache.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustLegacyOfflineCache.InitializeTrustService(Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService)">
            <summary>
            Initializes the trust service.
            </summary>
            <param name="scriptTrustService">The script trust service.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustLegacyOfflineCache.WriteToFile">
            <summary>
            Writes the legacy offline script cache to file.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache">
            <summary>
            A representation of the content in the script trust cache that is used in offline mode in the desktop client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache.trustedScripts">
            <summary>
            A mapping from server name to a set script hashes that are approved on that server.
            The server names are not used when we initialize the trust service from the offline file. The point of keeping the names
            is to be able to remove script trust when a server no longer trusts a script but keep it in the offline cache file if another server
            still trusts the script.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache.#ctor(System.Collections.Generic.Dictionary{System.String,Spotfire.Dxp.Internal.Utilities.Collections.Set{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache"/> class.
            </summary>
            <param name="trustedScripts">The trusted scripts.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache"/> class from being created.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache.ReadFromFile">
            <summary>
            Reads the offline script cache from from file.
            </summary>
            <returns>The cache.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache.InitializeTrustService(Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService)">
            <summary>
            Initilaizes the <paramref name="scriptTrustService"/> with the scripts that are trusted in the offline cache.
            </summary>
            <param name="scriptTrustService">The script trust service.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache.Update(System.String,System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String},System.Boolean})">
            <summary>
            Updates the offline script trust cache.
            </summary>
            <param name="currentServer">The current server.</param>
            <param name="scriptTrust">The trust.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache.WriteToFile">
            <summary>
            Writes the offline cache to file.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustOfflineCache.GetFilePath">
            <summary>
            Gets the path to the cache file where trusted scripts are kept.
            </summary>
            <returns>The path to the cache file where trusted scripts are kept.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService">
            <summary>
            A service for managing script trust.
            </summary>
            <remarks>
            <para>
            There are currently two major different scripts. The ones we call old scripts,
            which are python, js ..., and then we have the SQL scripts used to query the 
            data base to build an analyse, which is called CustomQuery. 
                * CustomQuery => Sql scripts used to query a data base and used by the connector
                * OldScripts => All the scripts before custom query, python, js ... 
            The reason for separating those scripts is that there should be possible to be 
            authorised to create custom queries but not python scripts. 
            </para><para>
            The old scripts are a separate entity and is stored by them self in the library
            and are referenced by the analysis. For custom queries they are stored in the
            meta data of the data adapter schema and thus it is handled a bit different.
            </para><para>
            To execute an old script we use the ScriptManager, but for the custom query it
            is embedded inside the analys and it is executed when retreiving the data from
            the database and is handled in the class: DataAccessDataSourceLink. 
            </para>
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.MutexName">
            <summary>
            The name of the mutex that is used when updating the offline cache. The point of the mutex is to prevent several Spotfire instances
            to update the cache file simultaneusly.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.Logger">
            <summary>
            The logger for the script trust service.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.cache">
            <summary>
            A cache mapping script type and script hashes to a flag indicating whether the script is trusted or not.
            This structured is protected by the lock on this object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.queriesInProgress">
            <summary>
            A set of script type and script hash hashes which we currently query the server about. This is used to eliminate multiple queries for the same script.
            This structured is protected by the lock on this object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.serverName">
            <summary>
            The name of the server, that should be used when updating the script trust offline cache.
            If <c>null</c>, then the offline cache will not be updated.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.clientType">
            <summary>
            The client type.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.#ctor(System.String,Spotfire.Dxp.Internal.Utilities.ClientType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService" /> class.
            </summary>
            <param name="serverName">The name of the server, that should be used when updating the script trust offline cache.
            If <c>null</c>, then the offline cache will not be updated.</param>
            <param name="clientType">Type of the client.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType">
            <summary>
            The existing script types.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType.CustomQuery">
            <summary>
            Custom queries.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType.OldScripts">
            <summary>
            The old types: Python, js .. this is all scripts before custom query were introduced.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.Log">
            <summary>
            Gets the logger for the script trust service.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.LoadTrustedScripts(Spotfire.Dxp.Framework.Library.LibraryEntry)">
            <summary>
            Loads the trusted scripts.
            </summary>
            <param name="entry">The entry.</param>
            <returns>List of trusted scripts</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.GetPropertyName(Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType)">
            <summary>
            Gets the name of the script type.
            </summary>
            <param name="scriptType">Type of the script.</param>
            <returns>The property name used for storing the trused scripts in the library item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">unknown scipt type: + scriptType</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.GetType(System.String)">
            <summary>
            Gets the name of the script type.
            </summary>
            <param name="scriptType">Type of the script.</param>
            <returns>Returns the script type corresponding to the string scriptType.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">unknown scipt type: + scriptType</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.IsTrusted(Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String)">
            <summary>
            Determines whether a script with the specified hash is trusted.
            </summary>
            <param name="scriptType">Type of the script.</param>
            <param name="hash">The hash.</param>
            <returns>
              <c>true</c> if the specified hash is trusted; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">unknown scipt type: + scriptType</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.IsTrusted(Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String,Spotfire.Dxp.Framework.Library.InternalLibraryManager)">
            <summary>
            Determines whether a script with the specified hash is trusted.
            </summary>
            <param name="scriptType">Type of the script.</param>
            <param name="hash">The hash.</param>
            <param name="internalLibraryManager">The internal library manager.</param>
            <returns>
              <c>true</c> if the specified hash is trusted; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">unknown scipt type: + scriptType</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.Update(Spotfire.Dxp.Framework.Library.InternalLibraryManager,Spotfire.Dxp.Framework.Library.LibraryEntry,Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType)">
            <summary>
            Updates the service cache with trusted script hashes stored in a library entry.
            </summary>
            <param name="internalLibraryManager">The internal library manager.</param>
            <param name="entry">The library entry.</param>
            <param name="scriptType">The script type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.Update(Spotfire.Dxp.Framework.Library.InternalLibraryManager,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String}})">
            <summary>
            Updates the service with trust information for scripts. If a script hash in <paramref name="scriptHashes" /> is included in the
            <paramref name="trustedScriptHashes" /> then it is added as a trusted script. If not, we consult the library.
            </summary>
            <param name="internalLibraryManager">The internal library manager.</param>
            <param name="trustedScriptHashes">The trusted script hashes that were set as a property on the analysis file in the library.</param>
            <param name="scriptHashes">The script hashes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Unknown script type:  + scriptHash.Key
            or
            Unknown script type:  + scriptHash.Key
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.IsTrusted(Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster,Spotfire.Dxp.Framework.Library.InternalLibraryManager)">
            <summary>
            Determines if the specified script can be trusted.
            First, the cache of trusted scritps is consulted, then the library manager, if one is supplied.
            </summary>
            <param name="scriptTruster">The script to examine.</param>
            <param name="internalLibraryManager">The internal library manager.</param>
            <returns>
            true if the script is trusted.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.SetLibraryProperties(Spotfire.Dxp.Framework.Library.InternalLibraryManager,Spotfire.Dxp.Framework.Library.LibraryEntry,System.Collections.Generic.IList{Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster})">
            <summary>
            Sets the TrustedScripts and TrustedCustomQueries library properties
            for entities that are trusted (if any).
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="entry">The library entry.</param>
            <param name="scripts">The scripts.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.Create(Spotfire.Dxp.Internal.Utilities.ClientType,Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService)">
            <summary>
            Creates the service.
            </summary>
            <param name="currentClientType">Type of the current client.</param>
            <param name="connectivityService">The connectivity service.</param>
            <returns>
            The created service.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.CreateForNonDesktop(Spotfire.Dxp.Internal.Utilities.ClientType)">
            <summary>
            Creates the service for a non desktop client.
            </summary>
            <param name="clientType">Type of the client.</param>
            <returns>
            The created service.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.CreateForOfflineDesktop">
            <summary>
            Creates the service for an offline desktop client.
            </summary>
            <returns>
            The created service.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.CreateForOnlineDesktop(System.String)">
            <summary>
            Creates the service for an online desktop client.
            </summary>
            <param name="serverName">Name of the server.</param>
            <returns>
            The created service.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.AddTrustedScriptFromOfflineCache(Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String)">
            <summary>
            Adds a script the the set of scripts. This should be used when populating the cache from the offline file.
            It does not write through to the offline file.
            Updates the service with trust information for scripts.
            </summary>
            <param name="scriptType">Type of the script.</param>
            <param name="hash">The hash.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown script type: + scriptType</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.Update(System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String},System.Boolean})">
            <summary>
            Updates the service with trust information for scripts.
            </summary>
            <param name="scriptTrust">The script trust.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.Update(System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String},System.Boolean},System.Collections.Generic.HashSet{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String}})">
            <summary>
            Updates the service with trust information for scripts.
            </summary>
            <param name="scriptTrust">The mapping from script hash to trust.</param>
            <param name="hashesToInvalidate">The hashes to invalidate the trust for.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.IsApprovedByCurrentUser(Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster,log4net.ILog)">
            <summary>
            Determines whether the specified script is approved by the current user.
            </summary>
            <param name="script">The script.</param>
            <param name="logger">The logger.</param>
            <returns><c>True</c> if approved; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.IsTrustedInLibrary(Spotfire.Dxp.Framework.Library.InternalLibraryManager,System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.ScriptType,System.String})">
            <summary>
            Returns true if there is at least one .dxp file in the library which has the script hash marked as trusted.
            </summary>
            <param name="internalLibraryManager">The internal library manager</param>
            <param name="script">The script.</param>
            <returns>
            true if there is at least one .dxp file in the library which has the script hash marked as trusted.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown script type: + script.Key</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.IsMemberOfCustomQueryAuthorGroup">
            <summary>
            Determines whether current user is in the custom query group.
            </summary>
            <returns>
              <c>true</c> if user is in the custom query group; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.IsMemberOfScriptAuthorGroup">
            <summary>
            Determines whether the current user is a member of Authorized Script Author group.
            </summary>
            <returns><c>true</c>, the current user is a member of Authorized Script Author group.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.AppendIfTrusted(Spotfire.Dxp.Framework.Library.InternalLibraryManager,System.Boolean,Spotfire.Dxp.Framework.ScriptTrust.IScriptTruster,System.Collections.Generic.List{System.String},System.Collections.Generic.ISet{System.String})">
            <summary>
            Appends script hash if the script is trusted.
            </summary>
            <param name="internalLibraryManager">The internal library manager.</param>
            <param name="userIsAuthorized">if set to <c>true</c> user is trusted.</param>
            <param name="script">The script.</param>
            <param name="existingTrustedScripts">The existing trusted scripts.</param>
            <param name="setToAddTo">The set to add to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.InitializeFromOfflineCache">
            <summary>
            Initializes the service from the offline cache file.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.ScriptTrust.ScriptTrustService.LogTrustedScriptFound(System.String,System.String,System.String)">
            <summary>
            Log that a trusted script was found in the cache.
            </summary>
            <param name="scriptName">The script name.</param>
            <param name="hashName">The hash name.</param>
            <param name="hash">The hash.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BackgroundImage">
            <summary>
            Background image base class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundImage"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundImage"/> class during deserialization.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImage.ToHtmlCss">
            <summary>
            Generates html css for this object.
            </summary>
            <returns>A string with css.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BackgroundImageNone">
            <summary>
            Represents a background image value of "none".
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImageNone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundImageNone"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImageNone.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundImageNone"/> class during deserialization.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImageNone.ToHtmlCss">
            <summary>
            Generates html css for this object.
            </summary>
            <returns>A string with css.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BackgroundImageUrl">
            <summary>
            Linear two point gradient.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundImageUrl.url">
            <summary>
            The image url.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImageUrl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundImageUrl" /> class.
            </summary>
            <param name="url">The image url.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImageUrl.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundImageUrl"/> class during deserialization.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BackgroundImageUrl.Url">
            <summary>
            Gets the image url.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImageUrl.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundImageUrl.ToHtmlCss">
            <summary>
            Generates html css for this object.
            </summary>
            <returns>A string with css.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BackgroundRepeatValue">
            <summary>
            Represents a value for background image repetition.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundRepeatValue.Repeat">
            <summary>
            The image is repeated as much as needed to cover the whole background.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundRepeatValue.Space">
            <summary>
            The image is repeated as much as possible without clipping. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundRepeatValue.Round">
            <summary>
            As the allowed space increases in size, the repeated images will stretch (leaving no gaps) until there is room for another one to be added.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundRepeatValue.NoRepeat">
            <summary>
            The image is not repeated.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BackgroundRepeat">
            <summary>
            Represents border radius for a corner in a box.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.repeatX">
            <summary>
            The x repetition.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.repeatY">
            <summary>
            The y repetition.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.#ctor(Spotfire.Dxp.Framework.Styles.BackgroundRepeatValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundRepeat" /> class.
            </summary>
            <param name="repeat">The repeat.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.#ctor(Spotfire.Dxp.Framework.Styles.BackgroundRepeatValue,Spotfire.Dxp.Framework.Styles.BackgroundRepeatValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundRepeat" /> class.
            </summary>
            <param name="repeatX">The repeat x.</param>
            <param name="repeatY">The repeat y.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundRepeat"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.RepeatX">
            <summary>
            Gets the x repetition.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.RepeatY">
            <summary>
            Gets the y repitition.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundRepeat.ToHtmlCss">
            <summary>
            Generates html css for this object.
            </summary>
            <returns>A string with css.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BackgroundSizeType">
            <summary>
            Represents a value for background size.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundSizeType.Auto">
            <summary>
            Scales the background image in the corresponding direction such that its intrinsic proportion
            is maintained.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundSizeType.Contain">
            <summary>
            The background image should be scaled to be as small as possible while ensuring both its dimensions
            are greater than or equal to the corresponding dimensions of the background positioning area.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundSizeType.Cover">
            <summary>
            The background image should be scaled to be as large as possible while ensuring both its dimensions
             are less than or equal to the corresponding dimensions of the background positioning area.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundSizeType.WidthAndHeightSpecified">
            <summary>
            The width and height properties as specified individually.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BackgroundSize">
            <summary>
            Represents border radius for a corner in a box.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundSize.height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundSize.sizeType">
            <summary>
            The size type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BackgroundSize.width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundSize.#ctor(Spotfire.Dxp.Framework.Styles.BackgroundSizeType,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundSize"/> class.
            </summary>
            <param name="sizeType">Type of the size.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundSize.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BackgroundSize"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BackgroundSize.Height">
            <summary>
            Gets the hight
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BackgroundSize.SizeType">
            <summary>
            Gets size type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BackgroundSize.Width">
            <summary>
            Gets the  width
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundSize.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundSize.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundSize.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundSize.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BackgroundSize.ToHtmlCss">
            <summary>
            Generates html css for this object.
            </summary>
            <returns>A string with css.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BorderRadius">
            <summary>
            Represents border radius for a corner in a box.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BorderRadius.Zero">
            <summary>
            The zero border radius, that is, a corner that is not rounded at all.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BorderRadius.x">
            <summary>
            The x radius.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BorderRadius.y">
            <summary>
            The y radius.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BorderRadius.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BorderRadius"/> struct. X and Y radius are the same.
            </summary>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BorderRadius.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BorderRadius"/> struct.
            </summary>
            <param name="x">The x radius.</param>
            <param name="y">The y raidus.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BorderRadius.X">
            <summary>
            Gets the X radius.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BorderRadius.Y">
            <summary>
            Gets the Y radius.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BorderRadius.IsRounded">
            <summary>
            Gets a value indicating whether border is rounded. Both X and Y needs to be positive in this case.
            </summary>
            <value>
            <c>true</c> if this instance is rounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BorderRadius.XDiameter">
            <summary>
            Gets the X diameter (2 * X). 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BorderRadius.YDiameter">
            <summary>
            Gets the X diameter (2 * Y). 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BorderRadius.op_Equality(Spotfire.Dxp.Framework.Styles.BorderRadius,Spotfire.Dxp.Framework.Styles.BorderRadius)">
            <summary>
            Compares two BorderRadius structures for equality.
            </summary>
            <param name="r1">The first radius to compare.</param>
            <param name="r2">The second radius to compare.</param>
            <returns><c>true</c> if the X, Y properties of r1 and r2 are equal; otherwise, <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BorderRadius.op_Inequality(Spotfire.Dxp.Framework.Styles.BorderRadius,Spotfire.Dxp.Framework.Styles.BorderRadius)">
            <summary>
            Compares two BorderRadius structures for inequality.
            </summary>
            <param name="r1">The first radius to compare.</param>
            <param name="r2">The second radius to compare.</param>
            <returns><c>true</c> if the X, Y properties of r1 and r2 are not equal; otherwise, <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BorderRadius.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BorderRadius.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BorderRadius.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BorderRadius.System#IEquatable{Spotfire#Dxp#Framework#Styles#BorderRadius}#Equals(Spotfire.Dxp.Framework.Styles.BorderRadius)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression">
            <summary>
            Represents a binary operator in a style expression.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression.leftExpr">
            <summary>
            The left expression.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression.rightExpr">
            <summary>
            The right expression
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression.operatorSymbol">
            <summary>
            The operator symbol.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression.#ctor(Spotfire.Dxp.Framework.Styles.StyleExpression,System.String,Spotfire.Dxp.Framework.Styles.StyleExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expression.</param>
            <param name="operatorSymbol">The operator symbol.</param>
            <param name="rightExpr">The right expression.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression.LeftExpr">
            <summary>
            Gets the left expression.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression.RightExpr">
            <summary>
            Gets the right expression
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression.OperatorSymbol">
            <summary>
            Gets the operator symbol.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BinaryOperatorExpression.TryGetValue``1(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as the specified type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as the specified type.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BorderStyle">
            <summary>
            Controls how borders appear.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BorderStyle.None">
            <summary>
            No borders
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BorderStyle.Solid">
            <summary>
            Solid borders
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BorderStyle.Dashed">
            <summary>
            Dashed borders
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BorderStyle.Dotted">
            <summary>
            Dotted borders
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BorderStyle.Double">
            <summary>
            Double borders
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BoxPropertyNames">
            <summary>Contains property name constants for styled properteis of a Box.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BackgroundColor">
            <summary>The name of the property BackgroundColor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BackgroundImage">
            <summary>The name of the property BackgroundImage.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BackgroundRepeat">
            <summary>The name of the property BackgroundRepeat.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BackgroundSize">
            <summary>The name of the property BackgroundSize.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.LineHeight">
            <summary>The name of the property LineHeight.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderBottomColor">
            <summary>The name of the property BorderBottomColor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderBottomLeftRadius">
            <summary>The name of the property BorderBottomLeftRadius.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderBottomRightRadius">
            <summary>The name of the property BorderBottomRightRadius.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderBottomWidth">
            <summary>The name of the property BorderBottom.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderLeftColor">
            <summary>The name of the property BorderLeftColor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderLeftWidth">
            <summary>The name of the property BorderLeft.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderRightColor">
            <summary>The name of the property BorderRightColor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderRightWidth">
            <summary>The name of the property BorderRight.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderStyle">
            <summary>The name of the property BorderStyle.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderTopColor">
            <summary>The name of the property BorderTopColor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderTopLeftRadius">
            <summary>The name of the property BorderTopLeftRadius.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderTopRightRadius">
            <summary>The name of the property BorderTopRightRadius.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BorderTopWidth">
            <summary>The name of the property BorderTopWidth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.BoxShadow">
            <summary>The name of the property Box shadow.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.TextOrientation">
            <summary>The name of the property Box shadow.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.Color">
            <summary>The name of the property Color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.ElementName">
            <summary>The name of the property ElementName.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.FontFamily">
            <summary>The name of the property FontFamily.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.FontSize">
            <summary>The name of the property FontSize.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.FontStyle">
            <summary>The name of the property FontStyle.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.FontVariant">
            <summary>The name of the property FontVariant.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.FontWeight">
            <summary>The name of the property FontWeight.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.MarginBottom">
            <summary>The name of the property MarginBottom.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.MarginLeft">
            <summary>The name of the property MarginLeft.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.MarginRight">
            <summary>The name of the property MarginRight.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.MarginTop">
            <summary>The name of the property MarginTop.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.PaddingBottom">
            <summary>The name of the property PaddingBottom.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.PaddingLeft">
            <summary>The name of the property PaddingLeft.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.PaddingRight">
            <summary>The name of the property PaddingRight.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.PaddingTop">
            <summary>The name of the property PaddingTop.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.SecondaryColor">
            <summary>The name of the property SecondaryColor.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.TextAlign">
            <summary>The name of the property TextAlign.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.VerticalTextAlign">
            <summary>The name of the property VerticalTextAlign.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.TableTextAlign">
            <summary>The name of the property VerticalTextAlign.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.ColorPalette">
            <summary>The name of the property ColorPalette.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.Stroke">
            <summary>The name of the property Stroke.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.StrokeWidth">
            <summary>The name of the property StrokeWidth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.Fill">
            <summary>The name of the property Fill.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BoxPropertyNames.EnumerateProperties">
            <summary>
            Enumerates the styled properties.
            </summary>
            <returns>An enumeration of styled properties.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.BoxShadow">
            <summary>
            Linear two point gradient.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxShadow.none">
            <summary>
            box shadow with none as value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxShadow.horizontalOffset">
            <summary>
            The horizontal offset
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxShadow.verticalOffset">
            <summary>
            The vertical offset
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxShadow.blurRadius">
            <summary>
            The blur radius
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxShadow.spreadDistance">
            <summary>
            The spread distance
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxShadow.color">
            <summary>
            The color
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.BoxShadow.type">
            <summary>
            The shadow type (null, inset, initial or inherit)
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BoxShadow.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BoxShadow" /> class.
            </summary>
            <param name="horizontalOffset">The horizontal offset.</param>
            <param name="verticalOffset">The vertical offset.</param>
            <param name="blurRadius">The blur radius.</param>
            <param name="spreadDistance">The spread distance.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BoxShadow.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Spotfire.Dxp.Framework.Styles.ColorInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BoxShadow" /> class.
            </summary>
            <param name="horizontalOffset">The horizontal offset.</param>
            <param name="verticalOffset">The vertical offset.</param>
            <param name="blurRadius">The blur radius.</param>
            <param name="spreadDistance">The spread distance.</param>
            <param name="color">The color.</param>
            <param name="type">The type (inset, initial or inherit).</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BoxShadow.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BoxShadow" /> class from being created.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BoxShadow.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.BoxShadow"/> class during deserialization.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BoxShadow.None">
            <summary>
            Gets the none.
            </summary>
            <value>
            The none.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.BoxShadow.IsNone">
            <summary>
            Gets a value indicating whether this instance is none.
            </summary>
            <value>
              <c>true</c> if this instance is none; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BoxShadow.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BoxShadow.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BoxShadow.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.BoxShadow.ToHtmlCss">
            <summary>
            Generates html css for this object.
            </summary>
            <returns>A string with css.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ColorInfo">
            <summary>
            Represents a color with three bytes for the r,g,b components and a float for alpha.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.Transparent">
            <summary>
            Transparent color. Has all components set to zero (transparent black). Note that this is different from System.Drawing.Color.Transparent which is transparent white.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.Blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.Green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.KnownColors">
            <summary>
            The known colors as specified by http://www.w3.org/TR/css3-color/#svg-color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.NotQuiteTransparencyKey">
            <summary>
            The color to use as substitute when the user has specified a color that collides with the transparency key in the TransparentBrowser.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.Red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.TransparencyKey">
            <summary>
            The color used as transparency key in the TransparentBrowser.
            This must be consinstent with the disallowed color in spectrum.js
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfo.argb">
            <summary>
            The color stored as argb.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfo" /> struct.
            Clamps the color components to the range [0, 255] and sets alpha to 1.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfo"/> struct.
            Clamps the color components to the range [0, 255] and alpha to [0, 1].
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.#ctor(System.Byte,System.Byte,System.Byte,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfo"/> struct.
            Clamps the alpha to [0, 1].
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component. Clamped to [0, 1].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfo"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfo"/> struct from an integer value.
            </summary>
            <param name="argb">The color as an int containing a, r, g and b values.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.#ctor(Spotfire.Dxp.Framework.Styles.ColorInfo,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfo"/> struct using another one as source
            but with a new alpha. Clamps the alpha to [0, 1].
            </summary>
            <param name="source">The prototype color.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfo"/> struct during deserialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Screaming context!</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ColorInfo.A">
            <summary>
            Gets the alpha value of this color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ColorInfo.B">
            <summary>
            Gets the blue value of this color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ColorInfo.G">
            <summary>
            Gets the green value of this color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ColorInfo.IsOpaque">
            <summary>
            Gets a value indicating whether this instance is completely opaque.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ColorInfo.IsTransparent">
            <summary>
            Gets a value indicating whether this instance is completely transparent.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ColorInfo.R">
            <summary>
            Gets the red value of this color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ColorInfo.Brightness">
            <summary>Gets the brightness for this instance (between 0 and 1).
            </summary>
            <remarks>This formula differs from the default .Net Brightness formula.
            For an explanation of the used formula, visit the Lightness chapter at http://en.wikipedia.org/wiki/HSV_color_space
            </remarks>
            <returns>The brightness in the range 0 to 1.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ColorInfo.BrightnessWithoutAlpha">
            <summary>
            Gets the brightness witout considering the alpha level.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.op_Equality(Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Compares two ColorInfo structures for equality.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <returns><c>true</c> if c1 and c2 are equal; otherwise, <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.op_Inequality(Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Compares two ColorInfo structures for inequality.
            </summary>
            <param name="c1">The first color to compare.</param>
            <param name="c2">The second color to compare.</param>
            <returns><c>true</c> if c1 and c2 are not equal; otherwise, <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.Equals(Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ToArgb">
            <summary>
            Converts this color to an integer.
            </summary>
            <returns>Color as an integer made up from a, r, g, b values.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.FromColor(System.Drawing.Color)">
            <summary>
            Creates an CssColor from a System.Drawing.Color.
            </summary>
            <param name="color">The color.</param>
            <returns>A CssColor object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.FromCssColor(System.String)">
            <summary>
            Creates a color from a css string value. Supports named colors, hex values, rgb, rgba.
            </summary>
            <param name="color">The color.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.FromHsl(System.Single,System.Single,System.Single)">
            <summary>
            Creates a CSS color from hue, saturation and lightness. 
            </summary>
            <param name="h">Hue in degrees. Does not need to be limited to the range [0 - 360)</param>
            <param name="s">Saturation. Will be clamped to [0, 1]</param>
            <param name="l">lightness. Will be clamped to [0, 1]</param>
            <returns>Color class initialized to the selected color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.FromHsla(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a CSS color from hue, saturation, lightness and alpha. 
            </summary>
            <param name="h">Hue in degrees. Does not need to be limited to the range [0 - 360)</param>
            <param name="s">Saturation. Will be clamped to [0, 1]</param>
            <param name="l">lightness. Will be clamped to [0, 1]</param>
            <param name="a">Alpha value.Will be clamped to [0, 1]</param>
            <returns>Color class initialized to the selected color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.GetBestReadabilityColor(Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Gets the color for best readability. Assumes that one input color is "bright" and the other "not bright".
            </summary>
            <param name="backgroundColor">The background color.</param>
            <param name="color1">The first color candidate.</param>
            <param name="color2">The second color candidate.</param>
            <returns>The best suited candidate color for best readability.</returns>        
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.GetColor(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{Spotfire.Dxp.Framework.Styles.ColorInfo})">
            <summary>
            Gets the color set for the specified propertyName on the specified node, or the default value.
            </summary>
            <param name="node">The node.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>A color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.Gray(System.Byte)">
            <summary>
            Creates a color info with r, g and b components set to the same value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            Color class initialized to the selected color.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.Gray(System.Int32)">
            <summary>Returns a gray <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfo"/> using the specified
            amount of red, green and blue equally.
            </summary>
            <param name="level">The level of gray [0-255].</param>
            <returns>New color info instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.Interpolate(Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo,System.Double)">
            <summary>
            Interpolate between two colors. The colors are in sRGB color space, but
            the interpolation is done in linear color space, i.e. taking sRGB gamma
            correction into account.
            If t is 0, the first color is returned, and if t is 1, the second color is returned.
            </summary>
            <param name="c1">First color, in sRGB color space.</param>
            <param name="c2">Second color, in sRGB color space.</param>
            <param name="t">Interpolation parameter.</param>
            <returns>Interpolated color, in sRGB color space.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.InterpolateColorOnlyAndTakeAlphaFromFirstColor(Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo,System.Double)">
            <summary>Interpolate between two colors. If t is 0, the first color
            is returned, and if t is 1, the second color is returned. Alpha is though taken from the
            first color.
            </summary>
            <param name="c1">First color.</param>
            <param name="c2">Second color.</param>
            <param name="t">Interpolation parameter.</param>
            <returns>Interpolated color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.TransparencyFromAlpha(System.Byte)">
            <summary>
            Translates opacity as an alpha value ([0, 255]) to
            transparency as a unit range ([0, 1]).
            </summary>
            <param name="alpha">The alpha value.</param>
            <returns>The transparency.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.TransparencyToAlpha(System.Double)">
            <summary>
            Translates transparency as a unit range ([0, 1]) to
            opacity as an alpha value ([0, 255]).
            </summary>
            <param name="transparency">The transparency.</param>
            <returns>The alpha value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.UseDarkTextColor(Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Determines whether to use the default dark text color
            or the default light text color on the specified background color.
            </summary>
            <param name="color">The background color.</param>
            <param name="lightTextColor">The light text color candidate.</param>
            <param name="darkTextColor">The dark text color candidate.</param>
            <returns>
                <c>true</c> if dark text should be used, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.RelativeLuminance">
            <summary>
            Calculates the realtive luminance as defined in https://www.w3.org/TR/WCAG/#dfn-relative-luminance.
            </summary>
            <returns>Relative luminance. Normalized to 0 for darkest black and 1 for lightest white</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ContrastRatio(Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Computes tha contrast ratio between two colors as specfied here https://www.w3.org/TR/WCAG/#dfn-contrast-ratio.
            </summary>
            <param name="c1">First color.</param>
            <param name="c2">Second color</param>
            <returns>Contrast ratio in the range 1 to 21. (commonly written 1:1 to 21:1).</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.SrgBtoLinear(System.Double)">
            <summary>
            Converts an sRGB intensity to a linear intensity.
            </summary>
            <param name="srgbValue">sRGB value in the range 0..1</param>
            <returns>Linear value in the range 0..1</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.LinearToSrgb(System.Double)">
            <summary>
            Converts a linear intensity to an sRGB intensity.
            </summary>
            <param name="linear">Linear value in the range 0..1</param>
            <returns>sRGB value in the range 0..1</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.DistanceTo(Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Gets a (bogus) distance measurement between two colors.
            </summary>
            <remarks>
            Bogus because measuring distance between colors this way does not correspond to physics.
            </remarks>
            <param name="otherColor">The color to compare to.</param>
            <returns>A value between 0.0 and 1.0, 0.0 meaning that the colors are identical.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.MakeLightColor(System.Single)">
            <summary>
            Returns a lighter color.
            </summary>
            <param name="level">The level.</param>
            <returns>New lighter color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.MultiplyRgb(System.Single)">
            <summary>
            Multiplies the R, G and B values with the given factor. The resulting R G and B values are clamped. 
            </summary>
            <param name="factor">The factor.</param>
            <returns>A new color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.MultiplyTransparency(System.Double)">
            <summary>
            Applies the transparency by multiplying it to the current alpha level.
            </summary>
            <param name="transparency">The transparency level.</param>
            <returns>New ColorInfo with the newly created alpha level.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ToColor">
            <summary>
            Converts to System.Drawing.Color
            </summary>
            <returns>A System.Drawing.Color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ToCssColor">
            <summary>
            Converts to a Css string representation.
            </summary>
            <returns>Css string value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ToCssRgb">
            <summary>
            Converts to a Css RGB color.
            </summary>
            <returns>The color in css rgb format.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ToCssRgba">
            <summary>
            Converts to a Css RGBA color.
            </summary>
            <returns>The color in css rgba format.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ClampToByte(System.Int32)">
            <summary>
            Clamps integer value to byte.
            </summary>
            <param name="value">The value.</param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ClampToByte(System.Single)">
            <summary>
            Clamps a float value to byte.
            </summary>
            <param name="value">The value.</param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ClampToUnitRange(System.Single)">
            <summary>
            Clamps a values to the range [0, 1].
            </summary>
            <param name="value">The value.</param>
            <returns>A value between 0 and 1.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.UnitRangeToByte(System.Single)">
            <summary>
            Maps a value int the range [0.0, 1.0] to a byte ([0, 255])
            </summary>
            <param name="value">The value.</param>
            <returns>A value mapped to byte range.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ColorInfo.ColorConverter">
            <summary>
            Helper class to convert from hsl to rgb.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ColorConverter.HslToRgb(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Converts HSL to RGB
            </summary>
            <param name="h">Hue in degrees. Does not need to be limited to the range [0 - 360)</param>
            <param name="s">Saturation. Will be clamped to [0, 1]</param>
            <param name="l">lightness. Will be clamped to [0, 1]</param>
            <param name="a">Alpha value.Will be clamped to [0, 1]</param>
            <returns>Color class initialized to the selected color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ColorConverter.RgbToHsl(Spotfire.Dxp.Framework.Styles.ColorInfo,System.Single@,System.Single@,System.Single@)">
            <summary>
            Convert Rgb color to Hue, Saturation and Luminance.
            </summary>
            <param name="color">Color in</param>
            <param name="hue">The Hue, 0-360.</param>
            <param name="saturation">The Saturation, (0.0 - 1.0).</param>
            <param name="luminance">The Luminance, (0.0 - 1.0).</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ColorConverter.NormalizeAngle(System.Single)">
            <summary>
            Normalizes an angle in degrees to the range [0, 360).
            </summary>
            <param name="x">The x.</param>
            <returns>A value in the range  [0, 360).</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ColorConverter.ConvertHslToRgb(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Converts HSL to RGB
            </summary>
            <param name="h">Hue in degrees 0.0f - 360.0f</param>
            <param name="s">Saturation from 0.0f - 1.0f</param>
            <param name="l">Lightness from 0.0f - 1.0f</param>
            <param name="a">Alpha value from 0.0f - 1.0f</param>
            <returns>Color class initialized to the selected color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfo.ColorConverter.ToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Helper method to do some math to convert HSL to RGB.
            </summary>
            <param name="rm1">Root mean 1</param>
            <param name="rm2">Root mean 2</param>
            <param name="rh">Right hand side</param>
            <returns>Byte containing part of a RGB value</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ColorInfoPalette">
            <summary>
            Color palette.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ColorInfoPalette.colors">
            <summary>
            The direction
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfoPalette.#ctor(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Styles.ColorInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfoPalette" /> class.
            </summary>
            <param name="colors">The colors.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfoPalette.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ColorInfoPalette"/> class during deserialization.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ColorInfoPalette.Colors">
            <summary>
            Gets the colors.
            </summary>
            <value>
            The colors.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ColorInfoPalette.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ContainmentModel">
            <summary>
            Describes the containment mode of nodes in the styling framework.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Document">
            <summary>
            The document.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Dialog">
            <summary>
            Root node for popout dialogs, like the properties popout.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialog">
            <summary>
            Root node for modal dialogs, like the about dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialogHeader">
            <summary>
            Header area of the modal dialogs.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialogHeaderTitle">
            <summary>
            Header title in the modal dialogs.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialogHeaderClose">
            <summary>
            Close button in the modal dialogs.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialogHeaderHelp">
            <summary>
            Help button in the modal dialogs header.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialogBody">
            <summary>
            The body of the modal dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialogInnerBody">
            <summary>
            The inner body of the modal dialog. Is used primarily for dialogs with many elements in the body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialogFooter">
            <summary>
            Footer area of the modal dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialogFooterText">
            <summary>
            Text in the modal dialog footer
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ModalDialogErrorContent">
            <summary>
            Error content in the modal dialog footer
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FormatterItem">
            <summary>
            Formatter item in formatting dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.PreviewVisual">
            <summary>
            Formatter item in formatting dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Accordion">
            <summary>
            Accordion in a modal dialog body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.RadioAccordionGroup">
            <summary>
            Accordion in a modal dialog body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.RadioAccordionText">
            <summary>
            Radio Accordion text in a modal dialog body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportPreviewSideBar">
            <summary>
            Sidebar in a modal dialog body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportPreviewToolbar">
            <summary>
            Toolbar in a modal dialog body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportPreviewToolbarDivider">
            <summary>
            Toolbar in a modal dialog body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportPreviewMain">
            <summary>
            Export preview main area in a modal dialog body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportPreviewHeader">
            <summary>
            Header in sidebar, in a modal dialog body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportPreviewGroup">
            <summary>
            Group of options in export sidebar.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportPreviewGroupHeader">
            <summary>
            Header for options group in export sidebar.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportPreviewSubGrpup">
            <summary>
              in a modal dialog body.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.StyledDialog">
            <summary>
            Root node for popout dialogs, like the properties popout.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AddDataDialog">
            <summary>
            Add data dialog (a.k.a. mega menu)
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AddDataDialogHeader">
            <summary>
            Add data header dialog
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AddDataItem">
            <summary>
            Add data item in the add data dialog
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AddDataItemButton">
            <summary>
            Add data item button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AddDataItemTitle">
            <summary>
            Add data item title.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AddDataItemDescription">
            <summary>
            Add data item description-
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.InfoPopup">
            <summary>
            The information popup (e.g. plot issues).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Toolbar">
            <summary>
            The toolbar in BA.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Page">
            <summary>
            The page.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.PageNavigationBar">
            <summary>
            The page navigation bar.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.WebPlayerToolBar">
            <summary>
            The web player toolbar
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TabControl">
            <summary>
            The tab control
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TabGroup">
            <summary>
            The group of tabs.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.PageTab">
            <summary>
            The page tab.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.StatusBar">
            <summary>
            The status bar
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportSheet">
            <summary>
            The sheet with all the contents exported to PDF etc.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportSheetHeader">
            <summary>
            The header of an export sheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportSheetTitle">
            <summary>
            The header of an export sheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportSheetContent">
            <summary>
            The content section of an export sheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportSheetNotes">
            <summary>
            The notes section of an export sheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExportSheetFooter">
            <summary>
            The footer of an export sheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.VisualizationArea">
            <summary>
            The visualization area.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.EmptyPage">
            <summary>
            The empty page.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.EmptyPageCard">
            <summary>
            The empty page card.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Visual">
            <summary>
            The visual.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.VisualTitle">
            <summary>
            The visual title.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.VisualContent">
            <summary>
            The visual content.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.MarkingTool">
            <summary>
            The rectangle and lasso tool used for marking data
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.LightBox">
            <summary>
            The lightbox that covers the entire user interface during modal operations.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.InteractionAccessArea">
            <summary>
            The interaction area that covers the scale area in BA.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Control">
            <summary>
            A control in the text area.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TabularContent">
            <summary>
            The area in a tabular visulization that contains the tabular content, that is, the header and value cells.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.VisualizationDescription">
            <summary>
            The visualization description.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TrellisPanel">
            <summary>
            The trellis panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TrellisPanelContent">
            <summary>
            The trellis panel content.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TrellisPanelHeader">
            <summary>
            The trellis panel header.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Legend">
            <summary>
            The legend
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.LegendItem">
            <summary>
            The legend item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.SubItemSection">
            <summary>
            The sub item section.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.SubItemGroup">
            <summary>
            The sub item group.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.SubItem">
            <summary>
            The sub item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Selector">
            <summary>
            A selector (for marking or data table) in a legend.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.SelectorTrayItem">
            <summary>
            The selector tray item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AxisTrayArea">
            <summary>
            An axis tray area in a visualization. That is, an area at the top/bottom/left/right containing an axis tray.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AxisTray">
            <summary>
            An axis tray in a visualization, or in the legend.
            </summary>s
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AxisTrayItem">
            <summary>
            The axis tray item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.PanelArea">
            <summary>
            The panel area. There are right, left and bottom variants of these.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Panel">
            <summary>
            The panel in a panel area. There are a sequence of these in each panel area.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Message">
            <summary>
            The message in a panel, e.g., "Some filters are hidden".
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.PanelHeader">
            <summary>
            The panel header in a panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataOverview">
            <summary>
            The data overview. Not meant to be styled but we need to have e.g. the dropdown inside something.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataOverviewHeader">
            <summary>
            The data overview. Not meant to be styled but we need to have e.g. the dropdown inside something.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataOverviewContent">
            <summary>
            The data overview. Not meant to be styled but we need to have e.g. the dropdown inside something.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.PanelContent">
            <summary>
            The panel content in panel. Assigned classes indicating which panel it is. E.g., filter-panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.BookmarkCapture">
            <summary>
            The bookmark capture box at the top of the bookmark panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.BookmarkList">
            <summary>
            The list of bookmarks in the bookmark panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.BookmarkItem">
            <summary>
            A bookmark in the list of bookmarks in the bookmark panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.BookmarkLabel">
            <summary>
            The lable of a bookmark, showing the title and author information.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterTableGroup">
            <summary>
            The filter table group in the filter panel. There is a sequence of table groups in the filter panel, each containing filters and filter sub groups.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterTableGroupTitle">
            <summary>
            The title of a filter group in the filter panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterTableGroupContent">
            <summary>
            The content of a filter group in the filter panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterGroup">
            <summary>
            The filter group in the filter panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterGroupTitle">
            <summary>
            The title of a filter group in the filter panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterGroupContent">
            <summary>
            The content of a filter group in the filter panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterPopout">
            <summary>
            The filter popout.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Filter">
            <summary>
            The filter in the filter panel or in the text area. There is a sequence of filters in each filter group.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterTitle">
            <summary>
            The filter title, e.g. the name of the column.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterContent">
            <summary>
            The filter content, e.g. a range slider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterItem">
            <summary>
            An item in a filter content. Typically a row in the checkbox filter, containing the checkbox the text-box.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.VisibleComment">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.VisibleCommentArrow">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.VisibleCommentHeader">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentsPanel">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentsPanelTitle">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentsPanelFilter">
            <summary>
            The section in the comments panel that shows which visualization the comments are restricted to.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentsToolbar">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentsToolbarHeader">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentThread">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentItem">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentReplySection">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ContextualPopout">
            <summary>
            The contextual  popout.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ContextualPopoutArrow">
            <summary>
            The Analysis popout arrow.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ContextualPopoutSection">
            <summary>
            The Analysis popout section.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ContextualPopoutRow">
            <summary>
            The Analysis popout row.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ContextualPopoutButton">
            <summary>
            The Analysis popout button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ContextualPopoutHeading">
            <summary>
            The Analysis popout button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ContextualPopoutLabel">
            <summary>
            The Analysis popout label.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ContextualPopoutField">
            <summary>
            The Analysis popout label.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ContextualPopoutOptions">
            <summary>
            The Analysis popout label.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ButtonGroup">
            <summary>
            The button group in a panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataPanelHeader">
            <summary>
            The data panel header
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataPanelList">
            <summary>
            The data panel list .
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataPanelListHeader">
            <summary>
            The data panel list .
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataPanelListContent">
            <summary>
            The data panel list .
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataPanelListItem">
            <summary>
            The data panel list item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataPanelHierarchyListItemFoundText">
            <summary>
            This is used to mark (bold) the found text when searching in the cube mode of data panel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.SearchField">
            <summary>
            The data panel header
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataPanelListHeaderItem">
            <summary>
            The data panel header list item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ExpandCollapseButton">
            <summary>
            The expand/collapse button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ViewsInConnection">
            <summary>
            The views in connection dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ViewsInConnectionPanel">
            <summary>
            A panel in the views in connection dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ViewsInConnectionList">
            <summary>
            A list in the views in connection dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ViewsInConnectionListItem">
            <summary>
            A list item in the views in connection dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ViewsInConnectionHint">
            <summary>
            A hint in the views in connection dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataRecommendations">
            <summary>
            The data recommendations dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataRecommendationsRecommendationBox">
            <summary>
            A recommendation box in the data recommendations dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataRecommendationsRecommendationIcon">
            <summary>
            A recommendation icon in the data recommendations dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataRecommendationsPreviewText">
            <summary>
            A preview/Settings text in the data recommendations dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilteringSchemeSelect">
            <summary>
            The filtering scheme select box.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterOverviewHeader">
            <summary>
            The filter overview.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterOverviewList">
            <summary>
            The filter overview list.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.FilterOverviewListItem">
            <summary>
            The filter overview list item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentDeleteThreadOverlay">
            <summary>
            The overlay shown before deleting comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Dropdown">
            <summary>
            The dropdown.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DropdownNoHover">
            <summary>
            The dropdown no hover effect.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.IntSpinner">
            <summary>
            The int spinner.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ErrorInput">
            <summary>
            The Input error color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Combobox">
            <summary>
            The combobox
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ComboboxButton">
            <summary>
            The button in a combobox.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DetachedComboboxSvgContainer">
            <summary>
            The icon in a combobox.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DetachedDropdownButtonSvgContainer">
            <summary>
            The icon in a dropdown.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DropdownButton">
            <summary>
            The button in a dropdown.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DropdownList">
            <summary>
            The dropdown list for Dropdown/Combobox
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DropdownListItem">
            <summary>
            A dropdown-list item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Input">
            <summary>
            The input field.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Textarea">
            <summary>
            The input field.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Title">
            <summary>
            The box for titles in legend items.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TextBox">
            <summary>
            The text box, indexed by parent.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TableCell">
            <summary>
            A table cell in the tabular plot.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TableGradient">
            <summary>
            The gradient indicating more content on a row of a tabular plot.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ListBox">
            <summary>
            The list box container.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ListBoxItem">
            <summary>
            The item in a list box container.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.RadioButton">
            <summary>
            The radio button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ScrollBar">
            <summary>
            Scroll bar
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ScrollBarHandle">
            <summary>
            Scroll bar handle
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ScrollBarButton">
            <summary>
            Scroll bar button
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ScaleArea">
            <summary>
            The area in which scale labels and ticks are rendered
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.AxisTitle">
            <summary>
            Axis title
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ScaleLine">
            <summary>
            Scale line.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ScaleTick">
            <summary>
            Scale line.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.GridLine">
            <summary>
            Scale line.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.WaterfallLine">
            <summary>
            A line between bars in a Waterfall Chart.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ZoomSliderArea">
            <summary>
            An area containing a zoom slider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ZoomSlider">
            <summary>
            A zoom slider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.NavigationWidget">
            <summary>
            The MapChart Navigation Widget.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.LayerHandlerWidget">
            <summary>
            The MapChart Layer Handler Widget.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.SearchAroundWidget">
            <summary>
            The MapChart Search Around Widget.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TreeViewBlock">
            <summary>
            The TreeView block component
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TreeViewHeader">
            <summary>
            The TreeView header component
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TreeViewOddBlock">
            <summary>
            The TreeView odd block component
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TreeViewEvenBlock">
            <summary>
            The TreeView even block component
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.TreeViewHeaderDragElement">
            <summary>
            The TreeView header drag component
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CrsPanel">
            <summary>
            The Crs panel component
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CrsPanelHighlight">
            <summary>
            The Crs panel component
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CrsFooter">
            <summary>
            The Crs footer component
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CrsInput">
            <summary>
            The Crs input component
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.RangeSlider">
            <summary>
            A range slider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CheckBox">
            <summary>
            The check box button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ButtonLabel">
            <summary>
            The check box button.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ItemSlider">
            <summary>ass
            An item range slider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.BinSlider">
            <summary>
            An bin range slider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.BinSliderTick">
            <summary>
            An bin slider tick.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Range">
            <summary>
            A range in the a slider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Thumb">
            <summary>
            A thumb in the zoom slider.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.NavigationBar3D">
            <summary>
            3D navigation bar
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Button">
            <summary>
            The button, indexed by parent.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.RoundButton">
            <summary>
            The button, indexed by parent.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Icon">
            <summary>
            The icon, indexed by parent.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DropArea">
            <summary>
            A drop area.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Separator">
            <summary>
            A separator in the drop area.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DropTarget">
            <summary>
            A drop target in the drop area.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ProgressAnimation">
            <summary>
            The progress animation seen on top of visualizations.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ProgressDialog">
            <summary>
            The progress dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.BusyIndicator">
            <summary>
            The busy indicator.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.ProgressDialogText">
            <summary>
            The text inside the progress dialog.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Annotation">
            <summary>
            The basic Annotation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.CommentAnchor">
            <summary>
            The basic Comments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.SvgElement">
            <summary>
            An svg element. Only used for specifying the color of part of an svg image.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.DataTableIndicator">
            <summary>
            The text box, indexed by parent.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.StyleRootNodes">
            <summary>
            The root nodes that can be styled via a.s.s. If you declare a new root node, you must also add it here in order for css generation to work.
            We used to generate this from CreateRootNode calls, but that caused subtle bugs with static initialization (see TS-49439).
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.INode">
            <summary>
            Represents a node in the static containment model. All stylable nodes and all StyledBox instances 
            belong to a StyleNode, identifying them in the containment model.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ContainmentModel.INode.Name">
            <summary>
            Gets the name of the style node. This is the string that identifies this node with a type selector in the style sheet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ContainmentModel.INode.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.IIndexedNode">
            <summary>
            Represents a group of nodes in the static containment model. All with the same name but with different parents.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ContainmentModel.IIndexedNode.Name">
            <summary>
            Gets the name of the style node. This is the string that identifies this node with a type selector in the style sheet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ContainmentModel.IIndexedNode.Item(Spotfire.Dxp.Framework.Styles.ContainmentModel.INode)">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.INode"/> with the specified parent.
            </summary>
            <value>
            The <see cref="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.INode"/>.
            </value>
            <param name="parent">The parent.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.IIndexedNode.CanHaveParent(Spotfire.Dxp.Framework.Styles.ContainmentModel.INode)">
            <summary>
            Determines whether this instance can have the specified node as parent.
            </summary>
            <param name="parent">The parent.</param>
            <returns><c>true</c> if this instance can have the specified parent.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.EnumerateAllNodes">
            <summary>
            Enumerates all nodes.
            </summary>
            <returns>All nodes.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.EnumerateStyleableNodes">
            <summary>
            Enumerates styleable nodes.
            </summary>
            <returns>All nodes.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.EnumerateAllNodes(System.Collections.Generic.IList{System.String})">
            <summary>
            Enumerates all nodes matching a selector
            </summary>
            <param name="selector">The selector.</param>
            <returns>
            Matching nodes.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.EnumerateStyleableNodes(System.Collections.Generic.IList{System.String})">
            <summary>
            Enumerates all nodes matching a selector
            </summary>
            <param name="selector">The selector.</param>
            <returns>
            Matching nodes.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.IsNodeOrDescendant(Spotfire.Dxp.Framework.Styles.ContainmentModel.INode)">
            <summary>
            Creates a predicate that determines whether a given node is this node or a descendant.
            </summary>
            <param name="rootNode">The root node.</param>
            <returns>A predicate.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.EnumerateNodes(System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Enumerates nodes matching a selector
            </summary>
            <param name="selector">The selector.</param>
            <param name="onlyStylableNodes">Whether all nodes or only styleable nodes should be included.</param>
            <returns>
            Matching nodes.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.CreateRootNode(System.String)">
            <summary>
            Creates a root node with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>
            A node.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.Create(System.String,Spotfire.Dxp.Framework.Styles.ContainmentModel.INode)">
            <summary>
            Creates a node with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">The parent.</param>
            <returns>A node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.Create(System.String,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Styles.ContainmentModel.INode}[])">
            <summary>
            Creates a group of nodes with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="parents">The parents.</param>
            <returns>A group of nodes.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.State">
            <summary>
            Contains private static state for the ContainmentModel.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.State.AllNodes">
            <summary>
            All nodes in the containment model.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode">
            <summary>
            Represents a group of nodes in the static containment model. All with the same name but with different parents.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode.name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode.parentToNode">
            <summary>
            The parent to node disctionary.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode.#ctor(System.String,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Styles.ContainmentModel.INode})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parents">The parents.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode.Name">
            <summary>
            Gets the name of the style node. This is the string that identifies this node with a type selector in the style sheet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode.Item(Spotfire.Dxp.Framework.Styles.ContainmentModel.INode)">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.INode"/> with the specified parent.
            </summary>
            <value>
            The <see cref="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.INode"/>.
            </value>
            <param name="parent">The parent.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode.CanHaveParent(Spotfire.Dxp.Framework.Styles.ContainmentModel.INode)">
            <summary>
            Determines whether this instance can have the specified node as parent.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
              <c>true</c> if this instance can have the specified parent.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.IndexedNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.Node">
            <summary>
            Represents a node in the static containment model. All stylable nodes and all StyledBox instances 
            belong to a StyleNode, identifying them in the containment model.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Node.name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.ContainmentModel.Node.parent">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.Node.#ctor(System.String,Spotfire.Dxp.Framework.Styles.ContainmentModel.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ContainmentModel.Node"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ContainmentModel.Node.Name">
            <summary>
            Gets the name of the style node. This is the string that identifies this node with a type selector in the style sheet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.ContainmentModel.Node.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.Node.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.Node.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.IsStyleRoot(Spotfire.Dxp.Framework.Styles.ContainmentModel.INode)">
            <summary>
            Determines whether the node is one of the roots nodes for a.s.s styling.
            </summary>
            <param name="styleNode">The style node.</param>
            <returns>true if the node is a style root.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ContainmentModel.IsStyleRoot(System.String)">
            <summary>
            Determines whether the node is one of the roots nodes for a.s.s styling.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns>
            true if the element is a style root.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions">
            <content>
            Extension methods to use styles with classes from the System.Drawing namespace.
            </content>
            <content>
            Extension methods to use styles with classes from the System.Drawing namespace.
            </content>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.GetEffectiveBackgroundColor(Spotfire.Dxp.Framework.Styles.StyleProperties)">
            <summary>
            Gets a suitable color to use for painting the background. Use this to render the background of an element that does not support transparency.
            This method is typically only relevant for Forms based implementations of views for CustomVisuals etc. If your view is based on HTML and 
            Javascript (that is, derived from CustomVisualView) you can just leave your background transparent to use the theme color of the page.
            </summary>
            <param name="styleProperties">The style properties.</param>
            <returns>
            A color.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.CreateFont(Spotfire.Dxp.Framework.Styles.StyleProperties)">
            <summary>
            Creates a font from current settings.
            </summary>
            <param name="styleProperties">The style properties.</param>
            <returns>
            A font. Caller is responsible for disposing it when done.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.ToColor(Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Creates a font from current settings.
            </summary>
            <param name="color">The color.</param>
            <returns>
            A font. The caller is responsible for disposing it when done.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.OffsetY(System.Drawing.Point,System.Int32)">
            <summary>
            Offsets the y coordinate of the point with the given delta.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns>A new point.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.OffsetX(System.Drawing.Point,System.Int32)">
            <summary>
            Offsets the x coordinate of the point with the given delta.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns>A new point.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.Add(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Subtracts a size from another. Clips to Size.Empty.
            </summary>
            <param name="size">The size.</param>
            <param name="deltaSize">Size of the delta.</param>
            <returns>A new size.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.SafeSubtract(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Subtracts a size from another. Clips to Size.Empty.
            </summary>
            <param name="size">The size.</param>
            <param name="deltaSize">Size of the delta.</param>
            <returns>A new size.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.SafeSubtractHeight(System.Drawing.Size,System.Int32)">
            <summary>
            Subtracts a delta from a size. Clips to Size.Empty.
            </summary>
            <param name="size">The size.</param>
            <param name="delta">The delta.</param>
            <returns>A new size.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.SafeSubtractWidth(System.Drawing.Size,System.Int32)">
            <summary>
            Subtracts a delta from a size. Clips to Size.Empty.
            </summary>
            <param name="size">The size.</param>
            <param name="delta">The delta.</param>
            <returns>A new size.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.GetPaddingBorderMargin(Spotfire.Dxp.Framework.Styles.IBoxStyle)">
            <summary>
            Gets a size for the total amount of padding, borders and margins.
            </summary>
            <param name="style">The style.</param>
            <returns>
            A size with padding, border and margin added.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.GetBorderRectangle(Spotfire.Dxp.Framework.Styles.IBoxStyle,System.Drawing.Rectangle)">
            <summary>
            Gets the border rectangle.
            </summary>
            <param name="style">The style.</param>
            <param name="fullRect">The full rectangle including margins.</param>
            <returns>
            A rectange containing the border.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.GetContentRectangle(Spotfire.Dxp.Framework.Styles.IBoxStyle,System.Drawing.Rectangle)">
            <summary>
            Gets the content rectangle.
            </summary>
            <param name="style">The style.</param>
            <param name="fullRect">The full rectangle including margins.</param>
            <returns>
            The content rectangle.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.CreateFont(Spotfire.Dxp.Framework.Styles.IBoxStyle)">
            <summary>
            Creates a font with current settings.
            </summary>
            <param name="style">The style.</param>
            <returns>
            A font with current settings.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.CreateCachedFont(Spotfire.Dxp.Framework.Styles.IBoxStyle)">
            <summary>
            Creates a font with current settings.
            </summary>
            <param name="style">The style.</param>
            <returns>
            A font with current settings.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.DrawBackground(Spotfire.Dxp.Framework.Styles.IBoxStyle,System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws the background rendering, using background from any container element.
            </summary>
            <param name="style">The style.</param>
            <param name="graphics">The graphics.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.GetBackgroundColorInHierarchy(Spotfire.Dxp.Framework.Styles.IBoxStyle)">
            <summary>
            Looks up the resulting background color for a box by finding first opaque box in containing hierarchy. Does not handle background images.
            </summary>
            <param name="style">The style.</param>
            <returns>The background color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.CreateFillBrush(Spotfire.Dxp.Framework.Styles.IBoxStyle,System.Drawing.RectangleF)">
            <summary>
            Creates the a brush for fill (returns null for transparent fill).
            </summary>
            <param name="boxStyle">The shape style.</param>
            <param name="bounds">The bounds.</param>
            <returns>A brush, or <c>null</c> when no fill.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.CreateLinearGradientBrush(Spotfire.Dxp.Framework.Styles.LinearGradient,System.Drawing.RectangleF)">
            <summary>
            Creates a linear gradient brush.
            </summary>
            <param name="gradient">A line gradient object specifying colors and direction.</param>
            <param name="bounds">Rectange that controls the endpoints of the gradient.</param>
            <returns>A linear gardient brush.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.CreateSolidBrush(System.Drawing.Color)">
            <summary>
            Creates the a brush for fill.
            </summary>
            <param name="color">The color.</param>
            <returns>
            A solid brush.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.IsOpaque(Spotfire.Dxp.Framework.Styles.IBoxStyle)">
            <summary>
            Determines whether the specified background style is opaque.
            </summary>
            <param name="style">The style.</param>
            <returns>
            <c>true</c> if the specified style is opaque; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DrawingStyleExtensions.GetVisibleElementsBackToFront(Spotfire.Dxp.Framework.Styles.IBoxStyle)">
            <summary>
            Gets the visible elements back to front. Stops on first fully upaque element.
            </summary>
            <param name="style">The style.</param>
            <returns>A list of styles</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException">
            <summary>
            Exception thrown when the search parser generates a too deep expression.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException"/> class. 
            Create the exception.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException"/> class. 
            Create the exception.
            </summary>
            <param name="message">
            Description of the exception.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException"/> class. 
            Create the exception.
            </summary>
            <param name="message">
            Description of the exception.
            </param>
            <param name="innerException">
            The reason for the exception.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException"/> class. 
            Implements ISerializable.
            </summary>
            <param name="serializationInfo">
            The serialization Info.
            </param>
            <param name="streamingContext">
            The streaming Context.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.ExpressionTooDeepException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.
            </summary>
            <param name="info">
            The serialization info.
            </param>
            <param name="context">
            The serialization context.
            </param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.FontInfo">
            <summary>
            Represents the metadata of a <see cref="T:System.Drawing.Font"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontInfo.Null">
            <summary>
            A font info where no propertes have been set. The IsNull property of this object is true.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontInfo.Dpi">
            <summary>
            The default resolution we are working with.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontInfo.bold">
            <summary>
            A value indicating whether the font is bold.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontInfo.family">
            <summary>
            The font family.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontInfo.italic">
            <summary>
            A value indicating whether the font is italic.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontInfo.size">
            <summary>
            The size of the font (in points).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontInfo.strikeout">
            <summary>
            A value indicating whether the font is strikeout.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontInfo.underline">
            <summary>
            A value indicating whether the font is underline.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.#ctor(System.String,System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.FontInfo"/> struct.
            </summary>
            <param name="family">The family.</param>
            <param name="size">The size.</param>
            <param name="bold">The bold.</param>
            <param name="italic">The italic.</param>
            <param name="strikeout">The strikeout.</param>
            <param name="underline">The underline.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.#ctor(System.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.FontInfo"/> struct.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.FontInfo"/> struct.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.FontInfo.Bold">
            <summary>
            Gets a value indicating whether the font is bold.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.FontInfo.Family">
            <summary>
            Gets the font family.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.FontInfo.IsNull">
            <summary>
            Gets a value indicating whether this instance has any modifications.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.FontInfo.Italic">
            <summary>
            Gets a value indicating whether the font is italic.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.FontInfo.Size">
            <summary>
            Gets the font size.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.FontInfo.Strikeout">
            <summary>
            Gets a value indicating whether the font is strikeout.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.FontInfo.Underline">
            <summary>
            Gets a value indicating whether the font is underline.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.op_Equality(Spotfire.Dxp.Framework.Styles.FontInfo,Spotfire.Dxp.Framework.Styles.FontInfo)">
            <summary>
            Compares two font3D structures for equality.
            </summary>
            <param name="font1">The first font to compare.</param>
            <param name="font2">The second font to compare.</param>
            <returns><c>true</c> font1 and font2 are equal; otherwise, <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.op_Inequality(Spotfire.Dxp.Framework.Styles.FontInfo,Spotfire.Dxp.Framework.Styles.FontInfo)">
            <summary>
            Compares two font3D structures for inequality.
            </summary>
            <param name="font1">The first font to compare.</param>
            <param name="font2">The second font to compare.</param>
            <returns><c>true</c> if the fonts are not equal; otherwise, <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.SafeCreateCachedFont(System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            Creates a font and handles undocumented exceptions thrown for some fonts when using some styles. Use this
            method rather than calling contructor of Font class directly.
            </summary>
            <param name="familyName">Name of the family.</param>
            <param name="size">The size.</param>
            <param name="fontStyle">The font style.</param>
            <returns>A font</returns>
            <exception cref="T:System.ArgumentException">size is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
            <exception cref="T:System.ArgumentNullException">familyName is null.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.SafeCreateCachedFont(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)">
            <summary>
            Creates a font and handles undocumented exceptions thrown for some fonts when using some styles. Use this
            method rather than calling contructor of Font class directly.
            </summary>
            <param name="familyName">Name of the family.</param>
            <param name="size">The size.</param>
            <param name="fontStyle">The font style.</param>
            <param name="unit">The unit.</param>
            <returns>A font</returns>
            <exception cref="T:System.ArgumentException">size is less than or equal to 0, evaluates to infinity, or is not a valid number.</exception>
            <exception cref="T:System.ArgumentNullException">familyName is null.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.ApplyToCssMap(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the font information to the specified map.
            </summary>
            <param name="cssMap">The CSS map.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.Merge(System.Nullable{Spotfire.Dxp.Framework.Styles.FontInfo})">
            <summary>
            Merges two font infos where the specified other overrides this instance.
            </summary>
            <param name="other">The other font info..</param>
            <returns>The merged font info.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.SetBold(System.Nullable{System.Boolean})">
            <summary>
            Creates copy of this FontInfo structure with the given value for the Bold property.
            </summary>
            <param name="value">true, false or null.</param>
            <returns>A new FontInfo structure.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.SetFamily(System.String)">
            <summary>
            Creates copy of this FontInfo structure with the given value for the Family property.
            </summary>
            <param name="value">Family name or null.</param>
            <returns>A new FontInfo structure.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.SetItalic(System.Nullable{System.Boolean})">
            <summary>
            Creates copy of this FontInfo structure with the given value for the Italic property.
            </summary>
            <param name="value">true, false or null.</param>
            <returns>A new FontInfo structure.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.SetSize(System.Nullable{System.Single})">
            <summary>
            Creates copy of this FontInfo structure with the given value for the Size property.
            </summary>
            <param name="value">Family name or null.</param>
            <returns>A new FontInfo structure.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.SetStrikeout(System.Nullable{System.Boolean})">
            <summary>
            Creates copy of this FontInfo structure with the given value for the Italic property.
            </summary>
            <param name="value">true, false or null.</param>
            <returns>A new FontInfo structure.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.SetUnderline(System.Nullable{System.Boolean})">
            <summary>
            Creates copy of this FontInfo structure with the given value for the Underline property.
            </summary>
            <param name="value">true, false or null.</param>
            <returns>A new FontInfo structure.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.ToCssMap">
            <summary>
            Adds the font information to the specified map.
            </summary>
            <returns>Css style name value pairs.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.ToCssString">
            <summary>
            Creates a font and handles undocumented exceptions thrown for some fonts when using some styles. Use this
            method rather than calling contructor of Font class directly.
            </summary>
            <returns>Css style name value pairs.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.ToCachedFont">
            <summary>
            Creates a <see cref="T:System.Drawing.Font"/> using the metadata.
            </summary>
            <returns>The created font.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.Equals(Spotfire.Dxp.Framework.Styles.FontInfo)">
            <summary>
            Determines whether the specified <see cref="T:Spotfire.Dxp.Framework.Styles.FontInfo" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Spotfire.Dxp.Framework.Styles.FontInfo" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spotfire.Dxp.Framework.Styles.FontInfo" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.PixelsToPoints(System.Single)">
            <summary>
            Converts from pixles tp points (1/72 inch).
            </summary>
            <param name="pixels">The value to translate.</param>
            <returns>Value translated to pixels</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.PointsToPixels(System.Single)">
            <summary>
            Converts from points (1/72 inch) to pixels.
            </summary>
            <param name="points">The value to translate.</param>
            <returns>Value translated to points.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.SerializeNullable``1(System.Runtime.Serialization.SerializationInfo,System.String,System.Nullable{``0})">
            <summary>
            Serializes a nullable property. Nothing is written if field is null.
            </summary>
            <typeparam name="T">Type of nullable</typeparam>
            <param name="info">The information.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.ToPixels(System.Single,System.Drawing.GraphicsUnit)">
            <summary>
            Converts a value with the given unit to pixels.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
            <returns>Value in pixels.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FontInfo.ToRoundedPixels(System.Single,System.Drawing.GraphicsUnit)">
            <summary>
            Converts a value with the given unit to pixels. The value is rounded to the nearest integer.
            </summary>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
            <returns>Value in pixels.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.FontStyle">
            <summary>
            Controls the font style.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontStyle.Normal">
            <summary>
            The normal style.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontStyle.Italic">
            <summary>
            The italic style.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontStyle.Oblique">
            <summary>
            The oblique style. Typically a sloped version of the normal style.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.FontVariant">
            <summary>
            Controls the font variant.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontVariant.Normal">
            <summary>
            The normal variant.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontVariant.SmallCaps">
            <summary>
            The small caps variant. All text should be rendered in small caps.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.FontWeight">
            <summary>
            Controls the font weight.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.Normal">
            <summary>
            The normal weight.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.Bold">
            <summary>
            The bold weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.Bolder">
            <summary>
            The Bolder weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.Lighter">
            <summary>
            The Lighter weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.W100">
            <summary>
            The 100 weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.W200">
            <summary>
            The 200 weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.W300">
            <summary>
            The 300 weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.W400">
            <summary>
            The 400 weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.W500">
            <summary>
            The 500 weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.W600">
            <summary>
            The 600 weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.W700">
            <summary>
            The 700 weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.W800">
            <summary>
            The 800 weigth.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FontWeight.W900">
            <summary>
            The 900 weigth.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.IBoxStyle">
            <summary>
            Interface that provides readonly access to styled box elements. 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.FontFamily">
            <summary>
            Gets the font family name.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.FontSize">
            <summary>
            Gets the size of the font.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.FontStyle">
            <summary>
            Gets the font style.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.FontVariant">
            <summary>
            Gets the font variant.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.FontWeight">
            <summary>
            Gets the font weight.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.TextAlign">
            <summary>
            Gets the text alignment
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BackgroundColor">
            <summary>
            Gets the background color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BackgroundImage">
            <summary>
            Gets the background image.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BackgroundRepeat">
            <summary>
            Gets the background repetition
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BackgroundSize">
            <summary>
            Gets the background size
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.LineHeight">
            <summary>
            Gets the line height,
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.ColorPalette">
            <summary>
            Gets the color palette.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.SecondaryColor">
            <summary>
            Gets the secondary color.
            Used when redering labels etc. on graphical elements (bars, lines, etc.) when the Color has worse contrast to the background.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderTopColor">
            <summary>
            Gets the border top color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderRightColor">
            <summary>
            Gets the border right color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderBottomColor">
            <summary>
            Gets the border bottom color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderLeftColor">
            <summary>
            Gets the border left color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderStyle">
            <summary>
            Gets the border style.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderTopLeftRadius">
            <summary>
            Gets the top left border radius.
            </summary>
            <value>
            The top left border radius.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderTopRightRadius">
            <summary>
            Gets the border top right radius.
            </summary>
            <value>
            The border top right radius.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderBottomRightRadius">
            <summary>
            Gets the border bottom right radius.
            </summary>
            <value>
            The border bottom right radius.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderBottomLeftRadius">
            <summary>
            Gets the border bottom left radius.
            </summary>
            <value>
            The border bottom left radius.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.MarginTop">
            <summary>
            Gets the top margin.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.MarginBottom">
            <summary>
            Gets the bottom margin.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.MarginLeft">
            <summary>
            Gets the left margin.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.MarginRight">
            <summary>
            Gets the right margin.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderTopWidth">
            <summary>
            Gets the top border width.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderTopWidthRaw">
            <summary>
            Gets the top border width. Zero if border style is none.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderBottomWidth">
            <summary>
            Gets the bottom border width.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderBottomWidthRaw">
            <summary>
            Gets the bottom border width. Zero if border style is none.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderLeftWidth">
            <summary>
            Gets the left border width.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderLeftWidthRaw">
            <summary>
            Gets the left border width. Zero if border style is none.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderRightWidth">
            <summary>
            Gets the right border width.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.BorderRightWidthRaw">
            <summary>
            Gets the right border width. Zero if border style is none.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.PaddingTop">
            <summary>
            Gets the top padding.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.PaddingBottom">
            <summary>
            Gets the bottom padding.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.PaddingLeft">
            <summary>
            Gets the left padding.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.PaddingRight">
            <summary>
            Gets the right padding.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IBoxStyle.Stroke">
            <summary>
            Gets the stroke.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.INullableStruct">
            <summary>
            Represents an interface to indicate whether a struct has any explicit values set, or if it is default/null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.INullableStruct.IsNull">
            <summary>
            Gets a value indicating whether the struct has any modifications.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.IStyledPropertyOverride">
            <summary>
            Interface styled elements may implement to override property values derived from style sheet. 
            Used to let document nodes override font property values for instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.IStyledPropertyOverride.TryGetValue``1(Spotfire.Dxp.Framework.DocumentModel.StyledPropertyName{``0},``0@)">
            <summary>
            Tries the get a value.
            </summary>
            <typeparam name="T">Property type.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>true on success, otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.IStyleExpressionEnvironmentCache">
            <summary>
            Implemented by IStyledElements that can cache the StyleExpressionEnvironment.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IStyleExpressionEnvironmentCache.Environment">
            <summary>
            Gets or sets the expression environment.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.IStyleSheetProvider">
            <summary>
            Interface for overriding style sheet.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.IStyleSheetProvider.GetStyleSheetText">
            <summary>
            Gets the style sheet text.
            </summary>
            <returns>The style sheet text.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.IStyleSheetProvider.GetStyleSheetTrigger">
            <summary>
            Gets the style sheet trigger.
            </summary>
            <returns>A trigger that fires when style sheet has changed.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.LineHeightType">
            <summary>
            Represents a value for line-height.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.LineHeightType.Normal">
            <summary>
            The default value, let the browser decide.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.LineHeightType.Number">
            <summary>
            A number that will be multiplied with the current font size to set the line height.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.LineHeight">
            <summary>
            Represents the line height for the contents of a box.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LineHeight.#ctor(Spotfire.Dxp.Framework.Styles.LineHeightType,System.Nullable{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.LineHeight"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="number">The number.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LineHeight.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.LineHeight"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.LineHeight.Number">
            <summary>
            Gets the number.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.LineHeight.Type">
            <summary>
            Gets line height type.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LineHeight.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LineHeight.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LineHeight.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LineHeight.ToHtmlCss">
            <summary>
            Gets the value as valid css string.
            </summary>
            <returns>
            The css string.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LineHeight.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.Paint">
            <summary>
            Represents a "Paint" value used for stroke and fill properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Paint.currentColor">
            <summary>
            Use current color from containment model.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Paint.none">
            <summary>
            No paint.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Paint.color">
            <summary>
            The color
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Paint.paintType">
            <summary>
            The paint type.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Paint.#ctor(Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.Paint"/> struct.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Paint.#ctor(Spotfire.Dxp.Framework.Styles.Paint.PaintType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.Paint" /> struct.
            </summary>
            <param name="paintType">Type of the paint.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.Paint.PaintType">
            <summary>
            The different ways to specify paint.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Paint.PaintType.None">
            <summary>
            No paint
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Paint.PaintType.CurrentColor">
            <summary>
            Use current color property from container.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Paint.PaintType.Color">
            <summary>
            Explicitly specified color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Paint.None">
            <summary>
            Gets a value indicating that no painting is to be performed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Paint.Color">
            <summary>
            Gets the color. This property should only be read if the HasColor property is true.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Paint.HasColor">
            <summary>
            Gets a value indicating whether this instance has a specified color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Paint.CurrentColor">
            <summary>
            Gets a value indicating that no painting should use color specified by color property in containment model.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Paint.op_Equality(Spotfire.Dxp.Framework.Styles.Paint,Spotfire.Dxp.Framework.Styles.Paint)">
            <summary>
            Compares two Paint structures for equality.
            </summary>
            <param name="p1">The first object to compare.</param>
            <param name="p2">The second object to compare.</param>
            <returns><c>true</c> if the X, Y properttis of r1 and r2 are equal; otherwise, <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Paint.op_Inequality(Spotfire.Dxp.Framework.Styles.Paint,Spotfire.Dxp.Framework.Styles.Paint)">
            <summary>
            Compares two Paint structures for inequality.
            </summary>
            <param name="p1">The first object to compare.</param>
            <param name="p2">The second object to compare.</param>
            <returns><c>true</c> if the objects are not equal; otherwise, <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Paint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Paint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Paint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Paint.ToHtmlCss">
            <summary>
            Generates html css for this object.
            </summary>
            <returns>A string with css.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Paint.System#IEquatable{Spotfire#Dxp#Framework#Styles#Paint}#Equals(Spotfire.Dxp.Framework.Styles.Paint)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StyleDeclaration">
            <summary>
            Represents a style rule declaration.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleDeclaration.expr">
            <summary>
            The expression denoting the value of this declaration.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleDeclaration.propertyName">
            <summary>
            The property name of the styled property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleDeclaration.#ctor(System.String,Spotfire.Dxp.Framework.Styles.StyleExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleDeclaration" /> class.
            </summary>
            <param name="propertyName">Name of the property to style.</param>
            <param name="expression">The expression specifying the style value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleDeclaration.Expr">
            <summary>
            Gets the style expression.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleDeclaration.PropertyName">
            <summary>
            Gets the name of the styled property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleDeclaration.Create(System.String,System.Collections.Generic.IList{Spotfire.Dxp.Framework.Styles.StyleExpression})">
            <summary>
            Creates an enumeration of declarations from the specified property name and expressions.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="expressions">The expressions.</param>
            <returns>An enumeration of declarations.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.DescendantSelector">
            <summary>
            Represents a selector for adjacent siblings. That is, the ' ' combinator.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.DescendantSelector.ancestorSelector">
            <summary>
            The ancestor selector.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.DescendantSelector.childSelector">
            <summary>
            The child selector.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DescendantSelector.#ctor(Spotfire.Dxp.Framework.Styles.Selector,Spotfire.Dxp.Framework.Styles.Selector)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.DescendantSelector"/> class.
            </summary>
            <param name="ancestorSelector">The ancestor selector.</param>
            <param name="childSelector">The child selector.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DescendantSelector.CanMatch(Spotfire.Dxp.Framework.Styles.IStyledElement,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.Styles.IStyledElement,Spotfire.Dxp.Framework.Styles.TypeSelector}})">
            <summary>
            Matches this selector against the specified element.
            </summary>
            <param name="element">The element to match against.</param>
            <param name="matchingTypeSelectors">A list to which the matching type selectors will be added. Pass null
            if the matching type selectors are not needed.</param>
            <returns>
              <c>true</c> if this selector matches; otherwise false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DescendantSelector.AppendHtmlCssSelectorCore(System.Text.StringBuilder)">
            <summary>
            Gets the HTML CSS selector that this selector translates to.
            </summary>
            <param name="builder">The builder to append to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DescendantSelector.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DescendantSelector.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DescendantSelector.PathLengthCore">
            <summary>
            Gets the length of the selector path
            </summary>
            <returns>
            The length of the selector path.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DescendantSelector.GetMatchedElementNameCore">
            <summary>
            Gets the name of the element that this selector matches.
            </summary>
            <returns>The matched element name.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DescendantSelector.GetFirstElementNameCore">
            <summary>
            Gets the name of the first element in this selector
            </summary>
            <returns>
            The element name.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.DescendantSelector.CountClassesOrPseudoClassesCore">
            <summary>
            Gets the number of classes or pseudo classes used by this selector
            </summary>
            <returns>
            The number of classes or pseudo classes
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StyleExpression">
            <summary>
            Represents a CSS declaration expression.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleExpression.TryGetValue``1(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as the specified type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as the specified type.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleExpression.TryGetValue``1(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,``0@)">
            <summary>
            Tries to get the value of this expression as the specified type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as the specified type.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.RuleStatement">
            <summary>
            Represents a style rule statement.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.RuleStatement.declarations">
            <summary>
            The declarations specified by this rule.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.RuleStatement.selector">
            <summary>
            The selector that specify when this rule should match.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.RuleStatement.#ctor(Spotfire.Dxp.Framework.Styles.Selector,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Styles.StyleDeclaration})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.RuleStatement"/> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="delcarations">The delcarations.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.RuleStatement.Declarations">
            <summary>
            Gets the declarations specified by this rule.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.RuleStatement.Selector">
            <summary>
            Gets the selector that specify when this rule should match.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.RuleStatement.Create(System.Collections.Generic.IList{Spotfire.Dxp.Framework.Styles.Selector},System.Collections.Generic.IList{Spotfire.Dxp.Framework.Styles.StyleDeclaration})">
            <summary>
            Creates an enumeration of rule statements.
            </summary>
            <param name="selectors">The selectors.</param>
            <param name="declarations">The declarations.</param>
            <returns>The rule set enumeration.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.RuleStatement.Match(Spotfire.Dxp.Framework.Styles.IStyledElement)">
            <summary>
            Matches this rule against the specified element.
            </summary>
            <param name="element">The element to match against.</param>
            <returns>
              <c>true</c> if this rule matches; otherwise false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.RuleStatement.TryGetDeclaration(System.String,Spotfire.Dxp.Framework.Styles.StyleDeclaration@)">
            <summary>
            Tries to get the declared expression for the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="declaration">The declaration, or null.</param>
            <returns><c>true</c> if an expression was found; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.RuleStatement.TryGetDeclaredValue``1(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.String,``0@)">
            <summary>
            Tries to get the declared value for the specified property name.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="environment">The environment.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if a value was found; otherwise false.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.Selector">
            <summary>
            Represents a style selector.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Selector.CountClassesOrPseudoClasses">
            <summary>
            Gets the count of classes or pseudo classes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Selector.HtmlCssSelector">
            <summary>
            Gets the HTML CSS selector that this selector translates to.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Selector.PathLength">
            <summary>
            Gets the length of the selector path
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Selector.UsesClassesOrPseudoClasses">
            <summary>
            Gets a value indicating whether [uses classes or pseudo classes].
            </summary>
            <value>
            <c>true</c> if [uses classes or pseudo classes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Selector.MatchedElementName">
            <summary>
            Gets the name of the element that this selector matches.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Selector.FirstElementName">
            <summary>
            Gets the first element in the selector
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Selector.Combine(Spotfire.Dxp.Framework.Styles.Selector,System.String,Spotfire.Dxp.Framework.Styles.Selector)">
            <summary>
            Combines the two specified selectors.
            </summary>
            <param name="s1">The first selector.</param>
            <param name="combinator">The combinator to combine with, must be ' ' or '>'.</param>
            <param name="s2">The second selector.</param>
            <returns>A new selector.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Selector.AppendHtmlCssSelectorCore(System.Text.StringBuilder)">
            <summary>
            Gets the HTML CSS selector that this selector translates to.
            </summary>
            <param name="builder">The builder to append to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Selector.CanMatch(Spotfire.Dxp.Framework.Styles.IStyledElement,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.Styles.IStyledElement,Spotfire.Dxp.Framework.Styles.TypeSelector}})">
            <summary>
            Matches this selector against the specified element.
            </summary>
            <param name="element">The element to match against.</param>
            <param name="matchingTypeSelectors">A list to which the matching type selectors will be added. Pass null 
            if the matching type selectors are not needed.
            </param>
            <returns>
              <c>true</c> if this selector matches; otherwise false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Selector.Match(Spotfire.Dxp.Framework.Styles.IStyledElement)">
            <summary>
            Matches this selector against the specified element.
            </summary>
            <param name="element">The element to match against.</param>
            <returns><c>true</c> if this selector matches; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Selector.CountClassesOrPseudoClassesCore">
            <summary>
            Gets the number of classes or pseudo classes used by this selector
            </summary>
            <returns>
            The number of classes or pseudo classes
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Selector.PathLengthCore">
            <summary>
            Gets the depth of the selector path, i.e., the number of elements.
            </summary>
            <returns>
            The depth of the selector path.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Selector.GetMatchedElementNameCore">
            <summary>
            Gets the name of the element that this selector matches.
            </summary>
            <returns>The matched element name.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Selector.GetFirstElementNameCore">
            <summary>
            Gets the name of the first element in this selector
            </summary>
            <returns>The matched element name.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment">
            <summary>
            Represents the environment in which a style expressions is evaluated.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.lengthOfEmInPixels">
            <summary>
            The number of pixels that an em length unit is.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.matchingRules">
            <summary>
            The matching rules, in reverse declaration order, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.styleSheet">
            <summary>
            The style sheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.evaluatedFontSizeExpression">
            <summary>
            The evaluated font size expression, or null.
            Specifies what the font size is for the styled element associated with this environment.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.#ctor(Spotfire.Dxp.Framework.Styles.StyleSheet,Spotfire.Dxp.Framework.Styles.RuleStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment"/> class.
            </summary>
            <param name="styleSheet">The style sheet.</param>
            <param name="rule">The only matching rule for this environment.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.#ctor(Spotfire.Dxp.Framework.Styles.StyleSheet,Spotfire.Dxp.Framework.Styles.IStyledElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment" /> class.
            </summary>
            <param name="styleSheet">The style sheet.</param>
            <param name="styledElement">The styled element on which evaluation of properties is performed.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.LengthOfEmInPixels">
            <summary>
            Gets the number of pixels that represent an em length unit.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.Create(Spotfire.Dxp.Framework.Styles.StyleSheet,Spotfire.Dxp.Framework.Styles.IStyledElement)">
            <summary>
            Creates the style expression environment.
            </summary>
            <param name="styleSheet">The style sheet.</param>
            <param name="styledElement">The styled element on which evaluation of properties is performed.</param>
            <returns>An environment.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.TryGetExpression(System.String,Spotfire.Dxp.Framework.Styles.StyleExpression@)">
            <summary>
            Tries to get the declared expression for the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="expression">The expression.</param>
            <returns>
              <c>true</c> if a value was found; otherwise false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment.TryGetVariableExpression(System.String,Spotfire.Dxp.Framework.Styles.StyleExpression@)">
            <summary>
            Tries to get the expression bound to the specified variable.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <param name="expression">The expression.</param>
            <returns><c>true</c>, if an expression for the variable was found.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StyleProperties">
            <summary>
            A collection of properties describing the styles of a user interface element.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleProperties.box">
            <summary>
            The box
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleProperties.#ctor(Spotfire.Dxp.Framework.Styles.IBoxStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleProperties"/> class.
            </summary>
            <param name="box">The box.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.FontFamily">
            <summary>
            Gets the font family name.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.FontSize">
            <summary>
            Gets the size of the font.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.FontStyle">
            <summary>
            Gets the font style.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.FontWeight">
            <summary>
            Gets the font weight.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BackgroundColor">
            <summary>
            Gets the background color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.SecondaryColor">
            <summary>
            Gets the secondary color.
            Used when rendering labels etc. on graphical elements (bars, lines, etc.) when the Color has worse contrast to the background.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderTopColor">
            <summary>
            Gets the border top color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderRightColor">
            <summary>
            Gets the border right color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderBottomColor">
            <summary>
            Gets the border bottom color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderLeftColor">
            <summary>
            Gets the border left color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderStyle">
            <summary>
            Gets the border style.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderTopLeftRadius">
            <summary>
            Gets the top left border radius.
            </summary>
            <value>
            The top left border radius.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderTopRightRadius">
            <summary>
            Gets the border top right radius.
            </summary>
            <value>
            The border top right radius.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderBottomRightRadius">
            <summary>
            Gets the border bottom right radius.
            </summary>
            <value>
            The border bottom right radius.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderBottomLeftRadius">
            <summary>
            Gets the border bottom left radius.
            </summary>
            <value>
            The border bottom left radius.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.MarginTop">
            <summary>
            Gets the top margin.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.MarginBottom">
            <summary>
            Gets the bottom margin.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.MarginLeft">
            <summary>
            Gets the left margin.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.MarginRight">
            <summary>
            Gets the right margin.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderTopWidth">
            <summary>
            Gets the top border width.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderBottomWidth">
            <summary>
            Gets the bottom border width.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderLeftWidth">
            <summary>
            Gets the left border width.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.BorderRightWidth">
            <summary>
            Gets the right border width.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.PaddingTop">
            <summary>
            Gets the top padding.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.PaddingBottom">
            <summary>
            Gets the bottom padding.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.PaddingLeft">
            <summary>
            Gets the left padding.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.PaddingRight">
            <summary>
            Gets the right padding.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleProperties.Box">
            <summary>
            Gets the wrapped box. Use to implement extension methods.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleProperties.ToInlineCss">
            <summary>
            Creates a string containing the CSS corrsponding to the current property values.
            </summary>
            <returns>A CSS string.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StyleStatement">
            <summary>
            Represents a style statement.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.FunctionCallExpression">
            <summary>
            Represents a style function call expression, with or without arguments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.arguments">
            <summary>
            The arguments.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.functionName">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.#ctor(System.String,System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Styles.StyleExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.FunctionCallExpression" /> class.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.Arguments">
            <summary>
            Gets the arguments.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.FunctionName">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetValue``1(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as the specified type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as the specified type.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetColor(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as a color.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as a color.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetPaint(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as a Paint object.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as a color.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetColorPalette(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as a color.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as a color.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetBackgroundImage(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get a background image.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as a background image.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetBoxShadow(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get a box shadow.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as a box shadow.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetTextOrientation(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get text orientation.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as a text orientation.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetBackgroundRepeat(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get a background repeat.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as a background repeat object.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetBackgroundSize(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get a background size.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as a background repeat object.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetLineHeight(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the line height.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as a line height object.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.FunctionCallExpression.TryGetBorderRadius(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get a BorderRadius object.
            </summary>
            <param name="environment">The environment.</param>
            <param name="value">On success, BorderRadis struct.</param>
            <returns>
            True on success, otherwise false.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.HexColorExpression">
            <summary>
            Represents a color literal expression in hex format.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.HexColorExpression.color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.HexColorExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.HexColorExpression"/> class.
            </summary>
            <param name="hexDigits">The hex digits.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.HexColorExpression.TryGetValue``1(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as the specified type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as the specified type.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.NumberExpression">
            <summary>
            Represents a number literal expression.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.NumberExpression.unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.NumberExpression.literalValue">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.NumberExpression.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.NumberExpression" /> class.
            </summary>
            <param name="numberText">The number text.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.NumberExpression.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.NumberExpression"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.NumberExpression.IsEmUnit">
            <summary>
            Gets a value indicating whether this instance is specified in em units.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.NumberExpression.TryGetValue``1(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as the specified type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as the specified type.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StringExpression">
            <summary>
            Represents a string literal expression
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StringExpression.Logger">
            <summary>
            The logger instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StringExpression.stringLiteral">
            <summary>
            The string literal.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StringExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StringExpression"/> class.
            </summary>
            <param name="stringLiteral">The string literal.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StringExpression.TryGetValue``1(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as the specified type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as the specified type.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.TableTextAlign">
            <summary>
            Vertical text alignment
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TableTextAlign.Left">
            <summary>
            Text is aligned to the left
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TableTextAlign.Center">
            <summary>
            Text is aligned in the center
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TableTextAlign.Right">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TableTextAlign.DataType">
            <summary>
            Text is aligned according to the data type in the column.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.TextAlign">
            <summary>
            Text aligment
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TextAlign.Left">
            <summary>
            Left aligned.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TextAlign.Right">
            <summary>
            Right aligned.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TextAlign.Center">
            <summary>
            Text is centered.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TextAlign.Justify">
            <summary>
            Justified (fills available width).
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.Textorientation">
            <summary>
            Describes text orientation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Textorientation.none">
            <summary>
            Text orientation with none as value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Textorientation.orientation">
            <summary>
            The horizontal offset
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Textorientation.#ctor(Spotfire.Dxp.Framework.Styles.Textorientation.OrientationEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.Textorientation" /> class.
            </summary>
            <param name="orientation">The text orientation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Textorientation.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.Textorientation" /> class from being created.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Textorientation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.Textorientation"/> class during deserialization.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.Textorientation.OrientationEnum">
            <summary>
            The text orientation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Textorientation.OrientationEnum.Horizontal">
            <summary>
            Horizontal text.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.Textorientation.OrientationEnum.Vertical">
            <summary>
            Text is Vertical.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Textorientation.None">
            <summary>
            Gets the none.
            </summary>
            <value>
            The none.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Textorientation.IsNone">
            <summary>
            Gets a value indicating whether this instance is none.
            </summary>
            <value>
              <c>true</c> if this instance is none; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.Textorientation.Orientation">
            <summary>
            Gets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Textorientation.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Textorientation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Textorientation.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Textorientation.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Textorientation.GetValueAsString">
            <summary>
            Gets the value as string.
            </summary>
            <returns>The orientation as a string value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.Textorientation.OrientationClasses">
            <summary>
            Generates a string of css classes that should be appended to the element.
            </summary>
            <returns>A string with css.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.VariableReferenceExpression">
            <summary>
            Represents a style variable reference.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.VariableReferenceExpression.name">
            <summary>
            The variable name.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.VariableReferenceExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.VariableReferenceExpression" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.VariableReferenceExpression.TryGetValue``1(Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.Object@)">
            <summary>
            Tries to get the value of this term as the specified type.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="environment">The environment.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be assigned as the specified type.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.TypeSelector">
            <summary>
            Represents a type selector. That is, one that matches an element based on its name/type and optionally classes and pseudo classes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TypeSelector.elementName">
            <summary>
            The selected element name. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TypeSelector.classes">
            <summary>
            The classes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TypeSelector.pseudoClasses">
            <summary>
            The pseudo classes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TypeSelector.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.TypeSelector" /> class.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="classes">The classes.</param>
            <param name="pseudoClasses">The pseudo classes.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.TypeSelector.Classes">
            <summary>
            Gets the classes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.TypeSelector.PseudoClasses">
            <summary>
            Gets the pseudo classes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.TypeSelector.ElementName">
            <summary>
            Gets the element name matched by this selector. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TypeSelector.CanMatch(Spotfire.Dxp.Framework.Styles.IStyledElement,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Spotfire.Dxp.Framework.Styles.IStyledElement,Spotfire.Dxp.Framework.Styles.TypeSelector}})">
            <summary>
            Matches this selector against the specified element.
            </summary>
            <param name="element">The element to match against.</param>
            <param name="matchingTypeSelectors">A list to which the matching type selectors will be added. Pass null
            if the matching type selectors are not needed.</param>
            <returns>
              <c>true</c> if this selector matches; otherwise false.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TypeSelector.AppendHtmlCssSelectorCore(System.Text.StringBuilder)">
            <summary>
            Gets the HTML CSS selector that this selector translates to.
            </summary>
            <param name="builder">The builder to append to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TypeSelector.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TypeSelector.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TypeSelector.CountClassesOrPseudoClassesCore">
            <summary>
            Gets the number of classes or pseudo classes used by this selector
            </summary>
            <returns>
            The number of classes or pseudo classes
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TypeSelector.GetMatchedElementNameCore">
            <summary>
            Gets the name of the element that this selector matches.
            </summary>
            <returns>The matched element name.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TypeSelector.GetFirstElementNameCore">
            <summary>
            Gets the name of the first element in this selector
            </summary>
            <returns>
            The element name.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.IStyledElement">
            <summary>
            Represents a styled element.
            Typically implemented by one or more document nodes that together make up a styled element.
            The styled elements in the document have their own hierarchical structure (parent-child) that can 
            differ from the hierarchical structure of the document nodes.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IStyledElement.Name">
            <summary>
            Gets the name of the styled element. This is the string that identifies this element with a type selector in the style sheet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IStyledElement.Parent">
            <summary>
            Gets the parent element.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.IStyledElement.IsStyleRoot">
            <summary>
            Gets a value indicating whether this instance is a root node´with regards to a.s.s styling.
            </summary>
            <value>
            <c>true</c> if this instance is style root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.IStyledElement.EnumerateClasses">
            <summary>
            Enumerates the classes of this element.
            </summary>
            <returns>An enumeration of the classes of this element.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.IStyledElement.EnumeratePseudoClasses">
            <summary>
            Enumerates the pseudo classes of this element.
            </summary>
            <returns>An enumeration of the pseudo classes of this element.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.GradientDirection">
            <summary>
            Represent the direction of a gradient.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.GradientDirection.ToBottom">
            <summary>
            From top to bottom.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.GradientDirection.ToRight">
            <summary>
            From left to right.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.GradientDirection.ToRightBottom">
            <summary>
            From left top to bottom right.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.LinearGradient">
            <summary>
            Linear two point gradient.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.LinearGradient.direction">
            <summary>
            The direction
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.LinearGradient.fromColor">
            <summary>
            From color
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.LinearGradient.toColor">
            <summary>
            To color
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LinearGradient.#ctor(Spotfire.Dxp.Framework.Styles.GradientDirection,Spotfire.Dxp.Framework.Styles.ColorInfo,Spotfire.Dxp.Framework.Styles.ColorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.LinearGradient"/> class.
            </summary>
            <param name="direction">The direction.</param>
            <param name="fromColor">From color.</param>
            <param name="toColor">To color.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LinearGradient.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.LinearGradient"/> class during deserialization.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.LinearGradient.Direction">
            <summary>
            Gets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.LinearGradient.FromColor">
            <summary>
            Gets from color.
            </summary>
            <value>
            From color.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.LinearGradient.ToColor">
            <summary>
            Gets to color.
            </summary>
            <value>
            To color.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LinearGradient.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.LinearGradient.ToHtmlCss">
            <summary>
            Generates html css for this object.
            </summary>
            <returns>A string with css.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StyleSheet">
            <summary>
            Represents a CSS style sheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleSheet.exception">
            <summary>
            The exception, or null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleSheet.rules">
            <summary>
            The rules defined by this style sheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleSheet.rulesPerElementName">
            <summary>
            Maps element names to the rules that apply to them. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleSheet.variables">
            <summary>
            The variables defined by this style sheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleSheet.parentStyleSheet">
            <summary>
            The parent style sheet that this style sheet overrides, or null.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleSheet.#ctor(System.Collections.Generic.IEnumerable{Spotfire.Dxp.Framework.Styles.StyleStatement})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleSheet"/> class.
            </summary>
            <param name="statements">The statements.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleSheet.#ctor(antlr.ANTLRException)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleSheet"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleSheet.#ctor(Spotfire.Dxp.Framework.ImmutableCollections.ImmutableList{Spotfire.Dxp.Framework.Styles.RuleStatement},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Spotfire.Dxp.Framework.Styles.RuleStatement}},antlr.ANTLRException,Spotfire.Dxp.Framework.ImmutableCollections.ImmutableDictionary{System.String,Spotfire.Dxp.Framework.Styles.StyleExpression},Spotfire.Dxp.Framework.Styles.StyleSheet)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleSheet" /> class.
            </summary>
            <param name="rules">The rules.</param>
            <param name="rulesPerElementName">The map from element name to the list of rules that can affect it.</param>
            <param name="exception">The exception.</param>
            <param name="variables">The variables.</param>
            <param name="parentStyleSheet">The parent style sheet.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleSheet.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid, meaning the style sheet was parsed without excpetion.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleSheet.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            Invalid style sheets are not considered empty.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleSheet.Exception">
            <summary>
            Gets the parse exception, or null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleSheet.Rules">
            <summary>
            Gets the rules defined by this style sheet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleSheet.Variables">
            <summary>
            Gets the variables declared by this style sheet.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleSheet.GetRulesMatchingElement(System.String)">
            <summary>
            Gets the rules that can match an element with the specified name.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns>An enumeration of rule.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleSheet.Parse(System.String)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>A parsed style sheet.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleSheet.AddOverride(Spotfire.Dxp.Framework.Styles.StyleSheet)">
            <summary>
            Adds the specified style sheet as an override for this instance, resulting in a new style sheet.
            </summary>
            <param name="overrideStyleSheet">The override style sheet.</param>
            <returns>A new style sheet.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StyleVariableAssignment">
            <summary>
            Represents a variable assignment.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleVariableAssignment.name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleVariableAssignment.expr">
            <summary>
            The expr.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleVariableAssignment.#ctor(System.String,Spotfire.Dxp.Framework.Styles.StyleExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleVariableAssignment"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="expr">The expr.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleVariableAssignment.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleVariableAssignment.Expr">
            <summary>
            Gets the expr.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.VerticalTextAlign">
            <summary>
            Vertical text alignment
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.VerticalTextAlign.Top">
            <summary>
            Text is aligned to the top.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.VerticalTextAlign.Middle">
            <summary>
            Text is aligned in the middle.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.VerticalTextAlign.Bottom">
            <summary>
            Text is aligned to the bottom.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.TooltipStyle">
            <summary>
            The style which tooltips are rendered in.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TooltipStyle.DarkTextOnWhite">
            <summary>
            The legacy tooltips (pre 4.0), with a dark text on a white background.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TooltipStyle.LightTextOnBlack">
            <summary>
            Tooltips with a light text on a black background.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TooltipStyle.backgroundColor">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TooltipStyle.borderColor">
            <summary>
            The border color.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TooltipStyle.borderWidth">
            <summary>
            The border width.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TooltipStyle.name">
            <summary>
            The name of the tooltip style.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.TooltipStyle.textColor">
            <summary>
            The text color.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TooltipStyle.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.TooltipStyle"/> class.
            </summary>
            <param name="name">The name for the style.</param>
            <param name="textColor">The text color.</param>
            <param name="backgroundColor">The background color.</param>
            <param name="borderColor">The border color.</param>
            <param name="borderWidth">The border width.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.TooltipStyle.BackgroundColor">
            <summary>
            Gets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.TooltipStyle.BorderColor">
            <summary>
            Gets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.TooltipStyle.BorderWidth">
            <summary>
            Gets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.TooltipStyle.TextColor">
            <summary>
            Gets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.TooltipStyle.Name">
            <summary>
            Gets the name of the style.
            </summary>
            <value>The name of the style.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TooltipStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TooltipStyle.System#Runtime#Serialization#IObjectReference#GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns the real object that should be deserialized, rather than the object that the serialized stream specifies.
            </summary>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> from which the current object is deserialized.</param>
            <returns>
            Returns the actual object that is put into the graph.
            </returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. The call will not work on a medium trusted server.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TooltipStyle.FromName(System.String)">
            <summary>
            Gets the correct static instance of <see cref="T:Spotfire.Dxp.Framework.Styles.TooltipStyle"/>, based on the name sent in.
            </summary>
            <param name="styleName">Name of the style.</param>
            <returns>The correct static instance of <see cref="T:Spotfire.Dxp.Framework.Styles.TooltipStyle"/>, or the current default value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.TooltipStyle.GetDefaultStyleName">
            <summary>
            Gets the name of the default style.
            </summary>
            <returns>The name of the default style.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StyleManager">
            <summary>
            Style settings for the analysis.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.StyleSheetCompute">
            <summary>
            The style sheet computer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.StyleSheetTrigger">
            <summary>
            The style sheet trigger declarer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.plotTitleFont">
            <summary>
            The plot title font.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.showRelatedDataTablesIndicators">
            <summary>
            Controls whether related data tables are indicated in analyses.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.styleSheet">
            <summary>
            Holds the style sheet parsed from styleSheetText.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.styleSheetText">
            <summary>
            The style sheet text.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.tooltipStyle">
            <summary>
            The tooltip style that is in use for the document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleManager"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Styles.StyleManager"/> class during deserialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleManager.ShowRelatedDataTablesIndicators">
            <summary>
            Gets or sets a value indicating whether to show indicators for related data tables.
            </summary>
            <value>
            <c>true</c> if to show indicators for related data tables; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleManager.StyleSheet">
            <summary>
            Gets the style sheet.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleManager.StyleSheetText">
            <summary>
            Gets or sets the style sheet text.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Styles.StyleManager.TooltipStyle">
            <summary>
            Gets or sets the tooltip style for the document.
            </summary>
            <value>The tooltip style.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetAxisBackgroundColor">
            <summary>
            Gets the axis background color.
            </summary>
            <returns>The background color</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetAxisForegroundColor">
            <summary>
            Gets the axis text color.
            </summary>
            <returns>The background color</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetDescriptionFontColor">
            <summary>
            Gets the description font color.
            </summary>
            <returns>The font color</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetPanelBackgroundColor">
            <summary>
            Gets the background color for panels.
            </summary>
            <returns>The background color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetPanelToolStripBackgroundColor">
            <summary>
            Gets the background color for toolstrips in panels.
            </summary>
            <returns>The background color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetPlotCanvasMargin">
            <summary>
            Gets the plot canvas margin in pixels.
            </summary>
            <returns>The margin around each plot panel.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetPlotPanelMargin">
            <summary>
            Gets the plot panel margin in pixels.
            </summary>
            <returns>The margin around each plot panel.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetVisualizationTitleBarHeight">
            <summary>
            Gets the height of the title bar. This includes the height of the border below the title but not the border above the title.
            Thus it is the number of additional pixel used when the title is shown.
            </summary>
            <returns>The height.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetTooltipAppearanceScript">
            <summary>
            Gets the tooltip appearance script.
            </summary>
            <returns>The script for updating the tooltip.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetStylesheetVariableValue``1(Spotfire.Dxp.Framework.Styles.StyleSheet,Spotfire.Dxp.Framework.Styles.StyleExpressionEnvironment,System.String,``0)">
            <summary>
            Gets the variable value or a default value.
            </summary>
            <typeparam name="T">Property type.</typeparam>
            <param name="styleSheet">The style sheet.</param>
            <param name="env">The environment.</param>
            <param name="name">The variable name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The variable value or a default value if variable does not exist or could not be converted to the property type.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetTooltipStyle(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Gets the tooltip style.
            </summary>
            <param name="documentNode">The document node</param>
            <returns>The tooltip style.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.ComputeStyleSheet(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Computer method for the StyleSheet runtime property.
            </summary>
            <param name="node">This node.</param>
            <returns>A style sheet.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetHeaderPanelMargin">
            <summary>
            Gets the header panel margin in pixels.
            </summary>
            <returns>The margin over and under the header panel title.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetPlotPanelBorderWidth">
            <summary>
            Gets the plot border width in pixels.
            </summary>
            <returns>The border width around each plot panel and plot header.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetPlotTitleFont">
            <summary>
            Gets the plot title font.
            </summary>
            <returns>The font for the plot tile.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetStyleSheetTrigger(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Trigger declarer method for the StyleSheet runtime property.
            </summary>
            <param name="node">This node.</param>
            <returns>A Trigger.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetVisualizationTitleFontHeight">
            <summary>
            Gets the height of the font used in the visualization title.
            </summary>
            <returns>The font height</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetTooltipBackgroundColor">
            <summary>Gets the tooltip background color.
            </summary>
            <returns>The tooltip background color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetTooltipBorderColor">
            <summary>
            Gets the color of the tooltip border.
            </summary>
            <returns>The tooltip border color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetTooltipBorderWidth">
            <summary>
            Gets the width of the tooltip border.
            </summary>
            <returns>The tooltip border width.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.GetTooltipTextColor">
            <summary>Gets the tooltip text color.
            </summary>
            <returns>The tooltip text color.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Styles.StyleManager.InitRuntimeProperties(Spotfire.Dxp.Framework.DocumentModel.RuntimeProperty{Spotfire.Dxp.Framework.Styles.StyleSheet}@)">
            <summary>
            Initializes the runtime properties.
            </summary>
            <param name="thisStyleSheet">The style sheet runtime property.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Styles.StyleManager.PropertyNames">
            <summary>
            Contains property name constants for the public properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.PropertyNames.ShowRelatedDataTablesIndicators">
            <summary>
            The name of the property ShowRelatedDataTablesIndicators.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.PropertyNames.StyleSheet">
            <summary>
            The name of the property StyleSheet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.PropertyNames.StyleSheetText">
            <summary>
            The name of the property StyleSheetText.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.PropertyNames.Theme">
            <summary>
            The name of the property Theme.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Styles.StyleManager.PropertyNames.TooltipStyle">
            <summary>
            The name of the property TooltipStyle.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler">
            <summary>
            Task scheduler that runs all tasks on a single dedicated thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.cancellationTokenSource">
            <summary>
            The cancellation token source.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.queue">
            <summary>
            The queue of tasks.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.thread">
            <summary>
            The thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler" /> class.
            </summary>
            <param name="threadName">The name of the thread.</param>
        </member>
        <member name="E:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.ThreadExiting">
            <summary>
            Event raised on the task execution thread when the thread is about to exit.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.ThreadStarted">
            <summary>
            Event raised on the task execution thread when the thread starts, before any tasks have been executed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.MaximumConcurrencyLevel">
            <summary>
            Gets the maximum concurrency level this <see cref="T:System.Threading.Tasks.TaskScheduler" /> is able to support.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.Thread">
            <summary>
            Gets the thread used to execute tasks.
            </summary>
            <value>
            The thread.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.Start">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler" /> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">When attempting to start thread more than once.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.GetScheduledTasks">
            <summary>
            For debugger support only, generates an enumerable of <see cref="T:System.Threading.Tasks.Task" /> instances currently queued to the scheduler waiting to be executed.
            </summary>
            <returns>
            An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a <see cref="T:System.Threading.Tasks.Task" /> to the scheduler.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be queued.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Determines whether the provided <see cref="T:System.Threading.Tasks.Task" /> can be executed synchronously in this call, and if it can, executes it.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be executed.</param>
            <param name="taskWasPreviouslyQueued">A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</param>
            <returns>
            A Boolean value indicating whether the task was executed inline.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Tasks.SingleThreadedTaskScheduler.Main">
            <summary>
            The main execution loop for the decidated thread.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer">
            <summary>
            Helper class for asynchronous computing of functions from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> to output.
            The computation is greedy in the sense that once the class has been instantiated, it starts new computations
            automatically as the trigger fires. Ongoing background work are marked as cancelled as a new computations
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer.busyUpdater">
            <summary>
            The busy updater.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer.busy">
            <summary>
            Whether the computer is busy.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer.#ctor(System.Action{System.Boolean},Spotfire.Dxp.Framework.Threading.ISystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer"/> class.
            </summary>
            <param name="busyUpdater">State change receptor delegate</param>
            <param name="systemWindowsForms">WindowssForms IOC facade</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer.Busy">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer"/> is busy (from a user standpoint).
            </summary>
            <value>
             <c>true</c> if busy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer.HasValidResult">
            <summary>
            Gets a value indicating whether the computer has a valid result or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer.SystemWindowsForms">
            <summary>
            Gets or sets the system windows forms representation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2">
            <summary>
            Helper class for asynchronous computing of functions from <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> to output.
            The computation is greedy in the sense that once the class has been instantiated, it starts new computations
            automatically as the trigger fires. Ongoing background work are marked as cancelled as a new computations
            </summary>
            <typeparam name="TNode">The type of the document node.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.consumer">
            <summary>
            The result handler.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.disposables">
            <summary>
            The list of result containers that should be disposed by this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.owner">
            <summary>
            The UI control.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.ownerParentControls">
            <summary>
            A list to hold known parents of owner.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.disposed">
            <summary>
            Whether this instance has been disposed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.currentResultContainer">
            <summary>
            The current result container.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.lastVisibleState">
            <summary>
            State change tracker for Ancestor visibility changes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.liveNodeInstanceRetriever">
            <summary>
            The live node instance retriever.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.jobSink">
            <summary>
            The job queue.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.#ctor(Spotfire.Dxp.Framework.Threading.ISystem,System.Object,`0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{`0,`1},System.Action{`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2"/> class.
            </summary>
            <param name="systemWindowsForms">THe system windows forms implementation. Interceptor for tests.</param>
            <param name="owner">The control.</param>
            <param name="liveNode">The live node.</param>
            <param name="trigger">The trigger.</param>
            <param name="computer">The computer.</param>
            <param name="consumer">The consumer.</param>
            <param name="plotDataCompeting">Whether the greedy computer is so greedy that it is competing with plot data evaluation.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.#ctor(Spotfire.Dxp.Framework.Threading.ISystem,System.Object,`0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{`0,`1},System.Action{`1},System.Action{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2"/> class.
            </summary>
            <param name="systemWindowsForms">THe system windows forms implementation. Interceptor for tests.</param>
            <param name="owner">The owner.</param>
            <param name="liveNode">The live node.</param>
            <param name="trigger">The trigger.</param>
            <param name="computer">The computer.</param>
            <param name="consumer">The consumer.</param>
            <param name="busyUpdater">The busy updater.</param>
            <remarks>Always plot data competing.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.#ctor(Spotfire.Dxp.Framework.Threading.ISystem,System.Object,`0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{`0,`1},System.Action{`1},System.Action{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2"/> class.
            </summary>
            <param name="systemWindowsForms">THe system windows forms implementation. Interceptor for tests.</param>
            <param name="owner">The owner.</param>
            <param name="liveNode">The live node.</param>
            <param name="trigger">The trigger.</param>
            <param name="computer">The computer.</param>
            <param name="consumer">The consumer.</param>
            <param name="busyUpdater">The busy updater.</param>
            <param name="plotDataCompeting">if set to <c>true</c> [plot data competing].</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.#ctor(Spotfire.Dxp.Framework.Threading.ISystem,System.Object,System.Func{`0},Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{`0,`1},System.Action{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2"/> class.
            </summary>
            <param name="systemWindowsForms">THe system windows forms implementation. Interceptor for tests.</param>
            <param name="owner">The function that returns the owner.</param>
            <param name="liveNodeInstanceRetriever">The live node instance retriever.</param>
            <param name="trigger">The trigger.</param>
            <param name="computer">The computer.</param>
            <param name="consumer">The consumer.</param>
            <remarks>Only used by filtered by others code, hence hard-coded with plotData competing == false.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.#ctor(Spotfire.Dxp.Framework.Threading.ISystem,System.Object,System.Func{`0},Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{`0,`1},System.Action{`1},System.Action{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2"/> class.
            </summary>
            <param name="systemWindowsForms">THe system windows forms implementation. Interceptor for tests.</param>
            <param name="owner">The function that returns the owner.</param>
            <param name="liveNodeInstanceRetriever">The live node instance retriever.</param>
            <param name="trigger">The trigger.</param>
            <param name="computer">The computer.</param>
            <param name="consumer">The consumer.</param>
            <param name="busyUpdater">The busy updater.</param>
            <param name="plotDataCompeting">Whether the greedy computer is so greedy that it is competing with plot data evaluation.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.HasResult">
            <summary>
            Gets a value indicating whether this instance has a result (old ore valid does not matter).
            </summary>
            <value>
            <c>true</c> if this instance has result; otherwise, <c>false</c>.
            </value>
            <remarks>See further <seealso cref="P:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.HasValidResult"/>.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.HasValidResult">
            <summary>
            Gets a value indicating whether this computer has a valid result or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.ValidResult">
            <summary>
            Gets the valid result.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the computer does not have a valid result, <see cref="P:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.HasValidResult"/>.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.ReadNode(System.Action{`0})">
            <summary>
            Reads the node.
            </summary>
            <param name="action">The action.</param>
            <remarks>Examine <see cref="P:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.HasResult"/> before calling this method. The action is only run if there is a result.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.OnOwnerParentChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Manages owner changes
            </summary>
            <param name="sender">The control.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.DetachHandlersFromParents">
            <summary>
            Detaches handlers from parent controls
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.AttachHandlersToParents">
            <summary>
            Attaches handlers to parent controls.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.EnqueueJobIfVisibleAndNotBusyAlready">
            <summary>y
            Enqueues the job if not busy already.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.EnqueueJob">
            <summary>
            Enqueues the job.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.HandleAncestorVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the owner handle created event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.HandleResult(Spotfire.Dxp.Framework.Threading.ResultContainer{`1})">
            <summary>
            Handles the result.
            </summary>
            <param name="container">The result.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsynchronousGreedyComputer`2.SetBusyAndEnqueueJob">
            <summary>
            Sets the busy flag and enqueue job.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.AsyncProperty`1">
            <summary>
            Typically used for moving expensive computations from the application thread
            to a background thread. 
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.disposables">
            <summary>
            The list of result containers that should be disposed by this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.eventManager">
            <summary>
            The event manager
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.jobSink">
            <summary>
            The job sink performing background computations
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.onChangedCallback">
            <summary>
            Called when the property value has changed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.AsyncProperty`1"/> class from being created.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.Value">
            <summary>
            Gets the value of the property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.Create``1(``0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{``0,`0},System.Action)">
            <summary>
            Factory method.
            </summary>
            <typeparam name="TModel">The type of the model that the update function operates on.</typeparam>
            <param name="model">The model object (a snapshot thereof while evaluation the update function).</param>
            <param name="trigger">The trigger that invokes the update function on a background thread.</param>
            <param name="updateFunction">The update function.</param>
            <param name="onChangedCallback">The on changed callback.</param>
            <returns>
            The asynchronous property
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="isDisposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.Bind``1(``0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{``0,`0},System.Action)">
            <summary>
            Binds the asynchronous property to a model and a trigger.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="model">The model.</param>
            <param name="trigger">The trigger.</param>
            <param name="updateFunction">The update function.</param>
            <param name="onChangedCallback">The on changed callback</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.CallUpdateFunction">
            <summary>
            Calls the update function.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.AsyncProperty`1.ResultHandler(Spotfire.Dxp.Framework.Threading.ResultContainer{`0})">
            <summary>
            Results the handler.
            </summary>
            <param name="container">The container holding the result.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ICancellableInputToWorkItem">
            <summary>
            Helper interface. Work items that should be cancelled soon after being enqueued can implement
            this interface and answer <c>true</c> when asked about CancelImmediately.
            See e.g. TS-28114 for details.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ICancellableInputToWorkItem.CancelImmediately">
            <summary>
            Gets a value indicating whether to cancel the work item immediately on enqueueing it.
            </summary>
            <value>
              <c>true</c> if we are to cancel immediately; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ResultContainer`1">
            <summary>
            Container for the output. Needed to be able to pass around threads and examine validity.
            </summary>
            <typeparam name="TResult">The type of the output.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer`1.#ctor(Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.ResultContainer`1"/> class.
            </summary>
            <param name="jobJobWorkItem">The job work item.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.ResultContainer`1"/> class from being created.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ResultContainer`1.Result">
            <summary>
            Gets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ResultContainer`1.Input">
            <summary>
            Gets the input. Consider introducing a TInput parameter if needed.
            </summary>
            <value>The input.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer`1.CreateCanceledResultContainer">
            <summary>
            Creates a canceled result container.
            </summary>
            <returns>A result container.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer`1.ChainToNextAndDispose``1(Spotfire.Dxp.Framework.Threading.IJobSink{`0,``0},Spotfire.Dxp.Framework.Threading.ResultHandler{``0})">
            <summary>
            Chains to next and dispose this instance.
            </summary>
            <typeparam name="TOut2">The type of the out2.</typeparam>
            <param name="nextSink">The next sink.</param>
            <param name="resultHandler">The result handler.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer`1.EndWorkItemStatusHandler">
            <summary>
            Tells the underlying workitem that has ended executing.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ISystem">
            <summary>
            A cut-off interface to the system to enable testing.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ISystem.EnumerateThisAndParents(System.Object)">
            <summary>
            Enumerate parent controls.
            </summary>
            <param name="control">The control.</param>
            <returns>A sequence of parents.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ISystem.AttachVisibleChanged(System.Object,System.EventHandler)">
            <summary>
            Attach a visible changed handler.
            </summary>
            <param name="control">The control.</param>
            <param name="onVisibleChangedEventHandler">The on created event handler.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ISystem.DetachVisibleChanged(System.Object,System.EventHandler)">
            <summary>
            Detach a visible changed handler.
            </summary>
            <param name="obj">The owner.</param>
            <param name="onVisibleChangedEventHandler">The on created event handler.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ISystem.AttachParentChangedHandler(System.Object,System.EventHandler)">
            <summary>
            Attach a parent changed handler.
            </summary>
            <param name="obj">The control.</param>
            <param name="onParentChangedHandler">The handler.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ISystem.DetachParentChangedHandler(System.Object,System.EventHandler)">
            <summary>
            Detach a parent changed handler.
            </summary>
            <param name="obj">The control.</param>
            <param name="onParentChangedHandler">The handler.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ISystem.IsVisible(System.Object)">
            <summary>
            Determines whether the specified owner is created.
            </summary>
            <param name="owner">The owner.</param>
            <returns>
            <c>true</c> if the specified owner is created; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ISystem.IsDisposed(System.Object)">
            <summary>
            Determines whether the specified owner is disposed.
            </summary>
            <param name="owner">The owner.</param>
            <returns>
            <c>true</c> if the specified owner is disposed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSinkFactory">
            <summary>
            Factory for <see cref="T:Spotfire.Dxp.Framework.Threading.IJobSink`2"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkFactory.CreateDataSink``2(``0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{``0,``1},Spotfire.Dxp.Framework.Threading.ModelChangedHandler)">
            <summary>
            Creates the data sink.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="documentNode">The document node.</param>
            <param name="trigger">The trigger.</param>
            <param name="outputComputer">The output computer.</param>
            <param name="modelChangedHandler">The model changed handler.</param>
            <returns>
            A <see cref="T:Spotfire.Dxp.Framework.Threading.IJobSink`1"/>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkFactory.CreateLessPrioritizedDataSink``2(``0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{``0,``1},Spotfire.Dxp.Framework.Threading.ModelChangedHandler)">
            <summary>
            Creates the data sink.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="documentNode">The document node.</param>
            <param name="trigger">The trigger.</param>
            <param name="outputComputer">The output computer.</param>
            <param name="modelChangedHandler">The model changed handler.</param>
            <returns>
            A <see cref="T:Spotfire.Dxp.Framework.Threading.IJobSink`1"/>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkFactory.CreateViewSink``3(``0,Spotfire.Dxp.Framework.DocumentModel.Trigger,System.Func{``0,``1,``2},Spotfire.Dxp.Framework.Threading.ModelChangedHandler,System.Boolean)">
            <summary>
            Creates the view sink.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="documentNode">The document node.</param>
            <param name="trigger">The trigger.</param>
            <param name="outputComputer">The output computer.</param>
            <param name="modelChangedHandler">The model changed handler.</param>
            <param name="autoCancel"><c>true</c> if worker model changes should automatically cancel added work items; otherwise, <c>false</c>.</param>
            <returns>A <see cref="T:Spotfire.Dxp.Framework.Threading.IJobSink`2"/>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor">
            <summary>
            The thread group monitor class monitors a thread pool.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.FailureListenerNotRegistered">
            <summary>
            Helper string when inconsistcency is discovered.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.jobsPostedHandles">
            <summary>
            Which listneners that listen to jobs posted handle.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.lockObject">
            <summary>
            The lock object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.threadStatus">
            <summary>
            The thread status of each thread in this thread group.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.workingHandles">
            <summary>
            Which threads that are in working state.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.idleWaitHandle">
            <summary>
            The idle wait handle.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.lastIdleTicks">
            <summary>
            The lsast idle ticks.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.runningThreadsCount">
            <summary>
            The running threads count. // Should TODO Threading 4_1 [mwallers, 2012-02-01]: Remove.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.wareHouse">
            <summary>
            The work item warehouse.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.monitorId">
            <summary>
            An identifier for the monitor
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.IdleHandle">
            <summary>
            Gets the idle handle.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.LastIdleTicks">
            <summary>
            Gets the last idle ticks.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.MonitorId">
            <summary>
            Gets or sets the identifier for this instance
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.RegisterListener(System.Int32,System.Threading.EventWaitHandle,System.Threading.EventWaitHandle)">
            <summary>
            Registers the listener.
            </summary>
            <param name="listenerId">The listener id.</param>
            <param name="jobsPostedHandle">The jobs posted handle.</param>
            <param name="workingHandle">The working handle.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.ThreadGoIdle(System.Int32)">
            <summary>
            Informs that the thread is about to go idle (wait).
            </summary>
            <param name="threadId">The thread id.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.ThreadStartWork(System.Int32)">
            <summary>
            Informs that the thread is about to go start work (signal obtained from wait).
            </summary>
            <param name="threadId">The thread id.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.WorkItemAdded">
            <summary>
            Signal that work items has been added.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.RegisterThread(System.Int32,Spotfire.Dxp.Framework.Threading.WorkItemWarehouse)">
            <summary>
            Called by a worker thread during its initialization
            </summary>
            <param name="threadId">A unique id for the thread</param>
            <param name="workItemWarehouse">The work item warehouse</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.ResetWorkingEvent(System.Int32)">
            <summary>
            Resets the "Working" EventWaitHandle so that a thread that
            synchronizes with me can wait for the next thread that becomes running
            </summary>
            <param name="listenerId">The listener id.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.UnRegisterListener(System.Int32)">
            <summary>
            Uns the register listener.
            </summary>
            <param name="listenerId">The listener id.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.UnRegisterThread(System.Int32)">
            <summary>
            Called by a worker thread just befor the thread dies.
            </summary>
            <param name="threadId">A unique id for the thread</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.DecreaseRunningThreadCount">
            <summary>
            Decreases the current number of running threads by one.
            If the count after this is zero, "Idle" will be set.
            NOTE: This method must be called within a lock-statement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor.IncreaseRunningThreadCount">
            <summary>
            Increases the current number of running threads by one.
            If the count before this is zero, "Idle" will be reset.
            "Working" will always be set.
            NOTE: This method must be called within a lock-statement.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.CacheableObject">
            <summary>A class that carries a cachable object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.CacheableObject.wrappedObject">
            <summary>
            The wrapped object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.CacheableObject.totalSizeInBytes">
            <summary>
            The total size in bytes.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.CacheableObject.PrivateConstant">
            <summary>
            The "constant" object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheableObject.Create(System.Object,System.Int32)">
            <summary>
            Factory method for creating a cacheable object.
            </summary>
            <param name="objectToWrap">The object to wrap as a cacheable object.</param>
            <param name="sizeInBytes">The size in bytes.</param>
            <returns>A cachable object.</returns>
            <remarks>The caller must guarantee that the object is immutable.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.CacheableObject.Constant">
            <summary>
            The constsnt key.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheableObject.Combine(Spotfire.Dxp.Framework.Threading.CacheableObject,Spotfire.Dxp.Framework.Threading.CacheableObject)">
            <summary>
            Combines two cacheable objects.
            </summary>
            <param name="key1">The first cacheable object.</param>
            <param name="key2">The second cacheable object.</param>
            <returns>A cache key</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheableObject.AsCachableObject(System.Object)">
            <summary>
            Helper function for converting an object to a cacheable object.
            </summary>
            <param name="obj">The object to convert.</param>
            <returns>A <see cref="T:Spotfire.Dxp.Framework.Threading.CacheableObject"/> object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheableObject.#ctor(System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.CacheableObject"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheableObject.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheableObject.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.CacheableObject.WrappedObject">
            <summary>
            [mwallers, 2009-04-16]: only friend-visible for virtual value request.
            </summary>
            <value>The wrapped object.</value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.CacheableObjectWrapper">
            <summary>
            This wrapper was introduced in 3.0 to fix bug #54404,
            Parts of workerFactory API sometimes disables web browser caching, leading to unacceptable performance.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.CacheHandle">
            <summary>
            All communication to a threading framework cache is made through a cache handle.
            A cachehandle can be obtained by 
            for example 
            AnalysisServices.GetService&lt;CacheProviderOnGlobalLevel&gt;.
            GetCacheHandle()
            Enhancement TS4.0 [cstedt, 2011-04-14]: Rename class to ThreadingCacheHandle (or something else...).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.CacheHandle.valueCache">
            <summary>
            The cache where valid results are stored.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.CacheHandle.errorCache">
            <summary>
            The cache where transient errors are stored.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheHandle.#ctor(Spotfire.Dxp.Framework.Threading.ReferenceCountedCache,Spotfire.Dxp.Framework.Threading.ReferenceCountedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.CacheHandle"/> class.
            </summary>
            <param name="valueCache">The reference counted cache.
              May be <c>null</c> if no caching should be used.</param>
            <param name="errorCache">The error cache.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheHandle.TryPopulateResult(Spotfire.Dxp.Framework.Threading.WorkItem)">
            <summary>
            Tries the populate the given workitem with a result from the cache.
            </summary>
            <param name="workItem">The work item to populate with a result.</param>
            <returns><c>True</c> if a value was found in the cache, and the workitem has been populated with that value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheHandle.Set(Spotfire.Dxp.Framework.Threading.CacheableObject,Spotfire.Dxp.Framework.Threading.CacheableObject)">
            <summary>
            Enters the given key-value pair into the cache.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="value">The value to match to the key.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheHandle.SetError(Spotfire.Dxp.Framework.Threading.CacheableObject,Spotfire.Dxp.Framework.Threading.CacheableObject,System.TimeSpan)">
            <summary>
            Enters the given key-value pair into the cache. The value is considered an error, and must have a maximum age.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="errorResult">The error value to match to the key.</param>
            <param name="maxAge">The maximum age of the error. When this time has passed the value is no longer valid, and will not be returned from the cache.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.CachingBehavior">
            <summary>
            The caching behavior for <see cref="P:Spotfire.Dxp.Framework.Threading.WorkItem.ImmutableResult"/> given
            the <see cref="T:Spotfire.Dxp.Framework.Threading.WorkerFactory"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.CachingBehavior.None">
            <summary>
            Specifies that no caching should take place.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.CachingBehavior.Global">
            <summary>
            Specifies that one global cache should be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.CachingBehavior.User">
            <summary>
            Specifies that one cache per user should be used.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.IJobSink`1">
            <summary>
            The job sink interface that <see cref="T:Spotfire.Dxp.Framework.Threading.JobSink`2"/> exposes.
            </summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.IJobSink`1.Enqueue(Spotfire.Dxp.Framework.Threading.ResultHandler{`0})">
            <summary>
            Enqueues the specified input.
            </summary>
            <param name="resultHandler">The output receiver.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.IJobSink`1.CancelAll">
            <summary>
            Cancels all.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.IJobSink`2">
            <summary>
            The job sink interface.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.IJobSink`2.Enqueue(`0,Spotfire.Dxp.Framework.Threading.ResultHandler{`1})">
            <summary>
            Enqueues the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="resultHandler">The output receiver.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.IJobSink`2.CancelAll">
            <summary>
            Cancels all.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSink`2">
            <summary>
            The job sink.
            </summary>
            <typeparam name="TModel">The type of the model document node.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSink`2.jobSink">
            <summary>
            The job sink, configured to have at most 1 concurrent element..
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSink`2.#ctor(Spotfire.Dxp.Framework.Threading.JobSink{`0,Spotfire.Dxp.Framework.Threading.NoInput,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.JobSink`2"/> class.
            </summary>
            <param name="jobSink">The job sink.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSink`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSink`2.Enqueue(Spotfire.Dxp.Framework.Threading.ResultHandler{`1})">
            <summary>
            Enqueues for computing.
            </summary>
            <param name="resultHandler">The output receiver.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSink`2.CancelAll">
            <summary>
            Cancels all.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSink`3">
            <summary>
            The job sink.
            </summary>
            <typeparam name="TModel">The type of the model document node.</typeparam>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSink`3.jobSinkInternal">
            <summary>
            The job sink, configured to have at most 1 concurrent element..
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSink`3.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.Threading.ResultComputer{`0,`1,`2},Spotfire.Dxp.Framework.Threading.ModelChangedHandler,Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.JobSink`3"/> class.
            </summary>
            <param name="documentNode">The document node.</param>
            <param name="trigger">The trigger.</param>
            <param name="resultComputer">The output computer.</param>
            <param name="modelChangedHandler">The model changed handler.</param>
            <param name="threadPoolIdentifier">The <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier"/>. <seealso cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers"/>.</param>
            <param name="autoCancel"><c>true</c> if worker model changes should automatically cancel added work items; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSink`3.Enqueue(`1,Spotfire.Dxp.Framework.Threading.ResultHandler{`2})">
            <summary>
            Enqueues the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="resultHandler">The output receiver.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSink`3.CancelAll">
            <summary>
            Cancels all.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSink`3.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3">
            <summary>
            The job sink implementation.
            </summary>
            <typeparam name="TModel">The type of the model document node.</typeparam>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.addFirst">
            <summary>
            Flag for whether to add first or add last.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.lockObject">
            <summary>
            Thread protection of <see cref="F:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.isDisposed"/> flag.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.resultComputer">
            <summary>
            The output computer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.workDispatcher">
            <summary>
            The <see cref="T:Spotfire.Dxp.Framework.Threading.WorkDispatcher"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.isDisposed">
            <summary>
            Flag for whether the sink has been disposed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.#ctor(`0,Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.Threading.ResultComputer{`0,`1,`2},Spotfire.Dxp.Framework.Threading.ModelChangedHandler,System.Int32,System.Boolean,Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier,Spotfire.Dxp.Framework.Threading.WorkManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3"/> class.
            </summary>
            <param name="documentNode">The document node.</param>
            <param name="trigger">The trigger.</param>
            <param name="resultComputer">The output computer.</param>
            <param name="modelChangedHandler">The model changed handler.</param>
            <param name="initialMaxLength">Initial length of the max.</param>
            <param name="addFirst">if set to <c>true</c> [add first].</param>
            <param name="threadPoolIdentifier">The <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier"/>. <seealso cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers"/>.</param>
            <param name="workManager">The work manager.</param>
            <param name="autoCancel"><c>true</c> if worker model changes should automatically cancel added work items; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.MaxLength">
            <summary>
            Gets or sets the length of the max.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.CreateJobSinkInternal(`0,Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.Threading.ResultComputer{`0,`1,`2},Spotfire.Dxp.Framework.Threading.ModelChangedHandler,System.Int32,System.Boolean,Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier,System.Boolean)">
            <summary>
            Factory method for <see cref="T:Spotfire.Dxp.Framework.Threading.IJobSink`2"/>.
            </summary>
            <param name="documentNode">The document node.</param>
            <param name="trigger">The trigger.</param>
            <param name="resultComputer">The result computer.</param>
            <param name="modelChangedHandler">The model changed handler.</param>
            <param name="initialMaxLength">Initial length of the max.</param>
            <param name="addFirst">if set to <c>true</c> [add first].</param>
            <param name="threadPoolIdentifier">The thread pool identifier.</param>
            <param name="autoCancel"><c>true</c> if worker model changes should automatically cancel added work items; otherwise, <c>false</c>.</param>
            <returns>A job sink.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.CreateJobSinkInternal(System.Func{`2},System.IServiceProvider,Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier)">
            <summary>
            Factory method for <see cref="T:Spotfire.Dxp.Framework.Threading.IJobSink`2"/>.
            </summary>
            <param name="resultComputer">The result computer.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="threadPoolIdentifier">The thread pool identifier.</param>
            <returns>An <see cref="T:Spotfire.Dxp.Framework.Threading.IJobSink`2"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.CancelAll">
            <summary>
            Cancels all.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3.Enqueue(`1,Spotfire.Dxp.Framework.Threading.ResultHandler{`2})">
            <summary>
            Enqueues the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="resultHandler">The output receiver.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper">
            <summary>
            Helper class that tries to "hide" the typeless classes (that cannot be hidden in template-based <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkInternal`3"/>.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessComputer">
            <summary>
            The typeless computer.
            </summary>
            <param name="documentNode">The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.</param>
            <param name="obj">The input.</param>
            <returns>The output.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.GetGroupId(Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier)">
            <summary>
            Gets the group id. Only friend-visible for performance measurements.
            </summary>
            <param name="threadPoolIdentifier">The thread pool identifier.</param>
            <returns>The shared group id per thread pool identifier.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory">
            <summary>
            The <see cref="T:Spotfire.Dxp.Framework.Threading.WorkerFactory"/> implmentation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory.trigger">
            <summary>
            The trigger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory.threadPoolIdentifier">
            <summary>
            The thread pool identifier.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory.#ctor(Spotfire.Dxp.Framework.DocumentModel.Trigger,Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory"/> class.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="threadPoolIdentifier">The threadPoolIdentifier.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory.GetGroupIdCore">
            <summary>
            Gets the group id, used for identifying <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadGroup"/>.
            </summary>
            <returns>The group id.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory.GetPriorityCore">
            <summary>
            Gets the thread priority for the threading model.
            </summary>
            <returns>The lowest <see cref="T:System.Threading.ThreadPriority"/> in this override.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory.GetWorkerModelTriggerCore(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <summary>
            Gets the worker model trigger core.
            </summary>
            <param name="workerModel">The worker model.</param>
            <returns>The <see cref="T:Spotfire.Dxp.Framework.DocumentModel.Trigger"/></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory.CreateCore">
            <summary>
            Creates the <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker"/>.
            </summary>
            <returns>The <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory.GetThreadingModelCore">
            <summary>
            Overridden to specify thread group model.
            </summary>
            <returns>A <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadingModel"/>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker">
            <summary>
            The worker implementation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker.threadPoolIdentifier">
            <summary>
            The thread pool identifier.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker.#ctor(Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker"/> class.
            </summary>
            <param name="threadPoolIdentifier">The thread pool identifier.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker.Dispose(System.Boolean)">
            <summary>
            Override this method to clean up resources.
            </summary>
            <param name="disposing"><c>false</c> if called during garbage collection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker.DoWorkCore(Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem)">
            <summary>
            Overridden to call the (hidden) <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessComputer"/>.
            </summary>
            <param name="model">The model.</param>
            <param name="workItem">The work item.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem">
            <summary>
            The <see cref="T:Spotfire.Dxp.Framework.Threading.WorkItem"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.input">
            <summary>
            The input.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.typelessComputer">
            <summary>
            The <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessComputer"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.lockObject">
            <summary>
            Lock object to protect output.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.progress">
            <summary>
            The progress object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.output">
            <summary>
            The output.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.hasOutput">
            <summary>
            Flag that is set thread-safe when the output is set.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.#ctor(System.Object,Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessComputer)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="typelessComputer">The typeless computer.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.Output">
            <summary>
            Gets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.Input">
            <summary>
            Gets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.Computer">
            <summary>
            Gets the computer.
            </summary>
            <value>The computer.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.HasOutput">
            <summary>
            Gets a value indicating whether this instance has output.
            </summary>
            <value>
            <c>true</c> if this instance has output; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.Progress">
            <summary>
            Gets the progress.
            </summary>
            <value>
            The progress.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.SetOutput(System.Object)">
            <summary>
            Sets the output.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem.Dispose(System.Boolean)">
            <summary>
            Override this method to release unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItemProgress">
            <summary>
            The job work item progress class.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItemProgress.startTime">
            <summary>
            The start time.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItemProgress.jobCanceledCallbackTicket">
            <summary>
            A callback ticket. Disposed when this object is disposed to cancel that callback that we subscribe to.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItemProgress.delayTimer">
            <summary>
            The current timer for delaying cancellation.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItemProgress.#ctor(Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItemProgress"/> class.
            // Could TODO Threading 4_1 [mwallers, 2012-01-04]: Job work item title and description.
            </summary>
            <param name="jobWorkItem">The job work item.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItemProgress.Dispose">
            <summary>
            Dispose the delay timer and unsubscribe from the cancelation callback.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItemProgress.OnJobCanceled">
            <summary>
            Callback that is invoked when the WorkItem is canceled.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ModelChangedHandler">
            <summary>
            The model changed handler. Very similar to <see cref="T:Spotfire.Dxp.Framework.DocumentModel.NotUpToDateCallback"></see>
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.NoInput">
            <summary>
            The no input class. Should be refactored out.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ReentrantWorkerHandle">
            <summary>A handle to a reentrant worker. As long as the handle is not disposed,
            the reentrant worker is alive. When the handle is disposed, other
            may hold similar handles and the reentrant worker may still be alive.
            The disposal of the underlying reentrant worker is implemented by reference counting.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ReentrantWorkerHandle.CreateReentrantWorkerHandle(Spotfire.Dxp.Framework.Threading.WorkerFactory)">
            <summary>
            Creates a handle to a reentrant worker handle.
            As long as the handle is not disposed, the reentrant worker is guaranteed.
            </summary>
            <param name="workerFactory">The worker factory.</param>
            <returns>A handle to a reentrant worker.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if not called from an MTA thread.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ReentrantWorkerHandle.#ctor(Spotfire.Dxp.Framework.Threading.Worker,System.String)">
            <summary>Only allowed to be constructed within a lock.
            The constructor will increment a reference count.
            </summary>
            <param name="reentrantWorker">The reentrant worker.</param>
            <param name="key">The key.</param>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ReferenceCountedCache.DefaultTransientErrorsMinTimeout">
            <summary>
            This constant is instantly doubled to 1000 milliseconds before used first time.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.CacheProvider">
            <summary>
            Serves as a base class registering cache providers at the suitable
            <see cref="T:Spotfire.Dxp.Framework.Threading.CachingBehavior"/>. <seealso cref="T:Spotfire.Dxp.Framework.Threading.CacheProviderOnGlobalLevel"/>,
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.CacheProviderOnUserLevel"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheProvider.CreateCacheHandle``1(Spotfire.Dxp.Framework.Threading.WorkerFactory)">
            <summary>
            Returns a disposable <see cref="T:Spotfire.Dxp.Framework.Threading.CacheHandle"/> where the reference count has been
            increased by one.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="workerFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheProvider.GetCache``1(System.Object,System.Collections.Generic.Dictionary{Spotfire.Dxp.Internal.Utilities.Collections.Pair{System.String,System.Type},Spotfire.Dxp.Framework.Threading.ReferenceCountedCache},Spotfire.Dxp.Framework.Threading.CacheProvider.KeyForSharingCache{``0},System.Boolean)">
            <summary>
            Gets a cache for the given key. If no existing cache is found, then a new cache is created.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="lockObject">The lock object for the dictionary containing existing caches.</param>
            <param name="referenceCountedCaches">The reference counted caches that currently exist.</param>
            <param name="key">The key to get a cache for.</param>
            <param name="updateItemTimestampOnAccess">if set to <c>true</c> the time stamp of items in the cache will be updated when they are accessed.</param>
            <returns>A cache to use for the given key.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.CacheProvider.CreateFrameworkDataCache(System.Boolean)">
            <summary>Provides a mechanism to access DataCache implementation in the Data namespace.
            </summary>
            <param name="updateItemTimestampOnAccess">Indicates if item timestamps be updated when accessing.</param>
            <returns>A DataCache.</returns>
            <remarks>The public DataCache class resides in the wrong namespace and should be refactored.</remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.CacheProvider.KeyForSharingCache`1">
            <summary>
            This type represents the condition for sharing  a cache reference
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.IDataCacheWrapperForThreadingFramework">
            <summary>Provides a mechanism to access DataCache implementation in the Data namespace.
            </summary>
            <remarks>The public DataCache class resides in the wrong namespace and should be refactored.</remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ResultComputer`3">
            <summary>
            The output computer, given a snapshot of a <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/> and immutable input.
            </summary>
            <typeparam name="TModel">The type of the model document node.</typeparam>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="documentNode">The document node.</param>
            <param name="input">The input.</param>
            <returns>The output.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ResultContainer">
            <summary>
            The result container.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ResultContainer.FinalizerLoggingEnabled">
            <summary>
            Finalizer logging is enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ResultContainer.callstack">
            <summary>
            The callstack
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ResultContainer.lockObject">
            <summary>
            Enabling thread-safety for <see cref="M:Spotfire.Dxp.Framework.Threading.ResultContainer.Dispose"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ResultContainer.jobWorkItem">
            <summary>
            The <see cref="T:Spotfire.Dxp.Framework.Threading.WorkItem"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ResultContainer.disposed">
            <summary>
            Whether the container has been disposed yet.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.ResultContainer.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer.#ctor(Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.ResultContainer"/> class.
            </summary>
            <param name="jobJobWorkItem">The job work item.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.ResultContainer"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.ResultContainer"/> class. 
            Should never be called or else a snapshot is leaked.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ResultContainer.HasResult">
            <summary>
            Gets a value indicating whether this instance has result.
            </summary>
            <value>
            <c>true</c> if this instance has result; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ResultContainer.IsCanceled">
            <summary>
            Gets a value indicating whether this instance is canceled.
            </summary>
            <value>
            <c>true</c> if this instance is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ResultContainer.SnapShot">
            <summary>
            Gets the snap shot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ResultContainer.JobWorkItem">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.JobWorkItem"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer.InvokeAsynchronouslyOnApplicationThread(Spotfire.Dxp.Internal.Disposables,System.Action)">
            <summary>
            Executes the specified action asynchronously on the application thread.
            The result container (this) will added to the list of disposables, if the list is disposed
            the action will not be executed. The caller is responsible for disposing the result container (this).
            </summary>
            <param name="disposables">The disposables.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer.ReadNode(System.Action{Spotfire.Dxp.Framework.DocumentModel.DocumentNode})">
            <summary>
            Executes an action on the read-only node that the result was computed from,
            <see cref="T:Spotfire.Dxp.Framework.Threading.ResultComputer`3"/>.
            </summary>
            <param name="action">The action to perform on the <see cref="T:Spotfire.Dxp.Framework.DocumentModel.DocumentNode"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ResultContainer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ResultHandler">
            <summary>
            Receiver for the <see cref="T:Spotfire.Dxp.Framework.Threading.ResultContainer"/>. Enables passing the container around threads and examine validity.
            </summary>
            <param name="resultContainer">The output container.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ResultHandler`1">
            <summary>
            Receiver for the <see cref="T:Spotfire.Dxp.Framework.Threading.ResultContainer`1"/>. Enables passing the container around threads and examine validity.
            </summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="resultContainer">The output container.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.SafeMonitor">
            <summary>This class encapsulates the complexity around handling Monitor.Enter / Monitor.Wait
            when called on the UI-thread on Vista; the thread can be hi-jacked and 
            messages will be pumped (including WM_PAINT) which potentially can cause 
            deadlocks.
            This class keeps track of the UI thread and handles calls to Enter and Wait
            in a safe way.
            </summary>
            <remarks>
            On Vista, the UI thread can be hijacked and used to pump Paint messages when 
            it calls Monitor.Wait(), Monitor.Enter() and several other operations that one 
            expects would suspend the calling thread (e.g. Thread.Join etc). 
            Vista will hijack the thread if the wait is too long in order to keep the UI resposive.
            <para>
            Hijacking of the UI thread must be avoided since it can cause the deadlocks in the 
            runtime property framework. The deadlock scenario is as follows:
            <list type="number">
            <item>
            <description>
            Events from the document are raised on the UI thread to a control C. 
            </description>
            </item>
            <item>
            <description>
            The handler that is invoked reads a runtime property A in the model. Since A is not yet 
            computed, it is marked as being under computation and the UI thread continues to compute 
            A.
            </description>
            </item>
            <item>
            <description>
            The computer for A reads another runtime property, say FilteredRows, that is being computed by 
            a worker thread. The UI thread must then wait for the worker thread to complete its computation
            and calls Monitor.Wait().
            </description>
            </item>
            <item>
            <description>
            Vista hijacks the UI thread and dispatches a Paint message to the same control, C. 
            </description>
            </item>
            <item>
            <description>
            The handler for the paint message read the runtime property A. Since this runtime property is marked 
            as being under computation, the UI thread must wait for computation of A to finish. 
            </description>
            </item>
            <item>
            <description>
            We now have a deadlock situation since the UI thread is waiting for itself -- a situation that would never 
            occur in any sensible threading model.
            </description>
            </item>
            <item>
            <description>
            The technical reason appears to be a change in CoWaitForMultipleHandles, which under Vista now dispatches WM_PAINT.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.SafeMonitor.MaxSleepTime">
            <summary>
            The maximum amounts of milliseconds to sleep in the ui thread.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.SafeMonitor.WaitUntilFalseComputer">
            <summary>Used for determining the condition for waiting on a Monitor.
            Shall return <c>false</c> when the condition is satisfied and the calling thread should stop waiting.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.SafeMonitor.Lock(System.Object)">
            <summary>Creates a lock that will work on the UI-thread as well as on background threads.
            It must be called within a using-statement to assure that the Monitor is exited.
            </summary>
            <param name="lockObject">The object that shall be used to lock on</param>
            <returns>A disposable object which releases the lock when disposed.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.SafeMonitor.Wait(System.Object,Spotfire.Dxp.Framework.Threading.SafeMonitor.WaitUntilFalseComputer)">
            <summary>Blocks until the waitDelegate returns false.
            </summary>
            <param name="lockObject">The object on which to wait.</param>
            <param name="waitUntilFalseComputer">A delegate specifying when waiting should stop.
            Shall return <c>false</c> when the condition is satisfied and the calling thread should stop waiting.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.SafeMonitor.PulseAll(System.Object)">
            <summary>
            Pulses all threads waiting on the lock.
            </summary>
            <param name="lockObject">The lock object.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.SafeMonitor.LockContext">
            <summary>This class calls IMonitor.Enter from the constructor
            and Monitor.Exit from the Dispose method.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.SafeMonitor.LockContext.lockObject">
            <summary>
            The lock object.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.SafeMonitor.LockContext.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the LockContext class.
            </summary>
            <param name="lockObject">The lock object.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.SafeMonitor.LockContext.Dispose">
            <summary>
            Disposes the object and release the lock.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroup.DecrementReferenceCount">
            <summary>Must be called within WorkManager.lockHandle.
            Decrements the reference count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadGroup.IncrementReferenceCount">
            <summary>Must be called within WorkManager.lockHandle.
            Increments the reference count.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier">
            <summary>
            Base class for thrad pool identifiers.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is regarded as equal to this instance, using the type's fullname.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier.GetHashCode">
            <summary>
            Returns a hash code for this instance, using the type's fullname.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier.GetFullName">
            <summary>
            Gets the full name.
            </summary>
            <returns>The full name.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier.DestroyWorker">
            <summary>
            Destroys the worker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier.DestroyWorkerCore">
            <summary>
            The "core" method for destroying the worker.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier.InitWorker(Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker)">
            <summary>
            Inits the worker.
            </summary>
            <param name="typelessWorker">The <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker"/>.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier.InitWorkerCore(Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker)">
            <summary>
            The "core" method for initing the worker.
            </summary>
            <param name="typelessWorker">The <see cref="T:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorker"/>.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers">
            <summary>
            Represents the identity of a thread pool, <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadGroup"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers.LowPriority">
            <summary>
            Gets the low priority <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier"/>.
            </summary>
            <value>The low priority <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier"/>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers.RenderingThread">
            <summary>
            Gets the rendering thread <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier"/> when using hardware acceleration.
            </summary>
            <value>The rendering thread <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier"/>.</value>
            <remarks>This maps to one dedicated threading model, <seealso cref="M:Spotfire.Dxp.Framework.Threading.JobSinkHelper.TypelessWorkerFactory.GetThreadingModelCore"/>.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers.DataThreads">
            <summary>
            Gets the data evaluation <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier"/> thread where rendering is not used.
            </summary>
            <value>The data evaluation threads <see cref="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifier"/>.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers.RenderingThreadEquivalent">
            <summary>
            Rendering thread equivalent.
            </summary>
            <returns>A rendering thread identifier.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers.DataThreadsIdentifier">
            <summary>
            The rendering thread pool identifier to use when no hardware acceleration is used.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers.LowPriorityThreadPoolIdentifier">
            <summary>
            The low priority thread pool identifier.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ThreadPoolIdentifiers.RenderingThreadIdentifier">
            <summary>
            The rendering thread pool identifier.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ThreadingModel">
            <summary>
            Specifies the threading model 
            for a <see>Worker</see>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadingModel.CreateReentrantThreadingModel">
            <summary>
            Specifies that the <see cref="T:Spotfire.Dxp.Framework.Threading.Worker"/> is reentrant.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadingModel.CreateDedicatedThreadingModel(System.Int32)">
            <summary>
            Specifies that each worker instance should be initialized, run and disposed 
            on a dedicated thread.
            </summary>
            <param name="maxNumberOfThreads">The maximal number of dedicated threads</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.ThreadingModel.CreateBackwardCompatibility2_2ThreadingModel">
            <summary>
            Creates a backward compatibility threading model for 2.2 API.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.BackwardCompatibility2_2ThreadingModel">
            <summary>Backward compatibility for virtual values.
            </summary>
            <seealso>
                <cref>M:VirtualColumnProducer.CreateWorkerFactory</cref>
            </seealso>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkItemEventArgs`1">
            <summary>Event arguments used for events that signal that a work item is completed or canceled.
            </summary>
            <typeparam name="TItem">The type of the work item.</typeparam>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItemEventArgs`1.WorkItem">
            <summary>Gets the work item.
            </summary>
            <value>The work item.</value>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkItemQueue">
            <summary>WorkItemQueue class.
            // TODO ThreadingPool [mwallers, 2011-03-16]: Transactions on this class should increment/decrement thread pool refernence count,
            <see cref="M:Spotfire.Dxp.Framework.Threading.ThreadGroup.IncrementReferenceCount"/>, <see cref="M:Spotfire.Dxp.Framework.Threading.ThreadGroup.DecrementReferenceCount"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItemQueue.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItemQueue.threadGroupMonitorOrNull">
            <summary>
            The thread group monitor or null if not monitored.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItemQueue.#ctor(Spotfire.Dxp.Framework.Threading.WorkManager,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.WorkItemQueue"/> class.
            The reference counted instance must be bumped by caller when created.
            </summary>
            <param name="workManager"></param>
            <param name="groupId"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkerModelChangedHandler`1">
            <summary>Delegate for handling worker model changed events.
            </summary>
            <typeparam name="TItem">The type of the work item.</typeparam>
            <param name="workDispatcher">The work dispatcher that caused the event.</param>
            <param name="workerModel">The document node that changed.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkDispatcher">
            <summary>Base class for typed work dispatchers.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkDispatcher.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkDispatcher.disposeTracker">
            <summary>
            The dispose tracker.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkDispatcher.applicationThread">
            <summary>
            The application thread. Never null.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkDispatcher.documentView">
            <summary>
            The document view
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher.#ctor">
            <summary>Internal constructor prevents public subclassing.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkDispatcher.AutoCancel">
            <summary>Gets or sets a value indicating whether worker model changes should
            automatically cancel added work items.
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if worker model changes should automatically cancel added work items; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkDispatcher.AutoDisposeItems">
            <summary>Gets or sets a value indicating whether work items should be automatically disposed.
            The default value is <c>true</c>. Manipulating this flag should be avoided whenever possible.
            Instead use work item handlers to make sure that work items are not disposed too early.
            </summary>
            <value><c>true</c> if work items should be automatically disposed; otherwise, <c>false</c>.</value>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkItemHandler`1"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkDispatcher.MaxQueueSize">
            <summary>Gets or sets the maximum allowed number of items waiting to be dispatched.
            Before new items are added, items at the back of the queue will be canceled to make room.
            </summary>
            <value>The maximum queue size.</value>
            <remarks>You must set this to an appropriate positive value for your application.
            If the value is <c>0</c> (the default), all attempts to add items will throw an exception.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher.Dispose">
            <summary>Cancels all work items and frees up resources.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkDispatcher.IsDisposed">
            <summary>Gets a value indicating whether this instance has been disposed.
            </summary>
            <value>
            	<c>true</c> if this instance has been disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher.CancelAll">
            <summary>Cancel all work items.
            </summary>
            <remarks>Note that the work items may still be processed by the worker.
            </remarks>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1">
            <summary>Allows work items to be queued and sent to a worker for processing.
            A work dispatcher is created by the work manager service.
            </summary>
            <typeparam name="TItem">WorkItem type.</typeparam>
            <remarks>Before adding items, the <see cref="P:Spotfire.Dxp.Framework.Threading.WorkDispatcher.MaxQueueSize"/> must be set to an appropriate value.
            </remarks>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkManager"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkItem"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.Worker"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.#ctor(Spotfire.Dxp.Framework.Threading.WorkManager,Spotfire.Dxp.Framework.Threading.WorkerFactory,Spotfire.Dxp.Framework.Threading.WorkItemWarehouse,Spotfire.Dxp.Framework.DocumentModel.DocumentNodeHandle,Spotfire.Dxp.Framework.DocumentModel.Trigger)">
            <summary>Internal constructor prevents public subclassing.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.AddWorkerModelChangedHandler(Spotfire.Dxp.Framework.Threading.WorkerModelChangedHandler{`0})">
            <summary>Adds a handler for the worker model changed event.
            If <see cref="P:Spotfire.Dxp.Framework.Threading.WorkDispatcher.AutoCancel"/> is <c>true</c>, all currently
            dispatched work items are canceled before this event is raised.
            The callee would typically invalidate any stored work results,
            and dispatch new work items when needed.
            The event can be raised on any thread.
            </summary>
            <param name="handler">The handler.</param>
            <remarks>The event is raised on the application thread.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.RemoveWorkerModelChangedHandler(Spotfire.Dxp.Framework.Threading.WorkerModelChangedHandler{`0})">
            <summary>Removes a handler for the worker model changed event.
            </summary>
            <param name="handler">The handler.</param>
            <remarks>If the handler has not been added, the method does nothing.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.AddFirst(`0)">
            <summary>Adds the item to the front of the queue.
            </summary>
            <param name="workItem">The work item.</param>
            <remarks>
            If the item was already in the queue, it will simply move to the front.
            If the item has already been dispatched, this call does nothing.
            The item should have at least one work item handler.
            This method cannot be called during a transaction.
            </remarks>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.PushResultHandler``1(Spotfire.Dxp.Framework.Threading.WorkItemHandler{``0})"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkItemHandler`1"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.AddFirst(`0,Spotfire.Dxp.Framework.DocumentModel.DocumentView)">
            <summary>
            Adds the item to the front of the queue. The item will be executed in the specified document view.
            </summary>
            <param name="workItem">The work item.</param>
            <param name="documentViewForItem">The document view for item.</param>
            <remarks>
            If the item was already in the queue, it will simply move to the front.
            If the item has already been dispatched, this call does nothing.
            The item should have at least one work item handler.
            This method cannot be called during a transaction.
            </remarks>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.PushResultHandler``1(Spotfire.Dxp.Framework.Threading.WorkItemHandler{``0})" />
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkItemHandler`1" />
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.AddLast(`0)">
            <summary>Adds the item to the back of the queue.
            </summary>
            <param name="workItem">The work item.</param>
            <remarks>
            If the item was already in the queue, it will simply move to the back.
            If the item has already been dispatched, this call does nothing.
            The item should have at least one work item handler.
            This method cannot be called during a transaction.
            </remarks>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.PushResultHandler``1(Spotfire.Dxp.Framework.Threading.WorkItemHandler{``0})"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkItemHandler`1"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.ExecuteSynchronously(`0,Spotfire.Dxp.Framework.Threading.WorkItemHandler{`0})">
            <summary>Executes the item synchronously. 
            This method is suitable when forced to execute 
            items one by one and access the result synchronously.
            </summary>
            <param name="workItem">The work item.</param>
            <param name="resultHandler">The result handler.</param>
            <remarks>
            <list type="bullet">
            <item>
            Access to the processed <paramref name="workItem"/> shall be made in
            the <paramref name="resultHandler"/>. The handler may be run on any thread. 
            Since it is a work item handler, the work item can be
            passed to the application thread 
            asynchronously as long as <see>
                                          <cref>M:WorkItem.ReturnItem</cref>
                                      </see>
                is not called.
            After that, the work item may have been disposed.
            </item>
            <item>
            Different from <see cref="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.AddFirst(`0)"/> and <see cref="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.AddLast(`0)"/>, instance equal work
            items cannot be added twice.
            </item>
            </list>
            This method cannot be called during a transaction.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the 
            item already has been added to a dispatcher, including this dispatcher.
            </exception>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkItemHandler`1"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.SetItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the items to be dispatched. The first item will be dispatched first.
            </summary>
            <param name="workItems">The work items.</param>
            <remarks>Items that were in the queue, but are not specified in this call are canceled,
            and items that are specified but have already been dispatched are ignored.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.IsNew(Spotfire.Dxp.Framework.Threading.WorkDispatcher{`0}.InitItemState)">
            <summary>
            Determines whether the specified init item state is new.
            </summary>
            <param name="initItemState">State of the init item.</param>
            <returns>
            	<c>true</c> if the specified init item state is new; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.GetItems">
            <summary>Gets the work items that are currently waiting to be dispatched.
            </summary>
            <returns>An array of work items.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.Cancel(`0)">
            <summary>Cancel the work item.
            </summary>
            <param name="workItem">The work item to cancel.</param>
            <remarks>Note that the work item may still be processed by the worker.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.Cancel(System.Collections.Generic.IEnumerable{`0})">
            <summary>Cancel the specified work items.
            </summary>
            <param name="workItems">The work items to cancel.</param>
            <remarks>Note that the work items may still be processed by the worker.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.UpdateQueue(System.Action{Spotfire.Dxp.Framework.Threading.WorkItemQueue},Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>Synchronizes access to the warehouse.
            </summary>
            <param name="queueAction">The action to perfom on the work item queue.</param>
            <param name="warehouseClosedExecutor">The executor to run if the warehouse has been disconnected from the warehouse.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.WaitAll">
            <summary>Waits until all items have been processed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.PruneQueue">
            <summary>Prunes the queue to <c>MaxQueueSize</c> and then cancels pruned items
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.EnsureItemInitialized(`0,System.Collections.Generic.List{Spotfire.Dxp.Framework.Threading.WorkItem})">
            <summary>
            Returns false if already initialized.
            </summary>
            <param name="workItem"></param>
            <param name="returnList">If the item is processed immediately, it is
            added to the list of items to return.</param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1.MakeRoom(Spotfire.Dxp.Framework.Threading.WorkItemQueue,System.Int32,System.Collections.Generic.List{Spotfire.Dxp.Framework.Threading.WorkItem})">
            <summary>
            Moves items from <paramref name="items"/> to <paramref name="returnList"/>
            All items moved are marked as canceled.
            Suppose the queue has a max of 10 items and currently holds 6 items. 
            Then the caller of this function wants
            to make room for 7 items. Then 3 items (last in the queue) will be removed from the queue
            and canceled. These items are provided in the returnList and should call ReturnItem.
            </summary>
            <param name="items"></param>
            <param name="count"></param>
            <param name="returnList"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.Worker">
            <summary>Base class for workers.
            A worker processes work items on a background thread.
            To create a custom worker, inherit from <c>CustomWorker</c>.
            </summary>
            <seealso>
                <cref>T:Spotfire.Dxp.Application.Extension.CustomWorker{TModel,TItem}</cref>
            </seealso>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkManager"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkItem"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.Worker.MaxBatchSize">
            <summary>Gets or sets the maximum batch size. 
            The default value is <c>1</c>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.Worker.Dispose(System.Boolean)">
            <summary>Override this method to clean up resources.
            </summary>
            <param name="disposing"><c>false</c> if called during garbage collection.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.Worker`2">
            <summary>Generic base class for workers.
            To create a custom worker, inherit from <c>CustomWorker</c> and implement either <c>DoWorkCore</c> or <c>DoBatchWorkCore</c>
            </summary>
            <typeparam name="TModel">WorkerModel type.</typeparam>   
            <typeparam name="TItem">WorkItem type.</typeparam>   
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.Worker`2.DoWorkCore(`0,`1)"/>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.Worker`2.DoBatchWorkCore(System.Collections.Generic.IList{`1})"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.Worker`2.#ctor">
            <summary>Creates a new instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.Worker`2.DoWorkCore(`0,`1)">
            <summary>Override this method to handle a single work item at a time.
            This method is called by <c>DoBatchWorkCore</c>.
            The default implementation does nothing.
            </summary>
            <param name="model">Worker model. Can be <c>null</c>.</param>
            <param name="workItem">Work item.</param>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.Worker`2.DoBatchWorkCore(System.Collections.Generic.IList{`1})"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.Worker`2.DoBatchWorkCore(System.Collections.Generic.IList{`1})">
            <summary>Override this method to handle a batch of work items at a time.
            You must call <see cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.ReturnItem"/> for each work item in the batch.
            The default implementation calls <see cref="M:Spotfire.Dxp.Framework.Threading.Worker`2.DoWorkCore(`0,`1)"/> followed by <see cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.ReturnItem"/> for each work item.
            </summary>
            <param name="workItems">List of work items. Always contains at least one item.</param>
            <remarks>
            To access the worker model, call <c>WorkItem.ReadModel</c> on any work item.
            The maximum number of work items received is determined by <see cref="P:Spotfire.Dxp.Framework.Threading.Worker.MaxBatchSize"/>.
            Override <see cref="M:Spotfire.Dxp.Framework.Threading.Worker`2.CreateBatchPredicateCore(`1)"/> to control which work items to include in the batch.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.Worker`2.CreateBatchPredicateCore(`1)">
            <summary>Override to customize how work items are selected for batch work.
            The default implementation returns <c>null</c>, which selects all work items.
            </summary>
            <param name="firstWorkItem">The first work item already included in the batch.</param>
            <returns>A predicate that shall return <c>true</c> for work items to be included in the batch.</returns>
            <remarks>The predicate is called at most <c>MaxBatchSize - 1</c> times, and only for work items that
            have the same model generation as <paramref name="firstWorkItem"/>.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.Worker`2.Cancel(`1)">
            <summary>Cancel the work item.
            </summary>
            <param name="workItem">The work item to cancel.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.Worker`2.GetService``1">
            <summary>
            Gets the service of the given type. This method provides access to
            services on the analysis application level and upwards.
            </summary>
            <typeparam name="TService">The type of the service to obtain.</typeparam>
            <returns>The service of type <typeparamref name="TService"/>
            or <c>null</c> if no such service is available.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkerFactory">
            <summary>Base class for all factory classes that create 
            <c>Worker</c> instances.
            To create a custom worker factory, inherit from <c>CustomWorkerFactory</c>.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.Worker"/>
            <seealso>
                <cref>T:Spotfire.Dxp.Application.Extension.CustomWorkerFactory{TWorker,TModel}</cref>
            </seealso>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerFactory.priority">
            <summary>
            The <see cref="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.Priority"/>.
            </summary>
            <remarks>
            [mwallers, 2011-03-25]: In 3.3 we allow lowering the default priority of background threads, similar to 
            the medium priority queue of worker thread manager. // TODO Threading 4_1 [mwallers, 2012-01-26]: Remove that
            reference when queue refactored out.
            Before we had "normal" priority so default is "normal".
            NOTE: In Web Player it is important to have thread priority normal to prevent starvation as the server get
            several calls.
            // TODO ThreadingPool [mwallers, 2011-03-25]: Dependent on thick client (BelowNormal, Lowest) or web (Normal)
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerFactory.priorityDefined">
            <summary>
            Whether the thread priority has been defined. Used in <see cref="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.Priority"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.WorkerModelType">
            <summary>Gets the type for the worker model (a DocumentNode) used by the worker.
            </summary>
            <value>The type for the worker model.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory.Create">
            <summary>Creates a new worker.
            </summary>
            <returns>A worker.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.DoWorkInCurrentView">
            <summary>
            Gets a value indicating whether the Worker.DoWorkCore should be called with the affecting view rather than the view for which the worker is created.
            </summary>
            <value>
            <c>true</c> if [do work in affecting view]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.ThreadingModel">
            <summary>
            Specifies the threading model of the <see cref="T:Spotfire.Dxp.Framework.Threading.Worker"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.CachingBehavior">
            <summary>
            Specifies the <see cref="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.CachingBehavior"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.Priority">
            <summary>
            Gets the thread priority. Called within the <see cref="F:Spotfire.Dxp.Framework.Threading.WorkManager.lockObject"/>.
            </summary>
            <value>The thread priority.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory.GetPriorityCore">
            <summary>
            Gets the thread priority for the threading model.
            </summary>
            <returns>A thread priority.</returns>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory.GetThreadingModelCore">
            <summary>
            Specifies the threading model of the <see cref="T:Spotfire.Dxp.Framework.Threading.Worker"/>.
            Override this method to specify a threading model.
            Default is dedicated thread.
            </summary>
            <seealso cref="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.ThreadingModel"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory.GetCachingBehaviorCore">
            <summary>
            Override this method to specify the caching behavior of results of
            a work item. Default is no caching.
            </summary>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.SetImmutableResult(System.Object)"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkerFactory.GroupId">
            <summary>
            Don't use from other assemblies. Only friend-visible for virtual columns and rendering.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory.ValidateAllowedKey(System.Object)">
            <summary>Only friend-visible since ValueRendererFactory may override
            GetModelKeyCore.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkerFactory`2">
            <summary>Template base class for all factory classes that create 
            <c>Worker</c> instances.
            </summary>
            <typeparam name="TWorker">The type of the worker.</typeparam>
            <typeparam name="TModel">The type of the worker model.</typeparam>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.Worker"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkerFactory`2.WorkerModelType">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory`2.Create">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory`2.GetWorkerModelTrigger(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory`2.GetWorkerModelHandle(Spotfire.Dxp.Framework.DocumentModel.DocumentNode)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory`2.CreateCore">
            <summary>Override this method to create the new Worker.
            </summary>
            <returns>A new worker.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory`2.GetWorkerModelTriggerCore(`1)">
            <summary>Override this method to provide a trigger that triggers 
            when the properties that the worker uses changes.
            The default implementation returns <see cref="F:Spotfire.Dxp.Framework.DocumentModel.Trigger.NeverTrigger"/>.
            </summary>
            <param name="workerModel">The worker model. Is never <c>null</c>.</param>
            <returns>A trigger.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory`2.GetItemKeyCore(Spotfire.Dxp.Framework.Threading.WorkItem)">
            <summary>Override this method to provide your item key.
            Must be overridden when a caching behavior is specified.
            This key normally maps to the properties you have to read
            from the <see cref="T:Spotfire.Dxp.Framework.Threading.WorkItem"/> in <see cref="M:Spotfire.Dxp.Framework.Threading.Worker`2.DoWorkCore(`0,`1)"/>.
            </summary>
            <param name="workItem">The work item.</param>
            <returns>The item key.
            </returns>
            <remarks>Allowed return types are:
            <list type="bullet">
            <item>string</item>
            <item>int</item>        
            <item>uint</item>
            <item>short</item>
            <item>ushort</item>
            <item>byte</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>double</item>
            <item>float</item>
            <item>decimal</item>
            <item>long</item>
            <item>bool</item>
            </list> 
            </remarks>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.WorkerFactory.GetCachingBehaviorCore"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory`2.GetModelKeyCore(`1)">
            <summary>Override this method to provide your model key.
            This key normally maps to the properties you have to read
            from the document node in the worker.
            </summary>
            <param name="model">The model.</param>
            <returns>The model key.</returns>
            <remarks>If there is no document node dependency in the 
            corresponding dispatcher (and hence neither in the work item), 
            this method will not be called.
            Allowed return types are:
            <list type="bullet">
            <item>string</item>
            <item>int</item>        
            <item>uint</item>
            <item>short</item>
            <item>ushort</item>
            <item>byte</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>double</item>
            <item>flaot</item>
            <item>decimal</item>
            <item>long</item>
            <item>bool</item>
            </list> 
            </remarks>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.WorkManager.CreateDispatcher``1(Spotfire.Dxp.Framework.Threading.WorkerFactory,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.Threading.WorkDispatcher{``0}@)"/>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.Worker`2.DoWorkCore(`0,`1)"/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerFactory`2.GetGroupIdCore">
            <summary>Override this method to provide an instance-dependent 
            group id. This can be used when having a worker factory
            parametrized on a TypeIdentifier. Default returns empty string.
            </summary>
            <returns>A group identifier describing a state of this worker factory instance,
            typically a type identifier.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkerThread">
            <summary>
            This is a worker thread for the threading framework, the worker threads are owned by a ThreadGroup.
            The worker thread is responsible for executing the work items in the warehouse.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.log">
            <summary>The logger.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.randomApplicationThread">
            <summary>
            [hannes,jonas 2014-06-30]: This is extremely fishy, this is the application thread associated with the 
            first user that uses the threading framework for a specific dispatcher. However were still executing 
            work items for _all_ other users using this same application thread and then applying application thread
            settings for the specific work item. We've changed this but since we didn't understand all the stuff here
            we couldn't get rid of the field.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.warehouse">
            <summary>The warehouse is where the work items that are to be processed are located.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.workerStats">
            <summary>Only used for testing.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.thread">
            <summary>The thread that is actually executing the work.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.startedLock">
            <summary>This lock is used to wait untill the worker thread has been started, not entirely sure why this is needed.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.workManager">
            <summary>The work manager, this object is only used for debugging.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.groupId">
            <summary>
            Some sort of identifier the thread group?
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.workItemsCount">
            <summary>
            The currently executing work items, this is done so that we wait for a batch of work items to finish until we start new jobs.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.workItemsCountLock">
            <summary>
            Protectes the work items count lock.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.dedicatedWorker">
            <summary>
            The worker class is responsible for actually performing the computation on the work items from the warehouse.
            You either have one of these or an reentrant worker handle, this seems a bit strange though...
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.reentrantWorkerHandle">
            <summary>
            The worker class is responsible for actually performing the computation on the work items from the warehouse.
            You either have one of these or a dedicated worker, this seems a bit strange though...
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.threadGroupMonitor">
            <summary>
            Debug code for monitoring the threads.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.started">
            <summary>
            Inidicates that the worker thread has started, protected by the startedLock, not entirely sure why this is needed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkerThread.HasCalledTryGetThreadGroupMonitor">
            <summary>
            TODO: This should not be thread static.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerThread.#ctor(Spotfire.Dxp.Framework.Threading.WorkItemWarehouse,Spotfire.Dxp.Framework.Threading.WorkerStats,System.Threading.ThreadPriority,Spotfire.Dxp.Framework.Threading.WorkManager,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.WorkerThread"/> class.
            </summary>
            <param name="warehouse">The warehouse.</param>
            <param name="workerStats">The worker stats.</param>
            <param name="threadPriority">The thread priority.</param>
            <param name="workManager">The work manager.</param>
            <param name="groupId">The group identifier.</param>
            <param name="threadGroupDisplayName">Display name of the thread group.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkerThread.WarehouseForDebug">
            <summary>This seems very strange, and breaks all kinds of abstraction barriers. Only used for debugging statistics.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerThread.EnsureStarted(Spotfire.Dxp.Framework.Threading.WorkerFactory)">
            <summary>
            Ensures that the worker thread is started.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkerThread.CreateWorker(Spotfire.Dxp.Framework.Threading.WorkerFactory)">
            <summary>
            This method is called in WorkManager.CreateDispatcher.
            Typically made on the application thread.
            It enqueues a "Create worker" admin task to the WorkerThread.
            The call is made within a lock in WorkManager
            </summary>
            <param name="factory"></param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkItem">
            <summary>Base class for work items. Inherit from this class to
            declare custom worker input and result properties.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.Worker"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.LogLiveWorkItemsShare">
            <summary>
            This logging a costly, so it's possible to specify the setting Settings.Default.LogLiveWorkItemsPercentage
            so only a proportion of all items will be logged.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.Random">
            <summary>
            Used to not add all queries to liveQueries because it's costly.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.liveWorkItems">
            <summary>
            A collection of the living queries.
            Enable this logging like this:
            <Spotfire.Dxp.Framework.Properties.Settings>   
             <setting name="LogLiveWorkItems" serializeAs="String">
              <value>False</value>
             </setting>
             <setting name="LogLiveWorkItemsPercentage" serializeAs="String">
              <value>20</value>
             </setting>
            </Spotfire.Dxp.Framework.Properties.Settings>
            Also enable <statistics flushInterval="300" enabled="true"/> and add the appender for WebLiveJobsLog in log4net.config
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.liveWorkItemsLock">
            <summary>
            Lock object to protect the liveWorkItems collection and latestItemId.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.latestItemId">
            <summary>
            This is used to generate itemId.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.createdAt">
            <summary>
            The creation time for the current object.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.itemId">
            <summary>
            This Id is only used for logging.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.wasAdded">
            <summary>
            Indicates that this query was added to the liveQueries collection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.applicationThreadSettings">
            <summary>This work item's application thread settings.
            Conceptually read-only.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.workDispatcher">
            <summary>
            The dispatcher is needed for computing the IsResultValid property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.serviceWasTemporarilyUnavailable">
            <summary>
            Indicates that the immutable result currently is a transient error.
            Set by the worker by calling SetServiceTemporarilyUnavailable on the work item.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.delayTimeBeforeRetry">
            <summary>
            The delay time before retry when <see cref="F:Spotfire.Dxp.Framework.Threading.WorkItem.serviceWasTemporarilyUnavailable"/> is <c>true</c>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.cancelCallbacks">
            <summary>
            A collection of callbacks that will be invoked when this WorkItem is canceled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.endWorkItemStatusHandlerCalled">
            <summary>
            Indicates that EndWorkItemStatusHandler has been called. Used to get this method idempotent.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItem.endWorkItemStatusHandlerCalledLock">
            <summary>
            Lock object for endWorkItemStatusHandlerCalled.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.#ctor">
            <summary>Creates a new instance.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.DelayTimeBeforeRetry">
            <summary>
            Gets the delay time before retry.
            </summary>
            <value>The delay time before retry.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.ServiceWasTemporarilyUnavailable">
            <summary>
            Gets a value indicating whether this instance was service temporarily unavailable for this work item.
            </summary>
            <value>
            <c>true</c> if this instance was service temporarily unavailable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.NeededInitialization(Spotfire.Dxp.Framework.Threading.WorkDispatcher,Spotfire.Dxp.Framework.DocumentModel.Executor)">
            <summary>
            Whether the work item needs initialization.
            </summary>
            <param name="workDispatcher">The work dispatcher.</param>
            <param name="initializationExecutor">The initialization executor.</param>
            <returns><c>true</c> if the item is new, otherwise <c>false.</c></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.TryInit(Spotfire.Dxp.Framework.Threading.WorkDispatcher,Spotfire.Dxp.Framework.DocumentModel.DocumentNodeHandle,Spotfire.Dxp.Framework.Threading.WorkItemHandler{Spotfire.Dxp.Framework.Threading.WorkItem})">
            <summary>
            Inits the specified work dispatcher.
            </summary>
            <param name="workDispatcher">The work dispatcher.</param>
            <param name="workerModelHandle">The worker model handle.</param>
            <param name="finalHandler">The final handler.</param>
            <returns><c>true</c> if successful (snapshot creating ok).</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.ApplicationThreadSettings">
            <summary>This work item's application thread settings.
            The application thread settings are applied in 
            Worker.HandlerWorkItems. Conceptually readonly. Inited in
            WorkItem.Init. May be null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.CreatedAt">
            <summary>
            Gets the creation time.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.ItemId">
            <summary>
            Gets the item Id.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.Tag">
            <summary>Gets or sets a tag object. The tag object can be used to associate 
            information with the work item.
            </summary>
            <value>The tag object. Must be set before the work item is added to the dispatcher.</value>
            <exception cref="T:System.InvalidOperationException">If the property is set after the work item has been added to the dispatcher.</exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.IsResultValid">
            <summary>Returns <c>true</c> if the work item result is valid in the live document.
            This will be <c>false</c> if the worker model changed after the work item was added
            to the dispatcher.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.IsCanceled">
            <summary>Returns <c>true</c> if the work item has been canceled.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.ModelGeneration">
            <summary>Gets the associated worker model generation.
            This can be used by the worker to cache information based
            on the worker model state. Should be avoided whenever possible.
            Caching should instead be handled via the caching behavior, 
            the model key and item key functions of
            the worker factory.
            </summary>
            <value>The worker model generation number.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.ImmutableResult">
            <summary>
            Gets the immutable result.
            </summary>
            <remarks>Since the document node input of a work item may be mutate at any stage, 
            the immutable result will only be guaranteed when <see cref="P:Spotfire.Dxp.Framework.Threading.WorkItem.IsResultValid"/>
            returns <c>true</c> and <see cref="P:Spotfire.Dxp.Framework.Threading.WorkItem.IsCanceled"/> returns false.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the immutable
            result has not been set.</exception>
            <seealso cref="P:Spotfire.Dxp.Framework.Threading.WorkItem.HasImmutableResult"/>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.SetImmutableResult(System.Object)"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkItemHandler`1"/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.HasImmutableResult">
            <summary>
            Gets a value indicating whether this instance has immutable result.
            </summary>
            <value>
            	<c>true</c> if this instance has immutable result; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.SetImmutableResult(System.Object)">
            <summary>
            Sets the immutable result.
            </summary>
            <param name="result">The result.</param>
            <remarks>If the result is a cacheable object, the immutable result property
            will return the wrapped object.
            Allowed result values are:
            <list type="bullet">
            <item>null</item>
            <item>string</item>
            <item>int</item>        
            <item>uint</item>
            <item>short</item>
            <item>ushort</item>
            <item>byte</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>double</item>
            <item>float</item>
            <item>decimal</item>
            <item>long</item>
            <item>bool</item>
            <item>CacheableObject</item>
            </list> 
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if called twice.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the result cannot get cached.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.SetServiceTemporarilyUnavailable(System.Object,System.TimeSpan)">
            <summary>
            Sets the result of this work item to service temporarily unavailable.
            </summary>
            <param name="description">The description.</param>
            <param name="delayTimeBeforeRetry">The delay time before retry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.SetImmutableResultCore(System.Object)">
            <summary>Only here for virtualvaluerequest integration.
            When values are found in the threading framework cache,
            they must be placed in the VirtualValueRequest class.
            When overriding, you must call base.SetImmutableResultCore.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.CacheKey">
            <summary>
            Gets the cache key.
            The result in <see cref="P:Spotfire.Dxp.Framework.Threading.WorkItem.ImmutableResult"/> will get cached
            if the Worker overrides GetItemKeyCore.
            </summary>
            <value>The cache key.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.WorkDispatcher">
            <summary>Gets the work dispatcher. Only friend-visible because
            of virtual column implmentation.
            </summary>
            <value>The work dispatcher.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItem.QueueNode">
            <summary>Gets or sets the queue node.
            </summary>
            <value>The queue node.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.ReadModel``1(System.Action{``0})">
            <summary>
            Allows reading the associated worker model in a thread-safe way.
            </summary>
            <typeparam name="TModel">The type of the worker model.</typeparam>
            <param name="readAction">The read action delegate.</param>
            <returns>
            	<c>true</c> if the read values were still valid in the live document when the read transaction ended.
            </returns>
            <remarks>The document node argument passed to the read action can be <c>null</c>.
            The returned value is equivalent to the value returned by <see cref="P:Spotfire.Dxp.Framework.Threading.WorkItem.IsResultValid"/>.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.PushResultHandler``1(Spotfire.Dxp.Framework.Threading.WorkItemHandler{``0})">
            <summary>
            Adds a result handler to the top of the stack of result handlers.
            The handler must call <see cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.ReturnItem"/> when it is finished with the work item.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.ReturnItem">
            <summary>Signals that a worker or result handler is finished with the work item. 
            The method then passes the work item to the next handler in the stack.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.GetLiveWorkItems(System.Object@)">
            <summary>
            Get the collection of live queries.
            </summary>
            <param name="lockObject">The lock object.</param>
            <returns>The live queries.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.TraceLogWithAnalysisInfo(System.String,Spotfire.Dxp.Framework.Threading.WorkDispatcher)">
            <summary>
            Log on trace level if trace is enabled. Also add WAID and path to the message.
            </summary>
            <param name="message">The base message.</param>
            <param name="workDispatcher">The work dispatcher.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.Dispose">
            <summary>Frees up resources.
            </summary>
            <remarks>Note that dispose is automatically called by the framework if
            <see cref="P:Spotfire.Dxp.Framework.Threading.WorkDispatcher.AutoDisposeItems"/> is set to <c>true</c> (the default).
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.Dispose(System.Boolean)">
            <summary>Override this method to release unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.RegisterCancelCallback(System.Action)">
            <summary>
            Registers an action that will be called on cancellation.
            </summary>
            <param name="action">The action to call on cancellation.</param>
            <returns>A ticket for the callback. Dispose the object to unsubscribe to the callback.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <paramref name="obj"/> is the same instance as the current work item.
            </summary>
            <param name="obj">The object to compare with the current work item.</param>
            <returns>
            <c>true</c> if the specified <paramref name="obj"/> is the same instance as the current work item.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItem.GetHashCode">
            <summary>Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current work item.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.IBackgroundTaskTracker">
            <summary>
            Implemented by enteties interested in keeping track of whether any background tasks are running.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.IBackgroundTaskTracker.TaskStarted">
            <summary>
            Shall be called by a background task when the tasks has been scheduled to run.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.IBackgroundTaskTracker.TaskFinished">
            <summary>
            Shall be called by a background task when the tasks has finished running.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkItemHandler`1">
            <summary>Delegate for handling processed work items.
            The handler must call <see cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.ReturnItem"/> when it is finished with the work item.
            </summary>
            <typeparam name="TItem">Work item type.</typeparam>
            <param name="workItem">Processed work item.</param>
            <example>    
            The following example shows how ReturnItem can be used to synchronize with
            the application thread.
            <code lang="c#">
            WorkItemHandler&lt;WorkItem&gt; workItemHandler = 
                delegate(WorkItem workItem)
                {
                    AnalysisServices.GetService&lt;ApplicationThread&gt;().InvokeAsynchronously(delegate()
                    {
                        try
                        {
                            if (workItem.IsResultValid &amp;&amp; !workItem.IsCanceled)
                            {
                                // do something to the document.
                            }
                        }
                        finally
                        {
                            // Tell threading framework that your work item handler is done.
                            workItem.ReturnItem();
                        }
                            
                    });
                 };
            </code>
            </example>
            <seealso cref="M:Spotfire.Dxp.Framework.Threading.WorkItem.PushResultHandler``1(Spotfire.Dxp.Framework.Threading.WorkItemHandler{``0})"/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse">
            <summary>WorkItemWarehouse class. 
            A shared area where WorkItems are placed...
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.#ctor(Spotfire.Dxp.Framework.Threading.WorkManager,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse"/> class.
            </summary>
            <param name="workManager"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.AddDispatcherQueue(Spotfire.Dxp.Framework.Threading.WorkDispatcher)">
            <summary>Adds a queue for the dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.RemoveDispatcherQueue(Spotfire.Dxp.Framework.Threading.WorkDispatcher)">
            <summary>Removes the queue for the dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.SyncHandle">
            <summary>
            Synchronization handle.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.TotalWorkItemCount">
            <summary>Gets the total work item count.
            </summary>
            <value>The total work item count.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.UpdateQueue(Spotfire.Dxp.Framework.Threading.WorkDispatcher,System.Action{Spotfire.Dxp.Framework.Threading.WorkItemQueue})">
            <summary>
            Adds a work item and signals.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.TryGetBatch(Spotfire.Dxp.Framework.Threading.Worker,System.Collections.Generic.List{Spotfire.Dxp.Framework.Threading.WorkItem}@)">
            <summary>
            This method was added when fixing Bug #62207 High risk of batch hacked into pieces in for virtual value requests...
            </summary>
            <param name="worker">The worker.</param>
            <param name="items">The items in the batch.</param>
            <returns><c>true</c> if a batch of one or more items was obtained by the calling thread, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.TryGetBatch(Spotfire.Dxp.Framework.Threading.WorkItem,System.Int32,System.Predicate{Spotfire.Dxp.Framework.Threading.WorkItem},System.Collections.Generic.ICollection{Spotfire.Dxp.Framework.Threading.WorkItem})">
            <summary>
            Gets at most maxCount items from the warehouse
            and adds them to the specified items collection.
            </summary>
            <param name="baseItem">The base item.</param>
            <param name="maxCount">The max count.</param>
            <param name="predicate">A predicate for which work items to include.</param>
            <param name="items">The items collection.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.UpdateCountAndSignal(System.Int32)">
            <summary>Updates this.totalWorkItemCount and signals if items are available or not.
            This method should only be called while locking the <see cref="F:Spotfire.Dxp.Framework.Threading.WorkItemWarehouse.lockHandle"/> object.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkManager">
            <summary>Manages workers and work dispatchers. It is available as a global service.
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.Worker"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkerFactory"/>
            <seealso cref="T:Spotfire.Dxp.Framework.Threading.WorkDispatcher`1"/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkManager.nextListenerId">
            <summary>
            The next listener id, incremented when a listerner is registered.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkManager.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkManager.lingeringDispatchers">
            <summary>This set holds the dispatchers that have been disposed, 
            but still have pending work items.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Threading.WorkManager.WorkerStats">
            <summary>Gets or sets the worker stats.
            The worker stats instance can be used to profile the workers or validate them during tests.
            </summary>
            <value>A worker stats instance.</value>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkManager.CreateDispatcher``1(Spotfire.Dxp.Framework.Threading.WorkerFactory,Spotfire.Dxp.Framework.DocumentModel.DocumentNode,Spotfire.Dxp.Framework.Threading.WorkDispatcher{``0}@)">
            <summary>
            Creates a work dispatcher.
            </summary>
            <typeparam name="TItem">WorkItem type.</typeparam>
            <param name="workerFactory">The worker factory.</param>
            <param name="workerModel">The worker model. Can be <c>null</c>.</param>
            <param name="dispatcher">The created dispatcher.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkManager.GetLingeringDispatchersCount">
            <summary>Number of dispatchers that have been disposed
            but still have work items. This indicates missing WorkItem.ReturnItem calls.
            </summary>
            <remarks>This is used for monitoring purposes.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkManager.GetStats">
            <summary>Gets the stats for performance monitoring.
            </summary>
            <returns>List of stats per thread group.</returns>
            <remarks>This is used for monitoring purposes.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkManager.RegisterListener(System.String,System.Threading.EventWaitHandle,System.Threading.EventWaitHandle,System.Int32@,Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor@)">
            <summary>
            
            </summary>
            <param name="groupId"></param>
            <param name="jobsPostedHandle"></param>
            <param name="workingHandle"></param>
            <param name="listenerId"></param>
            <param name="threadGroupMonitor"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkManager.RegisterThread(System.String,System.Int32,Spotfire.Dxp.Framework.Threading.WorkItemWarehouse)">
            <summary>
            Called by a worker thread during its initialization
            </summary>
            <param name="groupId"></param>
            <param name="threadId">A unique id for the thread</param>
            <param name="warehouse"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkManager.TryGetThreadGroupMonitor(System.String,Spotfire.Dxp.Framework.Threading.ThreadGroupMonitor@)">
            <summary>
            As of 2012-01-21, only successful when measuring performance.
            </summary>
            <param name="groupId"></param>
            <param name="threadGroupMonitor"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkManager.ThreadGoIdle(System.String,System.Int32)">
            <summary>
            Called by a worker thread just before it enters waiting state
            </summary>
            <param name="groupId">The group id.</param>
            <param name="threadId">The thread id.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkManager.ThreadStartWork(System.String,System.Int32)">
            <summary>
            Called by a worker thread when it has been waken up and there are 
            job to perform
            </summary>
            <param name="groupId">The group id.</param>
            <param name="threadId">A unique id for the thread</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Threading.WorkManager.UnRegisterThread(System.String,System.Int32)">
            <summary>
            Called by a worker thread just befor the thread dies.
            </summary>
            <param name="groupId">The group id.</param>
            <param name="threadId">A unique id for the thread</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.WorkManager.Stats">
            <summary>Stats class. Used for performance monitoring.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkManager.Stats.GroupId">
            <summary>Group id.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkManager.Stats.ThreadCount">
            <summary>Number of threads in the group.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkManager.Stats.TotalWorkItemCount">
            <summary>Total number of work items currently queued.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Threading.WorkManager.Stats.WorkerCount">
            <summary>Number of workers in this group.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Threading.ThreadState">
            <summary>
            Only friend visible for performance measurement.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryUtil">
            <summary>A utility class for the User Directory.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryUtil.ConvertPrincipal(Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal)">
            <summary>Convert from a <see cref="T:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal"/> object 
            to a <see cref="T:Spotfire.Dxp.WebServices.SpotfirePrincipal"/> object.</summary>
            <param name="principal">The ServerPrincipal to convert.</param>
            <returns>The resulting SpotfirePrincipal object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryUtil.ConvertPrincipal(Spotfire.Dxp.WebServices.SpotfirePrincipal)">
            <summary>Convert from a <see cref="T:Spotfire.Dxp.WebServices.SpotfirePrincipal"/> object to 
            a <see cref="T:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal"/> object.</summary>
            <param name="principal">The SpotfirePrincipal to convert.</param>
            <returns>The resulting ServerPrincipal object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryUtil.ConvertUser(Spotfire.Dxp.WebServices.UserPrincipal)">
            <summary>Convert from a <see cref="T:Spotfire.Dxp.WebServices.UserPrincipal"/> object to 
            a <see cref="T:Spotfire.Dxp.Framework.UserDirectory.User"/> object.</summary>
            <param name="user">The UserPrincipal to convert.</param>
            <returns>The resulting User object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryUtil.ConvertGroup(Spotfire.Dxp.WebServices.GroupPrincipal)">
            <summary>Convert from a <see cref="T:Spotfire.Dxp.WebServices.GroupPrincipal"/> object to 
            a <see cref="T:Spotfire.Dxp.Framework.UserDirectory.Group"/> object.</summary>
            <param name="group">The GroupPrincipal to convert.</param>
            <returns>The resulting Group object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryUtil.ConvertUser(Spotfire.Dxp.Framework.UserDirectory.User)">
            <summary>Convert from a <see cref="T:Spotfire.Dxp.Framework.UserDirectory.User"/> object to 
            a <see cref="T:Spotfire.Dxp.WebServices.UserPrincipal"/> object.</summary>
            <param name="user">The User to convert.</param>
            <returns>The resulting UserPrincipal object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryUtil.ConvertGroup(Spotfire.Dxp.Framework.UserDirectory.Group)">
            <summary>Convert from a <see cref="T:Spotfire.Dxp.Framework.UserDirectory.Group"/> object to 
            a <see cref="T:Spotfire.Dxp.WebServices.GroupPrincipal"/> object.</summary>
            <param name="group">The Group to convert.</param>
            <returns>The resulting GroupPrincipal object.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.UserDirectory.Group">
            <summary>This class represents a group principal in the server's User Directory.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.Group.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.Group"/> class.</summary>
            <param name="id">The unique group id</param>
            <param name="name">The group name</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.Group.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.Group"/> class.</summary>
            <param name="id">The unique group id</param>
            <param name="name">The group name</param>
            <param name="domainName">The group's domain name</param>
            <param name="compositeName">The group's composite name</param>
            <param name="displayName">The group's display name</param>
            <param name="email">The group's email</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.Group.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.Group.Equals(Spotfire.Dxp.Framework.UserDirectory.Group)">
            <summary>Determines whether the specified <see cref="T:Spotfire.Dxp.Framework.UserDirectory.Group"/> is 
            equal to the current Group.</summary>
            <param name="group">The Group compared with the current Group</param>
            <returns><see langword="true"/> if the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.User"/> objects are equal</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.Group.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal">
            <summary>This class represents a principal in the server's User Directory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal._id">
            <summary>The principal's unique id</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal._name">
            <summary>The principal's name</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal"/> class.</summary>
            <param name="id">The unique principal id</param>
            <param name="name">The principal name</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal"/> class.</summary>
            <param name="id">The unique principal id</param>
            <param name="name">The principal name</param>
            <param name="domainName">The principal's domain name</param>
            <param name="compositeName">The principal's composite name</param>
            <param name="displayName">The principal's display name</param>
            <param name="email">The principal's email</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.Email">
            <summary>
            The email address of the principal (or null if no email address has been set).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.DisplayName">
            <summary>
            The display name of the principal (may be the same as the <see cref="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.Name"/>).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.CompositeName">
            <summary>
            The composite name of the principal. May consist of either both the <see cref="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.Name"/> 
            and the <see cref="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.DomainName"/> or just the <see cref="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.Name"/> (when working against a 
            pre-5.0 server or when the principal belongs to the internal domain).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.DomainName">
            <summary>
            The domain name of the principal. May be null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.Id">
            <summary>Gets the unique id of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal"/> object.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.Name">
            <summary>Gets the name of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal"/> object.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.ServerPrincipal.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryException">
            <summary>Exception class for exceptions occurred in user directory.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryException"/> class.
            </summary>
            <param name="faultCode">The fault code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryException"/> class.
            </summary>
            <param name="faultCode">The fault code.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryException.FaultCode">
            <summary>Gets the exception's faultcode.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.UserDirectory.UserDirectoryException.ServerStackTrace">
            <summary>Gets the server stack trace.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.UserDirectory.User">
            <summary>This class represents a user principal in the server's User Directory.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.User.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.User"/> class.</summary>
            <param name="id">The unique user id</param>
            <param name="name">The user name</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.User.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.User"/> class.</summary>
            <param name="id">The unique user id</param>
            <param name="name">The user name</param>
            <param name="domainName">The user's domain name</param>
            <param name="compositeName">The user's composite name</param>
            <param name="displayName">The user's display name</param>
            <param name="email">The user's email</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.User.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.User.Equals(Spotfire.Dxp.Framework.UserDirectory.User)">
            <summary>Determines whether the specified <see cref="T:Spotfire.Dxp.Framework.UserDirectory.Group"/> is 
            equal to the current Group.</summary>
            <param name="user">The Group compared with the current Group</param>
            <returns><see langword="true"/> if the <see cref="T:Spotfire.Dxp.Framework.UserDirectory.User"/> objects are equal</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.UserDirectory.User.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.CallbackRegistry">
            <summary>
            Manages a list of callback and the lifetimes of the callback registrations.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.syncLock">
            <summary>
            Synchronization object for thread-safe access to the callback list.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.callbacks">
            <summary>
            List of all current callback registrations.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.Register(System.Action)">
            <summary>
            Register a new callback.
            </summary>
            <param name="action">The action to invoke when the action from <see cref="M:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.GetCallbackInvoker"/> is called.</param>
            <returns>A ticket that manages the lifetime of the registration. Dispose the ticket to unregister the callback.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.Clear">
            <summary>
            Clears the callback registry.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.GetCallbackInvoker">
            <summary>
            Gets an action that will invoke all currently registered callbacks, the callbacks
            are also removed from the registry to avoid them being called more than once.
            </summary>
            <returns>This action will invoke all currently registerd callback.</returns>>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.Unregister(Spotfire.Dxp.Framework.Utilities.CallbackRegistry.CallbackRegistrationToken)">
            <summary>
            Removes a callback registration. Called by <see cref="T:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.CallbackRegistrationToken"/> when a token is disposed.
            </summary>
            <param name="token">The registration token for the callback to remove.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.CallbackRegistrationToken">
            <summary>
            Inner class that is used as the disposable tickets of the other class.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.CallbackRegistrationToken.callback">
            <summary>
            The action to invoke when the callback is triggered.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.CallbackRegistrationToken.registry">
            <summary>
            A reference back to the registry. Used when disposing a token to unregister the callback.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.CallbackRegistrationToken.#ctor(Spotfire.Dxp.Framework.Utilities.CallbackRegistry,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.CallbackRegistrationToken" /> class.
            </summary>
            <param name="registry">Reference to the registry that issued this token.</param>
            <param name="callback">The callback to invoke when the callback is triggered.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.CallbackRegistrationToken.InvokeCallback">
            <summary>
            Invokes the callback that was passed to the constructor.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.CallbackRegistry.CallbackRegistrationToken.Dispose">
            <summary>
            Unregisters the callback.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.DataViewEvaluationOnApplicationThreadSuppression">
            <summary>
            Disposable class used to suppress checks for data view evaluation on application thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.DataViewEvaluationOnApplicationThreadSuppression.previousValue">
            <summary>
            Previous value of isSppressed flag.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.DataViewEvaluationOnApplicationThreadSuppression.threadId">
            <summary>
            The id of the thread that created this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.DataViewEvaluationOnApplicationThreadSuppression.isSupressed">
            <summary>
            True if warning should be suppressed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.DataViewEvaluationOnApplicationThreadSuppression.isDisposed">
            <summary>
            Disposed flag
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.DataViewEvaluationOnApplicationThreadSuppression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.DataViewEvaluationOnApplicationThreadSuppression"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.DataViewEvaluationOnApplicationThreadSuppression.IsSuppressed">
            <summary>
            Gets a value indicating whether warning should be suppressed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.DataViewEvaluationOnApplicationThreadSuppression.Dispose">
            <summary>
            Resets runtime check behavior.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.FontCache">
            <summary>
            Utility class for caching fonts. Some font operations are very expensive and uses the global GDI+ lock.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.FontCache.fontCache">
            <summary>
            Holds a thread local copy of the font cache.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.FontCache.CreateFont(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)">
            <summary>
            Create a font from the input
            </summary>
            <param name="familyName">The family name</param>
            <param name="size">The size</param>
            <param name="fontStyle">The FontStyle</param>
            <param name="unit">The GraphicsUnit</param>
            <returns>The Font</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.FrameworkExceptionHelper">
            <summary>
            Handles exceptions.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.FrameworkExceptionHelper.LoadFileNoPermissions">
            <summary>
            Gets the LoadFileNoPermissions pattern.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.FrameworkExceptionHelper.LoadFileIncompatibleVersion(System.String,System.String)">
            <summary>
            Format a LoadFileIncompatibleVersion message.
            </summary>
            <param name="filename">The filename to fill in.</param>
            <param name="fileVersion">The file version to fill in.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.FrameworkExceptionHelper.LoadFileUnknownError(System.String)">
            <summary>
            Format the LoadFileUnknownError message.
            </summary>
            <param name="filename">The filename to fill in.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.FrameworkExceptionHelper.LibraryFailedLoad(System.String)">
            <summary>
            Format this string.
            </summary>
            <param name="name">The name to fill in.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.FrameworkExceptionHelper.GetMessage(System.Exception,System.String,System.Int32@)">
            <summary>
            Get a human readable message.
            </summary>
            <param name="e">The exception.</param>
            <param name="fileName">The filename.</param>
            <param name="errorCode">Output parameter for error code that is used by the TSS.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.FrameworkExceptionHelper.HasInnerSubstring(System.Exception,System.String)">
            <summary>
            Determine if the messageString is present in the message or some inner exception messages.
            </summary>
            <param name="e">The exception.</param>
            <param name="messageString">The string to search for.</param>
            <returns>True if the string is found, otherwise false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.GlobalColors">
            <summary>
            This is a static utility class defining global color constants.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.GlobalColors.Frame">
            <summary>
            Gets the standard dark gray color used by Spotfire 
            User Interface elements frames.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.GlobalColors.Background">
            <summary>
            Gets the standard dark gray color used by Spotfire 
            User Interface elements background.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.GlobalColors.Border">
            <summary>
            Gets the standard dark gray color used by Spotfire 
            User Interface elements.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.GlobalColors.DarkBackground">
            <summary>
            Gets the standard dark gray color used by Spotfire 
            User Interface elements background.
            </summary>     
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.GlobalColors.LightGray">
            <summary>
            Gets the standard gray color used by Spotfire 
            User Interface elements like the trellis headers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.GlobalColors.DefaultTextColor">
            <summary>
            Gets the standard text color (black) used by Spotfire 
            User Interface elements.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.GlobalColors.HeaderBackgroundColorLight">
            <summary>
            Gets the header row background color.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.GlobalColors.HeaderBackgroundColorDark">
            <summary>
            Gets the header row background color.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.Hooks">
            <summary>
            Hooks that may be invoked when program is running. Hooks are only enabled whe compiling with UNIT_TEST flag.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Hooks.ExportSheetRendering">
            <summary>
            Hook invoked during export sheet rendering.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Hooks.PlotDataEvaluation">
            <summary>
            Hook invoked during plot data evaluation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Hooks.PlotRendering">
            <summary>
            Hook invoked during plot rendering.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Hooks.GetLegend">
            <summary>
            Hook invoked during GetLegend.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Hooks.ColumnValuesMaterialization">
            <summary>
            Hook invoked when filters materialize column values for external data. 
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.Hooks.Hook">
            <summary>
            Represents a hook. 
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.Utilities.Hooks.Hook.Called">
            <summary>
            Occurs when the Call method is invoked.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Hooks.Hook.Call">
            <summary>
            Calls all listeners to the Called event.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.NativeMiniDump">
            <summary>Generates mini dump files.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.Log">
            <summary>The user logger.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.NativeMiniDump" /> class from being created.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.DumpSize">
            <summary>The size (content to include) of the mini dump. 
            <para>
            This generates a small dump:
            MiniDumpTypes.MiniDumpWithProcessThreadData |
            MiniDumpTypes.MiniDumpWithUnloadedModules;
            </para>
            <para>
            This is a slightly larger dump:
            MiniDumpTypes.MiniDumpWithProcessThreadData |
            MiniDumpTypes.MiniDumpWithUnloadedModules |
            MiniDumpTypes.MiniDumpWithIndirectlyReferencedMemory;
            </para>
            <para>
            This one contains all process memory:
             MiniDumpTypes.MiniDumpWithFullMemory |
             MiniDumpTypes.MiniDumpWithProcessThreadData |
             MiniDumpTypes.MiniDumpWithHandleData |
             MiniDumpTypes.MiniDumpWithUnloadedModules |
            </para>
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.DumpSize.Small">
            <summary>Smaller mini dump.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.DumpSize.Large">
            <summary>Larger mini dump that include heap memory.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes">
            <summary>Type of information to include in mini dump.
            For more info see https://msdn.microsoft.com/en-us/library/windows/desktop/ms680519.aspx.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpNormal">
            <summary>A normal mini dump</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithDataSegs">
            <summary>The dump with data segments.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithFullMemory">
            <summary>The dump with full memory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithHandleData">
            <summary>All handle information.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpFilterMemory">
            <summary>The filter memory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpScanMemory">
            <summary>The scan memory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithUnloadedModules">
            <summary>The unloaded modules when available.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithIndirectlyReferencedMemory">
            <summary>The memory referenced by stack.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpFilterModulePaths">
            <summary>The filter module paths.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithProcessThreadData">
            <summary>process environment block (PEB) and thread environment block (TEB).</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithPrivateReadWriteMemory">
            <summary>The private read write memory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithoutOptionalData">
            <summary>The optional data.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithFullMemoryInfo">
            <summary>The memory info.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithThreadInfo">
            <summary>The code thread info.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithCodeSegs">
            <summary>The code segs.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithoutAuxiliaryState">
            <summary>Exclude auxiliary state.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithFullAuxiliaryState">
            <summary>Include auxiliary state.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithPrivateWriteCopyMemory">
            <summary>Private write copy memory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpIgnoreInaccessibleMemory">
            <summary>Ignore inaccessible memory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithTokenInformation">
            <summary>Ignore inaccessible memory.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpWithModuleHeaders">
            <summary>Include module headers.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpTypes.MiniDumpFilterTriage">
            <summary>Filter triage.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.CreateDump(System.String,Spotfire.Dxp.Framework.Utilities.NativeMiniDump.DumpSize,System.String)">
            <summary>
            Creates a mini dump
            </summary>
            <param name="fileName">The file name to create the mini dump</param>
            <param name="dumpSize">The contents that should be included in the dump.</param>
            <param name="miniDumpPath">The path where mini dumps will be written. If empty, dumps are written to log folder.</param>
            <returns>Returns true if the dump was taken</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.NativeMiniDump.MiniDumpWriteDump(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates the mini dump
            </summary>
            <param name="process">The process pointer</param>
            <param name="processId">the process id</param>
            <param name="file">The file pointer</param>
            <param name="dumpType">the type of dump to create</param>
            <param name="exceptionParameter">The exception parameter</param>
            <param name="userStreamParameter">the use stream parameter</param>
            <param name="callbackParameter">The call back parameter</param>
            <returns>returns true if the dump was taken</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager">
            <summary>Handles server side Log User Action logging to server.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AllEnabled">
            <summary>The all category that can be enabled.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.Monitoring">
            <summary>
            The Performance categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.MonitoringExtra">
            <summary>
            The Performance categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.MonitoringResource">
            <summary>
            The Performance categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.Auth">
            <summary>
            The AuditLog categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.Library">
            <summary>
            The AuditLog categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.File">
            <summary>
            The AuditLog categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.Datasource">
            <summary>
            The AuditLog categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.Datafunction">
            <summary>
            The AuditLog categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.DataConnector">
            <summary>
            The AuditLog categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.Analysis">
            <summary>
            The AuditLog categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AutomationJob">
            <summary>
            The AuditLog categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AutomationTask">
            <summary>
            The AuditLog categories.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.Log">
            <summary>Client logger for debug logging.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.service">
            <summary>The logger service.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.connectivityService">
            <summary>The connectivity service.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.client">
            <summary>The client type that logs.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.enabledCategories">
            <summary>All the categories enabled for logging by the server (from the manifest).
            If it contains the <c>"all"</c> category, then all logging is enabled.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.originatingipAddress">
            <summary>Ip address of the user that do the action.
            <remarks>This is only set by products (i.e. the web player) where the caller has another address than the machine that executes the code.
            For all other products this should be <c>null</c> and ip is handled by the server.</remarks></summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.serviceInstanceId">
            <summary>
            This id is set during startup and then constant until service stops.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.#ctor(Spotfire.Dxp.Internal.Utilities.ClientType,Spotfire.Dxp.Services.Logger.ILoggerService,Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService)">
            <summary>Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager"/> class.</summary>
            <param name="client">The type of client logging.</param>
            <param name="service">The logger service.</param>
            <param name="connectivityService">The connectivity service, used to check if online.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.LogTypes">
            <summary>
            The log types.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.LogTypes.Audit">
            <summary>Audit log.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.LogTypes.Monitoring">
            <summary>Performance log.</summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem">
            <summary>The type of performance logging item to log to the server.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.StartWorker">
            <summary>Start the worker process.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.StopWorker">
            <summary>Start the worker process.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.Counter">
            <summary>Performance counter value.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.ExtraCounter">
            <summary>Extra performance counter value.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.ExecutionTime">
            <summary>CPU statistics value.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.RunningJobs">
            <summary>Number of corrently running jobs.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.DocumentNodes">
            <summary>Document model size value.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.MemoryData">
            <summary>Memory usage value for data tables.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.MemoryViews">
            <summary>Memory usage value for views.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.Notification">
            <summary>
            A Notification life cycle event was sent to the server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.RecycleStatus">
            <summary>
            A RecycleStatus change life cycle event was sent to the server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem.HealthState">
            <summary>
            A Health state change life cycle event was sent to the server.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction">
            <summary>The type of audit action to log to the server.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.Login">
            <summary>Login action.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.Logout">
            <summary>Logout action.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.LibraryAnalysisStartOpen">
            <summary>Start opening an analysis from the library.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.LibraryAnalysisOpen">
            <summary>Open an analysis from the library.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.LibraryAnalysisStartUpdate">
            <summary>Start updating a scheduled updates analysis by loading it from the library.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.LibraryAnalysisUpdate">
            <summary>Updates a scheduled updates analysis by loading it from the library.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.LibraryAnalysisClone">
            <summary>Clone an analysis in the library, without downloading it.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.LibraryAnalysisClose">
            <summary>Close an analysis in the library.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.FileAnalysisOpen">
            <summary>Opening an analysis file from disk.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataSourceOpen">
            <summary>Open an data source.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataFunctionOpen">
            <summary>Open an data function.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataConnectorCreateDataSource">
            <summary>
            Create a data connector data source.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataConnectorOpenDataSource">
            <summary>
            Open a data connector data source.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataConnectorModifyDataSource">
            <summary>
            Modify a data connector data source.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataConnectorCreateDataConnection">
            <summary>
            Create a data connector data connection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataConnectorOpenDataConnection">
            <summary>
            Open a data connector data connection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataConnectorModifyDataConnection">
            <summary>
            Modify a data connector data connection.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataConnectorGetData">
            <summary>
            Execute a query against a data connector.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.DataConnectorSynchronize">
            <summary>
            Synchronize data connector and/or data source with library.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.SetActivePage">
            <summary>
            Set active page.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.ApplyBookmark">
            <summary>
            Apply bookmark.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.AutomationJobStarted">
            <summary>An automation services job started.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.AutomationJobFinished">
            <summary>An automation services job finished.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.AutomationTaskExecuteStarted">
            <summary>An automation services task execution.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction.AutomationTaskExecuteFinished">
            <summary>An automation services task execution.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceCounterLoggingEnabled">
            <summary>
            Gets a value indicating whether performance counter logging is enabled or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceCounterExtraLoggingEnabled">
            <summary>
            Gets a value indicating whether extra performance counter logging is enabled or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.ResourceUsageLoggingEnabled">
            <summary>
            Gets a value indicating whether resource usage user logging is enabled or not.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.SetIpAddress(System.String)">
            <summary>Set the ip address of the user that do the action.
            <remarks>This is only set by products (i.e. the web player) where the caller has another address than the machine that executes the code.
            For all other products this should be <c>null</c> and ip is handled by the server.</remarks></summary>
            <param name="address">The users ip address.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.SetServiceInstanceId(System.String)">
            <summary>
            Set the service instance Id and Sitemanager Id.
            </summary>
            <param name="serviceInstanceId">The service instance Id</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLog(Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction,System.Boolean,System.String,System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>Log an audit item to the server.</summary>
            <param name="auditAction">The action to log.</param>
            <param name="success">Was the action a success?</param>
            <param name="id">The id of the action, can be <c>null</c>.</param>
            <param name="path">The path of the action, can be <c>null</c>.</param>
            <param name="args">Extra arguments for the action, can be <c>null</c>.</param>
            <param name="logAlsoForWebClient">Log also for web client</param>
            <param name="executeSynchronous">Should the function run synchronous and wait for the logging to finish.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLog(Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem,System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Log a performance log item to the server.
            </summary>
            <param name="performanceItem">The item</param>
            <param name="id1">The id, can be <c>null</c>.</param>
            <param name="id2">The library path, can be <c>null</c>.</param>
            <param name="args">Extra arguments for the action, can be <c>null</c>.</param>
            <param name="success">Did the action succeed?</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.StringArrayToString(System.String[])">
            <summary>Combine the string array into a comma separated text.</summary>
            <param name="array">The strings to combine.</param>
            <returns>The joined comma separated string, or <c>null</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.LogIt(Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.LogTypes,System.String,System.String,System.Boolean,System.String,System.String,System.String[])">
            <summary>
            Log to standard log file whether the item was logged or not.
            </summary>
            <param name="logType">The log typ.</param>
            <param name="category">The category.</param>
            <param name="action">The action.</param>
            <param name="success">Success or not.</param>
            <param name="id1">The first id.</param>
            <param name="id2">The second id.</param>      
            <param name="args">The args.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AddServiceInstanceId(System.String[])">
            <summary>
            Insert the service instance Id as arg5
            </summary>
            <param name="argList">The arguments.</param>
            <returns>The arguments with the service instance Id added.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.Enabled(System.String)">
            <summary>
            Is the category enabled?
            </summary>
            <param name="category">The category</param>
            <returns>Whether the category is enabled or not.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.FormatCategory(System.String)">
            <summary>Format the category text, by adding the product name suffix.</summary>
            <param name="category">The productless category text.</param>
            <returns>The formatted category text.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLogItemType">
            <summary>Holds information about a performance log item type.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLogItemType.LogItem">
            <summary>Instance object for the item types.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLogItemType.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLogItemType"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLogItemType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLogItemType" /> class.
            </summary>
            <param name="category">The category</param>
            <param name="action">The action</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLogItemType.Category">
            <summary>Gets the category for the item type.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLogItemType.Action">
            <summary>Gets the action for the item type.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceLogItemType.GetItem(Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.PerformanceItem)">
            <summary>Get the log item for given performance logger item.</summary>
            <param name="performanceItem">Performance logger item to get log item for.</param>
            <returns>The log action for given type.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLogItemType">
            <summary>Holds information about a log item type.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLogItemType.LogItem">
            <summary>Instance object for the item types.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLogItemType.#cctor">
            <summary>Initializes static members of the <see cref="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLogItemType" /> class.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLogItemType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLogItemType" /> class.
            </summary>
            <param name="category">The category</param>
            <param name="action">The action</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLogItemType.Category">
            <summary>Gets the category for the item type.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLogItemType.Action">
            <summary>Gets the action for the item type.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditLogItemType.GetItem(Spotfire.Dxp.Framework.Utilities.ServerLoggerManager.AuditAction)">
            <summary>Get the log item for given log action.</summary>
            <param name="auditAction">Audit action to get log item for.</param>
            <returns>The log action for given type.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath">
            <summary>
            Support class for formulating paths/names to primarily menu elements without having the same strings copied to different resources where they're
            vulnerable to getting translating differently.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.File">
            <summary>
            Gets the File entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.Edit">
            <summary>
            Gets the Edit entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.Data">
            <summary>
            Gets the Data entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.Visualizations">
            <summary>
            Gets the Visualizations entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.View">
            <summary>
            Gets the View entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.Tools">
            <summary>
            Gets the Tools entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.VisualizationProperties">
            <summary>
            Gets the visualization properties entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.PlotContextMenu">
            <summary>
            Gets the plot context menu entry.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.Entry">
            <summary>
            Represents a single ui element
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.UIPath.Entry.path">
            <summary>
            The path that leads us here. For example "Edit > Column Properties"
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.UIPath.Entry.name">
            <summary>
            The display name of this item. For example "Column properties"
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.UIPath.Entry.nameWithPossibleAccessKeys">
            <summary>
            The display name containing the access keys if there are any. For example: "Column &amp;Properties"
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.Entry.#ctor(System.String,Spotfire.Dxp.Framework.Utilities.UIPath.Entry)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.Entry"/> class.
            </summary>
            <param name="name">The display name of this item. For example "Column properties"</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.Entry.#ctor(System.String,System.String,Spotfire.Dxp.Framework.Utilities.UIPath.Entry)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.Entry"/> class.
            </summary>
            <param name="name">The display name of this item. For example "Column properties"</param>
            <param name="nameWithPossibleAccessKeys">The display name containing the access keys if there are any. For example: "Column &amp;Properties"</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.Entry.Path">
            <summary>
            Gets the path that leads us here. For example "Edit > Column Properties"
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.Entry.Name">
            <summary>
            Gets the display name of this item. For example "Column properties"
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.Entry.NameWithPossibleAccessKeys">
            <summary>
            Gets the display name containing the access keys if there are any. For example: "Column &amp;Properties"
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.Entry.ChildPath(System.String)">
            <summary>
            Creates the path to a child of this item
            </summary>
            <param name="childName">Name of the child.</param>
            <returns>The path to the child</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.EditEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.EditEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.EditEntry"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.EditEntry.MarkedRows">
            <summary>
            Gets the marked rows.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.FileEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.FileEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.FileEntry"/> class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry.AddContent">
            <summary>
            Gets the add content entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry.AddCalculatedColumn">
            <summary>
            Gets the calculated column entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry.AddBinnedColumn">
            <summary>
            Gets the binned column entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry.AddHierarchy">
            <summary>
            Gets the hierarchy entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry.TransformData">
            <summary>
            Gets the transformations entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry.DataTableProperties">
            <summary>
            Gets the data table properties entry.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.DataEntry.ColumnProperties">
            <summary>
            Gets the column properties entry.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.VisualizationsEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.VisualizationsEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.VisualizationsEntry"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.VisualizationsEntry.VisualizationProperties">
            <summary>
            Gets the visualization properties.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.PlotContextMenuEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.PlotContextMenuEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.PlotContextMenuEntry"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.PlotContextMenuEntry.MarkedRows">
            <summary>
            Gets the marked rows entry.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.MarkedRowsEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.MarkedRowsEntry.#ctor(Spotfire.Dxp.Framework.Utilities.UIPath.Entry)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.MarkedRowsEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.MarkedRowsEntry.FilterOut">
            <summary>
            Gets the filter out entry.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.ViewEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.ViewEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.ViewEntry"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.ViewEntry.Tags">
            <summary>
            Gets the tags entry.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.ToolsEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.ToolsEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.ToolsEntry"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.ToolsEntry.Options">
            <summary>
            Gets the options entry.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.VisualizationPropertiesEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.VisualizationPropertiesEntry.#ctor(Spotfire.Dxp.Framework.Utilities.UIPath.Entry)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.VisualizationPropertiesEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.DataTablePropertiesEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.DataTablePropertiesEntry.#ctor(Spotfire.Dxp.Framework.Utilities.UIPath.Entry)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.DataTablePropertiesEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.UIPath.DataTablePropertiesEntry.Relations">
            <summary>
            Gets the relations entry.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.UIPath.LeafEntry">
            <summary>
            Represents the entry for the given uielement.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.LeafEntry.#ctor(System.String,Spotfire.Dxp.Framework.Utilities.UIPath.Entry)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.LeafEntry"/> class.
            </summary>
            <param name="name">The display name of this item. For example "Column properties"</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.UIPath.LeafEntry.#ctor(System.String,System.String,Spotfire.Dxp.Framework.Utilities.UIPath.Entry)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.UIPath.LeafEntry"/> class.
            </summary>
            <param name="name">The display name of this item. For example "Column properties"</param>
            <param name="nameWithPossibleAccessKeys">The display name containing the access keys if there are any. For example: "Column &amp;Properties"</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.ValidateFilePath">
            <summary>
            Utility functions to validate that the current user may access file paths.
            </summary>
        </member>
        <member name="E:Spotfire.Dxp.Framework.Utilities.ValidateFilePath.Event">
            <summary>
            The event fired to validate a file path for a data source.
            To disallow opening a specific file, throw an appropriate exception.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ValidateFilePath.Validate(System.String)">
            <summary>
            Validates the given file path.
            </summary>
            <param name="filePath">The file path to validate.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ValidateFilePath.IsInsideAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether a file resides inside any of a specific set of directories.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="directories">The allowed directories. Empty strings will be ignored.</param>
            <returns>
              <c>true</c> if [is inside any] [the specified file path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ValidateFilePath.Validate(System.Uri)">
            <summary>
            Validates the given file uri. Does nothing if the given uri is not a file.
            </summary>
            <param name="uri">The uri to validate.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.ValidateFilePath.Args">
            <summary>
            Holds the file path used for opening a file data source.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.ValidateFilePath.Args.filePath">
            <summary>
            The file path.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.ValidateFilePath.Args.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.ValidateFilePath.Args"/> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.ValidateFilePath.Args.FilePath">
            <summary>
            Gets the file path to validate.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.Viscosity">
            <summary>
            Class for introducing delays in various parts of application.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Viscosity.ColumnValuesMaterializationKey">
            <summary>
             Column values materialization for filters on external data. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Viscosity.ExportSheetRenderingKey">
            <summary>
            Export sheet rendering
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Viscosity.PlotCanvasRenderingKey">
            <summary>
            Plot canvas rendering
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Viscosity.PlotDataEvaluationKey">
            <summary>
            Plot canvas rendering
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Viscosity.Map">
            <summary>
            The feature toggles values.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Viscosity.Randomizer">
            <summary>
            The randomizer
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.CreateDefault">
            <summary>
            Creates a default delay.
            </summary>
            <returns>A delay.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.ColumnValuesMaterialization">
            <summary>
            Call to wait for optional delay of column values materialization for filters on external data.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.ExportSheetRendering">
            <summary>
            Call to wait for optional delay of export sheet rendering.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.PlotDataEvaluation">
            <summary>
            Call to wait for optional delay of plot rendering.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.PlotRendering">
            <summary>
            Call to wait for optional delay of plot rendering.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="key">The key.</param>
            <returns>A delay value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns>The values.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.Reset">
            <summary>
            Resets all delays to their initial, disabled, state.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.SetValue(System.String,Spotfire.Dxp.Framework.Utilities.Viscosity.Delay)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay">
            <summary>
            Represents a delay.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.enabled">
            <summary>
            Controls if this delay is enabled or not.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.max">
            <summary>
            The maximum delay in ms
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.min">
            <summary>
            The minimum delay in ms
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay"/> class.
            </summary>
            <param name="min">The minimum delay in ms.</param>
            <param name="max">The maximum delay in ms.</param>
            <param name="enabled">Specified if the instance created shall be enabled or not.</param>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay"/> is enabled.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.Max">
            <summary>
            Gets the maximum delay in ms.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.Min">
            <summary>
            Gets the minimum delay in ms.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.SetDelay(System.Int32)">
            <summary>
            Sets the delay.
            </summary>
            <param name="ms">The delay in ms.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.SetDelay(System.Int32,System.Int32)">
            <summary>
            Sets the delays.
            </summary>
            <param name="min">The minimum delay in ms.</param>
            <param name="max">The maximum delay in ms.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.Viscosity.Delay.Wait">
            <summary>
            Waits this instance.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Utilities.WebLink">
            <summary>
            A utility class for web links.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.WebLink.UriSchemeTIBCOSpotfire">
            <summary>
            The string for the registred TIBCO Spotfire protocol / scheme.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.WebLink.AllowedFileExtensions">
            <summary>
            The file extensions that should be allowed when <see cref="F:System.Uri.UriSchemeFile"/> is detected.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Utilities.WebLink.Log">
            <summary>
            The web link logger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.WebLink.EncodeUrlParameter(System.String)">
            <summary>Encodes an url parameter value for an url to send to a browser.<br/>
            <example>The parameter x should have the value P&amp;G.<br/>
            http://srv.com?x=P&amp;G will convert to http://srv.com?x=P%26G.<br/>
            Note you should only send in the parameter value P&amp;G to this function, otherwise the url will be encoded.</example>
            </summary>
            <param name="parameter">The value of a url parameter to encode (not the whole URL).</param>
            <returns>The encoded parameter.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.WebLink.EncodeUrl(System.String)">
            <summary>Escapes/encodes an url.</summary>
            <param name="url">The url, can be <c>null</c>.</param>
            <returns>The escaped url.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.WebLink.DecodeUrl(System.String)">
            <summary>Unescape/Decode an escaped url.</summary>
            <param name="url">The url, can be <c>null</c>.</param>
            <returns>The unescaped url.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.WebLink.Open(System.String)">
            <summary>
            Open the default browser with the specified url.
            The url is launched according to the users setting in the browser; 
            open in last used window, open in new window or open in new tab.
            </summary>
            <param name="address">The string representing the url to be opened.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">There was an error in opening the uri.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.WebLink.Open(System.Uri)">
            <summary>
            Open the default browser with the specified url.
            The url is launched according to the users setting in the browser; 
            open in last used window, open in new window or open in new tab.
            </summary>
            <param name="uri">The Uri to be opened.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">There was an error in opening the uri.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.WebLink.Open(System.Uri,Spotfire.Dxp.Framework.Preferences.IImmutablePreferences)">
            <summary>
            Open the default browser with the specified url.
            The url is launched according to the users setting in the browser;
            open in last used window, open in new window or open in new tab.
            </summary>
            <param name="uri">The Uri to be opened.</param>
            <param name="preferences">The web link preferences.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">There was an error in opening the uri.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.WebLink.Validate(System.String)">
            <summary>Validates whether an internet address should be allowed to open.
            </summary>
            <param name="address">The address to validate.</param>
            <returns><c>True</c> if valid; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.WebLink.Validate(System.Uri)">
            <summary>Validates whether a Uri should be allowed to open.
            </summary>
            <param name="uri">The Uri to validate.</param>
            <returns><c>True</c> if valid; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Utilities.WebLink.Validate(System.Uri,Spotfire.Dxp.Framework.Preferences.IImmutablePreferences)">
            <summary>
            Validates whether a Uri should be allowed to open.
            </summary>
            <param name="uri">The Uri to validate.</param>
            <param name="preferences">The web link preferences.</param>
            <returns>
              <c>True</c> if valid; otherwise <c>False</c>.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.FrameworkServiceFactory">
            <summary>Performs service registrations and initializations for the Data projekt.
            These initializations are performed either at application startup, when user
            is authenticated or when opening a document.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.FrameworkServiceFactory.RegisterGlobalServices(Spotfire.Dxp.Framework.Services.GlobalServiceRegistry)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.FrameworkServiceFactory.RegisterUserServices(Spotfire.Dxp.Framework.Services.UserServiceRegistry)">
            <summary>Registers user dependent services.
            </summary>
            <remarks>The service <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService"/>
            must be registered with <paramref name="serviceRegistry"/> prior to
            this call otherwise an exception will be thrown.</remarks>
            <param name="serviceRegistry">The service registry.</param>
            <exception cref="T:System.InvalidOperationException">If the service
            <see cref="T:Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService"/> is not present in the 
            <paramref name="serviceRegistry"/>.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo">
            <summary>
            Carries information about the authentication protocols that a target
            supports and prefers.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo.SupportedSchemes">
            <summary>
            Gets or sets the supported authentication schemes by the <see cref="P:Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo.Target"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo.PreferredScheme">
            <summary>
            Gets or sets the preferred authentication scheme by the <see cref="P:Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo.Target"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo.Target">
            <summary>
            Gets the authentication target.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo.#ctor(Spotfire.Dxp.Framework.HttpClient.AuthenticationTarget)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo"/>.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.AuthenticationTarget">
            <summary>
            Defines targets of a web authentication procedure.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.AuthenticationTarget.Unknown">
            <summary>
            Default value indiacting non target.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.AuthenticationTarget.Server">
            <summary>
            Authentication regards a web server.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.AuthenticationTarget.Proxy">
            <summary>
            Authentication regards a proxy server.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.HttpClient">
            <summary>
            <para>
            A client that is able to communicate through the web using the HTTP
            and HTTPS protocols to retrieve or post content to a server.
            </para>
            <para>
            Use this class by calling the Initialize method and by
            passing one of the predefined constants. Once you no longer need the
            client, call <see cref="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.Disconnect"/> to disconnect from the server and
            release all allocated resources.
            </para>
            <para>
            Once initialized, an instance of this class replaces the original .NET
            http client and is used to create objects of type <see cref="T:System.Net.WebRequest"/>
            and <see cref="T:System.Net.WebResponse"/>.
            </para>
            </summary>
            <seealso cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient"/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.HttpClient.ClientType">
            <summary>Describes the type of the Spotfire client that executes.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.ClientType.WebPlayer">
            <summary>The web player.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.ClientType.AutomationServices">
            <summary>The automation services.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.ClientType.Professional">
            <summary>The Spotfire Professional client. This is the rich forms client.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.ClientType.WebPlayerUpgradeTool">
            <summary>The Web Player Upgrade Tool.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.ClientType.PackageBuilder">
            <summary>The Package Builder.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.HttpClient.WinInet">
            <summary>
            A native implemenation that uses the WinINet library which is 
            the client used by Internet Explorer. The settings for this client
            (such as certificates, proxies, cookies, security, etc.)
            are also managed through Internet Explorer.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.HttpClient.WinHttp">
            <summary>
            A native implementation that uses the WinHTTP library.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.HttpClient.Managed">
            <summary>
            The .Net HTTP client, used by default if no other client is registered.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.ConfigureSecurityProtocol">
            <summary>
            Configures the security protocol.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.client">
            <summary>
            The current client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.FinalizerLoggingEnabled">
            <summary>
            Finalizer logging is enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.callstack">
            <summary>
            The callstack
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.HttpClient.ActiveClient">
            <summary>
            Gets the currently active Http client.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.HttpClient.IsInitialized">
            <summary>
            Gets a value indicating whether or not a client has been initialized.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.HttpClient.IsInteractive">
            <summary>
            Gets a value indicating whether or not this client allows user interfaces 
            (for example login dialogs) to be shown when necessary during network 
            communication.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.Initialize(System.String[],Spotfire.Dxp.Framework.HttpClient.HttpClient,Spotfire.Dxp.Framework.HttpClient.HttpClient.ClientType)">
            <summary>
            Initializes the TIBCO Spotfire Http client with the given implementation.
            </summary>
            <param name="args">Command line arguments.</param>
            <param name="client">One of the static Http client implementation members of this class.</param>
            <param name="clientType">The type of client that creates the http client, used for UserAgent string sent to server.</param>
            <returns>The possibly modified command line arguments.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="client"/> is <c>null</c> or if a client
            has already been initialized.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.Initialize(Spotfire.Dxp.Framework.HttpClient.HttpClient,Spotfire.Dxp.Framework.HttpClient.HttpClient.ClientType)">
            <summary>
            Initializes the TIBCO Spotfire Http client with the given implementation.
            </summary>
            <param name="client">One of the static Http client implementation members of this class.</param>
            <param name="clientType">The type of client that creates the http client, used for UserAgent string sent to server.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="client"/> is <c>null</c> or if a client
            has already been initialized.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.Disconnect">
            <summary>
            Disconnects the Http client, all ongoing communication channels, and 
            disposes all the resources associated with the client.
            </summary>
            <remarks>
            It is recommended but not necessary to call this method once the
            application terminates.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.SetKeepAlive(System.Net.WebRequest,System.Boolean)">
            <summary>
            Sets the keep alive flag for a given web request.
            </summary>
            <param name="request">The web request.</param>
            <param name="useKeepAlive">The keep alive flag.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.SetAuthenticationSchemes(System.Net.WebRequest,System.Net.AuthenticationSchemes)">
            <summary>
            Sets the authentication scheme for a given web request.
            </summary>
            <param name="request">The web</param>
            <param name="auth">The authentication schemes to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.Create(System.Uri,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Net.WebRequest"/> for the given <paramref name="uri"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> for which to create the <see cref="T:System.Net.WebRequest"/>.</param>
            <param name="isInternalRequest">Whether the request is to another node in the topology.</param>
            <returns>A <see cref="T:System.Net.WebRequest"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.GetStatusCode(System.Net.WebResponse)">
            <summary>
            Gets the status code of the supplied <paramref name="response"/>.
            </summary>
            <param name="response">The web response. May be <c>null</c>.</param>
            <returns>The status code of the web response. Returns 0 if the error code cannot be retrieved.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.GetSchemeHostPort(System.Uri)">
            <summary>
            Returns the scheme, host and port of the <paramref name="uri"/>.
            </summary>
            <param name="uri">The specific Uri.</param>
            <returns>The scheme, host and port.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.CreateCore(System.Uri,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Net.WebRequest"/> for the given <paramref name="uri"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> for which to create the <see cref="T:System.Net.WebRequest"/>.</param>
            <param name="isInternalRequest">Is this a request to the TSS server or another node in the topology.</param>
            <returns>A <see cref="T:System.Net.WebRequest"/>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.HttpClient.WebRequestCreator">
            <summary>
            Defines a web request create wrapper.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.HttpClient.WebRequestCreator.spotfireHosts">
            <summary>
            Contains the collection of known Spotfire hosts.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.WebRequestCreator.RegisterSpotfireHost(System.Uri)">
            <summary>
            Registers the host of <paramref name="uri"/> to always use the internal HTTP client.
            </summary>
            <param name="uri">The Uri to register.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.WebRequestCreator.IsSpotfireHost(System.Uri)">
            <summary>
            Returns a value indicating if the specified uri is a spotfire host.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpClient.WebRequestCreator.Create(System.Uri)">
            <summary>
            Creates a new web request.
            </summary>
            <param name="uri">The Uri for which to create a request.</param>
            <returns>A new web request.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.HttpStatusCodeTranslator">
            <summary>
            Utility class for status code related operations.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.HttpStatusCodeTranslator.GetString(System.Net.HttpStatusCode)">
            <summary>
            Gets the string representation of a <see cref="T:System.Net.HttpStatusCode"/>.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.ManagedHttpClient">
            <summary>
            An adapter for the built-in managed .NET HTTP client.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.ManagedHttpClient.clientCertificate">
            <summary>
            The certificate to use when authenticating with this
            client.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.ManagedHttpClient.NoHostNameValidation(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            No host name validation.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="certificate">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
            <returns>True if the certificate is valid; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.ManagedHttpClient.NoHostNameOrCertificateChainValidation(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            No host name validation or certificate chain validation.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="certificate">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
            <returns>True if the certificate is valid; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.ManagedHttpClient.AllowAllCertificateValidation(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            No certificate validation.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="certificate">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
            <returns>True if the certificate is valid; otherwise false.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.ManagedHttpClient.ClientCertificate">
            <summary>
            Gets or sets the certificate to use when authenticating with this
            client.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.ManagedHttpClient.IsInteractive">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.ManagedHttpClient.CreateCore(System.Uri,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient">
            <summary>
            A base class for Http clients that is specialized for native (Win32)
            implementations.
            <para>
            This class provides subclasses with a connection pool which is populated
            with concrete implementations of <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection"/>
            through the <see cref="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.CreateConnection(System.IntPtr,System.Uri)"/> method.
            </para>
            <para>
            This class also enabled subclasses to establish a session with the
            web server upon calling the method <see cref="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.OpenSession"/>.
            </para>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.SessionHandle">
            <summary>
            Gets the native session handle for this client.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.HttpLoggingEnabled">
            <summary>Are extended http logging enabled.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.#ctor">
            <summary>
            Initializes a new instance of class <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient"/>.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.HttpDecodingEnabled">
            <summary>
            Gets a value indicating if http decoding (gzip, deflate) is enabled and can be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.PerformHostNameValidation">
            <summary>
            Gets a value indicating whether host name validition should be performed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.PerformCertificateChainValidation">
            <summary>
            Gets a value indicating whether host name validition should be performed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.ClientIdentifier">
            <summary>
            Gets a non-empty string that represents the concrete client
            implementation, for example <c>MyClient/1.1</c>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.OpenSession">
            <summary>
            Called when the client is initialized.
            Implementations should open a session to the server and return
            the native handle of that session.
            </summary>
            <returns>A handle to the opened session.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.EndSession(System.IntPtr)">
            <summary>
            Called when the client is disconnected, either explicitly or when
            it is destructed. This method is called only once at the end of the
            life time of this object. Implementations should close the handle
            returned from <see cref="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.OpenSession"/> which is passed as
            <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="sessionHandle">The handle to the session to close.</param>
            <returns><c>true</c> if <paramref name="sessionHandle"/>
            was successfully closed; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.CreateConnection(System.IntPtr,System.Uri)">
            <summary>
            Called when a non-pooled connection to a server needs to be set up.
            </summary>
            <param name="sessionHandle">
            The handle of the session for which a connection is to be set up.
            </param>
            <param name="uri">
            The URI (scheme, hostname, and port) of the server to connect to.
            </param>
            <returns>
            May not return <c>null</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.GetConnection(System.Uri)">
            <summary>
            Gets a <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection"/> for this Http client
            implementation which can be used to communicate with the server.
            Connections are pooled, which means that if a connection to the
            given <paramref name="uri"/> has previously
            been created, that connection is retrieved from the internal pool
            and returned. Use the <see cref="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.IsConnected"/>
            property to detect whether or not the retrieved connection is active.
            New connections will be connected (made active) before they are
            returned.
            </summary>
            <param name="uri">The URI of the web server. If the URI targets a resource on a server,
            it will automatically be cropped to only contain the host name and
            the port on which to connect to the server.</param>
            <returns>
            A <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection"/> to the server.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="uri"/> is null.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient.ToString">
            <summary>
            Gets a string representation of this client including a series
            of identifiers for e.g. the running assembly version and the 
            .NET CLR version.
            </summary>
            
            <returns>
            A non-empty string containing the identification
            string for this client. This string can be used together with the
            HTTP User-Agent header to identify this client to the web server.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection">
            <summary>
            Representation of a connection for a <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.FinalizerLoggingEnabled">
            <summary>
            Finalizer logging is enabled.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.UnsafeHandle">
            <summary>
            Gets the native handle associated with this connection.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.UnsafeContextPointer">
            <summary>
            Gets the cookie associated with this connection.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.IsConnected">
            <summary>
            Gets whether or not this connection is active.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.#ctor(System.IntPtr,System.Uri)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.Connect(System.IntPtr,System.String,System.Int16)">
            <summary>
            Creates a connection on the given session handle to the given 
            server at the given port.
            </summary>
            <param name="sessionHandle">
            The handle to the session on which the connection is to be
            established.
            </param>
            <param name="serverName">
            The name of the server (including the connection scheme) to connect
            to.
            </param>
            <param name="port">
            The port to connect to.
            </param>
            <returns>
            The native handle to the connection.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.Close(System.IntPtr)">
            <summary>
            Closes the given connection handle.
            </summary>
            <param name="connectionHandle">
            The native connection handle to close.
            </param>
            
            <exception>
            If the given connection cannot be closed.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection.Dispose">
            <summary>
            Disposes the connection and its resources.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest">
            <summary>
            Base implementation of a <see cref="T:System.Net.WebRequest"/> for native Http clients.
            Each concrete implementation should define a factory method which creates
            an instance of the appropriate <see cref="T:System.Net.WebResponse"/> class.
            </summary>
            
            <remarks>
            The current implementation does not have support for:
            <list type="bullet">
            <item>
            Pre-Authentication
            </item>
            <item>
            Asynchronous operations
            </item>
            <item>
            Full proxy support, that is, explicitly defining the proxy server. However,
            the credentials of the <see cref="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.Proxy"/> property are used for
            proxy authentication
            </item>
            <item>
            The <see cref="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.ConnectionGroupName"/> property
            </item>
            <item>
            the <see cref="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.UseDefaultCredentials"/> property
            </item>
            <item>
            the <see cref="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.CachePolicy"/> property
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.Log">
            <summary>The class logger.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.requestId">
            <summary>Uniq ID (used when logging).</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.contentLength">
            <summary>
            The content length of the request data. If, -1, the length of the request stream is used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.keepAlive">
            <summary>
            Determines if keep alive should be used for the request.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.isPrompting">
            <summary>
            Indicates if the request is currently executing a prompting operation.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.authenticationSchemes">
            <summary>
            Determines the authentication schemes for the remote server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.Timeout">
            <summary>
            Gets or sets the length of time (in milliseconds) before the request 
            times out.
            </summary>
            <value>
            The length of time, in milliseconds, until the request times out, or 
            the value <see cref="F:System.Threading.Timeout.Infinite"/> to 
            indicate that the request does not time out. Defaults to infinity.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.Credentials">
            <summary>
            Gets or sets the network credentials used for authenticating the 
            request with the Internet resource.
            </summary>
            <value>An <see cref="T:System.Net.ICredentials"/> containing the 
            authentication credentials associated with the request. 
            The default is null.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.Method">
            <summary>
            When overridden in a descendant class, gets or sets the protocol 
            method to use in this request.
            </summary>
            <value>The protocol method to use in this request. Defaults to GET.
            </value>
            <exception cref="T:System.NotSupportedException">
            If other methods other than OPTIONS, GET, HEAD, POST, PUT, DELETE and TRACE are used.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this property is set to null or an emtpy string.
            </exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.Headers">
            <summary>
            Gets or sets the collection of header name/value pairs associated 
            with this request.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The property is set to null.
            </exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.RequestUri">
            <summary>
            Gets the URI of the Internet resource associated with the request.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.PreAuthenticate">
            <summary>
            Gets or sets whether to pre-authenticate the request. 
            Defaults to <c>true</c>, meaning that authentication information is sent with subsequent requests without waiting to be challenged by the server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.ContentType">
            <summary>
            Gets or sets the content type of the request data being sent.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.ContentLength">
            <summary>
            Gets or sets the content length (in bytes) of the request data being sent.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.ProtocolVersion">
            <summary>
            Gets or sets the protocol version to use.
            </summary>
            <value><c>1.1</c> or <c>1.0</c>. Defaults to <c>1.1</c>.</value>
            
            <exception cref="T:System.ArgumentException">
            An attempt is made to set this property to an empty string or null,
            or if the string is not one of the supported values.
            </exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.HttpClient">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient"/> associated with this request.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.RequestId">
            <summary>The logging id for the request.</summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.Proxy">
            <summary>
            Gets or sets the network proxy to use to access this Internet resource.
            </summary>
            <value>
            The <see cref="T:System.Net.IWebProxy"/> to use to access the Internet resource.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.ContentEncoding">
            <summary>
            Gets the content encoding used for this request.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.ClientCertificates">
            <summary>
            Gets or sets the collection of security certificates that are 
            associated with this request.
            </summary>
            <value>
            The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> that contains the 
            security certificates associated with this request.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is null.
            </exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.KeepAlive">
            <summary>
            Gets or sets a value determining if keep alive should be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.IsPromting">
            <summary>
            Gets a value indicating whether the request is involved in a 
            propting operation, i.e requiring user input.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.ConnectionGroupName">
            <summary>
            Gets or sets the name of the connection group for the request.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.UseDefaultCredentials">
            <summary>
            Gets or sets <see cref="T:System.Boolean"/> value that controls whether 
            <see cref="P:System.Net.CredentialCache.DefaultCredentials"/> are sent with requests.
            </summary>
            <value>true if the default credentials are used; otherwise false. 
            The default value is <c>true</c>.</value>
            <remarks>
            If this property is set to <c>false</c>, the default credentials of
            the current user account will only be sent to local and trusted
            sites; otherwise it is used for all communication. Note that this
            only applies to the NTLM and the Negotiate authentication protocols.
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.CachePolicy">
            <summary>
            Gets or sets the cache policy for this request.
            </summary>
            
            <exception cref="T:System.NotSupportedException">
            An attempt is made to get or set the property.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.#ctor(Spotfire.Dxp.Framework.HttpClient.NativeHttpClient,System.Uri)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest"/>.
            </summary>
            <param name="httpClient">The http client.</param>
            <param name="uri">The Internet resource to connect to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.#ctor(Spotfire.Dxp.Framework.HttpClient.NativeHttpClient,System.String)">
            <summary>
            Initializes a new instance of type <see cref="T:System.Net.HttpWebRequest"/>.
            </summary>
            <param name="httpClient">The http client.</param>
            <param name="uri">String representation of the Internet resource to 
            connect to.</param>
            <exception cref="T:System.UriFormatException">
            If <paramref name="uri"/> is malformed.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.GetResponse">
            <summary>Opens a connection to the defined URI and returns a response to this request.
            It also sets the cookies on the request and picks them up from the response.</summary>
            <returns>A <see cref="T:System.Net.WebResponse"/> containing the response to the Internet request.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.GetRequestStream">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> for writing data to the 
            Internet resource.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.BuildHeaderRepresentation">
            <summary>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.GetCachePolicyFlags">
            <summary>
            Returns an integer representing the flags to use when creaing the
            underlying request such that the caching policy reflects the one
            specified by <see cref="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.CachePolicy"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.StartPrompt">
            <summary>
            Called when a prompting operation is started.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.EndPrompt">
            <summary>
            Called when a prompting operations has finished.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.GetInnerRequestStream">
            <summary>
            Returns the inner request stream.
            </summary>
            <returns>The inner request stream.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.AuthenticationSchemes">
            <summary>
            Gets or sets a value determining the authentication scheme for the remote server.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.GetResponseCore">
            <summary>
            Factory method for <see cref="T:System.Net.WebResponse"/> implementations.
            </summary>
            <returns>
            A new instance of the concrete implementation of the response
            associated with this request.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.TranslateCachePolicy(System.Net.Cache.RequestCacheLevel)">
            <summary>
            Implementations of this method should map the members of the
            <see cref="T:System.Net.Cache.RequestCacheLevel"/> enum to flags that can be sent
            to the underlying library when opening a request.
            </summary>
            <param name="cacheLevel">The cache level to translate.</param>
            <returns>
            An integer flag that can be used when opening a request.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.TryGetCookies(System.String@)">
            <summary>
            Gets the cookies associated with this request given
            that the underlying implementation allows reading the cookies
            due to technical reasons or how the specification 
            allows this (e.g HttpOnly cookies)
            </summary>
            <param name="cookieString">The cookies represented as a string.</param>
            <returns>True if reading the cookies associated with this request
            was successful; otherwise false.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.ExcludeHttpOnlyCookies">
            <summary>
            Gets a value indicating whether http only cookies should be part of 
            of the request. This typically relates to the WinInet implementation
            where HttpOnly cookies are handled automatically.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebRequest.SetRequestCookies">
            <summary>
            Sets requests applicable cookies if needed.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse">
            <summary>
            <para>
            Implementation of a <see cref="T:System.Net.WebResponse"/> for native Http Clients. 
            This base class implements common network
            communication routines and defines a number of slot methods according to 
            the template method design pattern that subclasses must implement in 
            order to make library specific calls necessary to perform the actual
            communication.
            </para>
            <para>
            The core implementation and the behavior of this response class attempts
            to mimic the behavior of the <see cref="T:System.Net.HttpWebResponse"/> class to
            the extent possible.
            </para>
            </summary>
            
            <remarks>
            Implementations of this class should under no circumstance store the
            handles passed into the slot methods as they can change over time.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.FinalizerLoggingEnabled">
            <summary>
            Finalizer logging is enabled.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.keepResponseStreamOpen">
            <summary>
            Determines if the response stream should be kept open after closing the response.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.responseUri">
            <summary>
            The response URI
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.lastStatusCode">
            <summary>
            The status code of the last requests when more than 1 are sent,
            for example for 401, 407, 302, etc.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ReadBufferSize">
            <summary>
            Gets the the default size of the response read buffer in bytes.
            </summary>
            <value>
            The default size of the response read buffer in bytes. Defaults to
            16 KB.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.PostBufferSize">
            <summary>
            Gets the the default size of the request post buffer in bytes.
            </summary>
            <value>
            The default size of the response read buffer in bytes. 
            Defaults to <see cref="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ReadBufferSize"/>.
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.MaxRetryAttempts">
            <summary>
            Gets the number of times to retry a request that has failed, for example
            due to invalid credentials.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ContentType">
            <summary>
            Gets or sets the content type of the data being received.
            </summary>
            <exception cref="T:System.NotSupportedException">
            When this property is set.
            </exception>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ContentLength">
            <summary>
            Gets or sets the content length of data being received.
            </summary>
            <exception cref="T:System.NotSupportedException">
            When this property is set.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.GetResponseStream">
            <summary>
            Returns the data stream from the Internet resource.
            </summary>
            <returns>
            An instance of the <see cref="T:System.IO.Stream"/> class for reading 
            data from the Internet resource.
            </returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ResponseUri">
            <summary>
            Gets the URI of the Internet resource that actually responded to the 
            request.
            </summary>
            <value>
            An instance of the <see cref="T:System.Uri"/> class that contains the URI of 
            the Internet resource that actually responded to the request. 
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.StatusCode">
            <summary>
            Gets the status code of the response from the server.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.Cookies">
            <summary>
            Gets the the cookies that are associated with this response.
            </summary>
            <value>
            A <see cref="T:System.Net.CookieCollection"/> that contains the cookies that are 
            associated with this response. 
            </value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.Headers">
            <summary>
            Gets a collection of header name-value pairs associated with this 
            request.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.IsFromCache">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value that indicates whether this 
            response was obtained from the cache.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.IsMutuallyAuthenticated">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value that indicates whether mutual 
            authentication occurred.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.#ctor(Spotfire.Dxp.Framework.HttpClient.NativeHttpClient,Spotfire.Dxp.Framework.HttpClient.NativeWebRequest)">
            <summary>
            Initializes a new instance of class <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.Close">
            <summary>
            Closes the response stream and disposes its resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.Finalize">
            <summary>
            Releases unmanaged resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.OpenRequest(System.IntPtr,System.Uri,System.String,System.String,System.Int64,System.IntPtr,System.Boolean)">
            <summary>
            Opens a request in the underlying library to the given target.
            </summary>
            <param name="connectionHandle">
            The handle of the connection to submit the request on.
            </param>
            <param name="targetUri">
            The <see cref="T:System.Uri"/> of the resource to submit to.
            </param>
            <param name="connectionMethod">
            The connection verb, e.g. <c>POST</c> or <c>GET</c>.
            </param>
            <param name="protocol">
            The network communication protocol, e.g. <c>HTTP/1.1</c>.
            </param>
            <param name="contextPointer">
            The pointer to a application specific context used for async calls.
            </param>
            <param name="cachePolicyFlags">
            The flags representing the cache policy of the request to use when
            creating the request.
            </param>
            <param name="useKeepAlive">Determines if keep alive should be used for the request.</param>
            <returns>
            The native handle to the opened request.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.SetTimeout(System.IntPtr,System.Int32)">
            <summary>
            Sets the timeout of the request.
            </summary>
            <param name="requestHandle">
            The native handle of the opened request.
            </param>
            <param name="timeout">
            A non-negative value indicating the timout in milliseconds.
            </param>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            If the time-out value cannot be set.
            </exception>
            <remarks>
            It is recommended to set this value for the send, receive, and the
            connect timeout.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.SetProxy(System.IntPtr,System.Uri)">
            <summary>
            Sets the given proxy uri on the request with the given handle.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.SetClientCertificates(System.IntPtr,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Sets the given client certificates to the context of the request
            with the given handle.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.AddRequestHeader(System.IntPtr,System.String)">
            <summary>
            Adds the given header to the request with the given native handle.
            </summary>
            <param name="requestHandle">
            The native handle of the request to add the header to.
            </param>
            <param name="header">
            The header to add in the form <c>key: value</c>.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ReplaceRequestHeader(System.IntPtr,System.String)">
            <summary>
            Replace (or add if it doesn't exist) the given header to the request with the given native handle.
            </summary>
            <param name="requestHandle">
            The native handle of the request to replace the header to.
            </param>
            <param name="header">
            The header to replace in the form <c>key: value</c>.
            </param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.SendRequestCore(System.IntPtr,Spotfire.Dxp.Internal.Utilities.HybridStream)">
            <summary>
            Sends the contents of the given stream on the request identified by
            its native handle.
            </summary>
            <param name="requestHandle">
            The native handle of an opened request, on which to post the request.
            </param>
            <param name="requestStream">
            The stream, the contents of which are to be submitted.
            </param>
            
            <remarks>
            <paramref name="requestStream"/> must not be closed in the
            implementation of this method.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ShouldRetryRequestImmediately(System.Int32,System.Int32@)">
            <summary>
            Determines if the request should be resent immediately.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="tries">The number of tries so far.</param>
            <returns>A value indicating whether the request should be resent immediately.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ReadContentType(System.IntPtr)">
            <summary>
            Reads the content-type of the response from the submitted request
            identified by its native handle.
            </summary>
            <param name="requestHandle">
            The native handle of the request, the response of which to query.
            </param>
            <returns>
            A string representing the content-type. 
            The string may be null or empty.
            </returns>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            If the content-type cannot be read from the request.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.GetHttpStatusCode(System.IntPtr)">
            <summary>
            Reads the status code from the response.
            </summary>
            <param name="requestHandle">
            The native handle of the request, the response of which to read the
            status code from.
            </param>
            <returns>
            The status code as a member of the <see cref="T:System.Net.HttpStatusCode"/> enum.
            </returns>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            The status code cannot be read from the response.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ReadCookies(System.IntPtr)">
            <summary>
            Reads the cookies from the response and returns it in a container.
            </summary>
            <param name="requestHandle">
            The native handle of the request to read cookies from.
            </param>
            <returns>
            The string representation of the cookies in the server response; or
            an empty string if no cookies are obtained.
            </returns>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            If the cookies could not be read from the response.
            </exception>
            
            <remarks>
            If the cookies cannot be parsed from the response, they are ignored.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.GetResponseHeaders(System.IntPtr)">
            <summary>
            Reads the headers from the server response.
            </summary>
            <param name="requestHandle">
            The native handle of the request to parse the response headers from.
            </param>
            <returns>
            A non-null string containing the headers, delimited by <c>\0</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ReadResponseData(System.IntPtr,System.Byte[],System.Int32@)">
            <summary>
            Reads the contents of the server response into the given buffer.
            </summary>
            <param name="buffer">
            A non-null buffer with a predefined size to write into.
            </param>
            <param name="bytesRead">
            The number of bytes written to <paramref name="buffer"/>.
            </param>
            <param name="requestHandle">
            The native handle of the request, the response of which to read from
            and write into the <paramref name="buffer"/>.
            </param>
            <returns>
            <c>true</c> if the read operation succeeded; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.QueryAuthenticationSchemes(System.IntPtr)">
            <summary>
            Gets the schemes to use for authentication with the current server.
            </summary>
            <param name="requestHandle">
            The native handle of the request to query.
            </param>
            <returns>
            A non-null <see cref="T:Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo"/> defining the results of
            the query.
            </returns>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            If the information cannot be queried from the response.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.SetCredentials(System.IntPtr,Spotfire.Dxp.Framework.HttpClient.WebAuthenticationCredentials)">
            <summary>
            Sets the credentials to the request identified by the given handle.
            </summary>
            <param name="requestHandle">
            The native handle of the request to set the credentials to.
            </param>
            <param name="credentials">
            An object containing information regarding the credentials to set.
            </param>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            The credentials cannot be set to the given request.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.SetProxyCredentials(System.IntPtr,Spotfire.Dxp.Framework.HttpClient.WebAuthenticationCredentials)">
            <summary>
            Sets the credentials to the request identified by the given handle.
            </summary>
            <param name="requestHandle">
            The native handle of the request to set the credentials to.
            </param>
            <param name="credentials">
            An object containing information regarding the credentials to set.
            </param>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            The credentials cannot be set to the given request.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.SetAutoLoginPolicy(Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo,System.IntPtr)">
            <summary>Set the auto login information for the request. This is used to handle automatic login of NTLM/Kerberos.</summary>
            <param name="authenticationInfo">The authentication type.</param>
            <param name="requestHandle">The request handle.</param>
            <returns>
            If the function returns <c>true</c> the request handler is allowed to retry again after returning from this function.
            If the function returns <c>false</c> the request handler will not retry again and the request fails.
            The implementation should return <c>false</c> if there is no chance that further retry will succeed (and instead cause problems).
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.AcquireUserInput(System.IntPtr,System.Int32)">
            <summary>
            Prompts the user for additional information required to perform the
            request.
            </summary>
            <param name="requestHandle">
            The native handle of the request.
            </param>
            <param name="sendResult">
            The result of previous send operations.
            </param>
            <returns>
            <c>true</c> to force the request to be re-submitted; otherwise <c>false</c>.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            The Http Client associated with this response does not support
            user interfaces.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.HandleSendResult(System.IntPtr,System.Int64)">
            <summary>
            Implementations of this method can look at the error code returned
            from the submit operation and throw specific exceptions to inform
            external callers that the operation did not succeed.
            </summary>
            <param name="requestHandle"/>
            <param name="sendResult">
            A platform or library specific error code.
            </param>
            <returns>
            <c>true</c> to denote that the request must be re-submitted.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.CloseRequest(System.IntPtr)">
            <summary>
            Closes the request identified by the given handle.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.TryGetCookies(System.String@)">
            <summary>
            Gets the cookies associated with this request given
            that the underlying implementation allows reading the cookies
            due to technical reasons or how the specification 
            allows this (e.g HttpOnly cookies)
            </summary>
            <param name="cookieString">The cookies represented as a string.</param>
            <returns>True if reading the cookies associated with this request
            was successful; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ThrowSendFailureException">
            <summary>
            Call this method from the implementation of SendCore
            to inform callers that the send operation failed due to an internal,
            unrecoverable exception.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.Preauthenticate">
            <summary>
            Tries to perform pre-authentication. Returns true if the credentials was added to this request.
            </summary>
            <returns>true if the credentials was added to this request.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.SendRequest">
            <exception cref="T:System.Net.WebException">
            Request stream closed.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.GetResponseUri(System.IntPtr)">
            <summary>
            Gets the response URI, which might not be the same
            as the Request URI due to http re-directs.
            </summary>
            <param name="handle">The request handle.</param>
            <returns>The response URI; or null if it was not possible
            to retrieve the response URI.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.SetCookies(System.String)">
            <summary>
            Sets the cookies for the response from the Set-Cookie response header.
            </summary>
            <param name="setCookieString">The Set-Cookie response header.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.NativeWebResponse.ResponseStream.Read(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.Net.WebException">
            Could not read response data for request.
            </exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WebRequestFactory">
            <summary>
            Defines an API for creating web requests and controlling the behavior of <see cref="M:System.Net.WebRequest.Create(System.Uri)"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WebRequestFactory.CreateSpotfireWebRequest(System.Uri)">
            <summary>
            Creates a <see cref="T:System.Net.WebRequest"/> using the internal Spotfire HTTP client.
            </summary>
            <param name="uri">The URI for which to create the request.</param>
            <returns>A new <see cref="T:System.Net.WebRequest"/> for the specific <paramref name="uri"/>.</returns>
            <remarks>
            The returned <see cref="T:System.Net.WebRequest"/> may not be typecasted into a <see cref="T:System.Net.HttpWebRequest"/>.
            </remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WebRequestFactory.CreateHttpWebRequest(System.Uri)">
            <summary>
            Creates a <see cref="T:System.Net.HttpWebRequest"/> using the standard .NET HTTP client.
            </summary>
            <param name="uri">The URI for which to create the request.</param>
            <returns>A new <see cref="T:System.Net.HttpWebRequest"/> for the specific <paramref name="uri"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WebRequestFactory.RegisterSpotfireHost(System.Uri)">
            <summary>
            Registers the host part of the <paramref name="uri"/> so that subsequent usage of the same host
            via <see cref="M:System.Net.WebRequest.Create(System.Uri)"/> is done through the internal Spotfire client.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> for which to register the host.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WebRequestStream">
            <summary>
            A stream for web request bodies. Calling close only closes the stream for writing.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WebRequestStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WebRequestStream.Close">
            <summary>
            Closes the stream for writing.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.AddRequirements.AddIfNew">
            <summary>
            WINHTTP_ADDREQ_FLAG_ADD_IF_NEW - the header will only be added if it doesn't
            already exist
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.AddRequirements.Add">
            <summary>
            WINHTTP_ADDREQ_FLAG_ADD - if WINHTTP_ADDREQ_FLAG_REPLACE is set but the header is
            not found then if this flag is set, the header is added anyway, so long as
            there is a valid header-value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.AddRequirements.CoalesceWithComma">
            <summary>
            WINHTTP_ADDREQ_FLAG_COALESCE - coalesce headers with same name. e.g.
            "Accept: text/*" and "Accept: audio/*" with this flag results in a single
            header: "Accept: text/*, audio/*"
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.AddRequirements.Replace">
             <summary>
             WINHTTP_ADDREQ_FLAG_REPLACE - replaces the specified header. Only one header can
             be supplied in the buffer. If the header to be replaced is not the first
             in a list of headers with the same name, then the relative index should be
             supplied in the low 8 bits of the dwModifiers parameter. If the header-value
             part is missing, then the header is removed
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.SecureProtocols">
            <summary>
            WINHTTP_OPTION_SECURE_PROTOCOLS, <see cref="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Option.SecureProtocols"/>
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa384066(v=vs.85).aspx#WINHTTP_OPTION_SECURE_PROTOCOLS
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.SecureProtocols.Ssl2">
            <summary>
            WINHTTP_FLAG_SECURE_PROTOCOL_SSL2
            The SSL 2.0 protocol can be used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.SecureProtocols.Ssl3">
            <summary>
            WINHTTP_FLAG_SECURE_PROTOCOL_SSL3
            The SSL 3.0 protocol can be used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.SecureProtocols.Tls1">
            <summary>
            WINHTTP_FLAG_SECURE_PROTOCOL_TLS1
            The TLS 1.0 protocol can be used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.SecureProtocols.Tls1_1">
            <summary>
            WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1
            The TLS 1.1 protocol can be used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.SecureProtocols.Tls1_2">
            <summary>
            WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2
            The TLS 1.2 protocol can be used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.SecureProtocols.All">
            <summary>
            WINHTTP_FLAG_SECURE_PROTOCOL_ALL
            The Secure Sockets Layer (SSL) 2.0, SSL 3.0, and Transport Layer Security (TLS) 1.0 protocols can be used.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.SecureProtocols.Default">
            <summary>
            By default only SSL3 and TLS1 are enabled.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security">
            <summary>
            WINHTTP_OPTION_SECURITY_FLAGS, <see cref="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Option.SecurityFlags"/>
            From http://msdn.microsoft.com/en-us/library/windows/desktop/aa384066(v=vs.85).aspx#WINHTTP_OPTION_SECURITY_FLAGS
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security.SecurityFlagSecure">
            <summary>
            Uses secure transfers
            </summary>
            <remarks>Only to returned in a call to WinHttpQueryOption</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security.SecurityFlagStrengthWeak">
            <summary>
            Uses weak (40-bit) encryption
            </summary>
            <remarks>Only to returned in a call to WinHttpQueryOption</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security.SecurityFlagStrengthMedium">
            <summary>
            Uses medium (56-bit) encryption
            </summary>
            <remarks>Only to returned in a call to WinHttpQueryOption</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security.SecurityFlagStrengthStrong">
            <summary>
            Uses strong (128-bit) encryption
            </summary>
            <remarks>Only to returned in a call to WinHttpQueryOption</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security.IgnoreUnknownCa">
            <summary>
            SECURITY_FLAG_IGNORE_UNKNOWN_CA
            Allows an invalid certificate authority. If this flag is set, 
            the application does not receive a 
            WINHTTP_CALLBACK_STATUS_FLAG_CERT_INVALID_CA callback.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security.IgnoreCertDateInvalid">
            <summary>
            SECURITY_FLAG_IGNORE_CERT_DATE_INVALID
            Allows an invalid certificate date, that is, an expired or 
            not-yet-effective certificate. If this flag is set, the 
            application does not receive a 
            WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID callback.
            </summary>
            <remarks>expired X509 Cert</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security.IgnoreCertCnInvalid">
            <summary>
            SECURITY_FLAG_IGNORE_CERT_CN_INVALID
            Allows an invalid common name in a certificate; that is, 
            the server name specified by the application does not match 
            the common name in the certificate. If this flag is set, 
            the application does not receive a 
            WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID callback.
            </summary>
            <remarks>bad common name in X509 Cert</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.Security.IgnoreCertWrongUsage">
            <summary>
            SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE
            Allows the identity of a server to be established with a 
            non-server certificate (for example, a client certificate).
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient">
            <summary>
            An implementation of the <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient"/> that uses the
            Windows HTTP Services (WinHTTP) library.
            </summary>
            <remarks>
            The current implementation of the WinHttpClient only supports 
            synchronous web requests.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.clientCertificate">
            <summary>
            The client certificate
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.performHostNameValidation">
            <summary>
            Should host name validition be performed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.performCertificateChainValidation">
            <summary>
            Should certificate chain validation be performed.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.Identifier">
            <summary>
            The http client identifier, used in User-Agent http header.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.OpenSession">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.CreateConnection(System.IntPtr,System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.EndSession(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.ClientIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.IsInteractive">
            <summary>
            Gets whether or not this client allows user interfaces 
            (for example login dialogs) to be shown when necessary during network 
            communication.
            </summary>
            <value>Always returns <c>false</c>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.ClientCertificate">
            <summary>
            Gets or sets the certificate to use when authenticating with this
            client.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.PerformHostNameValidation">
            <summary>
            Gets or sets a value indication whether host name validition should be performed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.HttpDecodingEnabled">
            <summary>
            Gets a value indicating if http decoding (gzip, deflate) is enabled and can be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.PerformCertificateChainValidation">
            <summary>
            Gets or sets a value indication whether host name validition should be performed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.SetPerformHostNameValidation(System.Boolean)">
            <summary>
            Sets a value indicating whether host name validation should be 
            performed when connecting to the server.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.SetPerformCertificateChainValidation(System.Boolean)">
            <summary>
            Sets a value indicating whether certificate chain validation should be 
            performed when connecting to the server.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.CreateCore(System.Uri,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.GetWinHttpVersionString">
            <summary>
            Gets the win http version string.
            </summary>
            <returns>The win http version string.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient.WinHttpStatusCallback(System.IntPtr,System.IntPtr,Spotfire.Dxp.Framework.HttpClient.WinHttp.NativeMethods.CallbackStatus,System.IntPtr,System.Int32)">
            <summary>WinHttp calls back to this method when we get specific events/errors.</summary>
            <param name="internetHandle">The internet handle.</param>
            <param name="context">The context.</param>
            <param name="callbackStatus">The callback status..</param>
            <param name="statusInformation">The status information.</param>
            <param name="statusInformationLength">The status information object length.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpConnection">
            <summary>
            Implementation of <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection"/> for the
            <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpConnection.#ctor(System.IntPtr,System.Uri)">
            <summary>
            Initializes an instance of class <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpConnection"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpConnection.Connect(System.IntPtr,System.String,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpConnection.Close(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest">
            <summary>
            <see cref="T:System.Net.WebRequest"/> implementation for the
            <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest.#ctor(Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient,System.Uri)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest"/>.
            </summary>
            <param name="httpClient">The http client.</param>
            <param name="uri">The Internet resource to connect to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest.#ctor(Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpClient,System.String)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest"/>.
            </summary>
            <param name="httpClient">The http client.</param>
            <param name="uri">String representation of the Internet resource to 
            connect to.</param>
            
            <exception cref="T:System.UriFormatException">
            If <paramref name="uri"/> is malformed.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest.GetResponseCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest.TranslateCachePolicy(System.Net.Cache.RequestCacheLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest.TryGetCookies(System.String@)">
            <summary>
            Gets the cookies associated with this request given
            that the underlying implementation allows reading the cookies
            due to technical reasons or how the specification 
            allows this (e.g HttpOnly cookies)
            </summary>
            <param name="cookieString">The cookies represented as a string.</param>
            <returns>True if reading the cookies associated with this request
            was successful; otherwise false.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest.ExcludeHttpOnlyCookies">
            <summary>
            Gets a value indicating whether http only cookies should be part of 
            of the request. This typically relates to the WinInet implementation
            where HttpOnly cookies are handled automatically.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse">
            <summary>
            WinHTTP implementation of a <see cref="T:System.Net.WebResponse"/>.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.#ctor(Spotfire.Dxp.Framework.HttpClient.NativeHttpClient,Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebRequest)">
            <summary>
            Creates a new instance of class WinHttpWebResponse.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.TryGetCookies(System.String@)">
            <summary>
            Gets the cookies associated with this request given
            that the underlying implementation allows reading the cookies
            due to technical reasons or how the specification 
            allows this (e.g HttpOnly cookies)
            </summary>
            <param name="cookieString">The cookies represented as a string.</param>
            <returns>True if reading the cookies associated with this request
            was successful; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.GetResponseUri(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.OpenRequest(System.IntPtr,System.Uri,System.String,System.String,System.Int64,System.IntPtr,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.SetTimeout(System.IntPtr,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.SetProxy(System.IntPtr,System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.SetClientCertificates(System.IntPtr,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.AddRequestHeader(System.IntPtr,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.ReplaceRequestHeader(System.IntPtr,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.SendRequestCore(System.IntPtr,Spotfire.Dxp.Internal.Utilities.HybridStream)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.ShouldRetryRequestImmediately(System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.ReadContentType(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.GetHttpStatusCode(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.ReadCookies(System.IntPtr)">
            <summary>
            Gets the cookies read from the request.
            </summary>
            <returns>Any existing Set-Cookie header value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.GetResponseHeaders(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.ReadResponseData(System.IntPtr,System.Byte[],System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.QueryAuthenticationSchemes(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.SetCredentials(System.IntPtr,Spotfire.Dxp.Framework.HttpClient.WebAuthenticationCredentials)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.SetProxyCredentials(System.IntPtr,Spotfire.Dxp.Framework.HttpClient.WebAuthenticationCredentials)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.SetAutoLoginPolicy(Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo,System.IntPtr)">
             <summary>Enable negotiate outside the settings in internet options.
             By default AutoLogonPolicy is not allowed (except for 
             </summary>
             <param name="authenticationInfo">The authentication information.</param>
             <param name="requestHandle">The request handle.</param>
             <returns>If the function returns <c>true</c> the request handler is allowed to retry again after returning from this function.
             If the function returns <c>false</c> the request handler will not retry again and the request fails.
             The implementation should return false if there is no chance that further retry will succeed (and instead cause problems).
            
             In this case we always returns true and let the request retry.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.AcquireUserInput(System.IntPtr,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.HandleSendResult(System.IntPtr,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinHttp.WinHttpWebResponse.CloseRequest(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.CookieFlags.InternetCookieNone">
            <summary>No options.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.CookieFlags.InternetCookieHttpOnly">
            <summary>
            Enables the retrieval of cookies that are marked as "HTTPOnly".
            Do not use this flag if you expose a scriptable interface, because this has security implications.It is imperative that you use this flag only if you can guarantee that you will never expose the cookie to third-party code by way of an extensibility mechanism you provide.
            Version:  Requires Internet Explorer 8.0 or later.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.CookieFlags.InternetCookieThirdParty">
            <summary>
            Retrieves only third-party cookies if policy explicitly allows all cookies for the specified URL to be retrieved.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.CookieFlags.InternetFlagRestrictedZone">
            <summary>
            Retrieves only cookies that would be allowed if the specified URL were untrusted; that is, if it belonged to the URLZONE_UNTRUSTED zone.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.InternetCookieState.CookieStateUnknown">
            <summary>Reserved</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.InternetCookieState.CookieStateAccept">
            <summary>The cookies are accepted.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.InternetCookieState.CookieStatePrompt">
            <summary>The user is prompted to accept or deny the cookie.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.InternetCookieState.CookieStateLeash">
            <summary>Cookies are accepted only in the first-party context.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.InternetCookieState.CookieStateDowngrade">
            <summary>Cookies are accepted and become session cookies.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.InternetCookieState.CookieStateReject">
            <summary>The cookies are rejected.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.Query.WwwAuthenticate">
            <summary>The HTTP query WWW authenticate header (HTTP_QUERY_WWW_AUTHENTICATE).</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.Query.ProxyAuthenticate">
            <summary>The HTTP query proxy authenticate header (HTTP_QUERY_PROXY_AUTHENTICATE).</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.Query.HttpQueryCookie">
            <summary>
            HTTP_QUERY_COOKIE
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.Query.HttpQuerySetCookie">
            <summary>
            HTTP_QUERY_SET_COOKIE
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.AddRequirements.Add">
            <summary>
            HTTP_ADDREQ_FLAG_ADD - if HTTP_ADDREQ_FLAG_REPLACE is set but the header is
            not found then if this flag is set, the header is added anyway, so long as
            there is a valid header-value
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.AddRequirements.Replace">
            <summary>
            HTTP_ADDREQ_FLAG_REPLACE - replaces the specified header. Only one header can
            be supplied in the buffer. If the header to be replaced is not the first
            in a list of headers with the same name, then the relative index should be
            supplied in the low 8 bits of the dwModifiers parameter. If the header-value
            part is missing, then the header is removed
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.AddRequirements.Coalesce">
            <summary>
            HTTP_ADDREQ_FLAG_COALESCE - coalesce headers with same name. e.g.
            "Accept: text/*" and "Accept: audio/*" with this flag results in a single
            header: "Accept: text/*, audio/*"
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient">
            <summary>
            An implementation of the <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpClient"/> that uses the
            Windows Internet (WinINet) library.
            </summary>
            <remarks>
            The current implementation of the WinINetClient only support synchronous
            web requests.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.Log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.httpDecodingEnabled">
            <summary>
            Is http decoding (gzip, deflate) enabled and possible to use.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.winINetVersion">
            <summary>
            The WinInet version (to be used in the User-Agent http header).
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.#ctor">
            <summary>
            Initializes a new instance of class <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.TryGetCookies(System.String,System.String@)">
            <summary>
            Gets the cookies associated with this request given
            that the underlying implementation allows reading the cookies
            due to technical reasons or how the specification 
            allows this (e.g HttpOnly cookies)
            </summary>
            <param name="url"></param>
            <param name="cookieString">The cookies represented as a string.</param>
            <returns>True if reading the cookies associated with this request
            was successful; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.TryGetCookiesEx(System.String,System.String@)">
            <summary>Gets the cookies associated with the given url. Also reads HttpOnly cookies.</summary>
            <param name="url">The Url to read from.</param>
            <param name="cookieString">The cookies represented as a string.</param>
            <returns>True if reading the cookies associated with this request
            was successful; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.SetCookiesEx(System.String,System.Net.Cookie)">
            <summary>Sets the cookie.</summary>
            <param name="url">The Url for the cookie.</param>
            <param name="cookie">The cookie to set in WinInet.</param>
            <returns>True if the cookie was set.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.OpenSession">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.CreateConnection(System.IntPtr,System.Uri)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.HttpDecodingEnabled">
            <summary>
            Gets a value indicating if http decoding (gzip, deflate) is enabled and can be used.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.PerformHostNameValidation">
            <summary>
            Gets a value indicating whether host name validition should be performed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.PerformCertificateChainValidation">
            <summary>
            Gets a value indicating whether host name validition should be performed.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.EndSession(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.IsInteractive">
            <summary>
            Gets whether or not this client allows user interfaces 
            (for example login dialogs) to be shown when necessary during network 
            communication.
            </summary>
            <value>Always returns <c>true</c>.</value>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.ClientIdentifier">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.CreateCore(System.Uri,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.MaxHttpConnectionsHelper">
            <summary>
            Helper class for making sure that the TIBCO Spotfire application uses the 
            correct number of concurrent http connections (8) for accessing the Spotfire Server.
            </summary>
            <remarks>For more information see:
             http://support.microsoft.com/kb/282402, 
             http://support.microsoft.com/kb/320721,
             http://support.microsoft.com/kb/183110.
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.MaxHttpConnectionsHelper.NoOfHttpConnections">
            <summary>The maximum number of concurrent connections.</summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.MaxHttpConnectionsHelper.log">
            <summary>The logger for the class.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.MaxHttpConnectionsHelper.SetMaxConnections">
            <summary>Set the maximum number of concurrent connections for WinInet.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.MaxHttpConnectionsHelper.SetOptions(Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.Option,System.Int32)">
            <summary>Set an int option in WinInet.</summary>
            <param name="option">The Option to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient.MaxHttpConnectionsHelper.LogOptionsValue(Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.Option)">
            <summary>Log the value of an int option in WinInet.</summary>
            <param name="option">The option to log.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetConnection">
            <summary>
            Implementation of <see cref="T:Spotfire.Dxp.Framework.HttpClient.NativeHttpConnection"/> for the
            <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetConnection.#ctor(System.IntPtr,System.Uri)">
            <summary>
            Initializes an instance of class <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetConnection"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetConnection.Connect(System.IntPtr,System.String,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetConnection.Close(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest">
            <summary>
            <see cref="T:System.Net.WebRequest"/> implementation for the
            <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest.#ctor(Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient,System.Uri)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest"/>.
            </summary>
            <param name="httpClient">The http client.</param>
            <param name="uri">The Internet resource to connect to.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest.#ctor(Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetClient,System.String)">
            <summary>
            Initializes a new instance of type <see cref="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest"/>.
            </summary>
            <param name="httpClient">The http client.</param>
            <param name="uri">String representation of the Internet resource to 
            connect to.</param>
            
            <exception cref="T:System.UriFormatException">
            If <paramref name="uri"/> is malformed.
            </exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest.GetResponseCore">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest.TranslateCachePolicy(System.Net.Cache.RequestCacheLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest.TryGetCookies(System.String@)">
            <summary>
            Gets the cookies associated with this request given
            that the underlying implementation allows reading the cookies
            due to technical reasons or how the specification 
            allows this (e.g HttpOnly cookies)
            </summary>
            <param name="cookieString">The cookies represented as a string.</param>
            <returns>True if reading the cookies associated with this request
            was successful; otherwise false.</returns>
        </member>
        <member name="P:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest.ExcludeHttpOnlyCookies">
            <summary>
            Gets a value indicating whether http only cookies should be part of 
            of the request. This typically relates to the WinInet implementation
            where HttpOnly cookies are handled automatically.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse">
            <summary>
            WinINet implementation of a <see cref="T:System.Net.WebResponse"/>.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.#ctor(Spotfire.Dxp.Framework.HttpClient.NativeHttpClient,Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebRequest)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.TryGetCookiesEx(System.String,System.String@)">
            <summary>Gets the cookies for the current process from WinInet.</summary>
            <param name="uri">The uri to get cookies for.</param>
            <param name="cookieString">The cookies read</param>
            <returns>True if it succeeds to get cookies.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.ResetCookiesFromBrowserControl(System.String,System.String)">
            <summary>Reset the WinInet Session and reset the cookies.</summary>
            <param name="url">The Url to set cookies for.</param>
            <param name="cookieString">The cookie string.</param>
            <returns>If all the cookies was successfully set.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.SetCookiesEx(System.String,System.String)">
            <summary>Sets the cookies in WinInet.</summary>
            <param name="url">The Url to set cookies for.</param>
            <param name="cookieString">The cookie string.</param>
            <returns>If all the cookies was successfully set.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.TryGetCookies(System.String@)">
            <summary>
            Gets the cookies associated with this request given
            that the underlying implementation allows reading the cookies
            due to technical reasons or how the specification 
            allows this (e.g HttpOnly cookies)
            </summary>
            <param name="cookieString">The cookies represented as a string.</param>
            <returns>True if reading the cookies associated with this request
            was successful; otherwise false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.OpenRequest(System.IntPtr,System.Uri,System.String,System.String,System.Int64,System.IntPtr,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.SetTimeout(System.IntPtr,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.AddRequestHeader(System.IntPtr,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.ReplaceRequestHeader(System.IntPtr,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.SendRequestCore(System.IntPtr,Spotfire.Dxp.Internal.Utilities.HybridStream)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.ShouldRetryRequestImmediately(System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.ReadContentType(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.GetHttpStatusCode(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.ReadCookies(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.GetResponseUri(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.GetResponseHeaders(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.ReadResponseData(System.IntPtr,System.Byte[],System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.QueryAuthenticationSchemes(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.SetCredentials(System.IntPtr,Spotfire.Dxp.Framework.HttpClient.WebAuthenticationCredentials)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.SetProxyCredentials(System.IntPtr,Spotfire.Dxp.Framework.HttpClient.WebAuthenticationCredentials)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.SetAutoLoginPolicy(Spotfire.Dxp.Framework.HttpClient.AuthenticationInfo,System.IntPtr)">
             <summary>Set the auto login information for the request.
             This is used to handle automatic login of NTLM/Kerberos.
             Do nothing, but return that the client can retry if the user is among the trusted server.
             </summary>
             <param name="authenticationInfo">The authentication type.</param>
             <param name="requestHandle">The request handle.</param>
             <returns>If the function returns <c>true</c> the request handler is allowed to retry again after returning from this function.
             If the function returns <c>false</c> the request handler will not retry again and the request fails.
             The implementation should return false if there is no chance that further retry will succeed (and instead cause problems).
            
             In this case we must not return true and retry when using windows auth unless we do it on trusted servers.
             Otherwise we will leak windows credentials to external sites.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.AcquireUserInput(System.IntPtr,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.HandleSendResult(System.IntPtr,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.CloseRequest(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.HttpClient.WinINet.WinINetWebResponse.AppendOptionFlag(System.IntPtr,Spotfire.Dxp.Framework.HttpClient.WinINet.NativeMethods.Option,System.Int32)">
            <summary>Set an option (using OR of old value) on the request.</summary>
            <param name="requestHandle">The request handle.</param>
            <param name="option">The option to set.</param>
            <param name="flag">The flag to append/set.</param>
            <returns>If it was successful</returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.IDataCacheValueType">
            <summary>Interface required to be implemented for values that are to be cached in
            the DataCache.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.IDataCacheValueType.ByteSize">
            <summary>
            Gets the size in bytes of the instance without children.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.IDataCacheValueType.Immutable">
            <summary>
            Gets a value indicating whether the instance is immutable or not.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.IDataCacheValueType.SizeWithChildren">
            <summary>
            Gets the size in bytes of the instance including children.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.PathUtilities">
            <summary>
            This class contains methods to get the temporary folder and
            temporary file names. These methods should be favored before their
            corresponding build in .NET <see cref="T:System.IO.Path"/> equivalence. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.PathUtilities.GetTempPath">
            <summary>
            Returns the path of the temporary folder. 
            </summary>
            <returns>A <see cref="T:System.String"/> containing the path information 
            of a temporary directory.</returns>
            <remarks>This method guarantees that the folder corresponding to the
            returned folder name has been created.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Framework.PathUtilities.GetTempFileName(System.String)">
            <summary>
            Creates a uniquely named, zero-byte temporary file on disk and 
            returns the full path of that file. 
            </summary>
            <param name="prefix">A file name prefix.</param>
            <returns>A <see cref="T:System.String"/> containing the full path
            of the temporary file.</returns>
            <exception cref="T:System.IO.IOException">If an IO exception occurs.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Framework.PathUtilities.GetTempFileName">
            <summary>
            Creates a uniquely named, zero-byte temporary file on disk and 
            returns the full path of that file. 
            </summary>
            <returns>A <see cref="T:System.String"/> containing the full path
            of the temporary file.</returns>
            <exception cref="T:System.IO.IOException">If an IO exception occurs.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.Extensions">
            <summary>
            Class with extension methods for Services-related classes and interfaces.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.Extensions.GetService``1(System.IServiceProvider)">
            <summary>
            Convenience generic extension method that calls <see cref="M:System.IServiceProvider.GetService(System.Type)" /> and casts the result.
            </summary>
            <typeparam name="TService">The type of service object to get.</typeparam>
            <param name="provider">The service provider instance.</param>
            <returns>
            A service object of type <typeparamref name="TService" /> -or- null if there is no service object of type <typeparamref name="TService" />.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.Extensions.RequireService``1(System.IServiceProvider)">
            <summary>
            Gets the service of the specified type from the provider. Throws if the service cannot be found.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="provider">The service provider instance.</param>
            <returns>
            The service instance.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.IDisposableServiceForPublicServices">
            <summary>
            Marker interface for services that should be disposed. This class is needed because
            public services cannot inherit from the one in Internal since then third-party assemblies
            would need to include internal as well....
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.DedicatedThreadService">
             <summary>
             Base class for services which may only be accessed at a dedicated analysis application thread.
             <remarks>
             <para>
             In the forms client the actual thread that is considered as the application thread is either
             the forms UI thread or the progress thread. 
             </para>
            
             <para>
             In the thin client there is one application thread for each analysis application (that is one per document).
             The actual thread that is considered as the application thread for a particular document is 
             allocated from a pool of threads and may vary from time to time. If there is currently no need for a thread then
             there may be no actual thread that is allocated at the moment.
             </para>
             
             <para>
             An instance of type <seealso cref="T:Spotfire.Dxp.Framework.ApplicationModel.ApplicationThread"/> represents the thread that is currently allocated
             as the application thread.
             </para>
             </remarks>
             </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.DedicatedThreadService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.DedicatedThreadService"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.DedicatedThreadService.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ThreadSynchronisationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.DedicatedThreadService"/> class.
            </summary>
            <param name="threadSynchronisationToken">The token used to synchronize access to the data protected by this object.
            </param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.GlobalServicesAccess">
            <summary>Represents a global static access to the Global Services.
            </summary>
            <remarks>This is intended for use in APIs that have no natural access to the service provider.</remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Services.GlobalServicesAccess.globalServices">
            <summary>
            A reference to the global service provider.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Services.GlobalServicesAccess.GlobalServiceProvider">
            <summary>
            Gets or sets the GlobalServiceProvider.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.InitializationService">
            <summary>
            This service is used to register callbacks that should be called
            during application startup on a background thread.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Services.InitializationService.callbacks">
            <summary>
            The queue of callbacks to be invoked during startup.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.InitializationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.InitializationService"/> class.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.InitializationService.BackgroundInitilizationCallback">
            <summary>
            Delegate that should be performed on a background thread.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.InitializationService.RegisterBackgroundInitializationCallback(Spotfire.Dxp.Framework.Services.InitializationService.BackgroundInitilizationCallback)">
            <summary>
            Registers a callback for background initialization during startup.
            </summary>
            <param name="callback">The callback to be registered.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.InitializationService.OnClosedForModification">
            <summary>
            Performs the initialization of registered callbacks. Called when
            the service is closed for modification.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.InitializationService.PerformBackgroundInitialization">
            <summary>
            Performs background initialization of all registered callbacks.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.IServiceFactory">
            <summary>Extend this class to provide registration and initialization of
            services on the Global, User and Analysis levels.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.IServiceFactory.RegisterGlobalServices(Spotfire.Dxp.Framework.Services.GlobalServiceRegistry)">
            <summary>Registers global services.
            </summary>
            <param name="serviceRegistry">The service registry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.IServiceFactory.RegisterUserServices(Spotfire.Dxp.Framework.Services.UserServiceRegistry)">
            <summary>Registers user dependent services.
            </summary>
            <param name="serviceRegistry">The service registry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.IServiceFactory.RegisterAnalysisServices(Spotfire.Dxp.Framework.Services.AnalysisServiceRegistry)">
            <summary>Registers analysis dependent services.
            </summary>
            <param name="serviceRegistry">The service registry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.IServiceFactory.UseGlobalServices(Spotfire.Dxp.Framework.Services.GlobalServiceRegistry)">
            <summary>Should be called when all global services has been registered.
            Any of those services may be fetched through the 
            <paramref name="serviceProvider"/> in order to perform registrations or
            fetch values from the service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.IServiceFactory.UseUserServices(Spotfire.Dxp.Framework.Services.UserServiceRegistry)">
            <summary>Should be called when all global services has been registered.
            Any of those services may be fetched through the 
            <paramref name="serviceProvider"/> in order to perform registrations or
            fetch values from the service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.IServiceFactory.UseAnalysisServices(Spotfire.Dxp.Framework.Services.AnalysisServiceRegistry)">
            <summary>Should be called when all global services has been registered.
            Any of those services may be fetched through the 
            <paramref name="serviceProvider"/> in order to perform registrations or
            fetch values from the service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.ReadOnlyService">
            <summary>
            Base class for services that are read only in the following sense. The service is first created
            and the state of the service may be modified and read on the thread it was created on. The service
            is then closed for modification and the state of the service may be read from any thread but may not be modified.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Services.ReadOnlyService.creatingThread">
            <summary>
            The thread that the service was created on.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Services.ReadOnlyService.isOpenForModification">
            <summary>
            True if registration is allowed. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ReadOnlyService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.ReadOnlyService"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ReadOnlyService.CloseForModification">
            <summary>
            Close this service for modification.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ReadOnlyService.OnClosedForModification">
            <summary>
            Called when the service has been closed for modification.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ReadOnlyService.ValidateModificationAllowed">
            <summary>
            Validate that it is allowed to modify the state of the service.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ReadOnlyService.ValidateReadingAllowed">
            <summary>
            Validate that it is allowed to read the state of the service.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ReadOnlyService.ValidateOnCreatingThread">
            <summary>
            Validate that we are  executing on the thread that created the service.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.ServiceFactory">
            <summary>
            Registers and initializes the services in the service context. 
            Extend this class to provide registration and initialization of
            services on the Global, User and Analysis levels.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceFactory.RegisterGlobalServices(Spotfire.Dxp.Framework.Services.GlobalServiceRegistry)">
            <summary>Registers global services.
            </summary>
            <param name="serviceRegistry">The service registry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceFactory.RegisterUserServices(Spotfire.Dxp.Framework.Services.UserServiceRegistry)">
            <summary>Registers user dependent services.
            </summary>
            <param name="serviceRegistry">The service registry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceFactory.RegisterAnalysisServices(Spotfire.Dxp.Framework.Services.AnalysisServiceRegistry)">
            <summary>Registers analysis dependent services.
            </summary>
            <param name="serviceRegistry">The service registry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceFactory.RegisterAnalysisViewServices(Spotfire.Dxp.Framework.Services.AnalysisViewServiceRegistry)">
            <summary>Registers document view dependent services.
            </summary>
            <param name="serviceRegistry">The service registry.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceFactory.UseGlobalServices(Spotfire.Dxp.Framework.Services.GlobalServiceRegistry)">
            <summary>Should be called when all global services has been registered.
            Any of those services may be fetched through the 
            <paramref name="serviceProvider"/> in order to perform registrations or
            fetch values from the service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceFactory.UseUserServices(Spotfire.Dxp.Framework.Services.UserServiceRegistry)">
            <summary>Should be called when all global services has been registered.
            Any of those services may be fetched through the 
            <paramref name="serviceProvider"/> in order to perform registrations or
            fetch values from the service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceFactory.UseAnalysisServices(Spotfire.Dxp.Framework.Services.AnalysisServiceRegistry)">
            <summary>Should be called when all global services has been registered.
            Any of those services may be fetched through the 
            <paramref name="serviceProvider"/> in order to perform registrations or
            fetch values from the service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceFactory.UseAnalysisViewServices(Spotfire.Dxp.Framework.Services.AnalysisViewServiceRegistry)">
            <summary>Should be called when all document view services has been registered.
            Any of those services may be fetched through the 
            <paramref name="serviceProvider"/> in order to perform registrations or
            fetch values from the service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceFactory.RegisterTypeBindings(Spotfire.Dxp.Framework.Persistence.PersistenceManager)">
            <summary>
            Override this method to register type bindings used to resolve backward 
            compatibility deserialization issues for .dxp files.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.GlobalServiceRegistry.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService,Spotfire.Dxp.Framework.Services.IServiceFactory,Spotfire.Dxp.Framework.AddIn.AddInManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.GlobalServiceRegistry"/> class.
            </summary>
            <param name="connectivityService">The connectivity service.</param>
            <param name="serviceFactory">The service factory.</param>
            <param name="addinManager">The addin manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.GlobalServiceRegistry.#ctor(Spotfire.Dxp.Framework.ApplicationModel.ConnectivityService,Spotfire.Dxp.Framework.Services.IServiceFactory,Spotfire.Dxp.Framework.AddIn.AddInManager,Spotfire.Dxp.Framework.ApplicationModel.ModulesService)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.GlobalServiceRegistry" /> class.
            </summary>
            <param name="connectivityService">The connectivity service.</param>
            <param name="serviceFactory">The service factory.</param>
            <param name="addinManager">The addin manager.</param>
            <param name="modulesService">The modules service.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.UserServiceRegistry.#ctor(Spotfire.Dxp.Framework.Services.GlobalServiceRegistry,Spotfire.Dxp.Framework.Services.IServiceFactory,Spotfire.Dxp.Framework.AddIn.AddInManager,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.UserServiceRegistry"/> class.
            </summary>
            <param name="parentProvider">The parent provider.</param>
            <param name="serviceFactory">The service factory.</param>
            <param name="addinManager">The add-in manager.</param>
            <param name="sessionId">Optional session Id for debugging only.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.AnalysisServiceRegistry.#ctor(Spotfire.Dxp.Framework.Services.UserServiceRegistry,Spotfire.Dxp.Framework.Services.IServiceFactory,Spotfire.Dxp.Framework.AddIn.AddInManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.AnalysisServiceRegistry"/> class.
            </summary>
            <param name="parentProvider">The parent provider.</param>
            <param name="serviceFactory">The service factory.</param>
            <param name="addinManager">The addin manager.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.AnalysisViewServiceRegistry.#ctor(Spotfire.Dxp.Framework.Services.AnalysisServiceRegistry,Spotfire.Dxp.Framework.Services.IServiceFactory,Spotfire.Dxp.Framework.AddIn.AddInManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.AnalysisServiceRegistry" /> class.
            </summary>
            <param name="parentProvider">The parent provider.</param>
            <param name="serviceFactory">The service factory.</param>
            <param name="addinManager">The addin manager.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Services.ServiceRegistry">
            <summary>The ServiceRegistry class provides a Type to service object mapping.
            </summary>
            <remarks>
            Services registered in a ServiceRegistry using 
            <see cref="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.RegisterService(System.Type,System.Object)"/> can be looked up using
            <see cref="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.GetService(System.Type)"/>. 
            </remarks>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Services.ServiceRegistry.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Services.ServiceRegistry.parentProvider">
            <summary>
            The parent provider where we should look for services if not found on in this registry.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Services.ServiceRegistry.registry">
            <summary>
            Registry of registered services.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Services.ServiceRegistry.referenceCount">
            <summary>
            The service registry is reference counted since we don't want to dispose the registry
            until all background threads have released their snapshots.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Framework.Services.ServiceRegistry"/> class.
            </summary>
            <param name="parentProvider">The parent provider.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Spotfire.Dxp.Framework.Services.ServiceRegistry"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.IncreaseReferenceCount">
            <summary>
            Increases the reference count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.DecreaseReferenceCount">
            <summary>
            Increases the reference count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.Register``1(``0)">
            <summary>
            Registers the specified <paramref name="serviceImplementation"/> as a
            service of type <typeparamref name="T"/>.
            </summary>
            <param name="serviceImplementation">The service implementation.</param>
            <typeparam name="T">The type of the service.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.GetService(System.Type)">
            <summary>Gets the service object of the specified type.
            </summary>
            <remarks>If this ServiceRegistry does not have a registration for 
            <paramref name="serviceType"/>, the call is delegated to the 
            parent ServiceProvider, if one was supplied when this ServiceRegistry
            was constructed.
            </remarks>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type serviceType.-or- null if there is no service object of type serviceType.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.RegisterService(System.Type,System.Object)">
            <summary>Registers <paramref name="serviceImplementation"/> as a
            service of type <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType"></param>
            <param name="serviceImplementation"></param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.ShutDownAndDispose">
            <summary>Shuts down and dispose the service. Waits for other references to be released.</summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.InternalDispose(System.Boolean)">
            <summary>Dispose the service or decrease the reference count.</summary>
            <param name="forceShutDown">If set to <c>true</c> the service is disposed independent of no of references.</param>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Services.ServiceRegistry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.AboutCaptionFormat">
            <summary>
              Looks up a localized string similar to About {0}.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ActiveSpacesToolsDescription">
            <summary>
              Looks up a localized string similar to Load Data from ActiveSpaces..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ActiveSpacesToolsTitle">
            <summary>
              Looks up a localized string similar to Load Data from ActiveSpaces.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.CefRuntimeOptionsRestartRequired">
            <summary>
              Looks up a localized string similar to Restart Required.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.CefRuntimeOptionsSettingsChanged">
            <summary>
              Looks up a localized string similar to Settings have been changed by your server administrator. You must restart the application for the changes to take effect..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ColumnProperties">
            <summary>
              Looks up a localized string similar to Column &amp;properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.CommunityText">
            <summary>
              Looks up a localized string similar to TIBCO Community.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.CommunityUrl">
            <summary>
              Looks up a localized string similar to https://community.tibco.com/products/spotfire/.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.DataFunction">
            <summary>
              Looks up a localized string similar to Data Function.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.DataTablePropertiesRelations">
            <summary>
              Looks up a localized string similar to Relations.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.FileTypeDescription_DocumentFile">
            <summary>
              Looks up a localized string similar to Spotfire Analysis File.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HelpCompanyUrl">
            <summary>
              Looks up a localized string similar to spotfire.tibco.com.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HelpSupportFormat">
            <summary>
              Looks up a localized string similar to {0} &amp;Support.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HelpSupportUrl">
            <summary>
              Looks up a localized string similar to spotfire.tibco.com/support.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HtmlSanitationMessageHrefUriIsNotWellFormed">
            <summary>
              Looks up a localized string similar to Invalid {0} value &apos;{1}&apos;. The URI is not well formed..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HtmlSanitationMessageInvalidAttributeInElement">
            <summary>
              Looks up a localized string similar to The attribute &apos;{0}&apos; is not allowed in an element of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HtmlSanitationMessageInvalidAttributeValue">
            <summary>
              Looks up a localized string similar to Invalid {0} value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HtmlSanitationMessageInvalidElement">
            <summary>
              Looks up a localized string similar to The element &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HtmlSanitationMessageInvalidStyleDeclaration">
            <summary>
              Looks up a localized string similar to Invalid style declaration: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HtmlSanitationMessageInvalidStylePropertyName">
            <summary>
              Looks up a localized string similar to The style property name &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HtmlSanitationMessageInvalidStylePropertyValue">
            <summary>
              Looks up a localized string similar to The style property value &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HtmlSanitationMessageMalformed">
            <summary>
              Looks up a localized string similar to The html is malformed..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.HtmlSanitationMessageParseError">
            <summary>
              Looks up a localized string similar to Parse error: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LibraryDeletingItem">
            <summary>
              Looks up a localized string similar to Deleting item from library....
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LibraryFailedLoad">
            <summary>
              Looks up a localized string similar to Could not load the analysis {0}..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LibraryLoadingFromLibrary">
            <summary>
              Looks up a localized string similar to Loading item from library....
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LibraryPublishingItem">
            <summary>
              Looks up a localized string similar to Publishing item to library....
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LibraryRootTitle">
            <summary>
              Looks up a localized string similar to Library.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LibrarySavingItem">
            <summary>
              Looks up a localized string similar to Saving item in library....
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LibrarySearchingLibrary">
            <summary>
              Looks up a localized string similar to Searching the library..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureDescriptionAuthorCustomQuery">
            <summary>
              Looks up a localized string similar to Allows authoring of custom queries. To use the queries in the web clients, the user that saves the analysis to the library must save them as trusted and also be a member of the “Custom Query Author” group”..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameAdministrationAdministration">
            <summary>
              Looks up a localized string similar to Administration.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameAdministrationLibraryAdministration">
            <summary>
              Looks up a localized string similar to Library Administration.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameChangePassword">
            <summary>
              Looks up a localized string similar to Change Password.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameCollaborationPanel">
            <summary>
              Looks up a localized string similar to Web Page Panel.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameCustomQuery">
            <summary>
              Looks up a localized string similar to Custom Query in Connections.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameDataPanel">
            <summary>
              Looks up a localized string similar to Data Panel.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameDiagnostics">
            <summary>
              Looks up a localized string similar to Support Diagnostics and Logging.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameDiagnosticsApplicationProfiler">
            <summary>
              Looks up a localized string similar to Application Profiler.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameExportData">
            <summary>
              Looks up a localized string similar to Export Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameExportImage">
            <summary>
              Looks up a localized string similar to Export Image.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameExportToPdf">
            <summary>
              Looks up a localized string similar to Export to PDF.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameExportToPowerPoint">
            <summary>
              Looks up a localized string similar to Export to PowerPoint.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameInformationModelerAdministration">
            <summary>
              Looks up a localized string similar to Administration.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameInformationModelerPromptParameter">
            <summary>
              Looks up a localized string similar to Prompt for Parameter.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsAdvancedAggregationMethods">
            <summary>
              Looks up a localized string similar to Advanced Aggregation Methods.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsCreateBoxPlot">
            <summary>
              Looks up a localized string similar to Create Box Plot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsCurveDraw">
            <summary>
              Looks up a localized string similar to Curve Draw.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsCurveFromDataTable">
            <summary>
              Looks up a localized string similar to Curve from Data Table.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsCustomExpressions">
            <summary>
              Looks up a localized string similar to Custom Expressions.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsDataRelationships">
            <summary>
              Looks up a localized string similar to Data Relationships.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsExecuteDataFunctions">
            <summary>
              Looks up a localized string similar to Execute Data Functions.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsExponentialCurve">
            <summary>
              Looks up a localized string similar to Exponential Curve.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsGaussianCurve">
            <summary>
              Looks up a localized string similar to Gaussian Curve.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsHierarchicalClustering">
            <summary>
              Looks up a localized string similar to Hierarchical Clustering.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsKMeansClustering">
            <summary>
              Looks up a localized string similar to K-Means Clustering.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsLineSimilarity">
            <summary>
              Looks up a localized string similar to Line Similarity.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsLogarithmicCurve">
            <summary>
              Looks up a localized string similar to Logarithmic Curve.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsLogisticRegressionCurve">
            <summary>
              Looks up a localized string similar to Logistic Regression Curve.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsPolynomialCurve">
            <summary>
              Looks up a localized string similar to Polynomial Curve.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsPowerCurve">
            <summary>
              Looks up a localized string similar to Power Curve.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsPredictiveModeling">
            <summary>
              Looks up a localized string similar to Predictive Modeling.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsRegisterDataFunctions">
            <summary>
              Looks up a localized string similar to Register Data Functions.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsSetColumnFromName">
            <summary>
              Looks up a localized string similar to Set Column From Marked.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameMetricsStraightLine">
            <summary>
              Looks up a localized string similar to Straight Line.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameOpenFromLibrary">
            <summary>
              Looks up a localized string similar to Open from Library.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameOpenLinkedData">
            <summary>
              Looks up a localized string similar to Open Linked Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalActionLink">
            <summary>
              Looks up a localized string similar to Action Links.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalAdvancedDataProperties">
            <summary>
              Looks up a localized string similar to Advanced Data Properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalAdvancedDocumentProperties">
            <summary>
              Looks up a localized string similar to Advanced Document Properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalAdvancedFilterPanelProperties">
            <summary>
              Looks up a localized string similar to Advanced Filter Panel Properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalAdvancedVisualizationProperties">
            <summary>
              Looks up a localized string similar to Advanced Visualization Properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalBookmarkPanel">
            <summary>
              Looks up a localized string similar to Bookmarks.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalChangeColumnSelector">
            <summary>
              Looks up a localized string similar to Change Column Selector.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateAnnotations">
            <summary>
              Looks up a localized string similar to Create Annotations.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateBarChart">
            <summary>
              Looks up a localized string similar to Create Bar Chart.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateCollaborationConversations">
            <summary>
              Looks up a localized string similar to Create Collaboration Conversations.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateCombinationChart">
            <summary>
              Looks up a localized string similar to Create Combination Chart.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateCrossTable">
            <summary>
              Looks up a localized string similar to Create Cross Table.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateGraphicalTable">
            <summary>
              Looks up a localized string similar to Create Graphical Table.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateHeatMap">
            <summary>
              Looks up a localized string similar to Create Heat Map.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateInformationLink">
            <summary>
              Looks up a localized string similar to Create Information Link.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateKpiChart">
            <summary>
              Looks up a localized string similar to Create KPI Chart.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateLineChart">
            <summary>
              Looks up a localized string similar to Create Line Chart.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateMapChart">
            <summary>
              Looks up a localized string similar to Create Map Chart.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreatePage">
            <summary>
              Looks up a localized string similar to Create Page.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateParallelPlot">
            <summary>
              Looks up a localized string similar to Create Parallel Plot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreatePieChart">
            <summary>
              Looks up a localized string similar to Create Pie Chart.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateScatterPlot">
            <summary>
              Looks up a localized string similar to Create Scatter Plot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateScatterPlot3d">
            <summary>
              Looks up a localized string similar to Create 3D Scatter Plot.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateSummaryTable">
            <summary>
              Looks up a localized string similar to Create Summary Table.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateTable">
            <summary>
              Looks up a localized string similar to Create Table.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateTextArea">
            <summary>
              Looks up a localized string similar to Create Text Area.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateTreemap">
            <summary>
              Looks up a localized string similar to Create Treemap.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalCreateWaterfallChart">
            <summary>
              Looks up a localized string similar to Create Waterfall Chart.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalErrorBars">
            <summary>
              Looks up a localized string similar to Error Bars.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalExportability">
            <summary>
              Looks up a localized string similar to Change Exportability for Web Client Table Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalInsertNewColumn">
            <summary>
              Looks up a localized string similar to Insert New Column.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalInsertPredictedColumn">
            <summary>
              Looks up a localized string similar to Insert Predicted Columns.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalLoadDataOnDemand">
            <summary>
              Looks up a localized string similar to Load Data on Demand.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalManageDataTables">
            <summary>
              Looks up a localized string similar to Manage Data Tables.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalMergeData">
            <summary>
              Looks up a localized string similar to Merge Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalOpenCustomMadeFile">
            <summary>
              Looks up a localized string similar to Open Custom Made File.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalOpenDatabaseData">
            <summary>
              Looks up a localized string similar to Open Database Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalOpenEmptyData">
            <summary>
              Looks up a localized string similar to Open Empty Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalOpenFile">
            <summary>
              Looks up a localized string similar to Open File.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalOpenFileData">
            <summary>
              Looks up a localized string similar to Open File Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalOpenInformationLinks">
            <summary>
              Looks up a localized string similar to Open Information Links.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalOpenLibraryData">
            <summary>
              Looks up a localized string similar to Open Library Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalPrint">
            <summary>
              Looks up a localized string similar to Print.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalRecordTagPanel">
            <summary>
              Looks up a localized string similar to Tags.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalReplaceData">
            <summary>
              Looks up a localized string similar to Replace Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalReplaceValuesInVisualizations">
            <summary>
              Looks up a localized string similar to Replace Values in Visualizations.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalSimpleDataProperties">
            <summary>
              Looks up a localized string similar to Simple Data Properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalSimpleFilterPanelProperties">
            <summary>
              Looks up a localized string similar to Simple Filter Panel Properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalSimpleVisualizationProperties">
            <summary>
              Looks up a localized string similar to Simple Visualization Properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalUseCustomMadeTools">
            <summary>
              Looks up a localized string similar to Use Custom Made Tools.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameProfessionalViewCollaborationConversation">
            <summary>
              Looks up a localized string similar to View Collaboration Conversations.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameRecommendations">
            <summary>
              Looks up a localized string similar to Recommendations (before 10.0).
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameSaveSpotfireAnalysisFile">
            <summary>
              Looks up a localized string similar to Save Spotfire Analysis File.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameSaveToLibrary">
            <summary>
              Looks up a localized string similar to Save to Library.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameShowDoD">
            <summary>
              Looks up a localized string similar to Details on Demand.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameUndoRedo">
            <summary>
              Looks up a localized string similar to Undo/Redo.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameWebAuthor">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Business Author.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameWebAuthorOpenLibraryDataConnection">
            <summary>
              Looks up a localized string similar to Open Library Data Connection.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameWebPlayer">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Consumer.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameWebPlayerCreateMultipleViews">
            <summary>
              Looks up a localized string similar to Create Multiple Windows.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureNameWebPlayerExternalUpdate">
            <summary>
              Looks up a localized string similar to External updates of analysis files in Spotfire web clients.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeaturePrivateAndPublicBookmarks">
            <summary>
              Looks up a localized string similar to Capture Private and Public Bookmarks.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeaturePrivateBookmarks">
            <summary>
              Looks up a localized string similar to Capture Private Bookmarks.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureShareLink">
            <summary>
              Looks up a localized string similar to Share link.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseFeatureShareToTibbr">
            <summary>
              Looks up a localized string similar to Share to tibbr®.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameAdministration">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Administrator.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameClinical">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Clinical.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameConnectors">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Connectors.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameDiagnostics">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Diagnostics.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameEnterprisePlayer">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Enterprise Player.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameInformationModeler">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Information Modeler.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameLists">
            <summary>
              Looks up a localized string similar to Lists.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameMetrics">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Advanced Analytics.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameProfessional">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Analyst.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameWebAuthor">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Business Author.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LicenseNameWebPlayer">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire Consumer.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LoadFileFileCorrupt">
            <summary>
              Looks up a localized string similar to Unable to read the file {0}. The file is not a valid DXP file..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LoadFileIncompatibleDevelopmentVersion">
            <summary>
              Looks up a localized string similar to Unable to read the file {0}. The file was saved with a development version of TIBCO Spotfire ({1}) and contains features whose persistence format is not supported by this version..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LoadFileIncompatibleVersion">
            <summary>
              Looks up a localized string similar to Unable to read the file {0}. This version of TIBCO Spotfire cannot read files of version {1}..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LoadFileNoPermissions">
            <summary>
              Looks up a localized string similar to Unable to load the file. File access denied..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LoadFileOutOfMemory">
            <summary>
              Looks up a localized string similar to Unable to load the file. Not enough free memory..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LoadFileUnknownError">
            <summary>
              Looks up a localized string similar to Unable to read the file {0}..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LogoBannerImage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.LogoBannerImage_debug">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormAddContent">
            <summary>
              Looks up a localized string similar to Add....
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormBinnedColumn">
            <summary>
              Looks up a localized string similar to Add binned column....
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormCalculatedColumn">
            <summary>
              Looks up a localized string similar to Add calculated column....
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormDataMenu">
            <summary>
              Looks up a localized string similar to Data.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormDataTableProperties">
            <summary>
              Looks up a localized string similar to Data table properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormEditMenu">
            <summary>
              Looks up a localized string similar to Edit.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormFileMenu">
            <summary>
              Looks up a localized string similar to File.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormInsertHierarchy">
            <summary>
              Looks up a localized string similar to Add hierarchy....
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormInsertMenu">
            <summary>
              Looks up a localized string similar to Insert.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormInsertTransformations">
            <summary>
              Looks up a localized string similar to Transform data....
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormOptions">
            <summary>
              Looks up a localized string similar to Options.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormToolsMenu">
            <summary>
              Looks up a localized string similar to Tools.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormViewMenu">
            <summary>
              Looks up a localized string similar to View.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MainFormVisualizationsMenu">
            <summary>
              Looks up a localized string similar to Visualizations.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MarkedRows">
            <summary>
              Looks up a localized string similar to Marked rows.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.MarkedRowsFilterOut">
            <summary>
              Looks up a localized string similar to Filter out.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.OAuth2_Authentication_Failed">
            <summary>
              Looks up a localized string similar to Authentication was unsuccessful.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.OAuth2_Authentication_ProgressMessage">
            <summary>
              Looks up a localized string similar to Log in using the launched web browser window..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.OAuth2_Authentication_ResponseHtml">
             <summary>
               Looks up a localized string similar to &lt;!DOCTYPE html&gt;
            
            &lt;html&gt;
                &lt;head&gt;
                    &lt;title&gt;%%ProductCaption%%&lt;/title&gt;
            		&lt;style&gt;
            html {
            	 height: 100%;
            }
            body {
            	height: 100%;
            	background-color: white;
            	font-family: &quot;Helvetica Neue&quot;,Helvetica,sans-serif;
            }
            
            .LoggedOut {
            	margin: auto;
            	width: 500px;
            	text-align: center;
            	padding-top: 100px;
            	font-weight: normal;
            	background-image: url(data:image/png;base64,%%LogoBannerImage%%);
            	background-repeat: no-repeat;
            	background-attachment: scroll;
            	background-clip: border-box;
            	bac [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.OAuth2_Authentication_Successful">
            <summary>
              Looks up a localized string similar to Authentication successful.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.OAuth2_Authentication_WindowCanBeClosed">
            <summary>
              Looks up a localized string similar to This window can now be closed..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.OfflineStatusLabel">
            <summary>
              Looks up a localized string similar to Offline.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.OnlineStatusLabel">
            <summary>
              Looks up a localized string similar to Online.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.OnlineStatusToolTip">
             <summary>
               Looks up a localized string similar to Server: {0}
            Area: {1}
            User: {2}
            Client Version: {3}
            Server Version: {4}.
             </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.PersistenceManagerNoLicensedReaderFound">
            <summary>
              Looks up a localized string similar to The file &apos;{0}&apos; cannot be opened. It may be damaged or in an unknown format..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.PlotContextMenuAction">
            <summary>
              Looks up a localized string similar to Right-click.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.PreferencePropertyMaximumValueExceeded">
            <summary>
              Looks up a localized string similar to The value must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.PreferencePropertyMinimumValueExceeded">
            <summary>
              Looks up a localized string similar to The value must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProductCaption">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProductCaptionWeb">
            <summary>
              Looks up a localized string similar to TIBCO Spotfire.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.Progress_Configure">
            <summary>
              Looks up a localized string similar to {0} steps completed..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.Progress_LibraryUploadAttachmentDetail">
            <summary>
              Looks up a localized string similar to {0} done.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.Progress_UnzippingEmbeddedResource">
            <summary>
              Looks up a localized string similar to {0} out of {1}..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.Progress_UnzippingEmbeddedResources">
            <summary>
              Looks up a localized string similar to  {0} entries out of {1} completed..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.Progress_ZippingEmbeddedResource">
            <summary>
              Looks up a localized string similar to {0} compressed..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.Progress_ZippingEmbeddedResources">
            <summary>
              Looks up a localized string similar to {0} entries out of {1} completed..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressDescription_SavingFile">
            <summary>
              Looks up a localized string similar to Saving &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_Configure">
            <summary>
              Looks up a localized string similar to Configuring document.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_DeserializingDocument">
            <summary>
              Looks up a localized string similar to Loading document.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_ResolveCompatibility">
            <summary>
              Looks up a localized string similar to Handling compatibility.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_SaveFile">
            <summary>
              Looks up a localized string similar to Save File.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_SerializingDocument">
            <summary>
              Looks up a localized string similar to Saving document settings.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_SerializingDocument_CompatibilityVersion">
            <summary>
              Looks up a localized string similar to Saving document settings compatible with version {0}..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_UnzippingEmbeddedResource">
            <summary>
              Looks up a localized string similar to Unpacking compressed data..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_UnzippingEmbeddedResources">
            <summary>
              Looks up a localized string similar to Unpacking compressed data..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_ZippingEmbeddedResource">
            <summary>
              Looks up a localized string similar to Compressing data..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.ProgressTitle_ZippingEmbeddedResources">
            <summary>
              Looks up a localized string similar to Compressing data..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.spotfire_logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.spotfire_logo_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.TagPanelMenuText">
            <summary>
              Looks up a localized string similar to Ta&amp;gs.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.TIBCOSpotfireLogo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.TIBCOSpotfireLogo_debug">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.VisualizationProperties">
            <summary>
              Looks up a localized string similar to Visualization properties.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.WebPlayerLinkInvalid">
            <summary>
              Looks up a localized string similar to The URL &apos;{0}&apos; is not valid..
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.WelcomePageIntroButtonText">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Properties.Resources.WelcomePageIntroButtonUrl">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.Rss">
            <remarks/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Rss.Xml.Rss.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Rss.channel">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Rss.Any">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Rss.version">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Rss.AnyAttr">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.RssChannel">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssChannel.Items">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssChannel.ItemsElementName">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssChannel.item">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssChannel.Any">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssChannel.AnyAttr">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.RssCategory">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssCategory.domain">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssCategory.Value">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.RssItemSource">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItemSource.url">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItemSource.Value">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.RssItemGuid">
            <remarks/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Rss.Xml.RssItemGuid.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItemGuid.isPermaLink">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItemGuid.Value">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.RssItemEnclosure">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItemEnclosure.url">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItemEnclosure.length">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItemEnclosure.type">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItemEnclosure.Value">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.RssItem">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItem.Items">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItem.ItemsElementName">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.RssItem.Any">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.RssItem.AnyAttr">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.author">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.category">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.comments">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.description">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.enclosure">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.guid">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.link">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.pubDate">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.source">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType1.title">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.SkipDaysList">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.SkipDaysList.day">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.SkipDay">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.SkipDay.Monday">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.SkipDay.Tuesday">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.SkipDay.Wednesday">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.SkipDay.Thursday">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.SkipDay.Friday">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.SkipDay.Saturday">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.SkipDay.Sunday">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.SkipHoursList">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.SkipHoursList.hour">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.TextInput">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.TextInput.title">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.TextInput.description">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.TextInput.name">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.TextInput.link">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.Image">
            <remarks/>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Rss.Xml.Image.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Image.url">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Image.title">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Image.link">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Image.width">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Image.height">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Image.description">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.Cloud">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Cloud.domain">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Cloud.port">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Cloud.path">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Cloud.registerProcedure">
            <remarks/>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.Xml.Cloud.protocol">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.CloudProtocol">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.CloudProtocol.xmlrpc">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.CloudProtocol.httppost">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.CloudProtocol.soap">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.category">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.cloud">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.copyright">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.description">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.docs">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.generator">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.image">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.language">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.lastBuildDate">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.link">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.managingEditor">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.pubDate">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.skipDays">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.skipHours">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.textInput">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.title">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.ttl">
            <remarks/>
        </member>
        <member name="F:Spotfire.Dxp.Framework.Rss.Xml.ItemsChoiceType.webMaster">
            <remarks/>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.RssChannel">
            <summary>
            An RSS channel representation.
            </summary>
            <remarks>
            An RssChannel object is created using the static <see cref="M:Spotfire.Dxp.Framework.Rss.RssChannel.Open(System.Uri)"/> 
            method.
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssChannel.Title">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssChannel.Description">
            <summary>
            Gets the description of the channel.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssChannel.Items">
            <summary>
            Gets an object which can be used to enumerate the items made 
            available through this channel.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssChannel.Link">
            <summary>
            Gets the link of the RSS channel as defined in the feed.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssChannel.SourceLink">
            <summary>
            Gets the link from which this channel was created.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Rss.RssChannel.Open(System.Uri)">
            <summary>
            Opens the channel at the given URL, downloads the contents of the
            file, parses the content and deserializes to .NET types, and returns
            a wrapper object of type <see cref="T:Spotfire.Dxp.Framework.Rss.RssChannel"/>.
            </summary>
            
            <remarks>
            <paramref name="url"/> must refer to a valid RSS 2.0 provider.
            </remarks>
            
            <param name="url">
            a non-null URL pointing to the RSS channel to open.
            </param>
            
            <returns>
            The wrapped RSS channel.
            </returns>
            
            <exception cref="T:System.Net.WebException">
            <paramref name="url"/> is invalid or
            the resource at <paramref name="url"/> cannot be accessed or downloaded.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            the resource at <paramref name="url"/> does not comply to the 
            RSS 2.0 schema.
            </exception>
        </member>
        <member name="T:Spotfire.Dxp.Framework.Rss.RssItem">
            <summary>
            Representation of a news item in an <see cref="T:Spotfire.Dxp.Framework.Rss.RssChannel"/>.
            An RssItem always has either a title or a description that describes
            it.
            </summary>
            <remarks>
            Objects of class RssItem should not be created manually. Instead, use
            an <see cref="T:Spotfire.Dxp.Framework.Rss.RssChannel"/> to generate such objects.
            </remarks>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssItem.Id">
            <summary>
            Gets a globally unique identifier of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssItem.Title">
            <summary>
            Gets the title of this item. Note that the title may be null.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssItem.Description">
            <summary>
            Gets the description of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssItem.PublicationDate">
            <summary>
            Gets the publication date of this item.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Framework.Rss.RssItem.Link">
            <summary>
            Gets the link referred to by this item.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Rss.RssItem.#ctor(Spotfire.Dxp.Framework.Rss.Xml.RssItem,System.Int32)">
            <summary>
            Creates a new instance of class RssItem.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Framework.Rss.RssItem.CompareTo(Spotfire.Dxp.Framework.Rss.RssItem)">
            <summary>
            Compares two RSS items based on their publication date. Newer
            items are ordered before later ones. For items without dates, their
            order (relative to other items without date) in the channel is 
            preserved.
            </summary>
        </member>
    </members>
</doc>
