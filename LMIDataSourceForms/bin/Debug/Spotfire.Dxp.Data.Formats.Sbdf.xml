<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spotfire.Dxp.Data.Formats.Sbdf</name>
    </assembly>
    <members>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter">
            <summary>
            Static class that contains methods to convert from supported data types/arrays to byte[]
            and back from byte[] to data types/arrays.
            <para>
            The binary representation for all data formats is little endian
            </para>
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayInt(System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Converts one int-value to byte[].
            </summary>
            <param name="value">The int-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayUInt(System.UInt32,System.Byte[],System.Int32@)">
            <summary>
            Converts one int-value to byte[].
            </summary>
            <param name="value">The int-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayUShort(System.UInt16,System.Byte[],System.Int32@)">
            <summary>
            Converts one ushort-value to byte[].
            </summary>
            <param name="value">The ushort-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayBool(System.Boolean,System.Byte[],System.Int32@)">
            <summary>
            Converts one bool-value to byte[].
            </summary>
            <param name="value">The bool-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayLong(System.Int64,System.Byte[],System.Int32@)">
            <summary>
            Converts one long-value to byte[].
            </summary>
            <param name="value">The long-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayFloat(System.Single,System.Byte[],System.Int32@)">
            <summary>
            Converts one float-value to byte[].
            </summary>
            <param name="value">The float-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayDouble(System.Double,System.Byte[],System.Int32@)">
            <summary>
            Converts one double-value to byte[].
            </summary>
            <param name="value">The double-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayDateTime(System.DateTime,System.Byte[],System.Int32@)">
            <summary>
            Converts one DateTime-value to byte[].
            </summary>
            <param name="value">The DateTime-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayTimeSpan(System.TimeSpan,System.Byte[],System.Int32@)">
            <summary>
            Converts one TimeSpan-value to byte[].
            </summary>
            <param name="value">The DateTime-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArrayDecimal(System.Decimal,System.Byte[],System.Int32@)">
            <summary>
            Converts one decimal-value to byte[].
            </summary>
            <param name="value">The decimal-value that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.Int32[],System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Converts from int[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The integers that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
            <param name="actualCount">The actual count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.UInt32[],System.Byte[],System.Int32@)">
            <summary>
            Converts from uint[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The integers that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.UInt16[],System.Byte[],System.Int32@)">
            <summary>
            Converts from ushort[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The ushort integers that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.Int64[],System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Converts from long[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The long integers that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
            <param name="actualCount">The actual count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.Boolean[],System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Converts from bool[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The booleans that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
            <param name="actualCount">The actual count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.Single[],System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Converts from float[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The floats that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
            <param name="actualCount">The actual count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.Double[],System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Converts from double[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The doubles that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
            <param name="actualCount">The actual count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.DateTime[],System.Byte[],System.Int32@)">
            <summary>
            Converts from DateTime[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The DateTime's that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.TimeSpan[],System.Byte[],System.Int32@)">
            <summary>
            Converts from TimeSpan[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The TimeSpan's that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.Decimal[],System.Byte[],System.Int32@)">
            <summary>
            Converts from decimal[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The decimals that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.Char[],System.Byte[],System.Int32@)">
            <summary>
            Converts from char[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The chars that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.String[],System.Byte[],System.Int32@)">
            <summary>
            Converts from string[] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The strings that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.ToByteArray(System.Byte[][],System.Byte[],System.Int32@)">
            <summary>
            Converts from byte[][] to byte[].
            The size of <c>array</c> determines how many elements that are converted.
            </summary>
            <param name="array">The byte[][] that shall be converted</param>
            <param name="dest">Destination array. This must be large enough to store the bytes.</param>
            <param name="index">The start index in <c>dest</c>where the bytes shall be stored.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Converts from byte[] to a single int-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.UInt32@,System.Int32@)">
            <summary>
            Converts from byte[] to a single unsigned int-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.UInt16@,System.Int32@)">
            <summary>
            Converts from byte[] to a single ushort-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Boolean@,System.Int32@)">
            <summary>
            Converts from byte[] to a single bool-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Int64@,System.Int32@)">
            <summary>
            Converts from byte[] to a single long-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Single@,System.Int32@)">
            <summary>
            Converts from byte[] to a single float-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Double@,System.Int32@)">
            <summary>
            Converts from byte[] to a single double-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.DateTime@,System.Int32@)">
            <summary>
            Converts from byte[] to a single DateTime-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.TimeSpan@,System.Int32@)">
            <summary>
            Converts from byte[] to a single TimeSpan-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Decimal@,System.Int32@)">
            <summary>
            Converts from byte[] to a single decimal-value.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="value">Variable that is to receive the converted value.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.String@,System.Int32,System.Int32@)">
            <summary>
            Converts from byte[] to a single string.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Variable that is to receive the converted value.</param>
            <param name="length">The length of the string to convert.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Byte[]@,System.Int32,System.Int32@)">
            <summary>
            Copies bytes from a position in one byte[] to the start of another byte[]
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Variable that is to receive the converted value.</param>
            <param name="length">The length of the string to convert.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Int32[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of integers.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.UInt32[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of unsigned integers.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.UInt16[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of unsigned short integers.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Int64[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of long integers.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Boolean[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of booleans.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Single[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of floats.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Double[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of doubles.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.DateTime[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of DateTime's.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.TimeSpan[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of TimeSpan's.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Decimal[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of decimals.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Char[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of characters.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.String[],System.Int32@)">
            <summary>
            Converts from byte[] to an array of strings.
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">Array that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FromByteArray(System.Byte[],System.Byte[][],System.Int32@)">
            <summary>
            Converts from byte[] to byte[][].
            The length of <c>dest</c> determines how many bytes that are converted.
            <c>bytes</c> is supposed to be large enough to hold all values needed.
            </summary>
            <param name="bytes">Source byte array.</param>
            <param name="dest">byte[][] that is to receive the converted bytes.</param>
            <param name="index">The start index in <c>bytes</c>where the bytes shall be retrieved.
            When the method returns <c>index</c> points to the first element after the converted.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FloatToInt32Bits(System.Single)">
            <summary>
            Converts a floating point number to a 32 bit signed integer. Implemented here
            as there is no FloatToInt32Bits on BitConverter
            </summary>
            <param name="value">A float value to convert.</param>
            <returns>Integer with the same bit pattern as the float.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.Int32ToFloatBits(System.Int32)">
            <summary>
            Converts a 32 bit signed integer to a floating point number. Implemented here
            as there is no FloatToInt32Bits on BitConverter
            </summary>
            <param name="value">Any 32 bit integer</param>
            <returns>Float with the same bit pattern as the integer.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FloatIntegerUnion">
            <summary>
            Simple struct used to convert between int and float.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FloatIntegerUnion.FloatValue">
            <summary>
            The float value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.ByteArrayConverter.FloatIntegerUnion.IntegerValue">
            <summary>
            The integer value
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewStatus">
            <summary>
            The review status.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewStatus.Approved">
            <summary>
            Approved status.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewStatus.PendingSpecification">
            <summary>
            This member requires API scenarios and technical design specification.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewStatus.Action">
            <summary>
            See comment for an action to take on this member.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewStatus.Investigate">
            <summary>
            An action point for the Architecture team. See comment for further information.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewStatus.ImproveDocumentation">
            <summary>
            More documentation needed.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewAttribute">
            <summary>
            Used by the architecture team when reviewing the public API.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewAttribute.comment">
            <summary>
            The comment.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewAttribute.status">
            <summary>
            The status.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewAttribute.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewAttribute"/> class.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewAttribute.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewAttribute"/> class.
            </summary>
            <param name="status">The status.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewAttribute.Comment">
            <summary>
            Gets the comment.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiReviewAttribute.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiVersionAttribute">
            <summary>
            This attribute should be applied to all classes, interfaces and members visible in the public API. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiVersionAttribute.version">
            <summary>
            The version
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiVersionAttribute"/> class.
            </summary>
            <param name="version">The api version for this item.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.Private.ApiVersionAttribute.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.Private.FriendVisibleAttribute">
            <summary>
            This attribute should be applied to internal classes, interfaces and members that are visible to friend assemblies.
            It signals if internal functionality is intended to be used by friends or not.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.Private.FriendVisibleAttribute.visible">
            <summary>
            Determines the friend visibility.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.Private.FriendVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.Private.FriendVisibleAttribute"/> class.
            </summary>
            <param name="visible"><c>true</c> if this type or member should be visible to friend assemblies, otherwise <c>false</c>.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.Private.FriendVisibleAttribute.Visible">
            <summary>
            Gets a value indicating whether the target is friend visible or not.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.BlobWriter">
            <summary>
            Represents a writer of binary values.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.BlobWriter.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.BlobWriter.dataIndex">
            <summary>
            The data index
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.BlobWriter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.BlobWriter"/> class.
            </summary>
            <param name="sliceLimit">The slice limit.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.BlobWriter.Add(System.Byte[])">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.BlobWriter.Add``1(``0)">
            <summary>
            Adds the specified value.
            </summary>
            <typeparam name="T">The type of the value - should match derived type</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.BlobWriter.Write(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="currentRowInBlock">The current row in block.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter">
            <summary>Represents a writer of bools into bits.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter.currentByte">
            <summary>
            The current byte
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter.boolsInCurrentByte">
            <summary>
            The bools in current byte
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter.dataIndex">
            <summary>
            The data index
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter"/> class.
            </summary>
            <param name="sliceLimit">The slice limit.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter.Add(System.Boolean)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter.Add``1(``0)">
            <summary>
            Adds the specified value.
            </summary>
            <typeparam name="T">The type of the value - should match derived type</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.PackedBitsWriter.Write(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="currentRowInBlock">The current row in block.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfBinaryWriterExtensions">
            <summary>Represents sbdf specific extensions to the binary writer.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfBinaryWriterExtensions.WriteTableSliceStart(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes the table slice start.
            </summary>
            <param name="writer">The writer.</param>
            <param name="columnCount">The column count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfBinaryWriterExtensions.WriteColumnSliceStart(System.IO.BinaryWriter)">
            <summary>
            Writes the column slice start.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfBinaryWriterExtensions.WritePlainArray(System.IO.BinaryWriter,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes the plain array.
            </summary>
            <param name="writer">The writer.</param>
            <param name="valueType">Type of the value.</param>
            <param name="valueCount">The value count.</param>
            <param name="actualByteCount">The actual byte count.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfBinaryWriterExtensions.WritePlainArrayOfArrayType(System.IO.BinaryWriter,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes the type of the plain array of array.
            </summary>
            <param name="writer">The writer.</param>
            <param name="valueType">Type of the value.</param>
            <param name="valueCount">The value count.</param>
            <param name="actualByteCount">The actual byte count.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfBinaryWriterExtensions.WritePackedBitsArray(System.IO.BinaryWriter,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Writes the plain array.
            </summary>
            <param name="writer">The writer.</param>
            <param name="valueCount">The value count.</param>
            <param name="actualByteCount">The actual byte count.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice">
            <summary>
            Represents a read-only block of data in a column. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.values">
            <summary>
            The valid values in this column slice. The representation of invalid values in the value array
            is undefined/arbitrary, and the IsInvalid and ErrorCode properties must be used to distinguish
            valid values from invalid.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.valueProperties">
            <summary>
            The values in a column can have associated properties. There are two standard properties, IsInvalid
            and ErrorCode. The former is of type Boolean while the latter is of type string. If IsInvalid is true,
            it means there is no value available for that particular row. If the ErrorCode is non-empty there
            is something wrong with the value, but the interpretation of the ErrorCode is application specific.
            If IsInvalid is true and the ErrorCode is non-empty, the ErrorCode most likely describes why the value
            is missing. 
            If custom value properties are used, the should follow the standard Spotfire naming conventions for
            custom properties. That is, the property name should have a prefix, like this: "Acme.Property".
            Property names without prefixes are reserved for future use as standard properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray,System.Collections.Generic.Dictionary{System.String,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice"/> class.
            </summary>
            <param name="values">The valid values.</param>
            <param name="valueProperties">The dictionary of value properties.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice"/> class by reading the contents from.<paramref name="reader"/>.
            </summary>
            <param name="reader">The binary reader from which the input is read.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.RowCount">
            <summary>
            Gets the total number of rows in this SbdfColumnSlice.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.Values">
            <summary>
            Gets the values in this SbdfColumnSlice.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.InvalidValues">
            <summary>
            Gets the invalid values. Returns a <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/> of <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Bool"/> or <c>null</c> if there are no invalid values.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.ReplacedValues">
            <summary>
            Gets the replaced values. Returns a <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/> of <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Bool"/> or <c>null</c> if there are no replaced values.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.ErrorCodes">
            <summary>
            Gets the error codes. Returns a <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/> of <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.String"/> or <c>null</c> if there are no error codes.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.Read(System.IO.BinaryReader)">
            <summary>
            Reads a column slice from the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>A column slice.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.Skip(System.IO.BinaryReader)">
            <summary>
            Skips over a SbdfColumnSlice section in the <paramref name="reader"/>.
            </summary>
            <param name="reader">The binary reader.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the contents of this column slice to <paramref name="writer"/>.
            </summary>
            <param name="writer">The binary writer receiving the output.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.TryGetValueProperty(System.String,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray@)">
            <summary>
            Tries to get the values for a named value property.
            </summary>
            <param name="name">The property name.</param>
            <param name="values">The property values for all rows in the slice.</param>
            <returns>True if the property is defined; otherwise, false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.ValueProperty">
            <summary>
            Defines the names of the standard value properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.ValueProperty.IsInvalid">
            <summary>
            The IsInvalid property is used to mark invalid values. Value type Boolean.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.ValueProperty.ErrorCode">
            <summary>
            The ErrorCode is used to assign arbitrary tags to the values, commonly error codes for
            missing values. Value type string.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.ValueProperty.HasReplacedValue">
            <summary>
            The HasReplacedValue property is used to denote that an empty value has been replaced.
            Value type bool.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata">
            <summary>
            Represents column-level metadata in SBDF. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.frozenDataType">
            <summary>
            The frozen value type, returned when this instance is immutable.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.frozenName">
            <summary>
            The frozen column name, returned when this instance is immutable.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.#ctor(System.String,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata"/> class.
            </summary>
            <param name="columnName">The column name.</param>
            <param name="dataType">The column data type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.DataType">
            <summary>
            Gets the data type of the column.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.AssignedProperties">
            <summary>
            Gets an enumerable over all non-standard metadata properties of the column.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.MutableCopy">
            <summary>
            Returns a mutable copy of this instance.
            </summary>
            <returns>A mutable copy of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.ImmutableCopy">
            <summary>
            Returns an immutable copy of this instance.
            </summary>
            <returns>An immutable copy of this instance.</returns>
            <exception cref="T:System.ArgumentException">if the 'Name' or 'DataType' properties are invalid.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.ValidateComplete">
            <summary>
            Validates that the properties 'Name' and 'DateType' are correctly set. Throws an <see cref="T:System.ArgumentException"/> if they are not valid.
            </summary>
            <exception cref="T:System.ArgumentException">if the 'Name' or 'DataType' properties are invalid.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.ValidateName(System.String)">
            <summary>
            Validates that the given name is a valid column name.
            </summary>
            <param name="name">The column name.</param>
            <exception cref="T:System.ArgumentException">if the name is invalid.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata.ValidateDataType(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType)">
            <summary>
            Validates that the given data type is a valid column data type.
            </summary>
            <param name="valueType">The data type.</param>
            <exception cref="T:System.ArgumentException">if the data type is invalid.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder">
            <summary>
            Defines a builder for <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice"/> objects.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.values">
            <summary>
            The valid values in this column slice.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.valueProperties">
            <summary>
            The value properties.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder"/> class.
            </summary>
            <param name="values">The values of this column.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.RowCount">
            <summary>
            Gets the total number of rows in this SbdfColumnSliceBuilder.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.Values">
            <summary>
            Gets the values in this SbdfColumnSliceBuilder.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.InvalidValues">
            <summary>
            Sets the invalid values for this column.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.ReplacedValues">
            <summary>
            Sets the replaced values for this column.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.ErrorCodes">
            <summary>
            Sets the error codes for this column.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.Build">
            <summary>
            Builds a new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice"/> with the contents of this instance.
            </summary>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.SetValueProperty(System.String,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray)">
            <summary>
            Sets a value property for the values in this SbdfColumnSliceBuilder.
            </summary>
            <param name="name">The property name. The <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice.ValueProperty"/> class defines
            the standard property names.</param>
            <param name="values">The property values for all rows in the slice.</param>
            <exception cref="T:System.ArgumentException">if <paramref name="values"/> if a standard value property of the wrong type.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSliceBuilder.TryGetValueProperty(System.String,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray@)">
            <summary>
            Tries to get the values for a named value property.
            </summary>
            <param name="name">The property name.</param>
            <param name="values">The property values for all rows in the slice.</param>
            <returns>True if the property is defined; otherwise, false.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter">
            <summary>Represents a writer of sbdf columns.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.CreateDefault(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Int32)">
            <summary>
            Creates the default writer for the type.
            </summary>
            <param name="type">The type.</param>
            <param name="sliceLimit">The slice limit.</param>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.Add(System.Object,System.Int32)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="currentRowInBlock">The current row in block.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriteColumnSlice(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Builds the slice.
            </summary>
            <param name="writer">The writer.</param>
            <param name="currentRowInBlock">The current row in block.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator">
            <summary>
            Creates a plain writer.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.sliceLimit">
            <summary>
            The slice limit
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator"/> class.
            </summary>
            <param name="sliceLimit">The slice limit.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitUnknown">
            <summary>
            Visits the unknown.
            </summary>
            <returns>The writer</returns>
            <exception cref="T:System.InvalidOperationException">Unknown datatype is not supported</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitString">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitInt">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitDouble">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitDate">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitDateTime">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitTime">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitDecimal">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitBinary">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitBool">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitLong">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitTimeSpan">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter.WriterCreator.VisitFloat">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The writer</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SingleValueToByteArrayWriter`1">
            <summary>
            A writer of single values to byte
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="dest">The dest.</param>
            <param name="index">The index.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1">
            <summary>
            Represents a typed writer of sbdfcolumns.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.valueType">
            <summary>
            The value type
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.dataWriter">
            <summary>
            The data adder
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.invalids">
            <summary>
            The invalids
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.errors">
            <summary>
            The errors
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.replaced">
            <summary>
            The replaced
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.lastErrorIndex">
            <summary>
            The last error index
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.lastInvalidIndex">
            <summary>
            The last invalid index
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.lastReplacedIndex">
            <summary>
            The last replaced index
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Int32,Spotfire.Dxp.Data.Formats.Sbdf.DataWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1" /> class.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="sliceLimit">The slice limit.</param>
            <param name="dataWriter">The data writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.Add(System.Object,System.Int32)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="currentRowInBlock">The current row in block.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnWriter`1.WriteColumnSlice(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Builds the slice.
            </summary>
            <param name="writer">The writer.</param>
            <param name="currentRowInBlock">The current row in block.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader">
            <summary>
            Represents the file header (which identifies the file type) of an SBDF file. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.CurrentMajorVersion">
            <summary>
            The current major version of SBDF. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.CurrentMinorVersion">
            <summary>
            The current minor version of SBDF. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.VersionHistory">
            <summary>
            A list of format versions, used for validation.
            </summary> 
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.majorVersion">
            <summary>
            The major format version number.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.minorVersion">
            <summary>
            The minor format version number.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader"/> class.
            </summary>
            <param name="majorVersion">The major format version.</param>
            <param name="minorVersion">The minor format version.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader"/> class using the current format version.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.MajorVersion">
            <summary>
            Gets the major version of Sbdf used in this file. 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.MinorVersion">
            <summary>
            Gets the minor version of Sbdf used in this file. 
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.SectionType">
            <summary>
            Gets the type tag used to identify a file header section.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.Read(System.IO.BinaryReader)">
            <summary>
            Reads a file header section from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>A new file header section instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.TryRead(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader@)">
            <summary>
            Reads and validates a file header in the current <paramref name="reader"/>.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="fileHeader">The resulting file header, or <c>null</c> if no valid file header could be read.</param>
            <returns>A value indicating whether a valid file header was read.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.ReadAfterTypeCheck(System.IO.BinaryReader)">
            <summary>
            Reads a file header section without the section type from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>A new file header section instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.WriteCurrentVersion(System.IO.BinaryWriter)">
            <summary>
            Writes the current version of the file header to an output stream.
            </summary>
            <param name="writer">The output stream.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.Write(System.IO.BinaryWriter)">
            <summary>
            Writes this file header to an output stream.  
            </summary>
            <param name="writer">The output stream.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.Validate(System.Int32,System.Int32)">
            <summary>
            Validates the content of a SbdfFileHeader.
            </summary>
            <param name="majorVersion">The major version number.</param>
            <param name="minorVersion">The minor version number.</param>
            <exception cref="T:System.ArgumentException">if the format version is invalid or unsupported.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfFileHeader.WriteInstance(System.IO.BinaryWriter)">
            <summary>
            Writes this file header instance to an output stream.
            </summary>
            <param name="writer">The output stream.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers">
            <summary>
            Defines low-level methods for reading and writing sbdf data.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.EmptyByteArray">
            <summary>
            An empty byte array.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.encoding">
            <summary>
            The encoding helper instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.Advance(System.IO.BinaryReader,System.Int32)">
            <summary>
            Advances the binary reader by <paramref name="pos"/> bytes.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="pos">The number of bytes to advance.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteValue(System.IO.BinaryWriter,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Object)">
            <summary>
            Writes a value to the binary writer.
            </summary>
            <param name="writer">The binary writer.</param>
            <param name="valueType">The <see cref="T:System.ValueType"/>, specifying the type of the value object.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteArray(System.IO.BinaryWriter,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Array,System.Int32)">
            <summary>
            Writes an array of values to the binary writer.
            </summary>
            <param name="writer">The binary writer.</param>
            <param name="valueType">The <see cref="T:System.ValueType" />, specifying the type of the value objects.</param>
            <param name="array">The array of values to write.</param>
            <param name="actualCount">The actual count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadValue(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Boolean@)">
            <summary>
            Reads a value from the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="valueType">The <see cref="T:System.ValueType"/>, specifying the type of the object to read.</param>
            <param name="error">Determines if the binary input is erroneous.</param>
            <returns>A value object.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.SkipArray(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType)">
            <summary>
            Skips over the array at the current position of the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="valueType">The value type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes string data to the binary writer.
            </summary>
            <param name="writer">The binary writer.</param>
            <param name="value">The string data. If <c>null</c>, an empty string is written.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteBinaryData(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Writes a byte array to the binary writer.
            </summary>
            <param name="writer">The binary writer.</param>
            <param name="value">The byte array. If <c>null</c>, an empty byte array is written.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteDecimal(System.IO.BinaryWriter,System.Decimal)">
            <summary>
            Writes a decimal value to the binary writer.
            </summary>
            <param name="writer">The binary writer.</param>
            <param name="value">The decimal value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteDecimal(System.Decimal,System.Byte[],System.Int32@)">
            <summary>
            Writes a decimal value to the binary writer.
            </summary>
            <param name="value">The decimal value.</param>
            <param name="dest">The destination array.</param>
            <param name="index">The destination array index.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteDateTime(System.IO.BinaryWriter,System.DateTime)">
            <summary>
            Writes a date time value to the binary writer.
            </summary>
            <param name="writer">The binary writer.</param>
            <param name="value">The date time value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteDateTime(System.DateTime,System.Byte[],System.Int32@)">
            <summary>
            Writes a date time value to the destination array.
            </summary>
            <param name="value">The date time value.</param>
            <param name="dest">The destination array.</param>
            <param name="index">The destination index.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteTimeSpan(System.IO.BinaryWriter,System.TimeSpan)">
            <summary>
            Writes a time span to the binary writer.
            </summary>
            <param name="writer">The binary writer.</param>
            <param name="value">The time span value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteTimeSpan(System.TimeSpan,System.Byte[],System.Int32@)">
            <summary>
            Writes a time span to the destination array.
            </summary>
            <param name="value">The time span value.</param>
            <param name="dest">The destination array.</param>
            <param name="index">The destination array index.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadString(System.IO.BinaryReader)">
            <summary>
            Reads a string value from the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>A string value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.SkipString(System.IO.BinaryReader)">
            <summary>
            Skips over the string at the current position of the binary reader's stream.
            </summary>
            <param name="reader">The binary reader.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadBinaryData(System.IO.BinaryReader)">
            <summary>
            Reads a byte array from the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.SkipBinarydata(System.IO.BinaryReader)">
            <summary>
            Skips over the byte array at the current position of the reader's stream.
            </summary>
            <param name="reader">The binary reader.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ConvertDecimal(System.Int32[],System.Boolean@)">
            <summary>
            Converts an array of ints into a decimal.
            </summary>
            <param name="bits">The array of ints. This array will be modified.</param>
            <param name="error">Determines if the binary input is erroneous.</param>
            <returns>The corresponding decimal value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadDecimal(System.IO.BinaryReader,System.Boolean@)">
            <summary>
            Reads a decimal value from the binary reader.
            </summary>
            <param name="reader">The binary reader</param>
            <param name="error">Determines if the binary input is erroneous.</param>
            <returns>A decimal value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadDateTime(System.IO.BinaryReader)">
            <summary>
            Reads a date time value from the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>The date time value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadDateTime(System.Byte[],System.Int32@)">
            <summary>
            Reads a date time value from a byte array.
            </summary>
            <param name="array">The byte array.</param>
            <param name="index">The byte array index.</param>
            <returns>The date time value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadTimeSpan(System.IO.BinaryReader)">
            <summary>
            Reads a time span value from the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>A time span value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadTimeSpan(System.Byte[],System.Int32@)">
            <summary>
            Reads a time span value from a byte array.
            </summary>
            <param name="array">The byte array.</param>
            <param name="index">The byte array index.</param>
            <returns>The date time value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.GetPackedIntLen(System.Int32)">
            <summary>
            Gets the length of a packed integer.
            </summary>
            <param name="val">The integer.</param>
            <returns>The length in bytes.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WritePackedInt(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Writes a packed integer to <paramref name="data"/>.
            </summary>
            <param name="data">The buffer to receive the packed integer.</param>
            <param name="index">The buffer index.</param>
            <param name="ival">The integer to write.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadPackedInt(System.Byte[],System.Int32@)">
            <summary>
            Writes a packed integer from <paramref name="data"/>.
            </summary>
            <param name="data">The data buffer, from which the integer is read.</param>
            <param name="index">The buffer index.</param>
            <returns>The read integer value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.GetTypeSize(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType)">
            <summary>
            Gets the byte size of the given <paramref name="vt"/>.
            </summary>
            <param name="vt">The value type instance.</param>
            <returns>The byte size.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadBinaryArray(System.String[],System.IO.BinaryReader)">
            <summary>
            Reads a packed arrray of strings.
            </summary>
            <param name="strings">The array of strings.</param>
            <param name="reader">The binary reader, from which the strings are read.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.ReadBinaryArray(System.Byte[][],System.IO.BinaryReader)">
            <summary>
            Reads a packed arrray of binary data.
            </summary>
            <param name="binary">The array of binary data.</param>
            <param name="reader">The binary reader, from which the binary data is read.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteBinaryArray(System.Byte[][],System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes a packed array of binary data.
            </summary>
            <param name="binary">The array of strings.</param>
            <param name="writer">The binary writer.</param>
            <param name="actualCount">The actual count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.WriteBinaryArray(System.String[],System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes a packed array of strings.
            </summary>
            <param name="strings">The array of strings.</param>
            <param name="writer">The binary writer.</param>
            <param name="actualCount">The actual count.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.IOHelpers.SkipBinaryArray(System.IO.BinaryReader)">
            <summary>
            Skips an array of data.
            </summary>
            <param name="reader">The binary reader.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection">
            <summary>
            Represents metadata for a table or column in SBDF.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.propertyDict">
            <summary>
            A dictionary that maps property names to metadata property instances.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.propertyList">
            <summary>
            A list of properties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.readOnly">
            <summary>
            Determines if the collection is modifiable.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.Count">
            <summary>
            Gets the number of properties in the collection.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.IsImmutable">
            <summary>
            Gets a value indicating whether this instance is immutable or not.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.AddProperty(System.String,System.String)">
            <summary>
            Adds a new metadata property to the collection.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.AddProperty(System.String,System.Int32)">
            <summary>
            Adds a new metadata property to the collection.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.AddProperty(Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty)">
            <summary>
            Adds a new metadata property to the collection.
            </summary>
            <param name="property">The new metadata property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.RemoveProperty(System.String)">
            <summary>
            Removes the property with the specified name from the collection.
            </summary>
            <param name="name">The property name.</param>
            <returns>true if the property was found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.TryGetProperty(System.String,Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty@)">
            <summary>
            Looks up a metadata property by name.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="property">The metadata property.</param>
            <returns>True if the name was found; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.TryGetProperty``1(System.String,``0@)">
            <summary>
            Gets the value of a metadata property.
            </summary>
            <typeparam name="T">The runtime value type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property if found; otherwise, null.</param>
            <returns>True if the name was found; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.GetProperty``1(System.String)">
            <summary>
            Gets the value of a metadata property.
            </summary>
            <typeparam name="T">The runtime value type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>The value of the metadata property.</returns>
            <exception cref="T:System.ArgumentException">If the metadata property is not defined.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.GetEnumerator">
            <summary>
            Gets an enumerator with all metadata properties in the collection.
            </summary>
            <returns>An enumerator instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator with all metadata properties in the collection.
            </summary>
            <returns>A enumerator instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.AddMetadataCollection(Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection)">
            <summary>
            Adds the contents of <paramref name="source"/> to this instance.
            </summary>
            <param name="source">The source of the contents.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.SetImmutable">
            <summary>
            Sets this instance as read-only.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection.ValidateModifiable">
            <summary>
            Validates that this instance is modifiable.
            </summary>
            <exception cref="T:System.InvalidOperationException">if this instance is not modifiable.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty">
            <summary>
            Represents a metadata property for a data table or column in Sbdf.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.type">
            <summary>
            The value type of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.defaultValue">
            <summary>
            The default value of the property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.#ctor(System.String,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="valueType">The value type of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.#ctor(System.String,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="valueType">The value type of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="defaultValue">The default value of the property.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty"/> class by reading the contents from the binary reader.
            </summary>
            <param name="reader">The binary reader from which the contents are read.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.Name">
            <summary>
            Gets the name of the metadata property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.ValueType">
            <summary>
            Gets the value type of the metadata property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.Value">
            <summary>
            Gets the value of the metadata property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.DefaultValue">
            <summary>
            Gets the default value of the metadata property.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the contents of this metadata property to the binary writer.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.ValidateAssignment">
            <summary>
            Validates that that the <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.value"/> and <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataProperty.defaultValue"/> are of the correct type.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.Robustness">
            <summary>
            Implements various utility functions for robustness. 
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.Robustness.ArgumentException(System.String,System.Object[])">
            <summary>
            Returns an <see cref="M:Spotfire.Dxp.Data.Formats.Sbdf.Robustness.ArgumentException(System.String,System.Object[])"/> with a formatted message.
            </summary>
            <param name="message">The message format string.</param>
            <param name="args">The message format arguments.</param>
            <returns>An <see cref="M:Spotfire.Dxp.Data.Formats.Sbdf.Robustness.ArgumentException(System.String,System.Object[])"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.Robustness.InvalidOperationException(System.String,System.Object[])">
            <summary>
            Returns an <see cref="M:Spotfire.Dxp.Data.Formats.Sbdf.Robustness.InvalidOperationException(System.String,System.Object[])"/> with a formatted message.
            </summary>
            <param name="message">The message format string.</param>
            <param name="args">The message format arguments.</param>
            <returns>An <see cref="M:Spotfire.Dxp.Data.Formats.Sbdf.Robustness.InvalidOperationException(System.String,System.Object[])"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.Robustness.ValidateNotNull(System.String,System.Object)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="param"/> is <c>null</c>.
            </summary>
            <param name="paramName">The name of the parameter.</param>
            <param name="param">The parameter.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.Robustness.ValidateNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="M:Spotfire.Dxp.Data.Formats.Sbdf.Robustness.ArgumentException(System.String,System.Object[])"/> if <paramref name="param"/> is <c>null</c> or empty.
            </summary>
            <param name="paramName">The name of the parameter.</param>
            <param name="param">The parameter.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader">
            <summary>
            Abstract base class for the SBDF section headers. 
            Also provides some internal static utility methods.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader"/> class.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.SectionType">
            <summary>
            Gets the type tag used to identify a section header.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.ReadSectionHeader(System.IO.BinaryReader)">
            <summary>
            Reads a section header from an input stream.
            The section type is inferred from the type tag.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>A new section header.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.ReadSectionHeader(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId)">
            <summary>
            Reads a section header of a certain type from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="expectedType">The expected section type.</param>
            <returns>A new section header instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.WriteSectionHeader(System.IO.BinaryWriter,Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader)">
            <summary>
            Writes a section header to an output stream.
            </summary>
            <param name="writer">The output stream.</param>
            <param name="section">The section header.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.ReadMagicNumber(System.IO.BinaryReader)">
            <summary>
            Reads and validates the Sbdf magic number from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <exception cref="T:System.FormatException">if the magic number is incorrect.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.TryReadMagicNumber(System.IO.BinaryReader)">
            <summary>
            Tries to read the Sbdf magic number from the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns><c>true</c> if the magic number was successfully read, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.WriteMagicNumber(System.IO.BinaryWriter)">
            <summary>
            Writes the Sbdf magic number to an output stream.
            </summary>
            <param name="writer">The output stream.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.ReadSectionType(System.IO.BinaryReader)">
            <summary>
            Reads a section type tag (including the magic number) from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The section type.</returns>
            <exception cref="T:System.FormatException">if the section type is unrecognized or if the magic number is missing.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.ReadSectionType(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId)">
            <summary>
            Reads a validates a section type tag (including the magic number) from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="expectedType">The expected section type.</param>
            <exception cref="T:System.FormatException">if the magic number is missing.</exception>
            <exception cref="T:System.ArgumentException">if the section type is incorrect.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.VerifySectionType(Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId,Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId)">
            <summary>
            Verifies that the <paramref name="type"/> matches the <paramref name="expectedType"/>.
            </summary>
            <param name="type">The actual section type.</param>
            <param name="expectedType">The expected section type.</param>
            <exception cref="T:System.ArgumentException">if the actual and passed types differ.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.WriteSectionType(System.IO.BinaryWriter,Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId)">
            <summary>
            Writes a section type tag (including the magic number) to an output stream.
            </summary>
            <param name="writer">The output stream.</param>
            <param name="type">The section type.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.ReadSectionHeaderBody(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId)">
            <summary>
            Reads a section header body of a specified type from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="type">The section type.</param>
            <returns>A new section header instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionHeader.WriteInstance(System.IO.BinaryWriter)">
            <summary>
            Writes a section header to an output stream.
            </summary>
            <param name="writer">The output stream.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId">
            <summary>
            Type identifiers for SBDF sections and subsections.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId.Unknown">
            <summary>
            An unknown section type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId.FileHeader">
            <summary>
            A file header section.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId.TableMetadata">
            <summary>
            A table metadata section, marking the beginning of a complete table.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId.TableSlice">
            <summary>
            A table slice section.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId.ColumnSlice">
            <summary>
            A column slice section.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId.TableEnd">
            <summary>
            Marks the end of a complete data table.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata">
            <summary>
            Represents immutable table and column metadata in SBDF. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.columns">
            <summary>
            Column metadata, one collection for each column.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.#ctor(System.Collections.Generic.IList{Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata},Spotfire.Dxp.Data.Formats.Sbdf.SbdfMetadataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata"/> class.
            </summary>
            <param name="columns">The list of columns. The contents will be copied and stored internally.</param>
            <param name="metaData">The collection of metadata. The contents will be copied and stored internally.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.Columns">
            <summary>
            Gets the metadata for the columns of this table.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.Read(System.IO.BinaryReader)">
            <summary>
            Reads a SbdfTableMetadata instance from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>A new SbdfTableMetadata instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.Write(System.IO.BinaryWriter)">
            <summary>
            Writes this instance to the binary writer.
            </summary>
            <param name="writer">The output binary writer.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.MetadataPropertyKey">
            <summary>
            Defines a key class for MetadataProperty objects in a dictionary
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.MetadataPropertyKey.name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.MetadataPropertyKey.valueType">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.MetadataPropertyKey.defaultValue">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.MetadataPropertyKey.#ctor(System.String,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.MetadataPropertyKey"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="valueType">The type of the property.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.MetadataPropertyKey.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.MetadataPropertyKey.ValueType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata.MetadataPropertyKey.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadataBuilder">
            <summary>
            Represents table and column metadata in SBDF. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadataBuilder.columns">
            <summary>
            Column metadata, one collection for each column.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadataBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadataBuilder"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadataBuilder.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadataBuilder"/> class.
            </summary>
            <param name="other">The source <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata"/> object to fill the contents of this instance with.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadataBuilder.Columns">
            <summary>
            Gets the metadata for the columns of this table.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadataBuilder.AddColumn(Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnMetadata)">
            <summary>
            Adds metadata for the next column in the table.
            </summary>
            <param name="columnMetadata">The column metadata.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadataBuilder.Build">
            <summary>
            Builds a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata"/> class, filled with the contents of this instance.
            </summary>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata"/> instance.</returns>
            <exception cref="T:System.ArgumentException">if the underlying data is invalid.</exception>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader">
            <summary>
            This class provides a simple, row-based interface for importing data from the SBDF format.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.reader">
            <summary>
            The input stream.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.metadata">
            <summary>
            The table metadata.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.columnIndex">
            <summary>
            The current column index.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.rowIndex">
            <summary>
            The current row index.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.dataArrays">
            <summary>
            The array of data value arrays.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.invalidArrays">
            <summary>
            The array of invalid value arrrays.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.errorArrays">
            <summary>
            The array of error value arrays.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.replacedArrays">
            <summary>
            The array of replaced value arrays.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.filteredColumns">
            <summary>
            The filtered columns.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.columnMetaData">
            <summary>
            The (filtered) column meta data
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.columnCount">
            <summary>
            The number of (filtered) columns.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.#ctor(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader"/> class.
            </summary>
            <param name="reader">The input stream. The caller owns the stream and is responsible
            for closing it after the SbdfTableReader has been disposed.</param>
            <param name="metadata">The table metadata, which must include metadata for all columns.</param>
            <remarks>The <paramref name="reader"/> is read to the end of its underlying stream.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.#ctor(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader"/> class.
            </summary>
            <param name="reader">The input stream. The caller owns the stream and is responsible
            for closing it after the SbdfTableReader has been disposed.</param>
            <param name="metadata">The table metadata, which must include metadata for all columns.</param>
            <param name="filteredColumns">Determines which columns to read.</param>
            <remarks>The <paramref name="reader"/> is read to the end of its underlying stream.</remarks>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.Values">
            <summary>
            Gets an enumerable over all of the values.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.Columns">
            <summary>
            Gets the metadata for the columns to read.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.ValueArrays">
            <summary>
            Gets the data values for the current table slice.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.ErrorCodeArrays">
            <summary>
            Gets the error codes for the current table slice. May be <c>null</c> if there are no errors.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.IsInvalidArrays">
            <summary>
            Gets the is invalid values for the current table slice. May be <c>null</c> if there are no invalid values.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.ReplacedValueArrays">
            <summary>
            Gets the is replaced values for the current table slice. May be <c>null</c> if there are no replaced values.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.ReadValue">
            <summary>
            Returns the next value from the table.
            </summary>
            <returns>An object representing the next value of the table.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.Dispose">
            <summary>
            Disposes of this TableWriter instance. Will flush and release the internal buffers,
            but not close the output stream.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.Dispose(System.Boolean)">
            <summary>
            Disposes of this TableWriter instance.
            </summary>
            <param name="disposing">True if invoked explicitly; false if invoked from the GC.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableReader.ReadNextTableSlice">
            <summary>
            Reads the next table slice.
            </summary>
            <returns><c>true</c> if the table slice was read or <c>false</c> if the end-of-table marker was reached.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice">
            <summary>
            Represents a slice of a data table. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.tableMetadata">
            <summary>
            Metadata at the table and column levels. All slices of a table share the same metadata.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.columns">
            <summary>
            An ordered list of column slices. Same number and order as in the metadata.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.filteredColumns">
            <summary>
            An ordered list of filtered columns. Same order as in the metadata.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.columnNames">
            <summary>
            The list of column names.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.columnDataTypes">
            <summary>
            The list of column value types.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata,System.Collections.Generic.IList{Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice"/> class.
            </summary>
            <param name="tableMetadata">The table and column metadata.</param>
            <param name="columns">A list of column slices, one for each column in the table.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.Metadata">
            <summary>
            Gets the unfiltered, complete meta data of this table slice.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.Columns">
            <summary>
            Gets the column slices of this table slice.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.ColumnNames">
            <summary>
            Gets the column names.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.ColumnDataTypes">
            <summary>
            Gets the column data types.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.ReadSlices(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata)">
            <summary>
            Enumerates over all slices in the stream of the binary reader.
            </summary>
            <param name="binaryReader">The binary reader.</param>
            <param name="tableMetadata">The table metadata.</param>
            <returns>An enumeration over all table slices.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.ReadSlices(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Enumerates over all slices in the stream of the binary reader.
            </summary>
            <param name="binaryReader">The binary reader.</param>
            <param name="tableMetadata">The table metadata.</param>
            <param name="columnSubset">The subset of columns to read.</param>
            <returns>An enumeration over all table slices.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.SkipSlices(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata)">
            <summary>
            Skips all table slices in the stream of the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="tableMetadata">The table metadata</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.WriteEndOfTableMarker(System.IO.BinaryWriter)">
            <summary>
            Writes the end of table marker to the binary writer.
            </summary>
            <param name="binaryWriter">The binary writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.Write(System.IO.BinaryWriter)">
            <summary>
            Writes this table slice to an output binary writer.
            </summary>
            <param name="writer">The output binary writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.Read(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata,Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId)">
            <summary>
            Reads a table slice from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="tableMetadata">The <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata"/> information.</param>
            <param name="sectionTypeId">The section type id. Must be <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId.TableSlice"/>.</param>
            <returns>A new SbdfTableSlice instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.Read(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata,Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId,System.Collections.Generic.IList{System.Boolean})">
            <summary>
            Reads a table slice from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="tableMetadata">The <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata"/> information.</param>
            <param name="sectionTypeId">The section type id. Must be <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId.TableSlice"/>.</param>
            <param name="columnSubset">The subset of columns to create.</param>
            <returns>A new SbdfTableSlice instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.ReadHelper(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata,Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Reads a <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice"/> from the provided binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="tableMetadata">The table meta data.</param>
            <param name="sectionTypeId">The section type id. Must be <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfSectionTypeId.TableSlice"/>.</param>
            <param name="columnSubset">The subset of colums. May be <c>null</c>.</param>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice.ReadSlicesHelper(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Enumerates over all table slices in the binary reader. 
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="tableMetaData">The table metadata.</param>
            <param name="columnSubset">The column subset. If <c>null</c>, all columns are read.</param>
            <returns>An enumerator over all table slices.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSliceBuilder">
            <summary>
            A builder class used for constructing a table slice. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSliceBuilder.tableMetadata">
            <summary>
            Holds the table metadata.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSliceBuilder.columns">
            <summary>
            Holds the list of column slices added so far.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSliceBuilder.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSliceBuilder"/> class.
            </summary>
            <param name="tableMetadata">The table meta data.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSliceBuilder.AddColumn(Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice)">
            <summary>
            Adds a <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice"/> to the list of columns.
            </summary>
            <param name="columnBlock">The <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfColumnSlice"/> to add.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSliceBuilder.Build">
            <summary>
            Create a new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice"/> from the contents of this instance.
            </summary>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableSlice"/>.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter">
            <summary>
            This class provides a simple, row-based interface for exporting data to the SBDF format.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.columnWriters">
            <summary>
            The column data.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.columnSliceLimit">
            <summary>
            The column slice limit.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.onProgressAction">
            <summary>
            The action to call for every 1000 row written.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.writer">
            <summary>
            The output stream.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.metadata">
            <summary>
            The table metadata.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.columnIndex">
            <summary>
            The index of the column receving the next data value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.currentRowInBlock">
            <summary>
            The current row in block
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.currentRowCount">
            <summary>
            Holds the current row count.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.#ctor(System.IO.BinaryWriter,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter"/> class.
            </summary>
            <param name="writer">The output stream. The caller owns the stream and is responsible
            for closing it after the SbdfTableWriter has been disposed (since a file may contain more than
            one table).</param>
            <param name="metadata">The table metadata, which must include metadata for all columns.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.#ctor(System.IO.BinaryWriter,Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableMetadata,System.Action{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter"/> class.
            </summary>
            <param name="writer">The output stream. The caller owns the stream and is responsible
            for closing it after the SbdfTableWriter has been disposed (since a file may contain more than
            one table).</param>
            <param name="metadata">The table metadata, which must include metadata for all columns.</param>
            <param name="onProgressAction">The method to call for every 1000 written row.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.ColumnSliceLimit">
            <summary>
            Gets the column slice limit.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.AddValue(System.Object)">
            <summary>
            Adds a value to the table. Values are added in a row-based manner. For each row values
            must be provided for all columns.
            </summary>
            <param name="value">The new value. The object's type has to match the current column.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.Dispose">
            <summary>
            Disposes of this SbdfTableWriter instance. Will flush and release the internal buffers,
            but not close the output stream.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.CalculateColumnSliceLimit(System.Int32)">
            <summary>
            Calculates the dynamic column slice limit.
            </summary>
            <param name="columnCount">The number of columns.</param>
            <returns>The dynamic column slice limit.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.Dispose(System.Boolean)">
            <summary>
            Disposes of this SbdfTableWriter instance.
            </summary>
            <param name="disposing">True if invoked explicitly; false if invoked from the GC.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.IncRowCount">
            <summary>
            Increase the currentRowCount and rasises CurrentRowCount event if neccessary.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.RaiseCurrentRowCount">
            <summary>
            calls the onProgressAction if the currentRowCount is a multiple of 1000
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfTableWriter.Flush">
            <summary>
            Flushes and releases the internal buffers.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray">
            <summary>
            Defines a class for holding and persisting arrays of values.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.valueType">
            <summary>
            The type of the values held by this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.encodingId">
            <summary>
            The array encoding used by this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayEncodingTypeId)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/> class.
            </summary>
            <param name="valueType">The type of the values in the array.</param>
            <param name="encodingId">The encoding of the array.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayEncodingTypeId">
            <summary>
            Defines the different array encodings.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayEncodingTypeId.PlainArrayEncodingTypeId">
            <summary>
            Defines the plain array encoding. Arrays of this type are encoded as a normal array (i.e. no encoding).
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayEncodingTypeId.RunLengthEncodingTypeId">
            <summary>
            Defines the run length encoding. Arrays of this type are encoded as a list with the number of occurrences followed
            by the data.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayEncodingTypeId.BitArrayEncodingTypeId">
            <summary>
            Defines the packed bit array encoding. Arrays of this type are encoded as packed bit arrays.
            Only arrays of type bool are supported.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ValueType">
            <summary>
            Gets the type of the values of the array.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingId">
            <summary>
            Gets the encoding type id of this array.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.Count">
            <summary>
            Gets the count of the items in the array.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.CreatePlainArrayEncoding(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Collections.IList)">
            <summary>
            Creates a new plain array encoded <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.
            </summary>
            <param name="valueType">The type of the values.</param>
            <param name="values">The values to hold.</param>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.CreateBoolArrayEncoding(System.Collections.IList)">
            <summary>
            Creates a new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/> holding a packed bit array.
            </summary>
            <param name="values">The bool-values to hold.</param>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.CreateRunLengthArrayEncoding(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Collections.IList)">
            <summary>
            Creates a new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/> holding a run-length encoded array.
            </summary>
            <param name="valueType">The type of the values to hold.</param>
            <param name="values">The values to hold.</param>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.Deserialize(System.IO.BinaryReader,System.Collections.Generic.List{System.Boolean}@)">
            <summary>
            Deserializes an instance of a <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.
            </summary>
            <param name="reader">The binary reader from which the contents are read.</param>
            <param name="errors">Determines if the binary input is erroneous.</param>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.Skip(System.IO.BinaryReader)">
            <summary>
            Skips reading an array and advances to the next position in the binary reader.
            </summary>
            <param name="reader">The binary reader from which the contents are skipped.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.CreateDefaultArrayEncoding(System.Collections.IList)">
            <summary>
            Creates a default array encoding from the given parameters.
            </summary>
            <param name="values">The values to hold.</param>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.</returns>
            <remarks>The type of the values of the array is automatically deduced.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.CreateDefaultArrayEncoding(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Collections.IList)">
            <summary>
            Creates a default array encoding from the given parameters.
            </summary>
            <param name="valueType">The type of the <paramref name="values"/>.</param>
            <param name="values">The values to hold.</param>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ToArray">
            <summary>
            Converts the contents of this instance to a normal <see cref="T:System.Array"/>.
            </summary>
            <returns>An <see cref="T:System.Array"/>, holding the contents of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes this instance.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.CreatePlain(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Collections.IList)">
            <summary>
            Creates a plain array.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="values">The values.</param>
            <returns>The sbdf array.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.SerializeEncodingSpecific(System.IO.BinaryWriter)">
            <summary>
            Serializes the encoding specific parts of this instance.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.DeserializeHelper(System.IO.BinaryReader,System.Boolean,System.Collections.Generic.List{System.Boolean}@)">
            <summary>
            Deserializes an instance of a <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.
            </summary>
            <param name="reader">The binary reader from which the contents are read.</param>
            <param name="skip"><c>true</c> if the data should be overread, <c>false</c> otherwise.</param>
            <param name="errors">Determines if the binary input is erroneous.</param>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/> or <c>null</c> if the data was overread.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1">
            <summary>
            Defines a class for working with arrays encoded as plain arrays (i.e. no encoding)
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1.array">
            <summary>
            The held array.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1.actualItemsInArray">
            <summary>
            The actual count items in array. Note that this is not serialized since we only
            write the actual items when serializing and will thus be initialized to array.length
            when deserializing. It is only used to avoid having to copy the array an extra time when
            we reuse it.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1"/> class.
            </summary>
            <param name="valueType">The type of the held values.</param>
            <param name="array">The values to hold.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,`0[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1"/> class.
            </summary>
            <param name="valueType">The type of the held values.</param>
            <param name="array">The values to hold.</param>
            <param name="actualItemsInArray">The actual items in array.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1.Count">
            <summary>
            Gets the number of items in this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1.DeserializeEncodingSpecific(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.IO.BinaryReader,System.Boolean,System.Collections.Generic.List{System.Boolean}@)">
            <summary>
            Deserializes encoding specific parts.
            </summary>
            <param name="vt">The type of the held values.</param>
            <param name="reader">The binary reader, from which the contents are read.</param>
            <param name="skip"><c>true</c> if the contents should be overread, <c>false</c> otherwise.</param>
            <param name="errors">Determines if the binary input is erroneous. May be null; in that case there were no errors.</param>
            <returns>A new <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/>.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1.ToArray">
            <summary>
            Converts the contents of this to an <see cref="T:System.Array"/>.
            </summary>
            <returns>An <see cref="T:System.Array"/>, holding the contents of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArray`1.SerializeEncodingSpecific(System.IO.BinaryWriter)">
            <summary>
            Serializes encoding specific parts of this instance.
            </summary>
            <param name="writer">The binary writer, receiving the output data.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray">
            <summary>
            Defines a class for holding an array of bools as a packed bit array.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray.count">
            <summary>
            The number of bools held by this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray.packedArray">
            <summary>
            The packed bit data.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray"/> class.
            </summary>
            <param name="values">The list of bool values.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray"/> class.
            </summary>
            <param name="count">The number of bools in <paramref name="packedArray"/>.</param>
            <param name="packedArray">The packed bit array.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray.Count">
            <summary>
            Gets the number of items held by this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray.DeserializeEncodingSpecific(System.IO.BinaryReader,System.Boolean,System.Collections.Generic.List{System.Boolean}@)">
            <summary>
            Deserializes encoding specific information.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="skip"><c>true</c> if the contents should be overread, <c>false</c> otherwise.</param>
            <param name="errors">Determines if the binary input is erroneous.</param>
            <returns>A <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/> instance or <c>null</c> if the contents were skipped.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray.ToArray">
            <summary>
            Converts the contents of this instance to a bool-array.
            </summary>
            <returns>A bool-array.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray.SerializeEncodingSpecific(System.IO.BinaryWriter)">
            <summary>
            Serializes encoding specific data.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PackedBitArray.GetPackedArrayLength(System.Int32)">
            <summary>
            Gets the byte length of the packed bit array holding <paramref name="len"/> entries.
            </summary>
            <param name="len">The number of items in the array.</param>
            <returns>The packed byte array length.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1">
            <summary>
            Defines a class for holding an array of values run length encoded.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1.count">
            <summary>
            The total number of items held by this instance.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1.occurrences">
            <summary>
            The number of occurrences or runs for each value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1.data">
            <summary>
            The value array.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Int32,System.Byte[],`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1"/> class.
            </summary>
            <param name="valueType">The type of the values.</param>
            <param name="count">The total number of values.</param>
            <param name="occurrences">The occurrence of each value.</param>
            <param name="data">The values.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1.Count">
            <summary>
            Gets the total number of items held by this instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1.DeserializeEncodingSpecific(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.IO.BinaryReader,System.Boolean,System.Collections.Generic.List{System.Boolean}@)">
            <summary>
            Deserializes encoding specific information.
            </summary>
            <param name="vt">The ValueType of this instance. Must be ValueType.Bool.</param>
            <param name="reader">The binary reader.</param>
            <param name="skip"><c>true</c> if the contents should be overread, <c>false</c> otherwise.</param>
            <param name="errors">Determines if the binary input is erroneous.</param>
            <returns>A <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray"/> instance or <c>null</c> if the contents were skipped.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1.ToArray">
            <summary>
            Converts the contents of this instance to a normal <see cref="T:System.Array"/>.
            </summary>
            <returns>An <see cref="T:System.Array"/>, holding the contents of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1.SerializeEncodingSpecific(System.IO.BinaryWriter)">
            <summary>
            Serializes encoding specific data.
            </summary>
            <param name="writer">The binary writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArray`1.UnpackRle">
            <summary>
            Converts the contents of this instance to an array.
            </summary>
            <returns>An unpacked array</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArrayCreator">
            <summary>
            Creator of plain arrays.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArrayCreator.values">
            <summary>
            The values
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArrayCreator.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArrayCreator"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.PlainArrayCreator.Visit``1(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType)">
            <summary>
            Visits the specified data type.
            </summary>
            <typeparam name="T">The implementation type of the datatype.</typeparam>
            <param name="dataType">Type of the data.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArrayCreator">
            <summary>
            Creator of plain arrays.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArrayCreator.values">
            <summary>
            The values
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArrayCreator.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArrayCreator"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.RleArrayCreator.Visit``1(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType)">
            <summary>
            Visits the specified data type.
            </summary>
            <typeparam name="T">The implementation type of the datatype.</typeparam>
            <param name="dataType">Type of the data.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer">
            <summary>
            Handles deserialization of typed arrays into the appropriate sbdfarray.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.arrayCreator">
            <summary>
            Handles the encoding specifics.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.reader">
            <summary>
            The reader
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.l">
            <summary>
            The length
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.errors">
            <summary>
            The errors
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.#ctor(System.IO.BinaryReader,Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="arrayCreator">The array creator.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitUnknown">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitString">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitInt">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitDouble">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitDate">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitDateTime">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitTime">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitDecimal">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitBinary">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitBool">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitLong">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitTimeSpan">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.ArrayDeserializer.VisitFloat">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator">
            <summary>
            Handles encoding specific deserialization duties.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.Plain">
            <summary>
            The plain creator.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.ForRle(System.Int32,System.Byte[])">
            <summary>
            Helper for rle arrays.
            </summary>
            <param name="count">The count.</param>
            <param name="occurrences">The occurrences.</param>
            <returns>The creator.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.CreateEncodingSpecificArray``1(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,``0[])">
            <summary>
            Creates the encoding specific array.
            </summary>
            <typeparam name="T">The implementation type of the array.</typeparam>
            <param name="valueType">Type of the value.</param>
            <param name="array">The array.</param>
            <returns>The sbdf array.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.RleDeserializationCreator">
            <summary>
            Rle specific helper.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.RleDeserializationCreator.count">
            <summary>
            The count
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.RleDeserializationCreator.occurrences">
            <summary>
            The occurrences
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.RleDeserializationCreator.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.RleDeserializationCreator"/> class.
            </summary>
            <param name="count">The count.</param>
            <param name="occurrences">The occurrences.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.RleDeserializationCreator.CreateEncodingSpecificArray``1(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,``0[])">
            <summary>
            Creates the encoding specific array.
            </summary>
            <typeparam name="T">The implementation type of the array.</typeparam>
            <param name="valueType">Type of the value.</param>
            <param name="array">The array.</param>
            <returns>
            The sbdf array.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.PlainDeserializationCreator">
            <summary>
            The plain helper.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueArray.EncodingSpecificDeserializationCreator.PlainDeserializationCreator.CreateEncodingSpecificArray``1(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,``0[])">
            <summary>
            Creates the encoding specific array.
            </summary>
            <typeparam name="T">The implementation type of the array.</typeparam>
            <param name="valueType">Type of the value.</param>
            <param name="array">The array.</param>
            <returns>
            The sbdf array.
            </returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType">
            <summary>
            Represents the type of a data value or metadata property in Sbdf. 
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Bool">
            <summary>
            The Boolean value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Int">
            <summary>
            The Integer value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Long">
            <summary>
            The Long integer value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Float">
            <summary>
            The Float value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Double">
            <summary>
            The Double value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.DateTime">
            <summary>
            The DateTime value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Date">
            <summary>
            The Date value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Time">
            <summary>
            The Time value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.TimeSpan">
            <summary>
            The TimeSpan value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.String">
            <summary>
            The String value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Binary">
            <summary>
            The Binary value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Decimal">
            <summary>
            The Binary value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.UnknownType">
            <summary>
            The unknown type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Type">
            <summary>
            Type string constant.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.defaults">
            <summary>
            Holds default values for all known data types.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.typeId">
            <summary>
            The type identifier of this value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.valueType">
            <summary>
            The value type
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType"/> class.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType"/> class.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.TypeId">
            <summary>
            Gets the type identifier of this value type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.IsSimpleType">
            <summary>
            Gets a value indicating whether this is a simple value type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.IsArrayType">
            <summary>
            Gets a value indicating whether this is an array type.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.DefaultValue">
            <summary>
            Gets the default value for this type.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.InvalidValue">
            <summary>
            Gets an object representing an invalid value.
            </summary>
            <value>An object representing an invalid value.</value>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>
            The type of the value.
            </value>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.IsSimpleTypeId(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId)">
            <summary>
            Gets a value indicating whether a given type identifier corresponds to a simple type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>True for a simple type; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.IsArrayTypeId(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId)">
            <summary>
            Gets a value indicating whether a given type identifier corresponds to an array type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>True for an array type; otherwise, false.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.GetValueTypeFromId(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId)">
            <summary>
            Gets a value type instance for a given type identifier.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>A SbdfValueType instance.</returns>
            <exception cref="T:System.ArgumentException">If the type identifier is neither simple nor an array.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ConvertValueTypeToBinary(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType)">
            <summary>
            Converts a SbdfValueType instance to a byte array.
            </summary>
            <param name="valueType">The SbdfValueType instance.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.FromBinary(System.Byte[])">
            <summary>
            Converts a byte array to a SbdfValueType instance.
            </summary>
            <param name="binary">The byte array.</param>
            <returns>A SbdfValueType instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Read(System.IO.BinaryReader)">
            <summary>
            Reads a SbdfValueType from the binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>The valuetype.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.FromRuntimeType(System.Type)">
            <summary>
            Constructs a SbdfValueType from a <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Type"/>.
            </summary>
            <param name="type">The type object.</param>
            <returns>A corresponding SbdfValueType instance.</returns>
            <remarks>An SbdfValueType with <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.UnknownType"/> is returned for unknown types.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ReplacedValue(System.Object)">
            <summary>
            Returns an object representing a replaced null value.
            </summary>
            <param name="value">The value.</param>
            <returns>An object representing a replaced null value</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ErrorValue(System.String)">
            <summary>
            Returns an object representing an error value.
            </summary>
            <param name="error">The specific error string.</param>
            <returns>An object representing an error value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.IsInvalidValue(System.Object)">
            <summary>
            Determines if <paramref name="value"/> is an invalid value.
            </summary>
            <param name="value">The object to examine.</param>
            <returns><c>true</c> if the object is an invalid value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.IsReplacedValue(System.Object)">
            <summary>
            Determines if <paramref name="value"/> is a replaced value.
            </summary>
            <param name="value">The object to examine.</param>
            <returns><c>true</c> if the object is an replaced value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.IsErrorValue(System.Object)">
            <summary>
            Determines if <paramref name="value"/> is an error value.
            </summary>
            <param name="value">The object to examine.</param>
            <returns><c>true</c> if the object is an error value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.GetErrorString(System.Object)">
            <summary>
            Gets the error string from the error value held in <paramref name="value"/>.
            </summary>
            <param name="value">The error value.</param>
            <returns>The error string.</returns>
            <exception cref="T:System.ArgumentException">if <paramref name="value"/> doesn't represent an error value.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.GetReplacedValue(System.Object)">
            <summary>
            Gets the inner replaced value held in <paramref name="value"/>.
            </summary>
            <param name="value">The object representing the replaced value.</param>
            <returns>The inner replaced value.</returns>
            <exception cref="T:System.ArgumentException">if <paramref name="value"/> doesn't represent a replaced value.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the contents of this instance to <paramref name="writer"/>.
            </summary>
            <param name="writer">The binary writer receiving the contents.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Equals(System.Object)">
            <summary>
            Determines if two <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType"/> objects are equal.
            </summary>
            <param name="obj">The <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType"/> object to compare this instance to.</param>
            <returns><c>true</c> if the instances are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.GetHashCode">
            <summary>
            Calculates the hash code of this instance.
            </summary>
            <returns>The hash code of this instance.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ConvertValue(System.Object)">
            <summary>
            Potentially convert the value specified into this type.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Determines if two objects are equal.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>A bool value indicating whether the two objects are equal.</returns>
            <remarks>If both objects are arrays, the contents of the arrays are examined for equality.</remarks>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.GetValueTypeId(System.Type)">
            <summary>
            Gets the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId"/> id of a type by examining the <paramref name="type"/>.
            </summary>
            <param name="type">The type object.</param>
            <returns>The <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId"/> corresponding to the <paramref name="type"/>, or <see cref="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.UnknownType"/> for unknown types.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.GetValueType(System.String)">
            <summary>
            Gets a SbdfValueType from a string representation.
            </summary>
            <param name="input">The string.</param>
            <returns>A SbdfValueType instance.</returns>
            <exception cref="T:System.ArgumentException">If the type is not recognized.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.IsValue(System.Object)">
            <summary>
            Determines whether the specified value is value.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.Accept``1(Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor{``0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <typeparam name="T">The type of the result</typeparam>
            <param name="visitor">The visitor.</param>
            <returns>The result of the visitor</returns>
            <exception cref="T:System.InvalidOperationException">Invalid data type.</exception>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ValidateAssignment(System.Object)">
            <summary>
            Validates that a given value can be assigned to a property of a certain SbdfValueType.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ValidateAssignmentWithNoUnknown(System.Object)">
            <summary>
            Validates that a given value can be assigned to a property of a certain SbdfValueType.
            </summary>
            <remarks>Use this if you know this type is not unknown</remarks>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.GetString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.NonValue">
            <summary>
            Marker class for errors, invalids and replacements.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ErrorHolder">
            <summary>
            Defines a class holding an error string.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ErrorHolder.error">
            <summary>
            The error string.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ErrorHolder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ErrorHolder"/> class.
            </summary>
            <param name="error">The error string. May be null / empty.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ErrorHolder.Error">
            <summary>
            Gets the error string.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ErrorHolder.Equals(System.Object)">
            <summary>
            Implements Equals.
            </summary>
            <param name="obj">The other object.</param>
            <returns><c>true</c> if the objects are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ErrorHolder.GetHashCode">
            <summary>
            Implements GetHashCode.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.InvalidHolder">
            <summary>
            Defines a class holding an invalid value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.InvalidHolder.instance">
            <summary>
            The static instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.InvalidHolder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.InvalidHolder"/> class from being created.
            </summary>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.InvalidHolder.Instance">
            <summary>
            Gets the static instance.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.InvalidHolder.Equals(System.Object)">
            <summary>
            Implements Equals.
            </summary>
            <param name="obj">The other object.</param>
            <returns><c>true</c> if the objects are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.InvalidHolder.GetHashCode">
            <summary>
            Implements GetHashCode.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ReplacedHolder">
            <summary>
            Defines a class holding a replaced value.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ReplacedHolder.value">
            <summary>
            The replaced value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ReplacedHolder.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ReplacedHolder"/> class.
            </summary>
            <param name="value">The replaced value. May be null.</param>
        </member>
        <member name="P:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ReplacedHolder.Value">
            <summary>
            Gets the replaced value.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ReplacedHolder.Equals(System.Object)">
            <summary>
            Implements Equals.
            </summary>
            <param name="obj">The other object.</param>
            <returns><c>true</c> if the objects are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType.ReplacedHolder.GetHashCode">
            <summary>
            Implements GetHashCode.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId">
            <summary>
            Type identifiers for value types in Sbdf.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.UnknownType">
            <summary>
            An unknown value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.BoolType">
            <summary>
            The Boolean value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.IntType">
            <summary>
            The Integer value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.LongType">
            <summary>
            The Long integer value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.FloatType">
            <summary>
            The Float value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.DoubleType">
            <summary>
            The Double value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.DateTimeType">
            <summary>
            The DateTime value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.DateType">
            <summary>
            The Date value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.TimeType">
            <summary>
            The Time value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.TimeSpanType">
            <summary>
            The TimeSpan value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.StringType">
            <summary>
            The String value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.BinaryType">
            <summary>
            The Binary value type.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeId.DecimalType">
            <summary>
            The Decimal value type.
            </summary>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1">
            <summary>
            Represents a visitor to all <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType" /> that produces an output of type <typeparamref name="T" />
            </summary>
            <typeparam name="T">The type to return.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitUnknown">
            <summary>
            The data type is unknown.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitString">
            <summary>
            The data type is string.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitInt">
            <summary>
            The data type is integer.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitDouble">
            <summary>
            The data type is real.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitDate">
            <summary>
            The data type is date.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitDateTime">
            <summary>
            The data type is date time.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitTime">
            <summary>
            The data type is time.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitDecimal">
            <summary>
            The data type is decimal.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitBinary">
            <summary>
            The data type is binary.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitBool">
            <summary>
            The data type is bool.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitLong">
            <summary>
            The data type is long.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitTimeSpan">
            <summary>
            The data type is time span.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.ISbdfValueTypeVisitor`1.VisitFloat">
            <summary>
            The data type is float.
            </summary>
            <returns>The result value.</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1">
            <summary>
            Represents a visitor to sbdf datatype.
            </summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitUnknown">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitString">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitInt">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitDouble">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitDate">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitDateTime">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitTime">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitDecimal">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitBinary">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitBool">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitLong">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitTimeSpan">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.VisitFloat">
            <summary>
            Visits the datatype.
            </summary>
            <returns>The result of the visitor</returns>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueTypeVisitor`1.Visit``1(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType)">
            <summary>
            Visits the specified data type.
            </summary>
            <typeparam name="T">The implementation type for the datatype</typeparam>
            <param name="dataType">Type of the data.</param>
            <returns>The result of the visitor</returns>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.SimpleWriter`1">
            <summary>
            A writer of straight values into unpacked array.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SimpleWriter`1.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SimpleWriter`1.typedByteWriter">
            <summary>
            The typed byte writer
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SimpleWriter`1.valueType">
            <summary>
            The value type
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.SimpleWriter`1.dataIndex">
            <summary>
            The data index
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SimpleWriter`1.#ctor(Spotfire.Dxp.Data.Formats.Sbdf.SbdfValueType,System.Int32,System.Int32,Spotfire.Dxp.Data.Formats.Sbdf.SingleValueToByteArrayWriter{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.SimpleWriter`1"/> class.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="sliceLimit">The slice limit.</param>
            <param name="sizeofT">The sizeof T.</param>
            <param name="typedByteWriter">The typed byte writer.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SimpleWriter`1.Add``1(``0)">
            <summary>
            Adds the specified value.
            </summary>
            <typeparam name="TV">The type of the V.</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.SimpleWriter`1.Write(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="currentRowInBlock">The current row in block.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter">
            <summary>
            Represents a writer of strings.
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.Encoding">
            <summary>
            The encoding
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.DefaultStringSize">
            <summary>
            The default string size
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.seenPackedIntLengths">
            <summary>
            The seen packed int lengths
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.dataIndex">
            <summary>
            The data index
            </summary>
        </member>
        <member name="F:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.mostCommonPackedIntLength">
            <summary>
            The most common packed int length
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter"/> class.
            </summary>
            <param name="sliceLimit">The slice limit.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.Add(System.String)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.Add``1(``0)">
            <summary>
            Adds the specified value.
            </summary>
            <typeparam name="T">The type of the value - should match derived type</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.StringWriter.Write(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="currentRowInBlock">The current row in block.</param>
        </member>
        <member name="T:Spotfire.Dxp.Data.Formats.Sbdf.DataWriter">
            <summary>Represents a writer of data into sbdf format.
            </summary>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.DataWriter.Add``1(``0)">
            <summary>
            Adds the specified value.
            </summary>
            <typeparam name="T">The type of the value - should match derived type</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spotfire.Dxp.Data.Formats.Sbdf.DataWriter.Write(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes to the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="currentRowInBlock">The current row in block.</param>
        </member>
    </members>
</doc>
